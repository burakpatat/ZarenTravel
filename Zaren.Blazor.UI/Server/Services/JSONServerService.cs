using System;
using System.Data;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Text.Encodings.Web;
using Microsoft.AspNetCore.Components;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Radzen;

using ZarenUI.Server.Data;

namespace ZarenUI.Server
{
    public partial class JSONServerService
    {
        JSONServerContext Context
        {
           get
           {
             return this.context;
           }
        }

        private readonly JSONServerContext context;
        private readonly NavigationManager navigationManager;

        public JSONServerService(JSONServerContext context, NavigationManager navigationManager)
        {
            this.context = context;
            this.navigationManager = navigationManager;
        }

        public void Reset() => Context.ChangeTracker.Entries().Where(e => e.Entity != null).ToList().ForEach(e => e.State = EntityState.Detached);


        public async Task ExportAuditColorGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcolorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcolorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditColorGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcolorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcolorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditColorGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditColorGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditColorGroup>> GetAuditColorGroups(Query query = null)
        {
            var items = Context.AuditColorGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditColorGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditColorGroupGet(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> GetAuditColorGroupByLogId(long logid)
        {
            var items = Context.AuditColorGroups
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditColorGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditColorGroupCreated(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);
        partial void OnAfterAuditColorGroupCreated(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> CreateAuditColorGroup(ZarenUI.Server.Models.JSONServer.AuditColorGroup auditcolorgroup)
        {
            OnAuditColorGroupCreated(auditcolorgroup);

            var existingItem = Context.AuditColorGroups
                              .Where(i => i.LogID == auditcolorgroup.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditColorGroups.Add(auditcolorgroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditcolorgroup).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditColorGroupCreated(auditcolorgroup);

            return auditcolorgroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> CancelAuditColorGroupChanges(ZarenUI.Server.Models.JSONServer.AuditColorGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditColorGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);
        partial void OnAfterAuditColorGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> UpdateAuditColorGroup(long logid, ZarenUI.Server.Models.JSONServer.AuditColorGroup auditcolorgroup)
        {
            OnAuditColorGroupUpdated(auditcolorgroup);

            var itemToUpdate = Context.AuditColorGroups
                              .Where(i => i.LogID == auditcolorgroup.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditcolorgroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditColorGroupUpdated(auditcolorgroup);

            return auditcolorgroup;
        }

        partial void OnAuditColorGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);
        partial void OnAfterAuditColorGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> DeleteAuditColorGroup(long logid)
        {
            var itemToDelete = Context.AuditColorGroups
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditColorGroupDeleted(itemToDelete);


            Context.AuditColorGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditColorGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditConstraintRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditConstraintRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditConstraintRulesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>> GetAuditConstraintRules(Query query = null)
        {
            var items = Context.AuditConstraintRules.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditConstraintRulesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditConstraintRuleGet(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> GetAuditConstraintRuleByLogId(long logid)
        {
            var items = Context.AuditConstraintRules
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditConstraintRuleGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditConstraintRuleCreated(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);
        partial void OnAfterAuditConstraintRuleCreated(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> CreateAuditConstraintRule(ZarenUI.Server.Models.JSONServer.AuditConstraintRule auditconstraintrule)
        {
            OnAuditConstraintRuleCreated(auditconstraintrule);

            var existingItem = Context.AuditConstraintRules
                              .Where(i => i.LogID == auditconstraintrule.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditConstraintRules.Add(auditconstraintrule);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditconstraintrule).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditConstraintRuleCreated(auditconstraintrule);

            return auditconstraintrule;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> CancelAuditConstraintRuleChanges(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditConstraintRuleUpdated(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);
        partial void OnAfterAuditConstraintRuleUpdated(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> UpdateAuditConstraintRule(long logid, ZarenUI.Server.Models.JSONServer.AuditConstraintRule auditconstraintrule)
        {
            OnAuditConstraintRuleUpdated(auditconstraintrule);

            var itemToUpdate = Context.AuditConstraintRules
                              .Where(i => i.LogID == auditconstraintrule.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditconstraintrule);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditConstraintRuleUpdated(auditconstraintrule);

            return auditconstraintrule;
        }

        partial void OnAuditConstraintRuleDeleted(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);
        partial void OnAfterAuditConstraintRuleDeleted(ZarenUI.Server.Models.JSONServer.AuditConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> DeleteAuditConstraintRule(long logid)
        {
            var itemToDelete = Context.AuditConstraintRules
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditConstraintRuleDeleted(itemToDelete);


            Context.AuditConstraintRules.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditConstraintRuleDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditCountriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditCountriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditCountriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditCountry> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditCountry>> GetAuditCountries(Query query = null)
        {
            var items = Context.AuditCountries.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditCountriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditCountryGet(ZarenUI.Server.Models.JSONServer.AuditCountry item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> GetAuditCountryByLogId(long logid)
        {
            var items = Context.AuditCountries
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditCountryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditCountryCreated(ZarenUI.Server.Models.JSONServer.AuditCountry item);
        partial void OnAfterAuditCountryCreated(ZarenUI.Server.Models.JSONServer.AuditCountry item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> CreateAuditCountry(ZarenUI.Server.Models.JSONServer.AuditCountry auditcountry)
        {
            OnAuditCountryCreated(auditcountry);

            var existingItem = Context.AuditCountries
                              .Where(i => i.LogID == auditcountry.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditCountries.Add(auditcountry);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditcountry).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditCountryCreated(auditcountry);

            return auditcountry;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> CancelAuditCountryChanges(ZarenUI.Server.Models.JSONServer.AuditCountry item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditCountryUpdated(ZarenUI.Server.Models.JSONServer.AuditCountry item);
        partial void OnAfterAuditCountryUpdated(ZarenUI.Server.Models.JSONServer.AuditCountry item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> UpdateAuditCountry(long logid, ZarenUI.Server.Models.JSONServer.AuditCountry auditcountry)
        {
            OnAuditCountryUpdated(auditcountry);

            var itemToUpdate = Context.AuditCountries
                              .Where(i => i.LogID == auditcountry.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditcountry);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditCountryUpdated(auditcountry);

            return auditcountry;
        }

        partial void OnAuditCountryDeleted(ZarenUI.Server.Models.JSONServer.AuditCountry item);
        partial void OnAfterAuditCountryDeleted(ZarenUI.Server.Models.JSONServer.AuditCountry item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> DeleteAuditCountry(long logid)
        {
            var itemToDelete = Context.AuditCountries
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditCountryDeleted(itemToDelete);


            Context.AuditCountries.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditCountryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditCountryLanguagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditCountryLanguagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditCountryLanguagesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>> GetAuditCountryLanguages(Query query = null)
        {
            var items = Context.AuditCountryLanguages.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditCountryLanguagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditCountryLanguageGet(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> GetAuditCountryLanguageByLogId(long logid)
        {
            var items = Context.AuditCountryLanguages
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditCountryLanguageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditCountryLanguageCreated(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);
        partial void OnAfterAuditCountryLanguageCreated(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> CreateAuditCountryLanguage(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage auditcountrylanguage)
        {
            OnAuditCountryLanguageCreated(auditcountrylanguage);

            var existingItem = Context.AuditCountryLanguages
                              .Where(i => i.LogID == auditcountrylanguage.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditCountryLanguages.Add(auditcountrylanguage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditcountrylanguage).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditCountryLanguageCreated(auditcountrylanguage);

            return auditcountrylanguage;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> CancelAuditCountryLanguageChanges(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditCountryLanguageUpdated(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);
        partial void OnAfterAuditCountryLanguageUpdated(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> UpdateAuditCountryLanguage(long logid, ZarenUI.Server.Models.JSONServer.AuditCountryLanguage auditcountrylanguage)
        {
            OnAuditCountryLanguageUpdated(auditcountrylanguage);

            var itemToUpdate = Context.AuditCountryLanguages
                              .Where(i => i.LogID == auditcountrylanguage.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditcountrylanguage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditCountryLanguageUpdated(auditcountrylanguage);

            return auditcountrylanguage;
        }

        partial void OnAuditCountryLanguageDeleted(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);
        partial void OnAfterAuditCountryLanguageDeleted(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> DeleteAuditCountryLanguage(long logid)
        {
            var itemToDelete = Context.AuditCountryLanguages
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditCountryLanguageDeleted(itemToDelete);


            Context.AuditCountryLanguages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditCountryLanguageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditDesignSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdesignschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdesignschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditDesignSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdesignschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdesignschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditDesignSchemesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>> GetAuditDesignSchemes(Query query = null)
        {
            var items = Context.AuditDesignSchemes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditDesignSchemesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditDesignSchemeGet(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> GetAuditDesignSchemeByLogId(long logid)
        {
            var items = Context.AuditDesignSchemes
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditDesignSchemeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditDesignSchemeCreated(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);
        partial void OnAfterAuditDesignSchemeCreated(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> CreateAuditDesignScheme(ZarenUI.Server.Models.JSONServer.AuditDesignScheme auditdesignscheme)
        {
            OnAuditDesignSchemeCreated(auditdesignscheme);

            var existingItem = Context.AuditDesignSchemes
                              .Where(i => i.LogID == auditdesignscheme.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditDesignSchemes.Add(auditdesignscheme);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditdesignscheme).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditDesignSchemeCreated(auditdesignscheme);

            return auditdesignscheme;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> CancelAuditDesignSchemeChanges(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditDesignSchemeUpdated(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);
        partial void OnAfterAuditDesignSchemeUpdated(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> UpdateAuditDesignScheme(long logid, ZarenUI.Server.Models.JSONServer.AuditDesignScheme auditdesignscheme)
        {
            OnAuditDesignSchemeUpdated(auditdesignscheme);

            var itemToUpdate = Context.AuditDesignSchemes
                              .Where(i => i.LogID == auditdesignscheme.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditdesignscheme);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditDesignSchemeUpdated(auditdesignscheme);

            return auditdesignscheme;
        }

        partial void OnAuditDesignSchemeDeleted(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);
        partial void OnAfterAuditDesignSchemeDeleted(ZarenUI.Server.Models.JSONServer.AuditDesignScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> DeleteAuditDesignScheme(long logid)
        {
            var itemToDelete = Context.AuditDesignSchemes
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditDesignSchemeDeleted(itemToDelete);


            Context.AuditDesignSchemes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditDesignSchemeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditDeviceGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditDeviceGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditDeviceGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>> GetAuditDeviceGroups(Query query = null)
        {
            var items = Context.AuditDeviceGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditDeviceGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditDeviceGroupGet(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> GetAuditDeviceGroupByLogId(long logid)
        {
            var items = Context.AuditDeviceGroups
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditDeviceGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditDeviceGroupCreated(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);
        partial void OnAfterAuditDeviceGroupCreated(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> CreateAuditDeviceGroup(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup auditdevicegroup)
        {
            OnAuditDeviceGroupCreated(auditdevicegroup);

            var existingItem = Context.AuditDeviceGroups
                              .Where(i => i.LogID == auditdevicegroup.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditDeviceGroups.Add(auditdevicegroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditdevicegroup).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditDeviceGroupCreated(auditdevicegroup);

            return auditdevicegroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> CancelAuditDeviceGroupChanges(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditDeviceGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);
        partial void OnAfterAuditDeviceGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> UpdateAuditDeviceGroup(long logid, ZarenUI.Server.Models.JSONServer.AuditDeviceGroup auditdevicegroup)
        {
            OnAuditDeviceGroupUpdated(auditdevicegroup);

            var itemToUpdate = Context.AuditDeviceGroups
                              .Where(i => i.LogID == auditdevicegroup.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditdevicegroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditDeviceGroupUpdated(auditdevicegroup);

            return auditdevicegroup;
        }

        partial void OnAuditDeviceGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);
        partial void OnAfterAuditDeviceGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> DeleteAuditDeviceGroup(long logid)
        {
            var itemToDelete = Context.AuditDeviceGroups
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditDeviceGroupDeleted(itemToDelete);


            Context.AuditDeviceGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditDeviceGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditDevicesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditDevicesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditDevicesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditDevice> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditDevice>> GetAuditDevices(Query query = null)
        {
            var items = Context.AuditDevices.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditDevicesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditDeviceGet(ZarenUI.Server.Models.JSONServer.AuditDevice item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> GetAuditDeviceByLogId(long logid)
        {
            var items = Context.AuditDevices
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditDeviceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditDeviceCreated(ZarenUI.Server.Models.JSONServer.AuditDevice item);
        partial void OnAfterAuditDeviceCreated(ZarenUI.Server.Models.JSONServer.AuditDevice item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> CreateAuditDevice(ZarenUI.Server.Models.JSONServer.AuditDevice auditdevice)
        {
            OnAuditDeviceCreated(auditdevice);

            var existingItem = Context.AuditDevices
                              .Where(i => i.LogID == auditdevice.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditDevices.Add(auditdevice);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditdevice).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditDeviceCreated(auditdevice);

            return auditdevice;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> CancelAuditDeviceChanges(ZarenUI.Server.Models.JSONServer.AuditDevice item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditDeviceUpdated(ZarenUI.Server.Models.JSONServer.AuditDevice item);
        partial void OnAfterAuditDeviceUpdated(ZarenUI.Server.Models.JSONServer.AuditDevice item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> UpdateAuditDevice(long logid, ZarenUI.Server.Models.JSONServer.AuditDevice auditdevice)
        {
            OnAuditDeviceUpdated(auditdevice);

            var itemToUpdate = Context.AuditDevices
                              .Where(i => i.LogID == auditdevice.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditdevice);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditDeviceUpdated(auditdevice);

            return auditdevice;
        }

        partial void OnAuditDeviceDeleted(ZarenUI.Server.Models.JSONServer.AuditDevice item);
        partial void OnAfterAuditDeviceDeleted(ZarenUI.Server.Models.JSONServer.AuditDevice item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> DeleteAuditDevice(long logid)
        {
            var itemToDelete = Context.AuditDevices
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditDeviceDeleted(itemToDelete);


            Context.AuditDevices.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditDeviceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditFieldsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditFieldsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditFieldsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditField> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditField>> GetAuditFields(Query query = null)
        {
            var items = Context.AuditFields.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditFieldsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditFieldGet(ZarenUI.Server.Models.JSONServer.AuditField item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> GetAuditFieldByLogId(long logid)
        {
            var items = Context.AuditFields
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditFieldGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditFieldCreated(ZarenUI.Server.Models.JSONServer.AuditField item);
        partial void OnAfterAuditFieldCreated(ZarenUI.Server.Models.JSONServer.AuditField item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> CreateAuditField(ZarenUI.Server.Models.JSONServer.AuditField auditfield)
        {
            OnAuditFieldCreated(auditfield);

            var existingItem = Context.AuditFields
                              .Where(i => i.LogID == auditfield.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditFields.Add(auditfield);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditfield).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditFieldCreated(auditfield);

            return auditfield;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> CancelAuditFieldChanges(ZarenUI.Server.Models.JSONServer.AuditField item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditFieldUpdated(ZarenUI.Server.Models.JSONServer.AuditField item);
        partial void OnAfterAuditFieldUpdated(ZarenUI.Server.Models.JSONServer.AuditField item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> UpdateAuditField(long logid, ZarenUI.Server.Models.JSONServer.AuditField auditfield)
        {
            OnAuditFieldUpdated(auditfield);

            var itemToUpdate = Context.AuditFields
                              .Where(i => i.LogID == auditfield.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditfield);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditFieldUpdated(auditfield);

            return auditfield;
        }

        partial void OnAuditFieldDeleted(ZarenUI.Server.Models.JSONServer.AuditField item);
        partial void OnAfterAuditFieldDeleted(ZarenUI.Server.Models.JSONServer.AuditField item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> DeleteAuditField(long logid)
        {
            var itemToDelete = Context.AuditFields
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditFieldDeleted(itemToDelete);


            Context.AuditFields.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditFieldDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditForeignKeyRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditforeignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditforeignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditForeignKeyRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditforeignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditforeignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditForeignKeyRulesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>> GetAuditForeignKeyRules(Query query = null)
        {
            var items = Context.AuditForeignKeyRules.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditForeignKeyRulesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditForeignKeyRuleGet(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> GetAuditForeignKeyRuleByLogId(long logid)
        {
            var items = Context.AuditForeignKeyRules
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditForeignKeyRuleGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditForeignKeyRuleCreated(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);
        partial void OnAfterAuditForeignKeyRuleCreated(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> CreateAuditForeignKeyRule(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule auditforeignkeyrule)
        {
            OnAuditForeignKeyRuleCreated(auditforeignkeyrule);

            var existingItem = Context.AuditForeignKeyRules
                              .Where(i => i.LogID == auditforeignkeyrule.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditForeignKeyRules.Add(auditforeignkeyrule);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditforeignkeyrule).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditForeignKeyRuleCreated(auditforeignkeyrule);

            return auditforeignkeyrule;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> CancelAuditForeignKeyRuleChanges(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditForeignKeyRuleUpdated(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);
        partial void OnAfterAuditForeignKeyRuleUpdated(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> UpdateAuditForeignKeyRule(long logid, ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule auditforeignkeyrule)
        {
            OnAuditForeignKeyRuleUpdated(auditforeignkeyrule);

            var itemToUpdate = Context.AuditForeignKeyRules
                              .Where(i => i.LogID == auditforeignkeyrule.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditforeignkeyrule);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditForeignKeyRuleUpdated(auditforeignkeyrule);

            return auditforeignkeyrule;
        }

        partial void OnAuditForeignKeyRuleDeleted(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);
        partial void OnAfterAuditForeignKeyRuleDeleted(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> DeleteAuditForeignKeyRule(long logid)
        {
            var itemToDelete = Context.AuditForeignKeyRules
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditForeignKeyRuleDeleted(itemToDelete);


            Context.AuditForeignKeyRules.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditForeignKeyRuleDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProgrammingCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProgrammingCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProgrammingCategoriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>> GetAuditProgrammingCategories(Query query = null)
        {
            var items = Context.AuditProgrammingCategories.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProgrammingCategoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProgrammingCategoryGet(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> GetAuditProgrammingCategoryByLogId(long logid)
        {
            var items = Context.AuditProgrammingCategories
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProgrammingCategoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProgrammingCategoryCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);
        partial void OnAfterAuditProgrammingCategoryCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> CreateAuditProgrammingCategory(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory auditprogrammingcategory)
        {
            OnAuditProgrammingCategoryCreated(auditprogrammingcategory);

            var existingItem = Context.AuditProgrammingCategories
                              .Where(i => i.LogID == auditprogrammingcategory.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProgrammingCategories.Add(auditprogrammingcategory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprogrammingcategory).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProgrammingCategoryCreated(auditprogrammingcategory);

            return auditprogrammingcategory;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> CancelAuditProgrammingCategoryChanges(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProgrammingCategoryUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);
        partial void OnAfterAuditProgrammingCategoryUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> UpdateAuditProgrammingCategory(long logid, ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory auditprogrammingcategory)
        {
            OnAuditProgrammingCategoryUpdated(auditprogrammingcategory);

            var itemToUpdate = Context.AuditProgrammingCategories
                              .Where(i => i.LogID == auditprogrammingcategory.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprogrammingcategory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProgrammingCategoryUpdated(auditprogrammingcategory);

            return auditprogrammingcategory;
        }

        partial void OnAuditProgrammingCategoryDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);
        partial void OnAfterAuditProgrammingCategoryDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> DeleteAuditProgrammingCategory(long logid)
        {
            var itemToDelete = Context.AuditProgrammingCategories
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProgrammingCategoryDeleted(itemToDelete);


            Context.AuditProgrammingCategories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProgrammingCategoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProgrammingCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProgrammingCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProgrammingCodesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>> GetAuditProgrammingCodes(Query query = null)
        {
            var items = Context.AuditProgrammingCodes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProgrammingCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProgrammingCodeGet(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> GetAuditProgrammingCodeByLogId(long logid)
        {
            var items = Context.AuditProgrammingCodes
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProgrammingCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProgrammingCodeCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);
        partial void OnAfterAuditProgrammingCodeCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> CreateAuditProgrammingCode(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode auditprogrammingcode)
        {
            OnAuditProgrammingCodeCreated(auditprogrammingcode);

            var existingItem = Context.AuditProgrammingCodes
                              .Where(i => i.LogID == auditprogrammingcode.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProgrammingCodes.Add(auditprogrammingcode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprogrammingcode).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProgrammingCodeCreated(auditprogrammingcode);

            return auditprogrammingcode;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> CancelAuditProgrammingCodeChanges(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProgrammingCodeUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);
        partial void OnAfterAuditProgrammingCodeUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> UpdateAuditProgrammingCode(long logid, ZarenUI.Server.Models.JSONServer.AuditProgrammingCode auditprogrammingcode)
        {
            OnAuditProgrammingCodeUpdated(auditprogrammingcode);

            var itemToUpdate = Context.AuditProgrammingCodes
                              .Where(i => i.LogID == auditprogrammingcode.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprogrammingcode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProgrammingCodeUpdated(auditprogrammingcode);

            return auditprogrammingcode;
        }

        partial void OnAuditProgrammingCodeDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);
        partial void OnAfterAuditProgrammingCodeDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> DeleteAuditProgrammingCode(long logid)
        {
            var itemToDelete = Context.AuditProgrammingCodes
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProgrammingCodeDeleted(itemToDelete);


            Context.AuditProgrammingCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProgrammingCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProgrammingCodeTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProgrammingCodeTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProgrammingCodeTemplatesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>> GetAuditProgrammingCodeTemplates(Query query = null)
        {
            var items = Context.AuditProgrammingCodeTemplates.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProgrammingCodeTemplatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProgrammingCodeTemplateGet(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> GetAuditProgrammingCodeTemplateByLogId(long logid)
        {
            var items = Context.AuditProgrammingCodeTemplates
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProgrammingCodeTemplateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProgrammingCodeTemplateCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);
        partial void OnAfterAuditProgrammingCodeTemplateCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> CreateAuditProgrammingCodeTemplate(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate auditprogrammingcodetemplate)
        {
            OnAuditProgrammingCodeTemplateCreated(auditprogrammingcodetemplate);

            var existingItem = Context.AuditProgrammingCodeTemplates
                              .Where(i => i.LogID == auditprogrammingcodetemplate.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProgrammingCodeTemplates.Add(auditprogrammingcodetemplate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprogrammingcodetemplate).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProgrammingCodeTemplateCreated(auditprogrammingcodetemplate);

            return auditprogrammingcodetemplate;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> CancelAuditProgrammingCodeTemplateChanges(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProgrammingCodeTemplateUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);
        partial void OnAfterAuditProgrammingCodeTemplateUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> UpdateAuditProgrammingCodeTemplate(long logid, ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate auditprogrammingcodetemplate)
        {
            OnAuditProgrammingCodeTemplateUpdated(auditprogrammingcodetemplate);

            var itemToUpdate = Context.AuditProgrammingCodeTemplates
                              .Where(i => i.LogID == auditprogrammingcodetemplate.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprogrammingcodetemplate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProgrammingCodeTemplateUpdated(auditprogrammingcodetemplate);

            return auditprogrammingcodetemplate;
        }

        partial void OnAuditProgrammingCodeTemplateDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);
        partial void OnAfterAuditProgrammingCodeTemplateDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> DeleteAuditProgrammingCodeTemplate(long logid)
        {
            var itemToDelete = Context.AuditProgrammingCodeTemplates
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProgrammingCodeTemplateDeleted(itemToDelete);


            Context.AuditProgrammingCodeTemplates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProgrammingCodeTemplateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProgrammingTechnologiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProgrammingTechnologiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProgrammingTechnologiesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>> GetAuditProgrammingTechnologies(Query query = null)
        {
            var items = Context.AuditProgrammingTechnologies.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProgrammingTechnologiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProgrammingTechnologyGet(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> GetAuditProgrammingTechnologyByLogId(long logid)
        {
            var items = Context.AuditProgrammingTechnologies
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProgrammingTechnologyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProgrammingTechnologyCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);
        partial void OnAfterAuditProgrammingTechnologyCreated(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> CreateAuditProgrammingTechnology(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology auditprogrammingtechnology)
        {
            OnAuditProgrammingTechnologyCreated(auditprogrammingtechnology);

            var existingItem = Context.AuditProgrammingTechnologies
                              .Where(i => i.LogID == auditprogrammingtechnology.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProgrammingTechnologies.Add(auditprogrammingtechnology);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprogrammingtechnology).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProgrammingTechnologyCreated(auditprogrammingtechnology);

            return auditprogrammingtechnology;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> CancelAuditProgrammingTechnologyChanges(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProgrammingTechnologyUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);
        partial void OnAfterAuditProgrammingTechnologyUpdated(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> UpdateAuditProgrammingTechnology(long logid, ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology auditprogrammingtechnology)
        {
            OnAuditProgrammingTechnologyUpdated(auditprogrammingtechnology);

            var itemToUpdate = Context.AuditProgrammingTechnologies
                              .Where(i => i.LogID == auditprogrammingtechnology.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprogrammingtechnology);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProgrammingTechnologyUpdated(auditprogrammingtechnology);

            return auditprogrammingtechnology;
        }

        partial void OnAuditProgrammingTechnologyDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);
        partial void OnAfterAuditProgrammingTechnologyDeleted(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> DeleteAuditProgrammingTechnology(long logid)
        {
            var itemToDelete = Context.AuditProgrammingTechnologies
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProgrammingTechnologyDeleted(itemToDelete);


            Context.AuditProgrammingTechnologies.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProgrammingTechnologyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectCategoriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>> GetAuditProjectCategories(Query query = null)
        {
            var items = Context.AuditProjectCategories.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectCategoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectCategoryGet(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> GetAuditProjectCategoryByLogId(long logid)
        {
            var items = Context.AuditProjectCategories
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectCategoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectCategoryCreated(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);
        partial void OnAfterAuditProjectCategoryCreated(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> CreateAuditProjectCategory(ZarenUI.Server.Models.JSONServer.AuditProjectCategory auditprojectcategory)
        {
            OnAuditProjectCategoryCreated(auditprojectcategory);

            var existingItem = Context.AuditProjectCategories
                              .Where(i => i.LogID == auditprojectcategory.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectCategories.Add(auditprojectcategory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectcategory).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectCategoryCreated(auditprojectcategory);

            return auditprojectcategory;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> CancelAuditProjectCategoryChanges(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectCategoryUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);
        partial void OnAfterAuditProjectCategoryUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> UpdateAuditProjectCategory(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectCategory auditprojectcategory)
        {
            OnAuditProjectCategoryUpdated(auditprojectcategory);

            var itemToUpdate = Context.AuditProjectCategories
                              .Where(i => i.LogID == auditprojectcategory.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectcategory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectCategoryUpdated(auditprojectcategory);

            return auditprojectcategory;
        }

        partial void OnAuditProjectCategoryDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);
        partial void OnAfterAuditProjectCategoryDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> DeleteAuditProjectCategory(long logid)
        {
            var itemToDelete = Context.AuditProjectCategories
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectCategoryDeleted(itemToDelete);


            Context.AuditProjectCategories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectCategoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectConfigurationKeyAndValuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectConfigurationKeyAndValuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectConfigurationKeyAndValuesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>> GetAuditProjectConfigurationKeyAndValues(Query query = null)
        {
            var items = Context.AuditProjectConfigurationKeyAndValues.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectConfigurationKeyAndValuesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectConfigurationKeyAndValueGet(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> GetAuditProjectConfigurationKeyAndValueByLogId(long logid)
        {
            var items = Context.AuditProjectConfigurationKeyAndValues
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectConfigurationKeyAndValueGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectConfigurationKeyAndValueCreated(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);
        partial void OnAfterAuditProjectConfigurationKeyAndValueCreated(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> CreateAuditProjectConfigurationKeyAndValue(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue auditprojectconfigurationkeyandvalue)
        {
            OnAuditProjectConfigurationKeyAndValueCreated(auditprojectconfigurationkeyandvalue);

            var existingItem = Context.AuditProjectConfigurationKeyAndValues
                              .Where(i => i.LogID == auditprojectconfigurationkeyandvalue.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectConfigurationKeyAndValues.Add(auditprojectconfigurationkeyandvalue);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectconfigurationkeyandvalue).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectConfigurationKeyAndValueCreated(auditprojectconfigurationkeyandvalue);

            return auditprojectconfigurationkeyandvalue;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> CancelAuditProjectConfigurationKeyAndValueChanges(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectConfigurationKeyAndValueUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);
        partial void OnAfterAuditProjectConfigurationKeyAndValueUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> UpdateAuditProjectConfigurationKeyAndValue(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue auditprojectconfigurationkeyandvalue)
        {
            OnAuditProjectConfigurationKeyAndValueUpdated(auditprojectconfigurationkeyandvalue);

            var itemToUpdate = Context.AuditProjectConfigurationKeyAndValues
                              .Where(i => i.LogID == auditprojectconfigurationkeyandvalue.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectconfigurationkeyandvalue);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectConfigurationKeyAndValueUpdated(auditprojectconfigurationkeyandvalue);

            return auditprojectconfigurationkeyandvalue;
        }

        partial void OnAuditProjectConfigurationKeyAndValueDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);
        partial void OnAfterAuditProjectConfigurationKeyAndValueDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> DeleteAuditProjectConfigurationKeyAndValue(long logid)
        {
            var itemToDelete = Context.AuditProjectConfigurationKeyAndValues
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectConfigurationKeyAndValueDeleted(itemToDelete);


            Context.AuditProjectConfigurationKeyAndValues.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectConfigurationKeyAndValueDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectConfigurationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectConfigurationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectConfigurationsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>> GetAuditProjectConfigurations(Query query = null)
        {
            var items = Context.AuditProjectConfigurations.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectConfigurationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectConfigurationGet(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> GetAuditProjectConfigurationByLogId(long logid)
        {
            var items = Context.AuditProjectConfigurations
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectConfigurationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectConfigurationCreated(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);
        partial void OnAfterAuditProjectConfigurationCreated(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> CreateAuditProjectConfiguration(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration auditprojectconfiguration)
        {
            OnAuditProjectConfigurationCreated(auditprojectconfiguration);

            var existingItem = Context.AuditProjectConfigurations
                              .Where(i => i.LogID == auditprojectconfiguration.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectConfigurations.Add(auditprojectconfiguration);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectconfiguration).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectConfigurationCreated(auditprojectconfiguration);

            return auditprojectconfiguration;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> CancelAuditProjectConfigurationChanges(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectConfigurationUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);
        partial void OnAfterAuditProjectConfigurationUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> UpdateAuditProjectConfiguration(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration auditprojectconfiguration)
        {
            OnAuditProjectConfigurationUpdated(auditprojectconfiguration);

            var itemToUpdate = Context.AuditProjectConfigurations
                              .Where(i => i.LogID == auditprojectconfiguration.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectconfiguration);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectConfigurationUpdated(auditprojectconfiguration);

            return auditprojectconfiguration;
        }

        partial void OnAuditProjectConfigurationDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);
        partial void OnAfterAuditProjectConfigurationDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> DeleteAuditProjectConfiguration(long logid)
        {
            var itemToDelete = Context.AuditProjectConfigurations
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectConfigurationDeleted(itemToDelete);


            Context.AuditProjectConfigurations.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectConfigurationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectFunctionGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectFunctionGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectFunctionGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>> GetAuditProjectFunctionGroups(Query query = null)
        {
            var items = Context.AuditProjectFunctionGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectFunctionGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectFunctionGroupGet(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> GetAuditProjectFunctionGroupByLogId(long logid)
        {
            var items = Context.AuditProjectFunctionGroups
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectFunctionGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectFunctionGroupCreated(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);
        partial void OnAfterAuditProjectFunctionGroupCreated(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> CreateAuditProjectFunctionGroup(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup auditprojectfunctiongroup)
        {
            OnAuditProjectFunctionGroupCreated(auditprojectfunctiongroup);

            var existingItem = Context.AuditProjectFunctionGroups
                              .Where(i => i.LogID == auditprojectfunctiongroup.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectFunctionGroups.Add(auditprojectfunctiongroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectfunctiongroup).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectFunctionGroupCreated(auditprojectfunctiongroup);

            return auditprojectfunctiongroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> CancelAuditProjectFunctionGroupChanges(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectFunctionGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);
        partial void OnAfterAuditProjectFunctionGroupUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> UpdateAuditProjectFunctionGroup(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup auditprojectfunctiongroup)
        {
            OnAuditProjectFunctionGroupUpdated(auditprojectfunctiongroup);

            var itemToUpdate = Context.AuditProjectFunctionGroups
                              .Where(i => i.LogID == auditprojectfunctiongroup.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectfunctiongroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectFunctionGroupUpdated(auditprojectfunctiongroup);

            return auditprojectfunctiongroup;
        }

        partial void OnAuditProjectFunctionGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);
        partial void OnAfterAuditProjectFunctionGroupDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> DeleteAuditProjectFunctionGroup(long logid)
        {
            var itemToDelete = Context.AuditProjectFunctionGroups
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectFunctionGroupDeleted(itemToDelete);


            Context.AuditProjectFunctionGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectFunctionGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectFunctionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectFunctionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectFunctionsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>> GetAuditProjectFunctions(Query query = null)
        {
            var items = Context.AuditProjectFunctions.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectFunctionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectFunctionGet(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> GetAuditProjectFunctionByLogId(long logid)
        {
            var items = Context.AuditProjectFunctions
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectFunctionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectFunctionCreated(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);
        partial void OnAfterAuditProjectFunctionCreated(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> CreateAuditProjectFunction(ZarenUI.Server.Models.JSONServer.AuditProjectFunction auditprojectfunction)
        {
            OnAuditProjectFunctionCreated(auditprojectfunction);

            var existingItem = Context.AuditProjectFunctions
                              .Where(i => i.LogID == auditprojectfunction.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectFunctions.Add(auditprojectfunction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectfunction).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectFunctionCreated(auditprojectfunction);

            return auditprojectfunction;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> CancelAuditProjectFunctionChanges(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectFunctionUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);
        partial void OnAfterAuditProjectFunctionUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> UpdateAuditProjectFunction(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectFunction auditprojectfunction)
        {
            OnAuditProjectFunctionUpdated(auditprojectfunction);

            var itemToUpdate = Context.AuditProjectFunctions
                              .Where(i => i.LogID == auditprojectfunction.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectfunction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectFunctionUpdated(auditprojectfunction);

            return auditprojectfunction;
        }

        partial void OnAuditProjectFunctionDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);
        partial void OnAfterAuditProjectFunctionDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> DeleteAuditProjectFunction(long logid)
        {
            var itemToDelete = Context.AuditProjectFunctions
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectFunctionDeleted(itemToDelete);


            Context.AuditProjectFunctions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectFunctionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectPageComponentElementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectPageComponentElementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectPageComponentElementsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>> GetAuditProjectPageComponentElements(Query query = null)
        {
            var items = Context.AuditProjectPageComponentElements.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectPageComponentElementsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectPageComponentElementGet(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> GetAuditProjectPageComponentElementByLogId(long logid)
        {
            var items = Context.AuditProjectPageComponentElements
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectPageComponentElementGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectPageComponentElementCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);
        partial void OnAfterAuditProjectPageComponentElementCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> CreateAuditProjectPageComponentElement(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement auditprojectpagecomponentelement)
        {
            OnAuditProjectPageComponentElementCreated(auditprojectpagecomponentelement);

            var existingItem = Context.AuditProjectPageComponentElements
                              .Where(i => i.LogID == auditprojectpagecomponentelement.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectPageComponentElements.Add(auditprojectpagecomponentelement);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectpagecomponentelement).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectPageComponentElementCreated(auditprojectpagecomponentelement);

            return auditprojectpagecomponentelement;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> CancelAuditProjectPageComponentElementChanges(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectPageComponentElementUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);
        partial void OnAfterAuditProjectPageComponentElementUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> UpdateAuditProjectPageComponentElement(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement auditprojectpagecomponentelement)
        {
            OnAuditProjectPageComponentElementUpdated(auditprojectpagecomponentelement);

            var itemToUpdate = Context.AuditProjectPageComponentElements
                              .Where(i => i.LogID == auditprojectpagecomponentelement.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectpagecomponentelement);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectPageComponentElementUpdated(auditprojectpagecomponentelement);

            return auditprojectpagecomponentelement;
        }

        partial void OnAuditProjectPageComponentElementDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);
        partial void OnAfterAuditProjectPageComponentElementDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> DeleteAuditProjectPageComponentElement(long logid)
        {
            var itemToDelete = Context.AuditProjectPageComponentElements
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectPageComponentElementDeleted(itemToDelete);


            Context.AuditProjectPageComponentElements.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectPageComponentElementDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectPageComponentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectPageComponentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectPageComponentsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>> GetAuditProjectPageComponents(Query query = null)
        {
            var items = Context.AuditProjectPageComponents.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectPageComponentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectPageComponentGet(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> GetAuditProjectPageComponentByLogId(long logid)
        {
            var items = Context.AuditProjectPageComponents
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectPageComponentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectPageComponentCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);
        partial void OnAfterAuditProjectPageComponentCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> CreateAuditProjectPageComponent(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent auditprojectpagecomponent)
        {
            OnAuditProjectPageComponentCreated(auditprojectpagecomponent);

            var existingItem = Context.AuditProjectPageComponents
                              .Where(i => i.LogID == auditprojectpagecomponent.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectPageComponents.Add(auditprojectpagecomponent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectpagecomponent).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectPageComponentCreated(auditprojectpagecomponent);

            return auditprojectpagecomponent;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> CancelAuditProjectPageComponentChanges(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectPageComponentUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);
        partial void OnAfterAuditProjectPageComponentUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> UpdateAuditProjectPageComponent(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent auditprojectpagecomponent)
        {
            OnAuditProjectPageComponentUpdated(auditprojectpagecomponent);

            var itemToUpdate = Context.AuditProjectPageComponents
                              .Where(i => i.LogID == auditprojectpagecomponent.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectpagecomponent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectPageComponentUpdated(auditprojectpagecomponent);

            return auditprojectpagecomponent;
        }

        partial void OnAuditProjectPageComponentDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);
        partial void OnAfterAuditProjectPageComponentDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> DeleteAuditProjectPageComponent(long logid)
        {
            var itemToDelete = Context.AuditProjectPageComponents
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectPageComponentDeleted(itemToDelete);


            Context.AuditProjectPageComponents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectPageComponentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectPagesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPage> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectPage>> GetAuditProjectPages(Query query = null)
        {
            var items = Context.AuditProjectPages.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectPagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectPageGet(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> GetAuditProjectPageByLogId(long logid)
        {
            var items = Context.AuditProjectPages
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectPageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectPageCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);
        partial void OnAfterAuditProjectPageCreated(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> CreateAuditProjectPage(ZarenUI.Server.Models.JSONServer.AuditProjectPage auditprojectpage)
        {
            OnAuditProjectPageCreated(auditprojectpage);

            var existingItem = Context.AuditProjectPages
                              .Where(i => i.LogID == auditprojectpage.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectPages.Add(auditprojectpage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojectpage).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectPageCreated(auditprojectpage);

            return auditprojectpage;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> CancelAuditProjectPageChanges(ZarenUI.Server.Models.JSONServer.AuditProjectPage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectPageUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);
        partial void OnAfterAuditProjectPageUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> UpdateAuditProjectPage(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectPage auditprojectpage)
        {
            OnAuditProjectPageUpdated(auditprojectpage);

            var itemToUpdate = Context.AuditProjectPages
                              .Where(i => i.LogID == auditprojectpage.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojectpage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectPageUpdated(auditprojectpage);

            return auditprojectpage;
        }

        partial void OnAuditProjectPageDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);
        partial void OnAfterAuditProjectPageDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> DeleteAuditProjectPage(long logid)
        {
            var itemToDelete = Context.AuditProjectPages
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectPageDeleted(itemToDelete);


            Context.AuditProjectPages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectPageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProject> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProject>> GetAuditProjects(Query query = null)
        {
            var items = Context.AuditProjects.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectGet(ZarenUI.Server.Models.JSONServer.AuditProject item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> GetAuditProjectByLogId(long logid)
        {
            var items = Context.AuditProjects
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectCreated(ZarenUI.Server.Models.JSONServer.AuditProject item);
        partial void OnAfterAuditProjectCreated(ZarenUI.Server.Models.JSONServer.AuditProject item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> CreateAuditProject(ZarenUI.Server.Models.JSONServer.AuditProject auditproject)
        {
            OnAuditProjectCreated(auditproject);

            var existingItem = Context.AuditProjects
                              .Where(i => i.LogID == auditproject.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjects.Add(auditproject);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditproject).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectCreated(auditproject);

            return auditproject;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> CancelAuditProjectChanges(ZarenUI.Server.Models.JSONServer.AuditProject item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectUpdated(ZarenUI.Server.Models.JSONServer.AuditProject item);
        partial void OnAfterAuditProjectUpdated(ZarenUI.Server.Models.JSONServer.AuditProject item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> UpdateAuditProject(long logid, ZarenUI.Server.Models.JSONServer.AuditProject auditproject)
        {
            OnAuditProjectUpdated(auditproject);

            var itemToUpdate = Context.AuditProjects
                              .Where(i => i.LogID == auditproject.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditproject);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectUpdated(auditproject);

            return auditproject;
        }

        partial void OnAuditProjectDeleted(ZarenUI.Server.Models.JSONServer.AuditProject item);
        partial void OnAfterAuditProjectDeleted(ZarenUI.Server.Models.JSONServer.AuditProject item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> DeleteAuditProject(long logid)
        {
            var itemToDelete = Context.AuditProjects
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectDeleted(itemToDelete);


            Context.AuditProjects.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectTableColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectTableColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectTableColumnsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>> GetAuditProjectTableColumns(Query query = null)
        {
            var items = Context.AuditProjectTableColumns.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectTableColumnsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectTableColumnGet(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> GetAuditProjectTableColumnByLogId(long logid)
        {
            var items = Context.AuditProjectTableColumns
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectTableColumnGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectTableColumnCreated(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);
        partial void OnAfterAuditProjectTableColumnCreated(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> CreateAuditProjectTableColumn(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn auditprojecttablecolumn)
        {
            OnAuditProjectTableColumnCreated(auditprojecttablecolumn);

            var existingItem = Context.AuditProjectTableColumns
                              .Where(i => i.LogID == auditprojecttablecolumn.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectTableColumns.Add(auditprojecttablecolumn);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojecttablecolumn).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectTableColumnCreated(auditprojecttablecolumn);

            return auditprojecttablecolumn;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> CancelAuditProjectTableColumnChanges(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectTableColumnUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);
        partial void OnAfterAuditProjectTableColumnUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> UpdateAuditProjectTableColumn(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn auditprojecttablecolumn)
        {
            OnAuditProjectTableColumnUpdated(auditprojecttablecolumn);

            var itemToUpdate = Context.AuditProjectTableColumns
                              .Where(i => i.LogID == auditprojecttablecolumn.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojecttablecolumn);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectTableColumnUpdated(auditprojecttablecolumn);

            return auditprojecttablecolumn;
        }

        partial void OnAuditProjectTableColumnDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);
        partial void OnAfterAuditProjectTableColumnDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> DeleteAuditProjectTableColumn(long logid)
        {
            var itemToDelete = Context.AuditProjectTableColumns
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectTableColumnDeleted(itemToDelete);


            Context.AuditProjectTableColumns.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectTableColumnDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditProjectTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditProjectTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditProjectTablesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectTable> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditProjectTable>> GetAuditProjectTables(Query query = null)
        {
            var items = Context.AuditProjectTables.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditProjectTablesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditProjectTableGet(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> GetAuditProjectTableByLogId(long logid)
        {
            var items = Context.AuditProjectTables
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditProjectTableGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditProjectTableCreated(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);
        partial void OnAfterAuditProjectTableCreated(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> CreateAuditProjectTable(ZarenUI.Server.Models.JSONServer.AuditProjectTable auditprojecttable)
        {
            OnAuditProjectTableCreated(auditprojecttable);

            var existingItem = Context.AuditProjectTables
                              .Where(i => i.LogID == auditprojecttable.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditProjectTables.Add(auditprojecttable);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditprojecttable).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditProjectTableCreated(auditprojecttable);

            return auditprojecttable;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> CancelAuditProjectTableChanges(ZarenUI.Server.Models.JSONServer.AuditProjectTable item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditProjectTableUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);
        partial void OnAfterAuditProjectTableUpdated(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> UpdateAuditProjectTable(long logid, ZarenUI.Server.Models.JSONServer.AuditProjectTable auditprojecttable)
        {
            OnAuditProjectTableUpdated(auditprojecttable);

            var itemToUpdate = Context.AuditProjectTables
                              .Where(i => i.LogID == auditprojecttable.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditprojecttable);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditProjectTableUpdated(auditprojecttable);

            return auditprojecttable;
        }

        partial void OnAuditProjectTableDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);
        partial void OnAfterAuditProjectTableDeleted(ZarenUI.Server.Models.JSONServer.AuditProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> DeleteAuditProjectTable(long logid)
        {
            var itemToDelete = Context.AuditProjectTables
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditProjectTableDeleted(itemToDelete);


            Context.AuditProjectTables.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditProjectTableDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditReferenceWebSitesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditreferencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditreferencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditReferenceWebSitesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditreferencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditreferencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditReferenceWebSitesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>> GetAuditReferenceWebSites(Query query = null)
        {
            var items = Context.AuditReferenceWebSites.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditReferenceWebSitesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditReferenceWebSiteGet(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> GetAuditReferenceWebSiteByLogId(long logid)
        {
            var items = Context.AuditReferenceWebSites
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditReferenceWebSiteGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditReferenceWebSiteCreated(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);
        partial void OnAfterAuditReferenceWebSiteCreated(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> CreateAuditReferenceWebSite(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite auditreferencewebsite)
        {
            OnAuditReferenceWebSiteCreated(auditreferencewebsite);

            var existingItem = Context.AuditReferenceWebSites
                              .Where(i => i.LogID == auditreferencewebsite.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditReferenceWebSites.Add(auditreferencewebsite);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditreferencewebsite).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditReferenceWebSiteCreated(auditreferencewebsite);

            return auditreferencewebsite;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> CancelAuditReferenceWebSiteChanges(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditReferenceWebSiteUpdated(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);
        partial void OnAfterAuditReferenceWebSiteUpdated(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> UpdateAuditReferenceWebSite(long logid, ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite auditreferencewebsite)
        {
            OnAuditReferenceWebSiteUpdated(auditreferencewebsite);

            var itemToUpdate = Context.AuditReferenceWebSites
                              .Where(i => i.LogID == auditreferencewebsite.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditreferencewebsite);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditReferenceWebSiteUpdated(auditreferencewebsite);

            return auditreferencewebsite;
        }

        partial void OnAuditReferenceWebSiteDeleted(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);
        partial void OnAfterAuditReferenceWebSiteDeleted(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> DeleteAuditReferenceWebSite(long logid)
        {
            var itemToDelete = Context.AuditReferenceWebSites
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditReferenceWebSiteDeleted(itemToDelete);


            Context.AuditReferenceWebSites.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditReferenceWebSiteDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditSchemesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditScheme> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditScheme>> GetAuditSchemes(Query query = null)
        {
            var items = Context.AuditSchemes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditSchemesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditSchemeGet(ZarenUI.Server.Models.JSONServer.AuditScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> GetAuditSchemeByLogId(long logid)
        {
            var items = Context.AuditSchemes
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditSchemeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditSchemeCreated(ZarenUI.Server.Models.JSONServer.AuditScheme item);
        partial void OnAfterAuditSchemeCreated(ZarenUI.Server.Models.JSONServer.AuditScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> CreateAuditScheme(ZarenUI.Server.Models.JSONServer.AuditScheme auditscheme)
        {
            OnAuditSchemeCreated(auditscheme);

            var existingItem = Context.AuditSchemes
                              .Where(i => i.LogID == auditscheme.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditSchemes.Add(auditscheme);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(auditscheme).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditSchemeCreated(auditscheme);

            return auditscheme;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> CancelAuditSchemeChanges(ZarenUI.Server.Models.JSONServer.AuditScheme item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditSchemeUpdated(ZarenUI.Server.Models.JSONServer.AuditScheme item);
        partial void OnAfterAuditSchemeUpdated(ZarenUI.Server.Models.JSONServer.AuditScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> UpdateAuditScheme(long logid, ZarenUI.Server.Models.JSONServer.AuditScheme auditscheme)
        {
            OnAuditSchemeUpdated(auditscheme);

            var itemToUpdate = Context.AuditSchemes
                              .Where(i => i.LogID == auditscheme.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(auditscheme);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditSchemeUpdated(auditscheme);

            return auditscheme;
        }

        partial void OnAuditSchemeDeleted(ZarenUI.Server.Models.JSONServer.AuditScheme item);
        partial void OnAfterAuditSchemeDeleted(ZarenUI.Server.Models.JSONServer.AuditScheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> DeleteAuditScheme(long logid)
        {
            var itemToDelete = Context.AuditSchemes
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditSchemeDeleted(itemToDelete);


            Context.AuditSchemes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditSchemeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportAuditTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/audittables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/audittables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportAuditTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/audittables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/audittables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnAuditTablesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.AuditTable> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.AuditTable>> GetAuditTables(Query query = null)
        {
            var items = Context.AuditTables.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnAuditTablesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnAuditTableGet(ZarenUI.Server.Models.JSONServer.AuditTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> GetAuditTableByLogId(long logid)
        {
            var items = Context.AuditTables
                              .AsNoTracking()
                              .Where(i => i.LogID == logid);

  
            var itemToReturn = items.FirstOrDefault();

            OnAuditTableGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnAuditTableCreated(ZarenUI.Server.Models.JSONServer.AuditTable item);
        partial void OnAfterAuditTableCreated(ZarenUI.Server.Models.JSONServer.AuditTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> CreateAuditTable(ZarenUI.Server.Models.JSONServer.AuditTable audittable)
        {
            OnAuditTableCreated(audittable);

            var existingItem = Context.AuditTables
                              .Where(i => i.LogID == audittable.LogID)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.AuditTables.Add(audittable);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(audittable).State = EntityState.Detached;
                throw;
            }

            OnAfterAuditTableCreated(audittable);

            return audittable;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> CancelAuditTableChanges(ZarenUI.Server.Models.JSONServer.AuditTable item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnAuditTableUpdated(ZarenUI.Server.Models.JSONServer.AuditTable item);
        partial void OnAfterAuditTableUpdated(ZarenUI.Server.Models.JSONServer.AuditTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> UpdateAuditTable(long logid, ZarenUI.Server.Models.JSONServer.AuditTable audittable)
        {
            OnAuditTableUpdated(audittable);

            var itemToUpdate = Context.AuditTables
                              .Where(i => i.LogID == audittable.LogID)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(audittable);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterAuditTableUpdated(audittable);

            return audittable;
        }

        partial void OnAuditTableDeleted(ZarenUI.Server.Models.JSONServer.AuditTable item);
        partial void OnAfterAuditTableDeleted(ZarenUI.Server.Models.JSONServer.AuditTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> DeleteAuditTable(long logid)
        {
            var itemToDelete = Context.AuditTables
                              .Where(i => i.LogID == logid)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnAuditTableDeleted(itemToDelete);


            Context.AuditTables.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterAuditTableDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportColorGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportColorGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnColorGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroup>> GetColorGroups(Query query = null)
        {
            var items = Context.ColorGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnColorGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnColorGroupGet(ZarenUI.Server.Models.JSONServer.ColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> GetColorGroupById(int id)
        {
            var items = Context.ColorGroups
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnColorGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnColorGroupCreated(ZarenUI.Server.Models.JSONServer.ColorGroup item);
        partial void OnAfterColorGroupCreated(ZarenUI.Server.Models.JSONServer.ColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> CreateColorGroup(ZarenUI.Server.Models.JSONServer.ColorGroup colorgroup)
        {
            OnColorGroupCreated(colorgroup);

            var existingItem = Context.ColorGroups
                              .Where(i => i.Id == colorgroup.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ColorGroups.Add(colorgroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(colorgroup).State = EntityState.Detached;
                throw;
            }

            OnAfterColorGroupCreated(colorgroup);

            return colorgroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> CancelColorGroupChanges(ZarenUI.Server.Models.JSONServer.ColorGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnColorGroupUpdated(ZarenUI.Server.Models.JSONServer.ColorGroup item);
        partial void OnAfterColorGroupUpdated(ZarenUI.Server.Models.JSONServer.ColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> UpdateColorGroup(int id, ZarenUI.Server.Models.JSONServer.ColorGroup colorgroup)
        {
            OnColorGroupUpdated(colorgroup);

            var itemToUpdate = Context.ColorGroups
                              .Where(i => i.Id == colorgroup.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(colorgroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterColorGroupUpdated(colorgroup);

            return colorgroup;
        }

        partial void OnColorGroupDeleted(ZarenUI.Server.Models.JSONServer.ColorGroup item);
        partial void OnAfterColorGroupDeleted(ZarenUI.Server.Models.JSONServer.ColorGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> DeleteColorGroup(int id)
        {
            var itemToDelete = Context.ColorGroups
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnColorGroupDeleted(itemToDelete);


            Context.ColorGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterColorGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportConstraintRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportConstraintRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnConstraintRulesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRule> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRule>> GetConstraintRules(Query query = null)
        {
            var items = Context.ConstraintRules.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnConstraintRulesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnConstraintRuleGet(ZarenUI.Server.Models.JSONServer.ConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> GetConstraintRuleById(long id)
        {
            var items = Context.ConstraintRules
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnConstraintRuleGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnConstraintRuleCreated(ZarenUI.Server.Models.JSONServer.ConstraintRule item);
        partial void OnAfterConstraintRuleCreated(ZarenUI.Server.Models.JSONServer.ConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> CreateConstraintRule(ZarenUI.Server.Models.JSONServer.ConstraintRule constraintrule)
        {
            OnConstraintRuleCreated(constraintrule);

            var existingItem = Context.ConstraintRules
                              .Where(i => i.Id == constraintrule.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ConstraintRules.Add(constraintrule);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(constraintrule).State = EntityState.Detached;
                throw;
            }

            OnAfterConstraintRuleCreated(constraintrule);

            return constraintrule;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> CancelConstraintRuleChanges(ZarenUI.Server.Models.JSONServer.ConstraintRule item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnConstraintRuleUpdated(ZarenUI.Server.Models.JSONServer.ConstraintRule item);
        partial void OnAfterConstraintRuleUpdated(ZarenUI.Server.Models.JSONServer.ConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> UpdateConstraintRule(long id, ZarenUI.Server.Models.JSONServer.ConstraintRule constraintrule)
        {
            OnConstraintRuleUpdated(constraintrule);

            var itemToUpdate = Context.ConstraintRules
                              .Where(i => i.Id == constraintrule.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(constraintrule);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterConstraintRuleUpdated(constraintrule);

            return constraintrule;
        }

        partial void OnConstraintRuleDeleted(ZarenUI.Server.Models.JSONServer.ConstraintRule item);
        partial void OnAfterConstraintRuleDeleted(ZarenUI.Server.Models.JSONServer.ConstraintRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> DeleteConstraintRule(long id)
        {
            var itemToDelete = Context.ConstraintRules
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnConstraintRuleDeleted(itemToDelete);


            Context.ConstraintRules.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterConstraintRuleDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCountriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCountriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCountriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Country> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Country>> GetCountries(Query query = null)
        {
            var items = Context.Countries.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnCountriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCountryGet(ZarenUI.Server.Models.JSONServer.Country item);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> GetCountryById(int id)
        {
            var items = Context.Countries
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnCountryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCountryCreated(ZarenUI.Server.Models.JSONServer.Country item);
        partial void OnAfterCountryCreated(ZarenUI.Server.Models.JSONServer.Country item);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> CreateCountry(ZarenUI.Server.Models.JSONServer.Country country)
        {
            OnCountryCreated(country);

            var existingItem = Context.Countries
                              .Where(i => i.Id == country.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Countries.Add(country);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(country).State = EntityState.Detached;
                throw;
            }

            OnAfterCountryCreated(country);

            return country;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Country> CancelCountryChanges(ZarenUI.Server.Models.JSONServer.Country item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCountryUpdated(ZarenUI.Server.Models.JSONServer.Country item);
        partial void OnAfterCountryUpdated(ZarenUI.Server.Models.JSONServer.Country item);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> UpdateCountry(int id, ZarenUI.Server.Models.JSONServer.Country country)
        {
            OnCountryUpdated(country);

            var itemToUpdate = Context.Countries
                              .Where(i => i.Id == country.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(country);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCountryUpdated(country);

            return country;
        }

        partial void OnCountryDeleted(ZarenUI.Server.Models.JSONServer.Country item);
        partial void OnAfterCountryDeleted(ZarenUI.Server.Models.JSONServer.Country item);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> DeleteCountry(int id)
        {
            var itemToDelete = Context.Countries
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCountryDeleted(itemToDelete);


            Context.Countries.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCountryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportCountryLanguagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportCountryLanguagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnCountryLanguagesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguage> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguage>> GetCountryLanguages(Query query = null)
        {
            var items = Context.CountryLanguages.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnCountryLanguagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnCountryLanguageGet(ZarenUI.Server.Models.JSONServer.CountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> GetCountryLanguageById(int id)
        {
            var items = Context.CountryLanguages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnCountryLanguageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnCountryLanguageCreated(ZarenUI.Server.Models.JSONServer.CountryLanguage item);
        partial void OnAfterCountryLanguageCreated(ZarenUI.Server.Models.JSONServer.CountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> CreateCountryLanguage(ZarenUI.Server.Models.JSONServer.CountryLanguage countrylanguage)
        {
            OnCountryLanguageCreated(countrylanguage);

            var existingItem = Context.CountryLanguages
                              .Where(i => i.Id == countrylanguage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.CountryLanguages.Add(countrylanguage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(countrylanguage).State = EntityState.Detached;
                throw;
            }

            OnAfterCountryLanguageCreated(countrylanguage);

            return countrylanguage;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> CancelCountryLanguageChanges(ZarenUI.Server.Models.JSONServer.CountryLanguage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnCountryLanguageUpdated(ZarenUI.Server.Models.JSONServer.CountryLanguage item);
        partial void OnAfterCountryLanguageUpdated(ZarenUI.Server.Models.JSONServer.CountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> UpdateCountryLanguage(int id, ZarenUI.Server.Models.JSONServer.CountryLanguage countrylanguage)
        {
            OnCountryLanguageUpdated(countrylanguage);

            var itemToUpdate = Context.CountryLanguages
                              .Where(i => i.Id == countrylanguage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(countrylanguage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterCountryLanguageUpdated(countrylanguage);

            return countrylanguage;
        }

        partial void OnCountryLanguageDeleted(ZarenUI.Server.Models.JSONServer.CountryLanguage item);
        partial void OnAfterCountryLanguageDeleted(ZarenUI.Server.Models.JSONServer.CountryLanguage item);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> DeleteCountryLanguage(int id)
        {
            var itemToDelete = Context.CountryLanguages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnCountryLanguageDeleted(itemToDelete);


            Context.CountryLanguages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterCountryLanguageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDeviceGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDeviceGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDeviceGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroup>> GetDeviceGroups(Query query = null)
        {
            var items = Context.DeviceGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnDeviceGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDeviceGroupGet(ZarenUI.Server.Models.JSONServer.DeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> GetDeviceGroupById(int id)
        {
            var items = Context.DeviceGroups
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnDeviceGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDeviceGroupCreated(ZarenUI.Server.Models.JSONServer.DeviceGroup item);
        partial void OnAfterDeviceGroupCreated(ZarenUI.Server.Models.JSONServer.DeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> CreateDeviceGroup(ZarenUI.Server.Models.JSONServer.DeviceGroup devicegroup)
        {
            OnDeviceGroupCreated(devicegroup);

            var existingItem = Context.DeviceGroups
                              .Where(i => i.Id == devicegroup.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DeviceGroups.Add(devicegroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(devicegroup).State = EntityState.Detached;
                throw;
            }

            OnAfterDeviceGroupCreated(devicegroup);

            return devicegroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> CancelDeviceGroupChanges(ZarenUI.Server.Models.JSONServer.DeviceGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDeviceGroupUpdated(ZarenUI.Server.Models.JSONServer.DeviceGroup item);
        partial void OnAfterDeviceGroupUpdated(ZarenUI.Server.Models.JSONServer.DeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> UpdateDeviceGroup(int id, ZarenUI.Server.Models.JSONServer.DeviceGroup devicegroup)
        {
            OnDeviceGroupUpdated(devicegroup);

            var itemToUpdate = Context.DeviceGroups
                              .Where(i => i.Id == devicegroup.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(devicegroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDeviceGroupUpdated(devicegroup);

            return devicegroup;
        }

        partial void OnDeviceGroupDeleted(ZarenUI.Server.Models.JSONServer.DeviceGroup item);
        partial void OnAfterDeviceGroupDeleted(ZarenUI.Server.Models.JSONServer.DeviceGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> DeleteDeviceGroup(int id)
        {
            var itemToDelete = Context.DeviceGroups
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDeviceGroupDeleted(itemToDelete);


            Context.DeviceGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDeviceGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDevicesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDevicesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDevicesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Device> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Device>> GetDevices(Query query = null)
        {
            var items = Context.Devices.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnDevicesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDeviceGet(ZarenUI.Server.Models.JSONServer.Device item);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> GetDeviceById(int id)
        {
            var items = Context.Devices
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnDeviceGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDeviceCreated(ZarenUI.Server.Models.JSONServer.Device item);
        partial void OnAfterDeviceCreated(ZarenUI.Server.Models.JSONServer.Device item);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> CreateDevice(ZarenUI.Server.Models.JSONServer.Device device)
        {
            OnDeviceCreated(device);

            var existingItem = Context.Devices
                              .Where(i => i.Id == device.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Devices.Add(device);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(device).State = EntityState.Detached;
                throw;
            }

            OnAfterDeviceCreated(device);

            return device;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Device> CancelDeviceChanges(ZarenUI.Server.Models.JSONServer.Device item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDeviceUpdated(ZarenUI.Server.Models.JSONServer.Device item);
        partial void OnAfterDeviceUpdated(ZarenUI.Server.Models.JSONServer.Device item);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> UpdateDevice(int id, ZarenUI.Server.Models.JSONServer.Device device)
        {
            OnDeviceUpdated(device);

            var itemToUpdate = Context.Devices
                              .Where(i => i.Id == device.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(device);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDeviceUpdated(device);

            return device;
        }

        partial void OnDeviceDeleted(ZarenUI.Server.Models.JSONServer.Device item);
        partial void OnAfterDeviceDeleted(ZarenUI.Server.Models.JSONServer.Device item);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> DeleteDevice(int id)
        {
            var itemToDelete = Context.Devices
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDeviceDeleted(itemToDelete);


            Context.Devices.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDeviceDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDistributedServerCachesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/distributedservercaches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/distributedservercaches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDistributedServerCachesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/distributedservercaches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/distributedservercaches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDistributedServerCachesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.DistributedServerCache> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DistributedServerCache>> GetDistributedServerCaches(Query query = null)
        {
            var items = Context.DistributedServerCaches.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnDistributedServerCachesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnDistributedServerCacheGet(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> GetDistributedServerCacheById(string id)
        {
            var items = Context.DistributedServerCaches
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnDistributedServerCacheGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnDistributedServerCacheCreated(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);
        partial void OnAfterDistributedServerCacheCreated(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> CreateDistributedServerCache(ZarenUI.Server.Models.JSONServer.DistributedServerCache distributedservercache)
        {
            OnDistributedServerCacheCreated(distributedservercache);

            var existingItem = Context.DistributedServerCaches
                              .Where(i => i.Id == distributedservercache.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.DistributedServerCaches.Add(distributedservercache);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(distributedservercache).State = EntityState.Detached;
                throw;
            }

            OnAfterDistributedServerCacheCreated(distributedservercache);

            return distributedservercache;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> CancelDistributedServerCacheChanges(ZarenUI.Server.Models.JSONServer.DistributedServerCache item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnDistributedServerCacheUpdated(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);
        partial void OnAfterDistributedServerCacheUpdated(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> UpdateDistributedServerCache(string id, ZarenUI.Server.Models.JSONServer.DistributedServerCache distributedservercache)
        {
            OnDistributedServerCacheUpdated(distributedservercache);

            var itemToUpdate = Context.DistributedServerCaches
                              .Where(i => i.Id == distributedservercache.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(distributedservercache);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterDistributedServerCacheUpdated(distributedservercache);

            return distributedservercache;
        }

        partial void OnDistributedServerCacheDeleted(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);
        partial void OnAfterDistributedServerCacheDeleted(ZarenUI.Server.Models.JSONServer.DistributedServerCache item);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> DeleteDistributedServerCache(string id)
        {
            var itemToDelete = Context.DistributedServerCaches
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnDistributedServerCacheDeleted(itemToDelete);


            Context.DistributedServerCaches.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterDistributedServerCacheDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportFieldsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportFieldsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnFieldsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Field> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Field>> GetFields(Query query = null)
        {
            var items = Context.Fields.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnFieldsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnFieldGet(ZarenUI.Server.Models.JSONServer.Field item);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> GetFieldById(long id)
        {
            var items = Context.Fields
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnFieldGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnFieldCreated(ZarenUI.Server.Models.JSONServer.Field item);
        partial void OnAfterFieldCreated(ZarenUI.Server.Models.JSONServer.Field item);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> CreateField(ZarenUI.Server.Models.JSONServer.Field field)
        {
            OnFieldCreated(field);

            var existingItem = Context.Fields
                              .Where(i => i.Id == field.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Fields.Add(field);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(field).State = EntityState.Detached;
                throw;
            }

            OnAfterFieldCreated(field);

            return field;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Field> CancelFieldChanges(ZarenUI.Server.Models.JSONServer.Field item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnFieldUpdated(ZarenUI.Server.Models.JSONServer.Field item);
        partial void OnAfterFieldUpdated(ZarenUI.Server.Models.JSONServer.Field item);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> UpdateField(long id, ZarenUI.Server.Models.JSONServer.Field field)
        {
            OnFieldUpdated(field);

            var itemToUpdate = Context.Fields
                              .Where(i => i.Id == field.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(field);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterFieldUpdated(field);

            return field;
        }

        partial void OnFieldDeleted(ZarenUI.Server.Models.JSONServer.Field item);
        partial void OnAfterFieldDeleted(ZarenUI.Server.Models.JSONServer.Field item);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> DeleteField(long id)
        {
            var itemToDelete = Context.Fields
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnFieldDeleted(itemToDelete);


            Context.Fields.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterFieldDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportForeignKeyRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportForeignKeyRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnForeignKeyRulesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>> GetForeignKeyRules(Query query = null)
        {
            var items = Context.ForeignKeyRules.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnForeignKeyRulesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnForeignKeyRuleGet(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> GetForeignKeyRuleById(long id)
        {
            var items = Context.ForeignKeyRules
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnForeignKeyRuleGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnForeignKeyRuleCreated(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);
        partial void OnAfterForeignKeyRuleCreated(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> CreateForeignKeyRule(ZarenUI.Server.Models.JSONServer.ForeignKeyRule foreignkeyrule)
        {
            OnForeignKeyRuleCreated(foreignkeyrule);

            var existingItem = Context.ForeignKeyRules
                              .Where(i => i.Id == foreignkeyrule.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ForeignKeyRules.Add(foreignkeyrule);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(foreignkeyrule).State = EntityState.Detached;
                throw;
            }

            OnAfterForeignKeyRuleCreated(foreignkeyrule);

            return foreignkeyrule;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> CancelForeignKeyRuleChanges(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnForeignKeyRuleUpdated(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);
        partial void OnAfterForeignKeyRuleUpdated(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> UpdateForeignKeyRule(long id, ZarenUI.Server.Models.JSONServer.ForeignKeyRule foreignkeyrule)
        {
            OnForeignKeyRuleUpdated(foreignkeyrule);

            var itemToUpdate = Context.ForeignKeyRules
                              .Where(i => i.Id == foreignkeyrule.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(foreignkeyrule);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterForeignKeyRuleUpdated(foreignkeyrule);

            return foreignkeyrule;
        }

        partial void OnForeignKeyRuleDeleted(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);
        partial void OnAfterForeignKeyRuleDeleted(ZarenUI.Server.Models.JSONServer.ForeignKeyRule item);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> DeleteForeignKeyRule(long id)
        {
            var itemToDelete = Context.ForeignKeyRules
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnForeignKeyRuleDeleted(itemToDelete);


            Context.ForeignKeyRules.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterForeignKeyRuleDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProgrammingCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProgrammingCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProgrammingCategoriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>> GetProgrammingCategories(Query query = null)
        {
            var items = Context.ProgrammingCategories.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProgrammingCategoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProgrammingCategoryGet(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> GetProgrammingCategoryById(int id)
        {
            var items = Context.ProgrammingCategories
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProgrammingCategoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProgrammingCategoryCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);
        partial void OnAfterProgrammingCategoryCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> CreateProgrammingCategory(ZarenUI.Server.Models.JSONServer.ProgrammingCategory programmingcategory)
        {
            OnProgrammingCategoryCreated(programmingcategory);

            var existingItem = Context.ProgrammingCategories
                              .Where(i => i.Id == programmingcategory.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProgrammingCategories.Add(programmingcategory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(programmingcategory).State = EntityState.Detached;
                throw;
            }

            OnAfterProgrammingCategoryCreated(programmingcategory);

            return programmingcategory;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> CancelProgrammingCategoryChanges(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProgrammingCategoryUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);
        partial void OnAfterProgrammingCategoryUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> UpdateProgrammingCategory(int id, ZarenUI.Server.Models.JSONServer.ProgrammingCategory programmingcategory)
        {
            OnProgrammingCategoryUpdated(programmingcategory);

            var itemToUpdate = Context.ProgrammingCategories
                              .Where(i => i.Id == programmingcategory.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(programmingcategory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProgrammingCategoryUpdated(programmingcategory);

            return programmingcategory;
        }

        partial void OnProgrammingCategoryDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);
        partial void OnAfterProgrammingCategoryDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> DeleteProgrammingCategory(int id)
        {
            var itemToDelete = Context.ProgrammingCategories
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProgrammingCategoryDeleted(itemToDelete);


            Context.ProgrammingCategories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProgrammingCategoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProgrammingCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProgrammingCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProgrammingCodesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCode> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCode>> GetProgrammingCodes(Query query = null)
        {
            var items = Context.ProgrammingCodes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProgrammingCodesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProgrammingCodeGet(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> GetProgrammingCodeById(int id)
        {
            var items = Context.ProgrammingCodes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProgrammingCodeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProgrammingCodeCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);
        partial void OnAfterProgrammingCodeCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> CreateProgrammingCode(ZarenUI.Server.Models.JSONServer.ProgrammingCode programmingcode)
        {
            OnProgrammingCodeCreated(programmingcode);

            var existingItem = Context.ProgrammingCodes
                              .Where(i => i.Id == programmingcode.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProgrammingCodes.Add(programmingcode);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(programmingcode).State = EntityState.Detached;
                throw;
            }

            OnAfterProgrammingCodeCreated(programmingcode);

            return programmingcode;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> CancelProgrammingCodeChanges(ZarenUI.Server.Models.JSONServer.ProgrammingCode item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProgrammingCodeUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);
        partial void OnAfterProgrammingCodeUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> UpdateProgrammingCode(int id, ZarenUI.Server.Models.JSONServer.ProgrammingCode programmingcode)
        {
            OnProgrammingCodeUpdated(programmingcode);

            var itemToUpdate = Context.ProgrammingCodes
                              .Where(i => i.Id == programmingcode.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(programmingcode);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProgrammingCodeUpdated(programmingcode);

            return programmingcode;
        }

        partial void OnProgrammingCodeDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);
        partial void OnAfterProgrammingCodeDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCode item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> DeleteProgrammingCode(int id)
        {
            var itemToDelete = Context.ProgrammingCodes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProgrammingCodeDeleted(itemToDelete);


            Context.ProgrammingCodes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProgrammingCodeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProgrammingCodeTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProgrammingCodeTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProgrammingCodeTemplatesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>> GetProgrammingCodeTemplates(Query query = null)
        {
            var items = Context.ProgrammingCodeTemplates.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProgrammingCodeTemplatesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProgrammingCodeTemplateGet(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> GetProgrammingCodeTemplateById(int id)
        {
            var items = Context.ProgrammingCodeTemplates
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProgrammingCodeTemplateGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProgrammingCodeTemplateCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);
        partial void OnAfterProgrammingCodeTemplateCreated(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> CreateProgrammingCodeTemplate(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate programmingcodetemplate)
        {
            OnProgrammingCodeTemplateCreated(programmingcodetemplate);

            var existingItem = Context.ProgrammingCodeTemplates
                              .Where(i => i.Id == programmingcodetemplate.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProgrammingCodeTemplates.Add(programmingcodetemplate);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(programmingcodetemplate).State = EntityState.Detached;
                throw;
            }

            OnAfterProgrammingCodeTemplateCreated(programmingcodetemplate);

            return programmingcodetemplate;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> CancelProgrammingCodeTemplateChanges(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProgrammingCodeTemplateUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);
        partial void OnAfterProgrammingCodeTemplateUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> UpdateProgrammingCodeTemplate(int id, ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate programmingcodetemplate)
        {
            OnProgrammingCodeTemplateUpdated(programmingcodetemplate);

            var itemToUpdate = Context.ProgrammingCodeTemplates
                              .Where(i => i.Id == programmingcodetemplate.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(programmingcodetemplate);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProgrammingCodeTemplateUpdated(programmingcodetemplate);

            return programmingcodetemplate;
        }

        partial void OnProgrammingCodeTemplateDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);
        partial void OnAfterProgrammingCodeTemplateDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> DeleteProgrammingCodeTemplate(int id)
        {
            var itemToDelete = Context.ProgrammingCodeTemplates
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProgrammingCodeTemplateDeleted(itemToDelete);


            Context.ProgrammingCodeTemplates.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProgrammingCodeTemplateDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProgrammingTechnologiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProgrammingTechnologiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProgrammingTechnologiesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>> GetProgrammingTechnologies(Query query = null)
        {
            var items = Context.ProgrammingTechnologies.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProgrammingTechnologiesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProgrammingTechnologyGet(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> GetProgrammingTechnologyById(int id)
        {
            var items = Context.ProgrammingTechnologies
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProgrammingTechnologyGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProgrammingTechnologyCreated(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);
        partial void OnAfterProgrammingTechnologyCreated(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> CreateProgrammingTechnology(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology programmingtechnology)
        {
            OnProgrammingTechnologyCreated(programmingtechnology);

            var existingItem = Context.ProgrammingTechnologies
                              .Where(i => i.Id == programmingtechnology.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProgrammingTechnologies.Add(programmingtechnology);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(programmingtechnology).State = EntityState.Detached;
                throw;
            }

            OnAfterProgrammingTechnologyCreated(programmingtechnology);

            return programmingtechnology;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> CancelProgrammingTechnologyChanges(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProgrammingTechnologyUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);
        partial void OnAfterProgrammingTechnologyUpdated(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> UpdateProgrammingTechnology(int id, ZarenUI.Server.Models.JSONServer.ProgrammingTechnology programmingtechnology)
        {
            OnProgrammingTechnologyUpdated(programmingtechnology);

            var itemToUpdate = Context.ProgrammingTechnologies
                              .Where(i => i.Id == programmingtechnology.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(programmingtechnology);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProgrammingTechnologyUpdated(programmingtechnology);

            return programmingtechnology;
        }

        partial void OnProgrammingTechnologyDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);
        partial void OnAfterProgrammingTechnologyDeleted(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> DeleteProgrammingTechnology(int id)
        {
            var itemToDelete = Context.ProgrammingTechnologies
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProgrammingTechnologyDeleted(itemToDelete);


            Context.ProgrammingTechnologies.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProgrammingTechnologyDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectCategoriesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategory> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategory>> GetProjectCategories(Query query = null)
        {
            var items = Context.ProjectCategories.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectCategoriesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectCategoryGet(ZarenUI.Server.Models.JSONServer.ProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> GetProjectCategoryById(int id)
        {
            var items = Context.ProjectCategories
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectCategoryGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectCategoryCreated(ZarenUI.Server.Models.JSONServer.ProjectCategory item);
        partial void OnAfterProjectCategoryCreated(ZarenUI.Server.Models.JSONServer.ProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> CreateProjectCategory(ZarenUI.Server.Models.JSONServer.ProjectCategory projectcategory)
        {
            OnProjectCategoryCreated(projectcategory);

            var existingItem = Context.ProjectCategories
                              .Where(i => i.Id == projectcategory.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectCategories.Add(projectcategory);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectcategory).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectCategoryCreated(projectcategory);

            return projectcategory;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> CancelProjectCategoryChanges(ZarenUI.Server.Models.JSONServer.ProjectCategory item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectCategoryUpdated(ZarenUI.Server.Models.JSONServer.ProjectCategory item);
        partial void OnAfterProjectCategoryUpdated(ZarenUI.Server.Models.JSONServer.ProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> UpdateProjectCategory(int id, ZarenUI.Server.Models.JSONServer.ProjectCategory projectcategory)
        {
            OnProjectCategoryUpdated(projectcategory);

            var itemToUpdate = Context.ProjectCategories
                              .Where(i => i.Id == projectcategory.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectcategory);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectCategoryUpdated(projectcategory);

            return projectcategory;
        }

        partial void OnProjectCategoryDeleted(ZarenUI.Server.Models.JSONServer.ProjectCategory item);
        partial void OnAfterProjectCategoryDeleted(ZarenUI.Server.Models.JSONServer.ProjectCategory item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> DeleteProjectCategory(int id)
        {
            var itemToDelete = Context.ProjectCategories
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectCategoryDeleted(itemToDelete);


            Context.ProjectCategories.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectCategoryDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectConfigurationKeyAndValuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectConfigurationKeyAndValuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectConfigurationKeyAndValuesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>> GetProjectConfigurationKeyAndValues(Query query = null)
        {
            var items = Context.ProjectConfigurationKeyAndValues.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectConfigurationKeyAndValuesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectConfigurationKeyAndValueGet(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> GetProjectConfigurationKeyAndValueById(int id)
        {
            var items = Context.ProjectConfigurationKeyAndValues
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectConfigurationKeyAndValueGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectConfigurationKeyAndValueCreated(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);
        partial void OnAfterProjectConfigurationKeyAndValueCreated(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> CreateProjectConfigurationKeyAndValue(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue projectconfigurationkeyandvalue)
        {
            OnProjectConfigurationKeyAndValueCreated(projectconfigurationkeyandvalue);

            var existingItem = Context.ProjectConfigurationKeyAndValues
                              .Where(i => i.Id == projectconfigurationkeyandvalue.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectConfigurationKeyAndValues.Add(projectconfigurationkeyandvalue);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectconfigurationkeyandvalue).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectConfigurationKeyAndValueCreated(projectconfigurationkeyandvalue);

            return projectconfigurationkeyandvalue;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> CancelProjectConfigurationKeyAndValueChanges(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectConfigurationKeyAndValueUpdated(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);
        partial void OnAfterProjectConfigurationKeyAndValueUpdated(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> UpdateProjectConfigurationKeyAndValue(int id, ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue projectconfigurationkeyandvalue)
        {
            OnProjectConfigurationKeyAndValueUpdated(projectconfigurationkeyandvalue);

            var itemToUpdate = Context.ProjectConfigurationKeyAndValues
                              .Where(i => i.Id == projectconfigurationkeyandvalue.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectconfigurationkeyandvalue);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectConfigurationKeyAndValueUpdated(projectconfigurationkeyandvalue);

            return projectconfigurationkeyandvalue;
        }

        partial void OnProjectConfigurationKeyAndValueDeleted(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);
        partial void OnAfterProjectConfigurationKeyAndValueDeleted(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> DeleteProjectConfigurationKeyAndValue(int id)
        {
            var itemToDelete = Context.ProjectConfigurationKeyAndValues
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectConfigurationKeyAndValueDeleted(itemToDelete);


            Context.ProjectConfigurationKeyAndValues.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectConfigurationKeyAndValueDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectConfigurationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectConfigurationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectConfigurationsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>> GetProjectConfigurations(Query query = null)
        {
            var items = Context.ProjectConfigurations.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectConfigurationsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectConfigurationGet(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> GetProjectConfigurationById(int id)
        {
            var items = Context.ProjectConfigurations
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectConfigurationGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectConfigurationCreated(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);
        partial void OnAfterProjectConfigurationCreated(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> CreateProjectConfiguration(ZarenUI.Server.Models.JSONServer.ProjectConfiguration projectconfiguration)
        {
            OnProjectConfigurationCreated(projectconfiguration);

            var existingItem = Context.ProjectConfigurations
                              .Where(i => i.Id == projectconfiguration.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectConfigurations.Add(projectconfiguration);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectconfiguration).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectConfigurationCreated(projectconfiguration);

            return projectconfiguration;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> CancelProjectConfigurationChanges(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectConfigurationUpdated(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);
        partial void OnAfterProjectConfigurationUpdated(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> UpdateProjectConfiguration(int id, ZarenUI.Server.Models.JSONServer.ProjectConfiguration projectconfiguration)
        {
            OnProjectConfigurationUpdated(projectconfiguration);

            var itemToUpdate = Context.ProjectConfigurations
                              .Where(i => i.Id == projectconfiguration.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectconfiguration);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectConfigurationUpdated(projectconfiguration);

            return projectconfiguration;
        }

        partial void OnProjectConfigurationDeleted(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);
        partial void OnAfterProjectConfigurationDeleted(ZarenUI.Server.Models.JSONServer.ProjectConfiguration item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> DeleteProjectConfiguration(int id)
        {
            var itemToDelete = Context.ProjectConfigurations
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectConfigurationDeleted(itemToDelete);


            Context.ProjectConfigurations.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectConfigurationDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectFunctionGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectFunctionGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectFunctionGroupsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>> GetProjectFunctionGroups(Query query = null)
        {
            var items = Context.ProjectFunctionGroups.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectFunctionGroupsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectFunctionGroupGet(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> GetProjectFunctionGroupById(int id)
        {
            var items = Context.ProjectFunctionGroups
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectFunctionGroupGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectFunctionGroupCreated(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);
        partial void OnAfterProjectFunctionGroupCreated(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> CreateProjectFunctionGroup(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup projectfunctiongroup)
        {
            OnProjectFunctionGroupCreated(projectfunctiongroup);

            var existingItem = Context.ProjectFunctionGroups
                              .Where(i => i.Id == projectfunctiongroup.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectFunctionGroups.Add(projectfunctiongroup);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectfunctiongroup).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectFunctionGroupCreated(projectfunctiongroup);

            return projectfunctiongroup;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> CancelProjectFunctionGroupChanges(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectFunctionGroupUpdated(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);
        partial void OnAfterProjectFunctionGroupUpdated(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> UpdateProjectFunctionGroup(int id, ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup projectfunctiongroup)
        {
            OnProjectFunctionGroupUpdated(projectfunctiongroup);

            var itemToUpdate = Context.ProjectFunctionGroups
                              .Where(i => i.Id == projectfunctiongroup.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectfunctiongroup);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectFunctionGroupUpdated(projectfunctiongroup);

            return projectfunctiongroup;
        }

        partial void OnProjectFunctionGroupDeleted(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);
        partial void OnAfterProjectFunctionGroupDeleted(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> DeleteProjectFunctionGroup(int id)
        {
            var itemToDelete = Context.ProjectFunctionGroups
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectFunctionGroupDeleted(itemToDelete);


            Context.ProjectFunctionGroups.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectFunctionGroupDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectFunctionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectFunctionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectFunctionsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunction> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunction>> GetProjectFunctions(Query query = null)
        {
            var items = Context.ProjectFunctions.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectFunctionsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectFunctionGet(ZarenUI.Server.Models.JSONServer.ProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> GetProjectFunctionById(int id)
        {
            var items = Context.ProjectFunctions
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectFunctionGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectFunctionCreated(ZarenUI.Server.Models.JSONServer.ProjectFunction item);
        partial void OnAfterProjectFunctionCreated(ZarenUI.Server.Models.JSONServer.ProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> CreateProjectFunction(ZarenUI.Server.Models.JSONServer.ProjectFunction projectfunction)
        {
            OnProjectFunctionCreated(projectfunction);

            var existingItem = Context.ProjectFunctions
                              .Where(i => i.Id == projectfunction.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectFunctions.Add(projectfunction);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectfunction).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectFunctionCreated(projectfunction);

            return projectfunction;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> CancelProjectFunctionChanges(ZarenUI.Server.Models.JSONServer.ProjectFunction item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectFunctionUpdated(ZarenUI.Server.Models.JSONServer.ProjectFunction item);
        partial void OnAfterProjectFunctionUpdated(ZarenUI.Server.Models.JSONServer.ProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> UpdateProjectFunction(int id, ZarenUI.Server.Models.JSONServer.ProjectFunction projectfunction)
        {
            OnProjectFunctionUpdated(projectfunction);

            var itemToUpdate = Context.ProjectFunctions
                              .Where(i => i.Id == projectfunction.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectfunction);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectFunctionUpdated(projectfunction);

            return projectfunction;
        }

        partial void OnProjectFunctionDeleted(ZarenUI.Server.Models.JSONServer.ProjectFunction item);
        partial void OnAfterProjectFunctionDeleted(ZarenUI.Server.Models.JSONServer.ProjectFunction item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> DeleteProjectFunction(int id)
        {
            var itemToDelete = Context.ProjectFunctions
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectFunctionDeleted(itemToDelete);


            Context.ProjectFunctions.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectFunctionDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectPageComponentElementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectPageComponentElementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectPageComponentElementsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>> GetProjectPageComponentElements(Query query = null)
        {
            var items = Context.ProjectPageComponentElements.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectPageComponentElementsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectPageComponentElementGet(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> GetProjectPageComponentElementById(int id)
        {
            var items = Context.ProjectPageComponentElements
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectPageComponentElementGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectPageComponentElementCreated(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);
        partial void OnAfterProjectPageComponentElementCreated(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> CreateProjectPageComponentElement(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement projectpagecomponentelement)
        {
            OnProjectPageComponentElementCreated(projectpagecomponentelement);

            var existingItem = Context.ProjectPageComponentElements
                              .Where(i => i.Id == projectpagecomponentelement.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectPageComponentElements.Add(projectpagecomponentelement);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectpagecomponentelement).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectPageComponentElementCreated(projectpagecomponentelement);

            return projectpagecomponentelement;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> CancelProjectPageComponentElementChanges(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectPageComponentElementUpdated(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);
        partial void OnAfterProjectPageComponentElementUpdated(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> UpdateProjectPageComponentElement(int id, ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement projectpagecomponentelement)
        {
            OnProjectPageComponentElementUpdated(projectpagecomponentelement);

            var itemToUpdate = Context.ProjectPageComponentElements
                              .Where(i => i.Id == projectpagecomponentelement.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectpagecomponentelement);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectPageComponentElementUpdated(projectpagecomponentelement);

            return projectpagecomponentelement;
        }

        partial void OnProjectPageComponentElementDeleted(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);
        partial void OnAfterProjectPageComponentElementDeleted(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> DeleteProjectPageComponentElement(int id)
        {
            var itemToDelete = Context.ProjectPageComponentElements
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectPageComponentElementDeleted(itemToDelete);


            Context.ProjectPageComponentElements.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectPageComponentElementDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectPageComponentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectPageComponentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectPageComponentsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>> GetProjectPageComponents(Query query = null)
        {
            var items = Context.ProjectPageComponents.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectPageComponentsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectPageComponentGet(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> GetProjectPageComponentById(int id)
        {
            var items = Context.ProjectPageComponents
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectPageComponentGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectPageComponentCreated(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);
        partial void OnAfterProjectPageComponentCreated(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> CreateProjectPageComponent(ZarenUI.Server.Models.JSONServer.ProjectPageComponent projectpagecomponent)
        {
            OnProjectPageComponentCreated(projectpagecomponent);

            var existingItem = Context.ProjectPageComponents
                              .Where(i => i.Id == projectpagecomponent.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectPageComponents.Add(projectpagecomponent);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectpagecomponent).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectPageComponentCreated(projectpagecomponent);

            return projectpagecomponent;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> CancelProjectPageComponentChanges(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectPageComponentUpdated(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);
        partial void OnAfterProjectPageComponentUpdated(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> UpdateProjectPageComponent(int id, ZarenUI.Server.Models.JSONServer.ProjectPageComponent projectpagecomponent)
        {
            OnProjectPageComponentUpdated(projectpagecomponent);

            var itemToUpdate = Context.ProjectPageComponents
                              .Where(i => i.Id == projectpagecomponent.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectpagecomponent);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectPageComponentUpdated(projectpagecomponent);

            return projectpagecomponent;
        }

        partial void OnProjectPageComponentDeleted(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);
        partial void OnAfterProjectPageComponentDeleted(ZarenUI.Server.Models.JSONServer.ProjectPageComponent item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> DeleteProjectPageComponent(int id)
        {
            var itemToDelete = Context.ProjectPageComponents
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectPageComponentDeleted(itemToDelete);


            Context.ProjectPageComponents.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectPageComponentDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectPagesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPage> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPage>> GetProjectPages(Query query = null)
        {
            var items = Context.ProjectPages.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectPagesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectPageGet(ZarenUI.Server.Models.JSONServer.ProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> GetProjectPageById(int id)
        {
            var items = Context.ProjectPages
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectPageGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectPageCreated(ZarenUI.Server.Models.JSONServer.ProjectPage item);
        partial void OnAfterProjectPageCreated(ZarenUI.Server.Models.JSONServer.ProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> CreateProjectPage(ZarenUI.Server.Models.JSONServer.ProjectPage projectpage)
        {
            OnProjectPageCreated(projectpage);

            var existingItem = Context.ProjectPages
                              .Where(i => i.Id == projectpage.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectPages.Add(projectpage);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projectpage).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectPageCreated(projectpage);

            return projectpage;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> CancelProjectPageChanges(ZarenUI.Server.Models.JSONServer.ProjectPage item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectPageUpdated(ZarenUI.Server.Models.JSONServer.ProjectPage item);
        partial void OnAfterProjectPageUpdated(ZarenUI.Server.Models.JSONServer.ProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> UpdateProjectPage(int id, ZarenUI.Server.Models.JSONServer.ProjectPage projectpage)
        {
            OnProjectPageUpdated(projectpage);

            var itemToUpdate = Context.ProjectPages
                              .Where(i => i.Id == projectpage.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projectpage);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectPageUpdated(projectpage);

            return projectpage;
        }

        partial void OnProjectPageDeleted(ZarenUI.Server.Models.JSONServer.ProjectPage item);
        partial void OnAfterProjectPageDeleted(ZarenUI.Server.Models.JSONServer.ProjectPage item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> DeleteProjectPage(int id)
        {
            var itemToDelete = Context.ProjectPages
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectPageDeleted(itemToDelete);


            Context.ProjectPages.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectPageDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Project> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Project>> GetProjects(Query query = null)
        {
            var items = Context.Projects.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectGet(ZarenUI.Server.Models.JSONServer.Project item);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> GetProjectById(int id)
        {
            var items = Context.Projects
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectCreated(ZarenUI.Server.Models.JSONServer.Project item);
        partial void OnAfterProjectCreated(ZarenUI.Server.Models.JSONServer.Project item);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> CreateProject(ZarenUI.Server.Models.JSONServer.Project project)
        {
            OnProjectCreated(project);

            var existingItem = Context.Projects
                              .Where(i => i.Id == project.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Projects.Add(project);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(project).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectCreated(project);

            return project;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Project> CancelProjectChanges(ZarenUI.Server.Models.JSONServer.Project item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectUpdated(ZarenUI.Server.Models.JSONServer.Project item);
        partial void OnAfterProjectUpdated(ZarenUI.Server.Models.JSONServer.Project item);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> UpdateProject(int id, ZarenUI.Server.Models.JSONServer.Project project)
        {
            OnProjectUpdated(project);

            var itemToUpdate = Context.Projects
                              .Where(i => i.Id == project.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(project);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectUpdated(project);

            return project;
        }

        partial void OnProjectDeleted(ZarenUI.Server.Models.JSONServer.Project item);
        partial void OnAfterProjectDeleted(ZarenUI.Server.Models.JSONServer.Project item);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> DeleteProject(int id)
        {
            var itemToDelete = Context.Projects
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectDeleted(itemToDelete);


            Context.Projects.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectTableColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectTableColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectTableColumnsRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>> GetProjectTableColumns(Query query = null)
        {
            var items = Context.ProjectTableColumns.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectTableColumnsRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectTableColumnGet(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> GetProjectTableColumnById(int id)
        {
            var items = Context.ProjectTableColumns
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectTableColumnGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectTableColumnCreated(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);
        partial void OnAfterProjectTableColumnCreated(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> CreateProjectTableColumn(ZarenUI.Server.Models.JSONServer.ProjectTableColumn projecttablecolumn)
        {
            OnProjectTableColumnCreated(projecttablecolumn);

            var existingItem = Context.ProjectTableColumns
                              .Where(i => i.Id == projecttablecolumn.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectTableColumns.Add(projecttablecolumn);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projecttablecolumn).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectTableColumnCreated(projecttablecolumn);

            return projecttablecolumn;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> CancelProjectTableColumnChanges(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectTableColumnUpdated(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);
        partial void OnAfterProjectTableColumnUpdated(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> UpdateProjectTableColumn(int id, ZarenUI.Server.Models.JSONServer.ProjectTableColumn projecttablecolumn)
        {
            OnProjectTableColumnUpdated(projecttablecolumn);

            var itemToUpdate = Context.ProjectTableColumns
                              .Where(i => i.Id == projecttablecolumn.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projecttablecolumn);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectTableColumnUpdated(projecttablecolumn);

            return projecttablecolumn;
        }

        partial void OnProjectTableColumnDeleted(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);
        partial void OnAfterProjectTableColumnDeleted(ZarenUI.Server.Models.JSONServer.ProjectTableColumn item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> DeleteProjectTableColumn(int id)
        {
            var itemToDelete = Context.ProjectTableColumns
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectTableColumnDeleted(itemToDelete);


            Context.ProjectTableColumns.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectTableColumnDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportProjectTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportProjectTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnProjectTablesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTable> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTable>> GetProjectTables(Query query = null)
        {
            var items = Context.ProjectTables.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnProjectTablesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnProjectTableGet(ZarenUI.Server.Models.JSONServer.ProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> GetProjectTableById(int id)
        {
            var items = Context.ProjectTables
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnProjectTableGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnProjectTableCreated(ZarenUI.Server.Models.JSONServer.ProjectTable item);
        partial void OnAfterProjectTableCreated(ZarenUI.Server.Models.JSONServer.ProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> CreateProjectTable(ZarenUI.Server.Models.JSONServer.ProjectTable projecttable)
        {
            OnProjectTableCreated(projecttable);

            var existingItem = Context.ProjectTables
                              .Where(i => i.Id == projecttable.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ProjectTables.Add(projecttable);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(projecttable).State = EntityState.Detached;
                throw;
            }

            OnAfterProjectTableCreated(projecttable);

            return projecttable;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> CancelProjectTableChanges(ZarenUI.Server.Models.JSONServer.ProjectTable item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnProjectTableUpdated(ZarenUI.Server.Models.JSONServer.ProjectTable item);
        partial void OnAfterProjectTableUpdated(ZarenUI.Server.Models.JSONServer.ProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> UpdateProjectTable(int id, ZarenUI.Server.Models.JSONServer.ProjectTable projecttable)
        {
            OnProjectTableUpdated(projecttable);

            var itemToUpdate = Context.ProjectTables
                              .Where(i => i.Id == projecttable.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(projecttable);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterProjectTableUpdated(projecttable);

            return projecttable;
        }

        partial void OnProjectTableDeleted(ZarenUI.Server.Models.JSONServer.ProjectTable item);
        partial void OnAfterProjectTableDeleted(ZarenUI.Server.Models.JSONServer.ProjectTable item);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> DeleteProjectTable(int id)
        {
            var itemToDelete = Context.ProjectTables
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnProjectTableDeleted(itemToDelete);


            Context.ProjectTables.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterProjectTableDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportReferenceWebSitesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportReferenceWebSitesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnReferenceWebSitesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>> GetReferenceWebSites(Query query = null)
        {
            var items = Context.ReferenceWebSites.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnReferenceWebSitesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnReferenceWebSiteGet(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> GetReferenceWebSiteById(int id)
        {
            var items = Context.ReferenceWebSites
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnReferenceWebSiteGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnReferenceWebSiteCreated(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);
        partial void OnAfterReferenceWebSiteCreated(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> CreateReferenceWebSite(ZarenUI.Server.Models.JSONServer.ReferenceWebSite referencewebsite)
        {
            OnReferenceWebSiteCreated(referencewebsite);

            var existingItem = Context.ReferenceWebSites
                              .Where(i => i.Id == referencewebsite.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.ReferenceWebSites.Add(referencewebsite);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(referencewebsite).State = EntityState.Detached;
                throw;
            }

            OnAfterReferenceWebSiteCreated(referencewebsite);

            return referencewebsite;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> CancelReferenceWebSiteChanges(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnReferenceWebSiteUpdated(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);
        partial void OnAfterReferenceWebSiteUpdated(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> UpdateReferenceWebSite(int id, ZarenUI.Server.Models.JSONServer.ReferenceWebSite referencewebsite)
        {
            OnReferenceWebSiteUpdated(referencewebsite);

            var itemToUpdate = Context.ReferenceWebSites
                              .Where(i => i.Id == referencewebsite.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(referencewebsite);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterReferenceWebSiteUpdated(referencewebsite);

            return referencewebsite;
        }

        partial void OnReferenceWebSiteDeleted(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);
        partial void OnAfterReferenceWebSiteDeleted(ZarenUI.Server.Models.JSONServer.ReferenceWebSite item);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> DeleteReferenceWebSite(int id)
        {
            var itemToDelete = Context.ReferenceWebSites
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnReferenceWebSiteDeleted(itemToDelete);


            Context.ReferenceWebSites.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterReferenceWebSiteDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnSchemesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Scheme> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Scheme>> GetSchemes(Query query = null)
        {
            var items = Context.Schemes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnSchemesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnSchemeGet(ZarenUI.Server.Models.JSONServer.Scheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> GetSchemeById(long id)
        {
            var items = Context.Schemes
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnSchemeGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnSchemeCreated(ZarenUI.Server.Models.JSONServer.Scheme item);
        partial void OnAfterSchemeCreated(ZarenUI.Server.Models.JSONServer.Scheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> CreateScheme(ZarenUI.Server.Models.JSONServer.Scheme scheme)
        {
            OnSchemeCreated(scheme);

            var existingItem = Context.Schemes
                              .Where(i => i.Id == scheme.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Schemes.Add(scheme);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(scheme).State = EntityState.Detached;
                throw;
            }

            OnAfterSchemeCreated(scheme);

            return scheme;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> CancelSchemeChanges(ZarenUI.Server.Models.JSONServer.Scheme item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnSchemeUpdated(ZarenUI.Server.Models.JSONServer.Scheme item);
        partial void OnAfterSchemeUpdated(ZarenUI.Server.Models.JSONServer.Scheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> UpdateScheme(long id, ZarenUI.Server.Models.JSONServer.Scheme scheme)
        {
            OnSchemeUpdated(scheme);

            var itemToUpdate = Context.Schemes
                              .Where(i => i.Id == scheme.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(scheme);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterSchemeUpdated(scheme);

            return scheme;
        }

        partial void OnSchemeDeleted(ZarenUI.Server.Models.JSONServer.Scheme item);
        partial void OnAfterSchemeDeleted(ZarenUI.Server.Models.JSONServer.Scheme item);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> DeleteScheme(long id)
        {
            var itemToDelete = Context.Schemes
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnSchemeDeleted(itemToDelete);


            Context.Schemes.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterSchemeDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnTablesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.Table> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.Table>> GetTables(Query query = null)
        {
            var items = Context.Tables.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnTablesRead(ref items);

            return await Task.FromResult(items);
        }

        partial void OnTableGet(ZarenUI.Server.Models.JSONServer.Table item);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> GetTableById(long id)
        {
            var items = Context.Tables
                              .AsNoTracking()
                              .Where(i => i.Id == id);

  
            var itemToReturn = items.FirstOrDefault();

            OnTableGet(itemToReturn);

            return await Task.FromResult(itemToReturn);
        }

        partial void OnTableCreated(ZarenUI.Server.Models.JSONServer.Table item);
        partial void OnAfterTableCreated(ZarenUI.Server.Models.JSONServer.Table item);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> CreateTable(ZarenUI.Server.Models.JSONServer.Table table)
        {
            OnTableCreated(table);

            var existingItem = Context.Tables
                              .Where(i => i.Id == table.Id)
                              .FirstOrDefault();

            if (existingItem != null)
            {
               throw new Exception("Item already available");
            }            

            try
            {
                Context.Tables.Add(table);
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(table).State = EntityState.Detached;
                throw;
            }

            OnAfterTableCreated(table);

            return table;
        }

        public async Task<ZarenUI.Server.Models.JSONServer.Table> CancelTableChanges(ZarenUI.Server.Models.JSONServer.Table item)
        {
            var entityToCancel = Context.Entry(item);
            if (entityToCancel.State == EntityState.Modified)
            {
              entityToCancel.CurrentValues.SetValues(entityToCancel.OriginalValues);
              entityToCancel.State = EntityState.Unchanged;
            }

            return item;
        }

        partial void OnTableUpdated(ZarenUI.Server.Models.JSONServer.Table item);
        partial void OnAfterTableUpdated(ZarenUI.Server.Models.JSONServer.Table item);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> UpdateTable(long id, ZarenUI.Server.Models.JSONServer.Table table)
        {
            OnTableUpdated(table);

            var itemToUpdate = Context.Tables
                              .Where(i => i.Id == table.Id)
                              .FirstOrDefault();

            if (itemToUpdate == null)
            {
               throw new Exception("Item no longer available");
            }
                
            var entryToUpdate = Context.Entry(itemToUpdate);
            entryToUpdate.CurrentValues.SetValues(table);
            entryToUpdate.State = EntityState.Modified;

            Context.SaveChanges();

            OnAfterTableUpdated(table);

            return table;
        }

        partial void OnTableDeleted(ZarenUI.Server.Models.JSONServer.Table item);
        partial void OnAfterTableDeleted(ZarenUI.Server.Models.JSONServer.Table item);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> DeleteTable(long id)
        {
            var itemToDelete = Context.Tables
                              .Where(i => i.Id == id)
                              .FirstOrDefault();

            if (itemToDelete == null)
            {
               throw new Exception("Item no longer available");
            }

            OnTableDeleted(itemToDelete);


            Context.Tables.Remove(itemToDelete);

            try
            {
                Context.SaveChanges();
            }
            catch
            {
                Context.Entry(itemToDelete).State = EntityState.Unchanged;
                throw;
            }

            OnAfterTableDeleted(itemToDelete);

            return itemToDelete;
        }
    
        public async Task ExportDesignSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async Task ExportDesignSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnDesignSchemesRead(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignScheme> items);

        public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignScheme>> GetDesignSchemes(Query query = null)
        {
            var items = Context.DesignSchemes.AsQueryable();

            if (query != null)
            {
                if (!string.IsNullOrEmpty(query.Expand))
                {
                    var propertiesToExpand = query.Expand.Split(',');
                    foreach(var p in propertiesToExpand)
                    {
                        items = items.Include(p.Trim());
                    }
                }

                if (!string.IsNullOrEmpty(query.Filter))
                {
                    if (query.FilterParameters != null)
                    {
                        items = items.Where(query.Filter, query.FilterParameters);
                    }
                    else
                    {
                        items = items.Where(query.Filter);
                    }
                }

                if (!string.IsNullOrEmpty(query.OrderBy))
                {
                    items = items.OrderBy(query.OrderBy);
                }

                if (query.Skip.HasValue)
                {
                    items = items.Skip(query.Skip.Value);
                }

                if (query.Top.HasValue)
                {
                    items = items.Take(query.Top.Value);
                }
            }

            OnDesignSchemesRead(ref items);

            return await Task.FromResult(items);
        }

      public async Task ExportColorGroupsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetAll>> GetColorGroupsGetAlls(Query query = null)
      {
          OnColorGroupsGetAllsDefaultParams();

          var items = Context.ColorGroupsGetAlls.FromSqlRaw("EXEC [dbo].[ColorGroupsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetAllsDefaultParams();

      partial void OnColorGroupsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetAll> items);  

      public async Task ExportColorGroupsGetByBrightnessValuesToExcel(double? BrightnessValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbybrightnessvalues/excel(BrightnessValue={BrightnessValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbybrightnessvalues/excel(BrightnessValue={BrightnessValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByBrightnessValuesToCSV(double? BrightnessValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbybrightnessvalues/csv(BrightnessValue={BrightnessValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbybrightnessvalues/csv(BrightnessValue={BrightnessValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByBrightnessValue>> GetColorGroupsGetByBrightnessValues(double? BrightnessValue, Query query = null)
      {
          OnColorGroupsGetByBrightnessValuesDefaultParams(ref BrightnessValue);

          var items = Context.ColorGroupsGetByBrightnessValues.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByBrightnessValue] @BrightnessValue={0}", BrightnessValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByBrightnessValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByBrightnessValuesDefaultParams(ref double? BrightnessValue);

      partial void OnColorGroupsGetByBrightnessValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByBrightnessValue> items);  

      public async Task ExportColorGroupsGetByGroupListsToExcel(string GroupList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbygrouplists/excel(GroupList='{GroupList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbygrouplists/excel(GroupList='{GroupList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByGroupListsToCSV(string GroupList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbygrouplists/csv(GroupList='{GroupList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbygrouplists/csv(GroupList='{GroupList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByGroupList>> GetColorGroupsGetByGroupLists(string GroupList, Query query = null)
      {
          OnColorGroupsGetByGroupListsDefaultParams(ref GroupList);

          var items = Context.ColorGroupsGetByGroupLists.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByGroupList] @GroupList={0}", GroupList).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByGroupListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByGroupListsDefaultParams(ref string GroupList);

      partial void OnColorGroupsGetByGroupListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByGroupList> items);  

      public async Task ExportColorGroupsGetByHexCodesToExcel(string HexCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyhexcodes/excel(HexCode='{HexCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyhexcodes/excel(HexCode='{HexCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByHexCodesToCSV(string HexCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyhexcodes/csv(HexCode='{HexCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyhexcodes/csv(HexCode='{HexCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByHexCode>> GetColorGroupsGetByHexCodes(string HexCode, Query query = null)
      {
          OnColorGroupsGetByHexCodesDefaultParams(ref HexCode);

          var items = Context.ColorGroupsGetByHexCodes.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByHexCode] @HexCode={0}", HexCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByHexCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByHexCodesDefaultParams(ref string HexCode);

      partial void OnColorGroupsGetByHexCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByHexCode> items);  

      public async Task ExportColorGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetById>> GetColorGroupsGetByIds(int? Id, Query query = null)
      {
          OnColorGroupsGetByIdsDefaultParams(ref Id);

          var items = Context.ColorGroupsGetByIds.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByIdsDefaultParams(ref int? Id);

      partial void OnColorGroupsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetById> items);  

      public async Task ExportColorGroupsGetByIsDarksToExcel(bool? IsDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyisdarks/excel(IsDark={IsDark}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyisdarks/excel(IsDark={IsDark}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByIsDarksToCSV(bool? IsDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyisdarks/csv(IsDark={IsDark}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyisdarks/csv(IsDark={IsDark}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByIsDark>> GetColorGroupsGetByIsDarks(bool? IsDark, Query query = null)
      {
          OnColorGroupsGetByIsDarksDefaultParams(ref IsDark);

          var items = Context.ColorGroupsGetByIsDarks.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByIsDark] @IsDark={0}", IsDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByIsDarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByIsDarksDefaultParams(ref bool? IsDark);

      partial void OnColorGroupsGetByIsDarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByIsDark> items);  

      public async Task ExportColorGroupsGetByPossibleNamesToExcel(string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbypossiblenames/excel(PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbypossiblenames/excel(PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByPossibleNamesToCSV(string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbypossiblenames/csv(PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbypossiblenames/csv(PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByPossibleName>> GetColorGroupsGetByPossibleNames(string PossibleName, Query query = null)
      {
          OnColorGroupsGetByPossibleNamesDefaultParams(ref PossibleName);

          var items = Context.ColorGroupsGetByPossibleNames.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByPossibleName] @PossibleName={0}", PossibleName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByPossibleNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByPossibleNamesDefaultParams(ref string PossibleName);

      partial void OnColorGroupsGetByPossibleNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByPossibleName> items);  

      public async Task ExportColorGroupsGetByRgbCodesToExcel(string RGBCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyrgbcodes/excel(RGBCode='{RGBCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyrgbcodes/excel(RGBCode='{RGBCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsGetByRgbCodesToCSV(string RGBCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyrgbcodes/csv(RGBCode='{RGBCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyrgbcodes/csv(RGBCode='{RGBCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByRgbCode>> GetColorGroupsGetByRgbCodes(string RGBCode, Query query = null)
      {
          OnColorGroupsGetByRgbCodesDefaultParams(ref RGBCode);

          var items = Context.ColorGroupsGetByRgbCodes.FromSqlRaw("EXEC [dbo].[ColorGroupsGetByRGBCode] @RGBCode={0}", RGBCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsGetByRgbCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsGetByRgbCodesDefaultParams(ref string RGBCode);

      partial void OnColorGroupsGetByRgbCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByRgbCode> items);  

      public async Task ExportColorGroupsInsertsToExcel(string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsinserts/excel(HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsinserts/excel(HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsInsertsToCSV(string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsinserts/csv(HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsinserts/csv(HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsInsert>> GetColorGroupsInserts(string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null)
      {
          OnColorGroupsInsertsDefaultParams(ref HexCode, ref RGBCode, ref GroupList, ref BrightnessValue, ref IsDark, ref PossibleName);

          var items = Context.ColorGroupsInserts.FromSqlRaw("EXEC [dbo].[ColorGroupsInsert] @HexCode={0}, @RGBCode={1}, @GroupList={2}, @BrightnessValue={3}, @IsDark={4}, @PossibleName={5}", HexCode, RGBCode, GroupList, BrightnessValue, IsDark, PossibleName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsInsertsDefaultParams(ref string HexCode, ref string RGBCode, ref string GroupList, ref double? BrightnessValue, ref bool? IsDark, ref string PossibleName);

      partial void OnColorGroupsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsInsert> items);  

      public async Task ExportColorGroupsUpdatesToExcel(int? Id, string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsupdates/excel(Id={Id}, HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsupdates/excel(Id={Id}, HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportColorGroupsUpdatesToCSV(int? Id, string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsupdates/csv(Id={Id}, HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsupdates/csv(Id={Id}, HexCode='{HexCode}', RGBCode='{RGBCode}', GroupList='{GroupList}', BrightnessValue={BrightnessValue}, IsDark={IsDark}, PossibleName='{PossibleName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsUpdate>> GetColorGroupsUpdates(int? Id, string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null)
      {
          OnColorGroupsUpdatesDefaultParams(ref Id, ref HexCode, ref RGBCode, ref GroupList, ref BrightnessValue, ref IsDark, ref PossibleName);

          var items = Context.ColorGroupsUpdates.FromSqlRaw("EXEC [dbo].[ColorGroupsUpdate] @Id={0}, @HexCode={1}, @RGBCode={2}, @GroupList={3}, @BrightnessValue={4}, @IsDark={5}, @PossibleName={6}", Id, HexCode, RGBCode, GroupList, BrightnessValue, IsDark, PossibleName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnColorGroupsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnColorGroupsUpdatesDefaultParams(ref int? Id, ref string HexCode, ref string RGBCode, ref string GroupList, ref double? BrightnessValue, ref bool? IsDark, ref string PossibleName);

      partial void OnColorGroupsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ColorGroupsUpdate> items);  

      public async Task ExportConstraintRulesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetAll>> GetConstraintRulesGetAlls(Query query = null)
      {
          OnConstraintRulesGetAllsDefaultParams();

          var items = Context.ConstraintRulesGetAlls.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetAllsDefaultParams();

      partial void OnConstraintRulesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetAll> items);  

      public async Task ExportConstraintRulesGetByAddWithChecksToExcel(string AddWithCheck, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithchecks/excel(AddWithCheck='{AddWithCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithchecks/excel(AddWithCheck='{AddWithCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByAddWithChecksToCSV(string AddWithCheck, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithchecks/csv(AddWithCheck='{AddWithCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithchecks/csv(AddWithCheck='{AddWithCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithCheck>> GetConstraintRulesGetByAddWithChecks(string AddWithCheck, Query query = null)
      {
          OnConstraintRulesGetByAddWithChecksDefaultParams(ref AddWithCheck);

          var items = Context.ConstraintRulesGetByAddWithChecks.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByAddWithCheck] @AddWithCheck={0}", AddWithCheck).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByAddWithChecksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByAddWithChecksDefaultParams(ref string AddWithCheck);

      partial void OnConstraintRulesGetByAddWithChecksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithCheck> items);  

      public async Task ExportConstraintRulesGetByAddWithNoChecksToExcel(string AddWithNoCheck, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithnochecks/excel(AddWithNoCheck='{AddWithNoCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithnochecks/excel(AddWithNoCheck='{AddWithNoCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByAddWithNoChecksToCSV(string AddWithNoCheck, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithnochecks/csv(AddWithNoCheck='{AddWithNoCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithnochecks/csv(AddWithNoCheck='{AddWithNoCheck}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithNoCheck>> GetConstraintRulesGetByAddWithNoChecks(string AddWithNoCheck, Query query = null)
      {
          OnConstraintRulesGetByAddWithNoChecksDefaultParams(ref AddWithNoCheck);

          var items = Context.ConstraintRulesGetByAddWithNoChecks.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByAddWithNoCheck] @AddWithNoCheck={0}", AddWithNoCheck).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByAddWithNoChecksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByAddWithNoChecksDefaultParams(ref string AddWithNoCheck);

      partial void OnConstraintRulesGetByAddWithNoChecksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithNoCheck> items);  

      public async Task ExportConstraintRulesGetByCheckConstraintsToExcel(string CheckConstraint, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycheckconstraints/excel(CheckConstraint='{CheckConstraint}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycheckconstraints/excel(CheckConstraint='{CheckConstraint}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByCheckConstraintsToCSV(string CheckConstraint, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycheckconstraints/csv(CheckConstraint='{CheckConstraint}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycheckconstraints/csv(CheckConstraint='{CheckConstraint}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByCheckConstraint>> GetConstraintRulesGetByCheckConstraints(string CheckConstraint, Query query = null)
      {
          OnConstraintRulesGetByCheckConstraintsDefaultParams(ref CheckConstraint);

          var items = Context.ConstraintRulesGetByCheckConstraints.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByCheckConstraint] @CheckConstraint={0}", CheckConstraint).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByCheckConstraintsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByCheckConstraintsDefaultParams(ref string CheckConstraint);

      partial void OnConstraintRulesGetByCheckConstraintsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByCheckConstraint> items);  

      public async Task ExportConstraintRulesGetByColumnIdsToExcel(long? ColumnId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycolumnids/excel(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycolumnids/excel(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByColumnIdsToCSV(long? ColumnId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycolumnids/csv(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycolumnids/csv(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByColumnId>> GetConstraintRulesGetByColumnIds(long? ColumnId, Query query = null)
      {
          OnConstraintRulesGetByColumnIdsDefaultParams(ref ColumnId);

          var items = Context.ConstraintRulesGetByColumnIds.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByColumnId] @ColumnId={0}", ColumnId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByColumnIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByColumnIdsDefaultParams(ref long? ColumnId);

      partial void OnConstraintRulesGetByColumnIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByColumnId> items);  

      public async Task ExportConstraintRulesGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByComment>> GetConstraintRulesGetByComments(string Comment, Query query = null)
      {
          OnConstraintRulesGetByCommentsDefaultParams(ref Comment);

          var items = Context.ConstraintRulesGetByComments.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByComment] @Comment={0}", Comment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByCommentsDefaultParams(ref string Comment);

      partial void OnConstraintRulesGetByCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByComment> items);  

      public async Task ExportConstraintRulesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetById>> GetConstraintRulesGetByIds(long? Id, Query query = null)
      {
          OnConstraintRulesGetByIdsDefaultParams(ref Id);

          var items = Context.ConstraintRulesGetByIds.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByIdsDefaultParams(ref long? Id);

      partial void OnConstraintRulesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetById> items);  

      public async Task ExportConstraintRulesGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByName>> GetConstraintRulesGetByNames(string Name, Query query = null)
      {
          OnConstraintRulesGetByNamesDefaultParams(ref Name);

          var items = Context.ConstraintRulesGetByNames.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByNamesDefaultParams(ref string Name);

      partial void OnConstraintRulesGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByName> items);  

      public async Task ExportConstraintRulesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectId>> GetConstraintRulesGetByProjectIds(long? ProjectId, Query query = null)
      {
          OnConstraintRulesGetByProjectIdsDefaultParams(ref ProjectId);

          var items = Context.ConstraintRulesGetByProjectIds.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByProjectId] @ProjectId={0}", ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByProjectIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByProjectIdsDefaultParams(ref long? ProjectId);

      partial void OnConstraintRulesGetByProjectIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectId> items);  

      public async Task ExportConstraintRulesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectName>> GetConstraintRulesGetByProjectNames(string ProjectName, Query query = null)
      {
          OnConstraintRulesGetByProjectNamesDefaultParams(ref ProjectName);

          var items = Context.ConstraintRulesGetByProjectNames.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByProjectName] @ProjectName={0}", ProjectName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByProjectNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByProjectNamesDefaultParams(ref string ProjectName);

      partial void OnConstraintRulesGetByProjectNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectName> items);  

      public async Task ExportConstraintRulesGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableId>> GetConstraintRulesGetByTableIds(long? TableId, Query query = null)
      {
          OnConstraintRulesGetByTableIdsDefaultParams(ref TableId);

          var items = Context.ConstraintRulesGetByTableIds.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByTableId] @TableId={0}", TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByTableIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByTableIdsDefaultParams(ref long? TableId);

      partial void OnConstraintRulesGetByTableIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableId> items);  

      public async Task ExportConstraintRulesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableName>> GetConstraintRulesGetByTableNames(string TableName, Query query = null)
      {
          OnConstraintRulesGetByTableNamesDefaultParams(ref TableName);

          var items = Context.ConstraintRulesGetByTableNames.FromSqlRaw("EXEC [dbo].[ConstraintRulesGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesGetByTableNamesDefaultParams(ref string TableName);

      partial void OnConstraintRulesGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableName> items);  

      public async Task ExportConstraintRulesInsertsToExcel(string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesinserts/excel(Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesinserts/excel(Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesInsertsToCSV(string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesinserts/csv(Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesinserts/csv(Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesInsert>> GetConstraintRulesInserts(string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null)
      {
          OnConstraintRulesInsertsDefaultParams(ref Name, ref Comment, ref CheckConstraint, ref AddWithCheck, ref AddWithNoCheck, ref ColumnId, ref TableName, ref ProjectName, ref TableId, ref ProjectId);

          var items = Context.ConstraintRulesInserts.FromSqlRaw("EXEC [dbo].[ConstraintRulesInsert] @Name={0}, @Comment={1}, @CheckConstraint={2}, @AddWithCheck={3}, @AddWithNoCheck={4}, @ColumnId={5}, @TableName={6}, @ProjectName={7}, @TableId={8}, @ProjectId={9}", Name, Comment, CheckConstraint, AddWithCheck, AddWithNoCheck, ColumnId, TableName, ProjectName, TableId, ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesInsertsDefaultParams(ref string Name, ref string Comment, ref string CheckConstraint, ref string AddWithCheck, ref string AddWithNoCheck, ref long? ColumnId, ref string TableName, ref string ProjectName, ref long? TableId, ref long? ProjectId);

      partial void OnConstraintRulesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesInsert> items);  

      public async Task ExportConstraintRulesUpdatesToExcel(long? Id, string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesupdates/excel(Id={Id}, Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesupdates/excel(Id={Id}, Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportConstraintRulesUpdatesToCSV(long? Id, string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesupdates/csv(Id={Id}, Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesupdates/csv(Id={Id}, Name='{Name}', Comment='{Comment}', CheckConstraint='{CheckConstraint}', AddWithCheck='{AddWithCheck}', AddWithNoCheck='{AddWithNoCheck}', ColumnId={ColumnId}, TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesUpdate>> GetConstraintRulesUpdates(long? Id, string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null)
      {
          OnConstraintRulesUpdatesDefaultParams(ref Id, ref Name, ref Comment, ref CheckConstraint, ref AddWithCheck, ref AddWithNoCheck, ref ColumnId, ref TableName, ref ProjectName, ref TableId, ref ProjectId);

          var items = Context.ConstraintRulesUpdates.FromSqlRaw("EXEC [dbo].[ConstraintRulesUpdate] @Id={0}, @Name={1}, @Comment={2}, @CheckConstraint={3}, @AddWithCheck={4}, @AddWithNoCheck={5}, @ColumnId={6}, @TableName={7}, @ProjectName={8}, @TableId={9}, @ProjectId={10}", Id, Name, Comment, CheckConstraint, AddWithCheck, AddWithNoCheck, ColumnId, TableName, ProjectName, TableId, ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnConstraintRulesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnConstraintRulesUpdatesDefaultParams(ref long? Id, ref string Name, ref string Comment, ref string CheckConstraint, ref string AddWithCheck, ref string AddWithNoCheck, ref long? ColumnId, ref string TableName, ref string ProjectName, ref long? TableId, ref long? ProjectId);

      partial void OnConstraintRulesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ConstraintRulesUpdate> items);  

      public async Task ExportCountryGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetAll>> GetCountryGetAlls(Query query = null)
      {
          OnCountryGetAllsDefaultParams();

          var items = Context.CountryGetAlls.FromSqlRaw("EXEC [dbo].[CountryGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetAllsDefaultParams();

      partial void OnCountryGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetAll> items);  

      public async Task ExportCountryGetByAbbreviationsToExcel(string Abbreviation, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyabbreviations/excel(Abbreviation='{Abbreviation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyabbreviations/excel(Abbreviation='{Abbreviation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByAbbreviationsToCSV(string Abbreviation, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyabbreviations/csv(Abbreviation='{Abbreviation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyabbreviations/csv(Abbreviation='{Abbreviation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByAbbreviation>> GetCountryGetByAbbreviations(string Abbreviation, Query query = null)
      {
          OnCountryGetByAbbreviationsDefaultParams(ref Abbreviation);

          var items = Context.CountryGetByAbbreviations.FromSqlRaw("EXEC [dbo].[CountryGetByAbbreviation] @Abbreviation={0}", Abbreviation).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByAbbreviationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByAbbreviationsDefaultParams(ref string Abbreviation);

      partial void OnCountryGetByAbbreviationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByAbbreviation> items);  

      public async Task ExportCountryGetByAreasToExcel(string Area, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyareas/excel(Area='{Area}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyareas/excel(Area='{Area}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByAreasToCSV(string Area, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyareas/csv(Area='{Area}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyareas/csv(Area='{Area}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByArea>> GetCountryGetByAreas(string Area, Query query = null)
      {
          OnCountryGetByAreasDefaultParams(ref Area);

          var items = Context.CountryGetByAreas.FromSqlRaw("EXEC [dbo].[CountryGetByArea] @Area={0}", Area).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByAreasInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByAreasDefaultParams(ref string Area);

      partial void OnCountryGetByAreasInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByArea> items);  

      public async Task ExportCountryGetByBarcodesToExcel(string Barcode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbybarcodes/excel(Barcode='{Barcode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbybarcodes/excel(Barcode='{Barcode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByBarcodesToCSV(string Barcode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbybarcodes/csv(Barcode='{Barcode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbybarcodes/csv(Barcode='{Barcode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByBarcode>> GetCountryGetByBarcodes(string Barcode, Query query = null)
      {
          OnCountryGetByBarcodesDefaultParams(ref Barcode);

          var items = Context.CountryGetByBarcodes.FromSqlRaw("EXEC [dbo].[CountryGetByBarcode] @Barcode={0}", Barcode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByBarcodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByBarcodesDefaultParams(ref string Barcode);

      partial void OnCountryGetByBarcodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByBarcode> items);  

      public async Task ExportCountryGetByCallingCodesToExcel(string CallingCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycallingcodes/excel(CallingCode='{CallingCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycallingcodes/excel(CallingCode='{CallingCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByCallingCodesToCSV(string CallingCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycallingcodes/csv(CallingCode='{CallingCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycallingcodes/csv(CallingCode='{CallingCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCallingCode>> GetCountryGetByCallingCodes(string CallingCode, Query query = null)
      {
          OnCountryGetByCallingCodesDefaultParams(ref CallingCode);

          var items = Context.CountryGetByCallingCodes.FromSqlRaw("EXEC [dbo].[CountryGetByCallingCode] @CallingCode={0}", CallingCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByCallingCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByCallingCodesDefaultParams(ref string CallingCode);

      partial void OnCountryGetByCallingCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCallingCode> items);  

      public async Task ExportCountryGetByCitiesToExcel(string City, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycities/excel(City='{City}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycities/excel(City='{City}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByCitiesToCSV(string City, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycities/csv(City='{City}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycities/csv(City='{City}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCity>> GetCountryGetByCities(string City, Query query = null)
      {
          OnCountryGetByCitiesDefaultParams(ref City);

          var items = Context.CountryGetByCities.FromSqlRaw("EXEC [dbo].[CountryGetByCity] @City={0}", City).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByCitiesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByCitiesDefaultParams(ref string City);

      partial void OnCountryGetByCitiesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCity> items);  

      public async Task ExportCountryGetByContinentsToExcel(string Continent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycontinents/excel(Continent='{Continent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycontinents/excel(Continent='{Continent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByContinentsToCSV(string Continent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycontinents/csv(Continent='{Continent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycontinents/csv(Continent='{Continent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByContinent>> GetCountryGetByContinents(string Continent, Query query = null)
      {
          OnCountryGetByContinentsDefaultParams(ref Continent);

          var items = Context.CountryGetByContinents.FromSqlRaw("EXEC [dbo].[CountryGetByContinent] @Continent={0}", Continent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByContinentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByContinentsDefaultParams(ref string Continent);

      partial void OnCountryGetByContinentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByContinent> items);  

      public async Task ExportCountryGetByCostLinesToExcel(string CostLine, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycostlines/excel(CostLine='{CostLine}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycostlines/excel(CostLine='{CostLine}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByCostLinesToCSV(string CostLine, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycostlines/csv(CostLine='{CostLine}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycostlines/csv(CostLine='{CostLine}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCostLine>> GetCountryGetByCostLines(string CostLine, Query query = null)
      {
          OnCountryGetByCostLinesDefaultParams(ref CostLine);

          var items = Context.CountryGetByCostLines.FromSqlRaw("EXEC [dbo].[CountryGetByCostLine] @CostLine={0}", CostLine).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByCostLinesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByCostLinesDefaultParams(ref string CostLine);

      partial void OnCountryGetByCostLinesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCostLine> items);  

      public async Task ExportCountryGetByCurrencyCodesToExcel(string CurrencyCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencycodes/excel(CurrencyCode='{CurrencyCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencycodes/excel(CurrencyCode='{CurrencyCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByCurrencyCodesToCSV(string CurrencyCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencycodes/csv(CurrencyCode='{CurrencyCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencycodes/csv(CurrencyCode='{CurrencyCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyCode>> GetCountryGetByCurrencyCodes(string CurrencyCode, Query query = null)
      {
          OnCountryGetByCurrencyCodesDefaultParams(ref CurrencyCode);

          var items = Context.CountryGetByCurrencyCodes.FromSqlRaw("EXEC [dbo].[CountryGetByCurrencyCode] @CurrencyCode={0}", CurrencyCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByCurrencyCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByCurrencyCodesDefaultParams(ref string CurrencyCode);

      partial void OnCountryGetByCurrencyCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyCode> items);  

      public async Task ExportCountryGetByCurrencyNamesToExcel(string CurrencyName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencynames/excel(CurrencyName='{CurrencyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencynames/excel(CurrencyName='{CurrencyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByCurrencyNamesToCSV(string CurrencyName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencynames/csv(CurrencyName='{CurrencyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencynames/csv(CurrencyName='{CurrencyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyName>> GetCountryGetByCurrencyNames(string CurrencyName, Query query = null)
      {
          OnCountryGetByCurrencyNamesDefaultParams(ref CurrencyName);

          var items = Context.CountryGetByCurrencyNames.FromSqlRaw("EXEC [dbo].[CountryGetByCurrencyName] @CurrencyName={0}", CurrencyName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByCurrencyNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByCurrencyNamesDefaultParams(ref string CurrencyName);

      partial void OnCountryGetByCurrencyNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyName> items);  

      public async Task ExportCountryGetByDefaultLanguageIdsToExcel(int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydefaultlanguageids/excel(DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydefaultlanguageids/excel(DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByDefaultLanguageIdsToCSV(int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydefaultlanguageids/csv(DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydefaultlanguageids/csv(DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDefaultLanguageId>> GetCountryGetByDefaultLanguageIds(int? DefaultLanguageId, Query query = null)
      {
          OnCountryGetByDefaultLanguageIdsDefaultParams(ref DefaultLanguageId);

          var items = Context.CountryGetByDefaultLanguageIds.FromSqlRaw("EXEC [dbo].[CountryGetByDefaultLanguageId] @DefaultLanguageId={0}", DefaultLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByDefaultLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByDefaultLanguageIdsDefaultParams(ref int? DefaultLanguageId);

      partial void OnCountryGetByDefaultLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDefaultLanguageId> items);  

      public async Task ExportCountryGetByDensitiesToExcel(string Density, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydensities/excel(Density='{Density}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydensities/excel(Density='{Density}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByDensitiesToCSV(string Density, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydensities/csv(Density='{Density}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydensities/csv(Density='{Density}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDensity>> GetCountryGetByDensities(string Density, Query query = null)
      {
          OnCountryGetByDensitiesDefaultParams(ref Density);

          var items = Context.CountryGetByDensities.FromSqlRaw("EXEC [dbo].[CountryGetByDensity] @Density={0}", Density).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByDensitiesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByDensitiesDefaultParams(ref string Density);

      partial void OnCountryGetByDensitiesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDensity> items);  

      public async Task ExportCountryGetByDishesToExcel(string Dish, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydishes/excel(Dish='{Dish}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydishes/excel(Dish='{Dish}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByDishesToCSV(string Dish, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydishes/csv(Dish='{Dish}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydishes/csv(Dish='{Dish}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDish>> GetCountryGetByDishes(string Dish, Query query = null)
      {
          OnCountryGetByDishesDefaultParams(ref Dish);

          var items = Context.CountryGetByDishes.FromSqlRaw("EXEC [dbo].[CountryGetByDish] @Dish={0}", Dish).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByDishesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByDishesDefaultParams(ref string Dish);

      partial void OnCountryGetByDishesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDish> items);  

      public async Task ExportCountryGetByDomainTldsToExcel(string DomainTld, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydomaintlds/excel(DomainTld='{DomainTld}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydomaintlds/excel(DomainTld='{DomainTld}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByDomainTldsToCSV(string DomainTld, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydomaintlds/csv(DomainTld='{DomainTld}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydomaintlds/csv(DomainTld='{DomainTld}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDomainTld>> GetCountryGetByDomainTlds(string DomainTld, Query query = null)
      {
          OnCountryGetByDomainTldsDefaultParams(ref DomainTld);

          var items = Context.CountryGetByDomainTlds.FromSqlRaw("EXEC [dbo].[CountryGetByDomainTld] @DomainTld={0}", DomainTld).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByDomainTldsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByDomainTldsDefaultParams(ref string DomainTld);

      partial void OnCountryGetByDomainTldsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByDomainTld> items);  

      public async Task ExportCountryGetByEastsToExcel(string East, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyeasts/excel(East='{East}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyeasts/excel(East='{East}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByEastsToCSV(string East, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyeasts/csv(East='{East}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyeasts/csv(East='{East}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByEast>> GetCountryGetByEasts(string East, Query query = null)
      {
          OnCountryGetByEastsDefaultParams(ref East);

          var items = Context.CountryGetByEasts.FromSqlRaw("EXEC [dbo].[CountryGetByEast] @East={0}", East).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByEastsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByEastsDefaultParams(ref string East);

      partial void OnCountryGetByEastsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByEast> items);  

      public async Task ExportCountryGetByElevationsToExcel(string Elevation, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyelevations/excel(Elevation='{Elevation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyelevations/excel(Elevation='{Elevation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByElevationsToCSV(string Elevation, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyelevations/csv(Elevation='{Elevation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyelevations/csv(Elevation='{Elevation}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByElevation>> GetCountryGetByElevations(string Elevation, Query query = null)
      {
          OnCountryGetByElevationsDefaultParams(ref Elevation);

          var items = Context.CountryGetByElevations.FromSqlRaw("EXEC [dbo].[CountryGetByElevation] @Elevation={0}", Elevation).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByElevationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByElevationsDefaultParams(ref string Elevation);

      partial void OnCountryGetByElevationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByElevation> items);  

      public async Task ExportCountryGetByExpectanciesToExcel(string Expectancy, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyexpectancies/excel(Expectancy='{Expectancy}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyexpectancies/excel(Expectancy='{Expectancy}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByExpectanciesToCSV(string Expectancy, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyexpectancies/csv(Expectancy='{Expectancy}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyexpectancies/csv(Expectancy='{Expectancy}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByExpectancy>> GetCountryGetByExpectancies(string Expectancy, Query query = null)
      {
          OnCountryGetByExpectanciesDefaultParams(ref Expectancy);

          var items = Context.CountryGetByExpectancies.FromSqlRaw("EXEC [dbo].[CountryGetByExpectancy] @Expectancy={0}", Expectancy).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByExpectanciesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByExpectanciesDefaultParams(ref string Expectancy);

      partial void OnCountryGetByExpectanciesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByExpectancy> items);  

      public async Task ExportCountryGetByFlagBase64SToExcel(string FlagBase64, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyflagbase64s/excel(FlagBase64='{FlagBase64}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyflagbase64s/excel(FlagBase64='{FlagBase64}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByFlagBase64SToCSV(string FlagBase64, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyflagbase64s/csv(FlagBase64='{FlagBase64}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyflagbase64s/csv(FlagBase64='{FlagBase64}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByFlagBase64>> GetCountryGetByFlagBase64S(string FlagBase64, Query query = null)
      {
          OnCountryGetByFlagBase64SDefaultParams(ref FlagBase64);

          var items = Context.CountryGetByFlagBase64S.FromSqlRaw("EXEC [dbo].[CountryGetByFlagBase64] @FlagBase64={0}", FlagBase64).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByFlagBase64SInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByFlagBase64SDefaultParams(ref string FlagBase64);

      partial void OnCountryGetByFlagBase64SInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByFlagBase64> items);  

      public async Task ExportCountryGetByGovernmentsToExcel(string Government, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbygovernments/excel(Government='{Government}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbygovernments/excel(Government='{Government}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByGovernmentsToCSV(string Government, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbygovernments/csv(Government='{Government}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbygovernments/csv(Government='{Government}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByGovernment>> GetCountryGetByGovernments(string Government, Query query = null)
      {
          OnCountryGetByGovernmentsDefaultParams(ref Government);

          var items = Context.CountryGetByGovernments.FromSqlRaw("EXEC [dbo].[CountryGetByGovernment] @Government={0}", Government).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByGovernmentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByGovernmentsDefaultParams(ref string Government);

      partial void OnCountryGetByGovernmentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByGovernment> items);  

      public async Task ExportCountryGetByHeightsToExcel(string Height, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyheights/excel(Height='{Height}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyheights/excel(Height='{Height}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByHeightsToCSV(string Height, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyheights/csv(Height='{Height}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyheights/csv(Height='{Height}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByHeight>> GetCountryGetByHeights(string Height, Query query = null)
      {
          OnCountryGetByHeightsDefaultParams(ref Height);

          var items = Context.CountryGetByHeights.FromSqlRaw("EXEC [dbo].[CountryGetByHeight] @Height={0}", Height).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByHeightsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByHeightsDefaultParams(ref string Height);

      partial void OnCountryGetByHeightsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByHeight> items);  

      public async Task ExportCountryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetById>> GetCountryGetByIds(int? Id, Query query = null)
      {
          OnCountryGetByIdsDefaultParams(ref Id);

          var items = Context.CountryGetByIds.FromSqlRaw("EXEC [dbo].[CountryGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByIdsDefaultParams(ref int? Id);

      partial void OnCountryGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetById> items);  

      public async Task ExportCountryGetByIndependencesToExcel(string Independence, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyindependences/excel(Independence='{Independence}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyindependences/excel(Independence='{Independence}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByIndependencesToCSV(string Independence, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyindependences/csv(Independence='{Independence}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyindependences/csv(Independence='{Independence}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByIndependence>> GetCountryGetByIndependences(string Independence, Query query = null)
      {
          OnCountryGetByIndependencesDefaultParams(ref Independence);

          var items = Context.CountryGetByIndependences.FromSqlRaw("EXEC [dbo].[CountryGetByIndependence] @Independence={0}", Independence).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByIndependencesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByIndependencesDefaultParams(ref string Independence);

      partial void OnCountryGetByIndependencesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByIndependence> items);  

      public async Task ExportCountryGetByIsosToExcel(string Iso, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyisos/excel(Iso='{Iso}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyisos/excel(Iso='{Iso}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByIsosToCSV(string Iso, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyisos/csv(Iso='{Iso}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyisos/csv(Iso='{Iso}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByIso>> GetCountryGetByIsos(string Iso, Query query = null)
      {
          OnCountryGetByIsosDefaultParams(ref Iso);

          var items = Context.CountryGetByIsos.FromSqlRaw("EXEC [dbo].[CountryGetByIso] @Iso={0}", Iso).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByIsosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByIsosDefaultParams(ref string Iso);

      partial void OnCountryGetByIsosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByIso> items);  

      public async Task ExportCountryGetByLandlockedsToExcel(string Landlocked, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylandlockeds/excel(Landlocked='{Landlocked}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylandlockeds/excel(Landlocked='{Landlocked}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByLandlockedsToCSV(string Landlocked, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylandlockeds/csv(Landlocked='{Landlocked}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylandlockeds/csv(Landlocked='{Landlocked}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLandlocked>> GetCountryGetByLandlockeds(string Landlocked, Query query = null)
      {
          OnCountryGetByLandlockedsDefaultParams(ref Landlocked);

          var items = Context.CountryGetByLandlockeds.FromSqlRaw("EXEC [dbo].[CountryGetByLandlocked] @Landlocked={0}", Landlocked).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByLandlockedsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByLandlockedsDefaultParams(ref string Landlocked);

      partial void OnCountryGetByLandlockedsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLandlocked> items);  

      public async Task ExportCountryGetByLanguagesJsonsToExcel(string LanguagesJSON, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylanguagesjsons/excel(LanguagesJSON='{LanguagesJSON}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylanguagesjsons/excel(LanguagesJSON='{LanguagesJSON}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByLanguagesJsonsToCSV(string LanguagesJSON, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylanguagesjsons/csv(LanguagesJSON='{LanguagesJSON}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylanguagesjsons/csv(LanguagesJSON='{LanguagesJSON}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLanguagesJson>> GetCountryGetByLanguagesJsons(string LanguagesJSON, Query query = null)
      {
          OnCountryGetByLanguagesJsonsDefaultParams(ref LanguagesJSON);

          var items = Context.CountryGetByLanguagesJsons.FromSqlRaw("EXEC [dbo].[CountryGetByLanguagesJSON] @LanguagesJSON={0}", LanguagesJSON).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByLanguagesJsonsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByLanguagesJsonsDefaultParams(ref string LanguagesJSON);

      partial void OnCountryGetByLanguagesJsonsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLanguagesJson> items);  

      public async Task ExportCountryGetByLocationsToExcel(string Location, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylocations/excel(Location='{Location}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylocations/excel(Location='{Location}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByLocationsToCSV(string Location, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylocations/csv(Location='{Location}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylocations/csv(Location='{Location}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLocation>> GetCountryGetByLocations(string Location, Query query = null)
      {
          OnCountryGetByLocationsDefaultParams(ref Location);

          var items = Context.CountryGetByLocations.FromSqlRaw("EXEC [dbo].[CountryGetByLocation] @Location={0}", Location).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByLocationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByLocationsDefaultParams(ref string Location);

      partial void OnCountryGetByLocationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByLocation> items);  

      public async Task ExportCountryGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByName>> GetCountryGetByNames(string Name, Query query = null)
      {
          OnCountryGetByNamesDefaultParams(ref Name);

          var items = Context.CountryGetByNames.FromSqlRaw("EXEC [dbo].[CountryGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByNamesDefaultParams(ref string Name);

      partial void OnCountryGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByName> items);  

      public async Task ExportCountryGetByNorthsToExcel(string North, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynorths/excel(North='{North}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynorths/excel(North='{North}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByNorthsToCSV(string North, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynorths/csv(North='{North}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynorths/csv(North='{North}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByNorth>> GetCountryGetByNorths(string North, Query query = null)
      {
          OnCountryGetByNorthsDefaultParams(ref North);

          var items = Context.CountryGetByNorths.FromSqlRaw("EXEC [dbo].[CountryGetByNorth] @North={0}", North).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByNorthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByNorthsDefaultParams(ref string North);

      partial void OnCountryGetByNorthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByNorth> items);  

      public async Task ExportCountryGetByPopulationsToExcel(string Population, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbypopulations/excel(Population='{Population}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbypopulations/excel(Population='{Population}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByPopulationsToCSV(string Population, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbypopulations/csv(Population='{Population}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbypopulations/csv(Population='{Population}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByPopulation>> GetCountryGetByPopulations(string Population, Query query = null)
      {
          OnCountryGetByPopulationsDefaultParams(ref Population);

          var items = Context.CountryGetByPopulations.FromSqlRaw("EXEC [dbo].[CountryGetByPopulation] @Population={0}", Population).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByPopulationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByPopulationsDefaultParams(ref string Population);

      partial void OnCountryGetByPopulationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByPopulation> items);  

      public async Task ExportCountryGetByReligionsToExcel(string Religion, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyreligions/excel(Religion='{Religion}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyreligions/excel(Religion='{Religion}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByReligionsToCSV(string Religion, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyreligions/csv(Religion='{Religion}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyreligions/csv(Religion='{Religion}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByReligion>> GetCountryGetByReligions(string Religion, Query query = null)
      {
          OnCountryGetByReligionsDefaultParams(ref Religion);

          var items = Context.CountryGetByReligions.FromSqlRaw("EXEC [dbo].[CountryGetByReligion] @Religion={0}", Religion).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByReligionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByReligionsDefaultParams(ref string Religion);

      partial void OnCountryGetByReligionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByReligion> items);  

      public async Task ExportCountryGetByShortNamesToExcel(string ShortName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyshortnames/excel(ShortName='{ShortName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyshortnames/excel(ShortName='{ShortName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByShortNamesToCSV(string ShortName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyshortnames/csv(ShortName='{ShortName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyshortnames/csv(ShortName='{ShortName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByShortName>> GetCountryGetByShortNames(string ShortName, Query query = null)
      {
          OnCountryGetByShortNamesDefaultParams(ref ShortName);

          var items = Context.CountryGetByShortNames.FromSqlRaw("EXEC [dbo].[CountryGetByShortName] @ShortName={0}", ShortName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByShortNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByShortNamesDefaultParams(ref string ShortName);

      partial void OnCountryGetByShortNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByShortName> items);  

      public async Task ExportCountryGetBySouthsToExcel(string South, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysouths/excel(South='{South}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysouths/excel(South='{South}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetBySouthsToCSV(string South, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysouths/csv(South='{South}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysouths/csv(South='{South}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetBySouth>> GetCountryGetBySouths(string South, Query query = null)
      {
          OnCountryGetBySouthsDefaultParams(ref South);

          var items = Context.CountryGetBySouths.FromSqlRaw("EXEC [dbo].[CountryGetBySouth] @South={0}", South).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetBySouthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetBySouthsDefaultParams(ref string South);

      partial void OnCountryGetBySouthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetBySouth> items);  

      public async Task ExportCountryGetBySymbolsToExcel(string Symbol, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysymbols/excel(Symbol='{Symbol}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysymbols/excel(Symbol='{Symbol}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetBySymbolsToCSV(string Symbol, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysymbols/csv(Symbol='{Symbol}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysymbols/csv(Symbol='{Symbol}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetBySymbol>> GetCountryGetBySymbols(string Symbol, Query query = null)
      {
          OnCountryGetBySymbolsDefaultParams(ref Symbol);

          var items = Context.CountryGetBySymbols.FromSqlRaw("EXEC [dbo].[CountryGetBySymbol] @Symbol={0}", Symbol).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetBySymbolsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetBySymbolsDefaultParams(ref string Symbol);

      partial void OnCountryGetBySymbolsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetBySymbol> items);  

      public async Task ExportCountryGetByTemperaturesToExcel(string Temperature, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbytemperatures/excel(Temperature='{Temperature}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbytemperatures/excel(Temperature='{Temperature}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByTemperaturesToCSV(string Temperature, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbytemperatures/csv(Temperature='{Temperature}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbytemperatures/csv(Temperature='{Temperature}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByTemperature>> GetCountryGetByTemperatures(string Temperature, Query query = null)
      {
          OnCountryGetByTemperaturesDefaultParams(ref Temperature);

          var items = Context.CountryGetByTemperatures.FromSqlRaw("EXEC [dbo].[CountryGetByTemperature] @Temperature={0}", Temperature).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByTemperaturesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByTemperaturesDefaultParams(ref string Temperature);

      partial void OnCountryGetByTemperaturesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByTemperature> items);  

      public async Task ExportCountryGetByWestsToExcel(string West, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbywests/excel(West='{West}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbywests/excel(West='{West}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryGetByWestsToCSV(string West, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbywests/csv(West='{West}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbywests/csv(West='{West}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByWest>> GetCountryGetByWests(string West, Query query = null)
      {
          OnCountryGetByWestsDefaultParams(ref West);

          var items = Context.CountryGetByWests.FromSqlRaw("EXEC [dbo].[CountryGetByWest] @West={0}", West).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryGetByWestsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryGetByWestsDefaultParams(ref string West);

      partial void OnCountryGetByWestsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryGetByWest> items);  

      public async Task ExportCountryInsertsToExcel(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryinserts/excel(Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryinserts/excel(Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryInsertsToCSV(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryinserts/csv(Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryinserts/csv(Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryInsert>> GetCountryInserts(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null)
      {
          OnCountryInsertsDefaultParams(ref Name, ref ShortName, ref Temperature, ref Area, ref Religion, ref Location, ref Population, ref Density, ref Symbol, ref Abbreviation, ref FlagBase64, ref Expectancy, ref Dish, ref LanguagesJSON, ref Landlocked, ref Iso, ref Independence, ref Government, ref North, ref South, ref West, ref East, ref Elevation, ref DomainTld, ref CurrencyName, ref CurrencyCode, ref CostLine, ref Continent, ref City, ref CallingCode, ref Barcode, ref Height, ref DefaultLanguageId);

          var items = Context.CountryInserts.FromSqlRaw("EXEC [dbo].[CountryInsert] @Name={0}, @ShortName={1}, @Temperature={2}, @Area={3}, @Religion={4}, @Location={5}, @Population={6}, @Density={7}, @Symbol={8}, @Abbreviation={9}, @FlagBase64={10}, @Expectancy={11}, @Dish={12}, @LanguagesJSON={13}, @Landlocked={14}, @Iso={15}, @Independence={16}, @Government={17}, @North={18}, @South={19}, @West={20}, @East={21}, @Elevation={22}, @DomainTld={23}, @CurrencyName={24}, @CurrencyCode={25}, @CostLine={26}, @Continent={27}, @City={28}, @CallingCode={29}, @Barcode={30}, @Height={31}, @DefaultLanguageId={32}", Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryInsertsDefaultParams(ref string Name, ref string ShortName, ref string Temperature, ref string Area, ref string Religion, ref string Location, ref string Population, ref string Density, ref string Symbol, ref string Abbreviation, ref string FlagBase64, ref string Expectancy, ref string Dish, ref string LanguagesJSON, ref string Landlocked, ref string Iso, ref string Independence, ref string Government, ref string North, ref string South, ref string West, ref string East, ref string Elevation, ref string DomainTld, ref string CurrencyName, ref string CurrencyCode, ref string CostLine, ref string Continent, ref string City, ref string CallingCode, ref string Barcode, ref string Height, ref int? DefaultLanguageId);

      partial void OnCountryInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryInsert> items);  

      public async Task ExportCountryLanguagesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetAll>> GetCountryLanguagesGetAlls(Query query = null)
      {
          OnCountryLanguagesGetAllsDefaultParams();

          var items = Context.CountryLanguagesGetAlls.FromSqlRaw("EXEC [dbo].[CountryLanguagesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesGetAllsDefaultParams();

      partial void OnCountryLanguagesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetAll> items);  

      public async Task ExportCountryLanguagesGetByCountryIdsToExcel(int? CountryId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountryids/excel(CountryId={CountryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountryids/excel(CountryId={CountryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesGetByCountryIdsToCSV(int? CountryId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountryids/csv(CountryId={CountryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountryids/csv(CountryId={CountryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryId>> GetCountryLanguagesGetByCountryIds(int? CountryId, Query query = null)
      {
          OnCountryLanguagesGetByCountryIdsDefaultParams(ref CountryId);

          var items = Context.CountryLanguagesGetByCountryIds.FromSqlRaw("EXEC [dbo].[CountryLanguagesGetByCountryId] @CountryId={0}", CountryId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesGetByCountryIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesGetByCountryIdsDefaultParams(ref int? CountryId);

      partial void OnCountryLanguagesGetByCountryIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryId> items);  

      public async Task ExportCountryLanguagesGetByCountryNamesToExcel(string CountryName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountrynames/excel(CountryName='{CountryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountrynames/excel(CountryName='{CountryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesGetByCountryNamesToCSV(string CountryName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountrynames/csv(CountryName='{CountryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountrynames/csv(CountryName='{CountryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryName>> GetCountryLanguagesGetByCountryNames(string CountryName, Query query = null)
      {
          OnCountryLanguagesGetByCountryNamesDefaultParams(ref CountryName);

          var items = Context.CountryLanguagesGetByCountryNames.FromSqlRaw("EXEC [dbo].[CountryLanguagesGetByCountryName] @CountryName={0}", CountryName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesGetByCountryNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesGetByCountryNamesDefaultParams(ref string CountryName);

      partial void OnCountryLanguagesGetByCountryNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryName> items);  

      public async Task ExportCountryLanguagesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetById>> GetCountryLanguagesGetByIds(int? Id, Query query = null)
      {
          OnCountryLanguagesGetByIdsDefaultParams(ref Id);

          var items = Context.CountryLanguagesGetByIds.FromSqlRaw("EXEC [dbo].[CountryLanguagesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesGetByIdsDefaultParams(ref int? Id);

      partial void OnCountryLanguagesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetById> items);  

      public async Task ExportCountryLanguagesGetByLanguageNamesToExcel(string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbylanguagenames/excel(LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbylanguagenames/excel(LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesGetByLanguageNamesToCSV(string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbylanguagenames/csv(LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbylanguagenames/csv(LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByLanguageName>> GetCountryLanguagesGetByLanguageNames(string LanguageName, Query query = null)
      {
          OnCountryLanguagesGetByLanguageNamesDefaultParams(ref LanguageName);

          var items = Context.CountryLanguagesGetByLanguageNames.FromSqlRaw("EXEC [dbo].[CountryLanguagesGetByLanguageName] @LanguageName={0}", LanguageName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesGetByLanguageNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesGetByLanguageNamesDefaultParams(ref string LanguageName);

      partial void OnCountryLanguagesGetByLanguageNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByLanguageName> items);  

      public async Task ExportCountryLanguagesInsertsToExcel(int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesinserts/excel(CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesinserts/excel(CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesInsertsToCSV(int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesinserts/csv(CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesinserts/csv(CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesInsert>> GetCountryLanguagesInserts(int? CountryId, string CountryName, string LanguageName, Query query = null)
      {
          OnCountryLanguagesInsertsDefaultParams(ref CountryId, ref CountryName, ref LanguageName);

          var items = Context.CountryLanguagesInserts.FromSqlRaw("EXEC [dbo].[CountryLanguagesInsert] @CountryId={0}, @CountryName={1}, @LanguageName={2}", CountryId, CountryName, LanguageName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesInsertsDefaultParams(ref int? CountryId, ref string CountryName, ref string LanguageName);

      partial void OnCountryLanguagesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesInsert> items);  

      public async Task ExportCountryLanguagesUpdatesToExcel(int? Id, int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesupdates/excel(Id={Id}, CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesupdates/excel(Id={Id}, CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryLanguagesUpdatesToCSV(int? Id, int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesupdates/csv(Id={Id}, CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesupdates/csv(Id={Id}, CountryId={CountryId}, CountryName='{CountryName}', LanguageName='{LanguageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesUpdate>> GetCountryLanguagesUpdates(int? Id, int? CountryId, string CountryName, string LanguageName, Query query = null)
      {
          OnCountryLanguagesUpdatesDefaultParams(ref Id, ref CountryId, ref CountryName, ref LanguageName);

          var items = Context.CountryLanguagesUpdates.FromSqlRaw("EXEC [dbo].[CountryLanguagesUpdate] @Id={0}, @CountryId={1}, @CountryName={2}, @LanguageName={3}", Id, CountryId, CountryName, LanguageName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryLanguagesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryLanguagesUpdatesDefaultParams(ref int? Id, ref int? CountryId, ref string CountryName, ref string LanguageName);

      partial void OnCountryLanguagesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryLanguagesUpdate> items);  

      public async Task ExportCountryUpdatesToExcel(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryupdates/excel(Id={Id}, Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryupdates/excel(Id={Id}, Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportCountryUpdatesToCSV(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryupdates/csv(Id={Id}, Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryupdates/csv(Id={Id}, Name='{Name}', ShortName='{ShortName}', Temperature='{Temperature}', Area='{Area}', Religion='{Religion}', Location='{Location}', Population='{Population}', Density='{Density}', Symbol='{Symbol}', Abbreviation='{Abbreviation}', FlagBase64='{FlagBase64}', Expectancy='{Expectancy}', Dish='{Dish}', LanguagesJSON='{LanguagesJSON}', Landlocked='{Landlocked}', Iso='{Iso}', Independence='{Independence}', Government='{Government}', North='{North}', South='{South}', West='{West}', East='{East}', Elevation='{Elevation}', DomainTld='{DomainTld}', CurrencyName='{CurrencyName}', CurrencyCode='{CurrencyCode}', CostLine='{CostLine}', Continent='{Continent}', City='{City}', CallingCode='{CallingCode}', Barcode='{Barcode}', Height='{Height}', DefaultLanguageId={DefaultLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.CountryUpdate>> GetCountryUpdates(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null)
      {
          OnCountryUpdatesDefaultParams(ref Id, ref Name, ref ShortName, ref Temperature, ref Area, ref Religion, ref Location, ref Population, ref Density, ref Symbol, ref Abbreviation, ref FlagBase64, ref Expectancy, ref Dish, ref LanguagesJSON, ref Landlocked, ref Iso, ref Independence, ref Government, ref North, ref South, ref West, ref East, ref Elevation, ref DomainTld, ref CurrencyName, ref CurrencyCode, ref CostLine, ref Continent, ref City, ref CallingCode, ref Barcode, ref Height, ref DefaultLanguageId);

          var items = Context.CountryUpdates.FromSqlRaw("EXEC [dbo].[CountryUpdate] @Id={0}, @Name={1}, @ShortName={2}, @Temperature={3}, @Area={4}, @Religion={5}, @Location={6}, @Population={7}, @Density={8}, @Symbol={9}, @Abbreviation={10}, @FlagBase64={11}, @Expectancy={12}, @Dish={13}, @LanguagesJSON={14}, @Landlocked={15}, @Iso={16}, @Independence={17}, @Government={18}, @North={19}, @South={20}, @West={21}, @East={22}, @Elevation={23}, @DomainTld={24}, @CurrencyName={25}, @CurrencyCode={26}, @CostLine={27}, @Continent={28}, @City={29}, @CallingCode={30}, @Barcode={31}, @Height={32}, @DefaultLanguageId={33}", Id, Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnCountryUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnCountryUpdatesDefaultParams(ref int? Id, ref string Name, ref string ShortName, ref string Temperature, ref string Area, ref string Religion, ref string Location, ref string Population, ref string Density, ref string Symbol, ref string Abbreviation, ref string FlagBase64, ref string Expectancy, ref string Dish, ref string LanguagesJSON, ref string Landlocked, ref string Iso, ref string Independence, ref string Government, ref string North, ref string South, ref string West, ref string East, ref string Elevation, ref string DomainTld, ref string CurrencyName, ref string CurrencyCode, ref string CostLine, ref string Continent, ref string City, ref string CallingCode, ref string Barcode, ref string Height, ref int? DefaultLanguageId);

      partial void OnCountryUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.CountryUpdate> items);  

      public async Task ExportDesignSchemesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignSchemesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesGetAll>> GetDesignSchemesGetAlls(Query query = null)
      {
          OnDesignSchemesGetAllsDefaultParams();

          var items = Context.DesignSchemesGetAlls.FromSqlRaw("EXEC [dbo].[DesignSchemesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignSchemesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignSchemesGetAllsDefaultParams();

      partial void OnDesignSchemesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesGetAll> items);  

      public async Task ExportDesignschemesgetbycolorsBodyBackgroundsToExcel(string colors_body_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodybackgrounds/excel(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodybackgrounds/excel(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsBodyBackgroundsToCSV(string colors_body_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodybackgrounds/csv(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodybackgrounds/csv(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyBackground>> GetDesignschemesgetbycolorsBodyBackgrounds(string colors_body_background, Query query = null)
      {
          OnDesignschemesgetbycolorsBodyBackgroundsDefaultParams(ref colors_body_background);

          var items = Context.DesignschemesgetbycolorsBodyBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_body_background] @colors_body_background={0}", colors_body_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsBodyBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsBodyBackgroundsDefaultParams(ref string colors_body_background);

      partial void OnDesignschemesgetbycolorsBodyBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyBackground> items);  

      public async Task ExportDesignschemesgetbycolorsBodyFontsToExcel(string colors_body_font, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfonts/excel(colors_body_font='{colors_body_font}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfonts/excel(colors_body_font='{colors_body_font}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsBodyFontsToCSV(string colors_body_font, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfonts/csv(colors_body_font='{colors_body_font}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfonts/csv(colors_body_font='{colors_body_font}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFont>> GetDesignschemesgetbycolorsBodyFonts(string colors_body_font, Query query = null)
      {
          OnDesignschemesgetbycolorsBodyFontsDefaultParams(ref colors_body_font);

          var items = Context.DesignschemesgetbycolorsBodyFonts.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_body_font] @colors_body_font={0}", colors_body_font).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsBodyFontsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsBodyFontsDefaultParams(ref string colors_body_font);

      partial void OnDesignschemesgetbycolorsBodyFontsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFont> items);  

      public async Task ExportDesignschemesgetbycolorsBodyFontColorsToExcel(string colors_body_font_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontcolors/excel(colors_body_font_color='{colors_body_font_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontcolors/excel(colors_body_font_color='{colors_body_font_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsBodyFontColorsToCSV(string colors_body_font_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontcolors/csv(colors_body_font_color='{colors_body_font_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontcolors/csv(colors_body_font_color='{colors_body_font_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontColor>> GetDesignschemesgetbycolorsBodyFontColors(string colors_body_font_color, Query query = null)
      {
          OnDesignschemesgetbycolorsBodyFontColorsDefaultParams(ref colors_body_font_color);

          var items = Context.DesignschemesgetbycolorsBodyFontColors.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_body_font_color] @colors_body_font_color={0}", colors_body_font_color).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsBodyFontColorsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsBodyFontColorsDefaultParams(ref string colors_body_font_color);

      partial void OnDesignschemesgetbycolorsBodyFontColorsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontColor> items);  

      public async Task ExportDesignschemesgetbycolorsBodyFontSizesToExcel(int? colors_body_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontsizes/excel(colors_body_font_size={colors_body_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontsizes/excel(colors_body_font_size={colors_body_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsBodyFontSizesToCSV(int? colors_body_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontsizes/csv(colors_body_font_size={colors_body_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontsizes/csv(colors_body_font_size={colors_body_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontSize>> GetDesignschemesgetbycolorsBodyFontSizes(int? colors_body_font_size, Query query = null)
      {
          OnDesignschemesgetbycolorsBodyFontSizesDefaultParams(ref colors_body_font_size);

          var items = Context.DesignschemesgetbycolorsBodyFontSizes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_body_font_size] @colors_body_font_size={0}", colors_body_font_size).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsBodyFontSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsBodyFontSizesDefaultParams(ref int? colors_body_font_size);

      partial void OnDesignschemesgetbycolorsBodyFontSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontSize> items);  

      public async Task ExportDesignschemesgetbycolorsColor1BrightnessesToExcel(decimal? colors_color1_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1brightnesses/excel(colors_color1_brightness={colors_color1_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1brightnesses/excel(colors_color1_brightness={colors_color1_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor1BrightnessesToCSV(decimal? colors_color1_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1brightnesses/csv(colors_color1_brightness={colors_color1_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1brightnesses/csv(colors_color1_brightness={colors_color1_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Brightness>> GetDesignschemesgetbycolorsColor1Brightnesses(decimal? colors_color1_brightness, Query query = null)
      {
          OnDesignschemesgetbycolorsColor1BrightnessesDefaultParams(ref colors_color1_brightness);

          var items = Context.DesignschemesgetbycolorsColor1Brightnesses.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color1_brightness] @colors_color1_brightness={0}", colors_color1_brightness).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor1BrightnessesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor1BrightnessesDefaultParams(ref decimal? colors_color1_brightness);

      partial void OnDesignschemesgetbycolorsColor1BrightnessesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Brightness> items);  

      public async Task ExportDesignschemesgetbycolorsColor1IsdarksToExcel(string colors_color1_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1isdarks/excel(colors_color1_isDark='{colors_color1_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1isdarks/excel(colors_color1_isDark='{colors_color1_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor1IsdarksToCSV(string colors_color1_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1isdarks/csv(colors_color1_isDark='{colors_color1_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1isdarks/csv(colors_color1_isDark='{colors_color1_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Isdark>> GetDesignschemesgetbycolorsColor1Isdarks(string colors_color1_isDark, Query query = null)
      {
          OnDesignschemesgetbycolorsColor1IsdarksDefaultParams(ref colors_color1_isDark);

          var items = Context.DesignschemesgetbycolorsColor1Isdarks.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color1_isDark] @colors_color1_isDark={0}", colors_color1_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor1IsdarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor1IsdarksDefaultParams(ref string colors_color1_isDark);

      partial void OnDesignschemesgetbycolorsColor1IsdarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Isdark> items);  

      public async Task ExportDesignschemesgetbycolorsColor1RgbsToExcel(int? colors_color1_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1rgbs/excel(colors_color1_rgb={colors_color1_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1rgbs/excel(colors_color1_rgb={colors_color1_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor1RgbsToCSV(int? colors_color1_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1rgbs/csv(colors_color1_rgb={colors_color1_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1rgbs/csv(colors_color1_rgb={colors_color1_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Rgb>> GetDesignschemesgetbycolorsColor1Rgbs(int? colors_color1_rgb, Query query = null)
      {
          OnDesignschemesgetbycolorsColor1RgbsDefaultParams(ref colors_color1_rgb);

          var items = Context.DesignschemesgetbycolorsColor1Rgbs.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color1_rgb] @colors_color1_rgb={0}", colors_color1_rgb).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor1RgbsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor1RgbsDefaultParams(ref int? colors_color1_rgb);

      partial void OnDesignschemesgetbycolorsColor1RgbsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Rgb> items);  

      public async Task ExportDesignschemesgetbycolorsColor2BrightnessesToExcel(decimal? colors_color2_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2brightnesses/excel(colors_color2_brightness={colors_color2_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2brightnesses/excel(colors_color2_brightness={colors_color2_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor2BrightnessesToCSV(decimal? colors_color2_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2brightnesses/csv(colors_color2_brightness={colors_color2_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2brightnesses/csv(colors_color2_brightness={colors_color2_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Brightness>> GetDesignschemesgetbycolorsColor2Brightnesses(decimal? colors_color2_brightness, Query query = null)
      {
          OnDesignschemesgetbycolorsColor2BrightnessesDefaultParams(ref colors_color2_brightness);

          var items = Context.DesignschemesgetbycolorsColor2Brightnesses.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color2_brightness] @colors_color2_brightness={0}", colors_color2_brightness).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor2BrightnessesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor2BrightnessesDefaultParams(ref decimal? colors_color2_brightness);

      partial void OnDesignschemesgetbycolorsColor2BrightnessesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Brightness> items);  

      public async Task ExportDesignschemesgetbycolorsColor2HexesToExcel(int? colors_color2_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2hexes/excel(colors_color2_hex={colors_color2_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2hexes/excel(colors_color2_hex={colors_color2_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor2HexesToCSV(int? colors_color2_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2hexes/csv(colors_color2_hex={colors_color2_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2hexes/csv(colors_color2_hex={colors_color2_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Hex>> GetDesignschemesgetbycolorsColor2Hexes(int? colors_color2_hex, Query query = null)
      {
          OnDesignschemesgetbycolorsColor2HexesDefaultParams(ref colors_color2_hex);

          var items = Context.DesignschemesgetbycolorsColor2Hexes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color2_hex] @colors_color2_hex={0}", colors_color2_hex).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor2HexesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor2HexesDefaultParams(ref int? colors_color2_hex);

      partial void OnDesignschemesgetbycolorsColor2HexesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Hex> items);  

      public async Task ExportDesignschemesgetbycolorsColor2IsdarksToExcel(string colors_color2_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2isdarks/excel(colors_color2_isDark='{colors_color2_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2isdarks/excel(colors_color2_isDark='{colors_color2_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor2IsdarksToCSV(string colors_color2_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2isdarks/csv(colors_color2_isDark='{colors_color2_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2isdarks/csv(colors_color2_isDark='{colors_color2_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Isdark>> GetDesignschemesgetbycolorsColor2Isdarks(string colors_color2_isDark, Query query = null)
      {
          OnDesignschemesgetbycolorsColor2IsdarksDefaultParams(ref colors_color2_isDark);

          var items = Context.DesignschemesgetbycolorsColor2Isdarks.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color2_isDark] @colors_color2_isDark={0}", colors_color2_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor2IsdarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor2IsdarksDefaultParams(ref string colors_color2_isDark);

      partial void OnDesignschemesgetbycolorsColor2IsdarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Isdark> items);  

      public async Task ExportDesignschemesgetbycolorsColor2RgbsToExcel(int? colors_color2_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2rgbs/excel(colors_color2_rgb={colors_color2_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2rgbs/excel(colors_color2_rgb={colors_color2_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor2RgbsToCSV(int? colors_color2_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2rgbs/csv(colors_color2_rgb={colors_color2_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2rgbs/csv(colors_color2_rgb={colors_color2_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Rgb>> GetDesignschemesgetbycolorsColor2Rgbs(int? colors_color2_rgb, Query query = null)
      {
          OnDesignschemesgetbycolorsColor2RgbsDefaultParams(ref colors_color2_rgb);

          var items = Context.DesignschemesgetbycolorsColor2Rgbs.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color2_rgb] @colors_color2_rgb={0}", colors_color2_rgb).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor2RgbsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor2RgbsDefaultParams(ref int? colors_color2_rgb);

      partial void OnDesignschemesgetbycolorsColor2RgbsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Rgb> items);  

      public async Task ExportDesignschemesgetbycolorsColor3BrightnessesToExcel(decimal? colors_color3_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3brightnesses/excel(colors_color3_brightness={colors_color3_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3brightnesses/excel(colors_color3_brightness={colors_color3_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor3BrightnessesToCSV(decimal? colors_color3_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3brightnesses/csv(colors_color3_brightness={colors_color3_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3brightnesses/csv(colors_color3_brightness={colors_color3_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Brightness>> GetDesignschemesgetbycolorsColor3Brightnesses(decimal? colors_color3_brightness, Query query = null)
      {
          OnDesignschemesgetbycolorsColor3BrightnessesDefaultParams(ref colors_color3_brightness);

          var items = Context.DesignschemesgetbycolorsColor3Brightnesses.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color3_brightness] @colors_color3_brightness={0}", colors_color3_brightness).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor3BrightnessesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor3BrightnessesDefaultParams(ref decimal? colors_color3_brightness);

      partial void OnDesignschemesgetbycolorsColor3BrightnessesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Brightness> items);  

      public async Task ExportDesignschemesgetbycolorsColor3HexesToExcel(int? colors_color3_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3hexes/excel(colors_color3_hex={colors_color3_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3hexes/excel(colors_color3_hex={colors_color3_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor3HexesToCSV(int? colors_color3_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3hexes/csv(colors_color3_hex={colors_color3_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3hexes/csv(colors_color3_hex={colors_color3_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Hex>> GetDesignschemesgetbycolorsColor3Hexes(int? colors_color3_hex, Query query = null)
      {
          OnDesignschemesgetbycolorsColor3HexesDefaultParams(ref colors_color3_hex);

          var items = Context.DesignschemesgetbycolorsColor3Hexes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color3_hex] @colors_color3_hex={0}", colors_color3_hex).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor3HexesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor3HexesDefaultParams(ref int? colors_color3_hex);

      partial void OnDesignschemesgetbycolorsColor3HexesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Hex> items);  

      public async Task ExportDesignschemesgetbycolorsColor3IsdarksToExcel(string colors_color3_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3isdarks/excel(colors_color3_isDark='{colors_color3_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3isdarks/excel(colors_color3_isDark='{colors_color3_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor3IsdarksToCSV(string colors_color3_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3isdarks/csv(colors_color3_isDark='{colors_color3_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3isdarks/csv(colors_color3_isDark='{colors_color3_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Isdark>> GetDesignschemesgetbycolorsColor3Isdarks(string colors_color3_isDark, Query query = null)
      {
          OnDesignschemesgetbycolorsColor3IsdarksDefaultParams(ref colors_color3_isDark);

          var items = Context.DesignschemesgetbycolorsColor3Isdarks.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color3_isDark] @colors_color3_isDark={0}", colors_color3_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor3IsdarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor3IsdarksDefaultParams(ref string colors_color3_isDark);

      partial void OnDesignschemesgetbycolorsColor3IsdarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Isdark> items);  

      public async Task ExportDesignschemesgetbycolorsColor3RgbsToExcel(int? colors_color3_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3rgbs/excel(colors_color3_rgb={colors_color3_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3rgbs/excel(colors_color3_rgb={colors_color3_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor3RgbsToCSV(int? colors_color3_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3rgbs/csv(colors_color3_rgb={colors_color3_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3rgbs/csv(colors_color3_rgb={colors_color3_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Rgb>> GetDesignschemesgetbycolorsColor3Rgbs(int? colors_color3_rgb, Query query = null)
      {
          OnDesignschemesgetbycolorsColor3RgbsDefaultParams(ref colors_color3_rgb);

          var items = Context.DesignschemesgetbycolorsColor3Rgbs.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color3_rgb] @colors_color3_rgb={0}", colors_color3_rgb).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor3RgbsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor3RgbsDefaultParams(ref int? colors_color3_rgb);

      partial void OnDesignschemesgetbycolorsColor3RgbsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Rgb> items);  

      public async Task ExportDesignschemesgetbycolorsColor4BrightnessesToExcel(decimal? colors_color4_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4brightnesses/excel(colors_color4_brightness={colors_color4_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4brightnesses/excel(colors_color4_brightness={colors_color4_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor4BrightnessesToCSV(decimal? colors_color4_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4brightnesses/csv(colors_color4_brightness={colors_color4_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4brightnesses/csv(colors_color4_brightness={colors_color4_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Brightness>> GetDesignschemesgetbycolorsColor4Brightnesses(decimal? colors_color4_brightness, Query query = null)
      {
          OnDesignschemesgetbycolorsColor4BrightnessesDefaultParams(ref colors_color4_brightness);

          var items = Context.DesignschemesgetbycolorsColor4Brightnesses.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color4_brightness] @colors_color4_brightness={0}", colors_color4_brightness).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor4BrightnessesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor4BrightnessesDefaultParams(ref decimal? colors_color4_brightness);

      partial void OnDesignschemesgetbycolorsColor4BrightnessesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Brightness> items);  

      public async Task ExportDesignschemesgetbycolorsColor4HexesToExcel(int? colors_color4_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4hexes/excel(colors_color4_hex={colors_color4_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4hexes/excel(colors_color4_hex={colors_color4_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor4HexesToCSV(int? colors_color4_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4hexes/csv(colors_color4_hex={colors_color4_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4hexes/csv(colors_color4_hex={colors_color4_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Hex>> GetDesignschemesgetbycolorsColor4Hexes(int? colors_color4_hex, Query query = null)
      {
          OnDesignschemesgetbycolorsColor4HexesDefaultParams(ref colors_color4_hex);

          var items = Context.DesignschemesgetbycolorsColor4Hexes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color4_hex] @colors_color4_hex={0}", colors_color4_hex).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor4HexesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor4HexesDefaultParams(ref int? colors_color4_hex);

      partial void OnDesignschemesgetbycolorsColor4HexesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Hex> items);  

      public async Task ExportDesignschemesgetbycolorsColor4IsdarksToExcel(string colors_color4_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4isdarks/excel(colors_color4_isDark='{colors_color4_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4isdarks/excel(colors_color4_isDark='{colors_color4_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor4IsdarksToCSV(string colors_color4_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4isdarks/csv(colors_color4_isDark='{colors_color4_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4isdarks/csv(colors_color4_isDark='{colors_color4_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Isdark>> GetDesignschemesgetbycolorsColor4Isdarks(string colors_color4_isDark, Query query = null)
      {
          OnDesignschemesgetbycolorsColor4IsdarksDefaultParams(ref colors_color4_isDark);

          var items = Context.DesignschemesgetbycolorsColor4Isdarks.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color4_isDark] @colors_color4_isDark={0}", colors_color4_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor4IsdarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor4IsdarksDefaultParams(ref string colors_color4_isDark);

      partial void OnDesignschemesgetbycolorsColor4IsdarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Isdark> items);  

      public async Task ExportDesignschemesgetbycolorsColor4RgbsToExcel(int? colors_color4_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4rgbs/excel(colors_color4_rgb={colors_color4_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4rgbs/excel(colors_color4_rgb={colors_color4_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor4RgbsToCSV(int? colors_color4_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4rgbs/csv(colors_color4_rgb={colors_color4_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4rgbs/csv(colors_color4_rgb={colors_color4_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Rgb>> GetDesignschemesgetbycolorsColor4Rgbs(int? colors_color4_rgb, Query query = null)
      {
          OnDesignschemesgetbycolorsColor4RgbsDefaultParams(ref colors_color4_rgb);

          var items = Context.DesignschemesgetbycolorsColor4Rgbs.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color4_rgb] @colors_color4_rgb={0}", colors_color4_rgb).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor4RgbsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor4RgbsDefaultParams(ref int? colors_color4_rgb);

      partial void OnDesignschemesgetbycolorsColor4RgbsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Rgb> items);  

      public async Task ExportDesignschemesgetbycolorsColor5BrightnessesToExcel(decimal? colors_color5_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5brightnesses/excel(colors_color5_brightness={colors_color5_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5brightnesses/excel(colors_color5_brightness={colors_color5_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor5BrightnessesToCSV(decimal? colors_color5_brightness, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5brightnesses/csv(colors_color5_brightness={colors_color5_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5brightnesses/csv(colors_color5_brightness={colors_color5_brightness}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Brightness>> GetDesignschemesgetbycolorsColor5Brightnesses(decimal? colors_color5_brightness, Query query = null)
      {
          OnDesignschemesgetbycolorsColor5BrightnessesDefaultParams(ref colors_color5_brightness);

          var items = Context.DesignschemesgetbycolorsColor5Brightnesses.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color5_brightness] @colors_color5_brightness={0}", colors_color5_brightness).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor5BrightnessesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor5BrightnessesDefaultParams(ref decimal? colors_color5_brightness);

      partial void OnDesignschemesgetbycolorsColor5BrightnessesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Brightness> items);  

      public async Task ExportDesignschemesgetbycolorsColor5HexesToExcel(int? colors_color5_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5hexes/excel(colors_color5_hex={colors_color5_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5hexes/excel(colors_color5_hex={colors_color5_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor5HexesToCSV(int? colors_color5_hex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5hexes/csv(colors_color5_hex={colors_color5_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5hexes/csv(colors_color5_hex={colors_color5_hex}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Hex>> GetDesignschemesgetbycolorsColor5Hexes(int? colors_color5_hex, Query query = null)
      {
          OnDesignschemesgetbycolorsColor5HexesDefaultParams(ref colors_color5_hex);

          var items = Context.DesignschemesgetbycolorsColor5Hexes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color5_hex] @colors_color5_hex={0}", colors_color5_hex).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor5HexesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor5HexesDefaultParams(ref int? colors_color5_hex);

      partial void OnDesignschemesgetbycolorsColor5HexesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Hex> items);  

      public async Task ExportDesignschemesgetbycolorsColor5IsdarksToExcel(string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5isdarks/excel(colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5isdarks/excel(colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor5IsdarksToCSV(string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5isdarks/csv(colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5isdarks/csv(colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Isdark>> GetDesignschemesgetbycolorsColor5Isdarks(string colors_color5_isDark, Query query = null)
      {
          OnDesignschemesgetbycolorsColor5IsdarksDefaultParams(ref colors_color5_isDark);

          var items = Context.DesignschemesgetbycolorsColor5Isdarks.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color5_isDark] @colors_color5_isDark={0}", colors_color5_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor5IsdarksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor5IsdarksDefaultParams(ref string colors_color5_isDark);

      partial void OnDesignschemesgetbycolorsColor5IsdarksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Isdark> items);  

      public async Task ExportDesignschemesgetbycolorsColor5RgbsToExcel(int? colors_color5_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5rgbs/excel(colors_color5_rgb={colors_color5_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5rgbs/excel(colors_color5_rgb={colors_color5_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsColor5RgbsToCSV(int? colors_color5_rgb, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5rgbs/csv(colors_color5_rgb={colors_color5_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5rgbs/csv(colors_color5_rgb={colors_color5_rgb}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Rgb>> GetDesignschemesgetbycolorsColor5Rgbs(int? colors_color5_rgb, Query query = null)
      {
          OnDesignschemesgetbycolorsColor5RgbsDefaultParams(ref colors_color5_rgb);

          var items = Context.DesignschemesgetbycolorsColor5Rgbs.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_color5_rgb] @colors_color5_rgb={0}", colors_color5_rgb).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsColor5RgbsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsColor5RgbsDefaultParams(ref int? colors_color5_rgb);

      partial void OnDesignschemesgetbycolorsColor5RgbsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Rgb> items);  

      public async Task ExportDesignschemesgetbycolorsContentBackgroundsToExcel(string colors_content_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbackgrounds/excel(colors_content_background='{colors_content_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbackgrounds/excel(colors_content_background='{colors_content_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsContentBackgroundsToCSV(string colors_content_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbackgrounds/csv(colors_content_background='{colors_content_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbackgrounds/csv(colors_content_background='{colors_content_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBackground>> GetDesignschemesgetbycolorsContentBackgrounds(string colors_content_background, Query query = null)
      {
          OnDesignschemesgetbycolorsContentBackgroundsDefaultParams(ref colors_content_background);

          var items = Context.DesignschemesgetbycolorsContentBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_content_background] @colors_content_background={0}", colors_content_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsContentBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsContentBackgroundsDefaultParams(ref string colors_content_background);

      partial void OnDesignschemesgetbycolorsContentBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBackground> items);  

      public async Task ExportDesignschemesgetbycolorsContentBorderColorsToExcel(string colors_content_border_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbordercolors/excel(colors_content_border_color='{colors_content_border_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbordercolors/excel(colors_content_border_color='{colors_content_border_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsContentBorderColorsToCSV(string colors_content_border_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbordercolors/csv(colors_content_border_color='{colors_content_border_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbordercolors/csv(colors_content_border_color='{colors_content_border_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBorderColor>> GetDesignschemesgetbycolorsContentBorderColors(string colors_content_border_color, Query query = null)
      {
          OnDesignschemesgetbycolorsContentBorderColorsDefaultParams(ref colors_content_border_color);

          var items = Context.DesignschemesgetbycolorsContentBorderColors.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_content_border_color] @colors_content_border_color={0}", colors_content_border_color).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsContentBorderColorsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsContentBorderColorsDefaultParams(ref string colors_content_border_color);

      partial void OnDesignschemesgetbycolorsContentBorderColorsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBorderColor> items);  

      public async Task ExportDesignschemesgetbycolorsContentMarginsToExcel(string colors_content_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentmargins/excel(colors_content_margin='{colors_content_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentmargins/excel(colors_content_margin='{colors_content_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsContentMarginsToCSV(string colors_content_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentmargins/csv(colors_content_margin='{colors_content_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentmargins/csv(colors_content_margin='{colors_content_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentMargin>> GetDesignschemesgetbycolorsContentMargins(string colors_content_margin, Query query = null)
      {
          OnDesignschemesgetbycolorsContentMarginsDefaultParams(ref colors_content_margin);

          var items = Context.DesignschemesgetbycolorsContentMargins.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_content_margin] @colors_content_margin={0}", colors_content_margin).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsContentMarginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsContentMarginsDefaultParams(ref string colors_content_margin);

      partial void OnDesignschemesgetbycolorsContentMarginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentMargin> items);  

      public async Task ExportDesignschemesgetbycolorsContentPaddingsToExcel(string colors_content_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentpaddings/excel(colors_content_padding='{colors_content_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentpaddings/excel(colors_content_padding='{colors_content_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsContentPaddingsToCSV(string colors_content_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentpaddings/csv(colors_content_padding='{colors_content_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentpaddings/csv(colors_content_padding='{colors_content_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentPadding>> GetDesignschemesgetbycolorsContentPaddings(string colors_content_padding, Query query = null)
      {
          OnDesignschemesgetbycolorsContentPaddingsDefaultParams(ref colors_content_padding);

          var items = Context.DesignschemesgetbycolorsContentPaddings.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_content_padding] @colors_content_padding={0}", colors_content_padding).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsContentPaddingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsContentPaddingsDefaultParams(ref string colors_content_padding);

      partial void OnDesignschemesgetbycolorsContentPaddingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentPadding> items);  

      public async Task ExportDesignschemesgetbycolorsContentTextColorsToExcel(string colors_content_text_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontenttextcolors/excel(colors_content_text_color='{colors_content_text_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontenttextcolors/excel(colors_content_text_color='{colors_content_text_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsContentTextColorsToCSV(string colors_content_text_color, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontenttextcolors/csv(colors_content_text_color='{colors_content_text_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontenttextcolors/csv(colors_content_text_color='{colors_content_text_color}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentTextColor>> GetDesignschemesgetbycolorsContentTextColors(string colors_content_text_color, Query query = null)
      {
          OnDesignschemesgetbycolorsContentTextColorsDefaultParams(ref colors_content_text_color);

          var items = Context.DesignschemesgetbycolorsContentTextColors.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_content_text_color] @colors_content_text_color={0}", colors_content_text_color).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsContentTextColorsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsContentTextColorsDefaultParams(ref string colors_content_text_color);

      partial void OnDesignschemesgetbycolorsContentTextColorsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentTextColor> items);  

      public async Task ExportDesignschemesgetbycolorsFooterBackgroundsToExcel(string colors_footer_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/excel(colors_footer_background='{colors_footer_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/excel(colors_footer_background='{colors_footer_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsFooterBackgroundsToCSV(string colors_footer_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/csv(colors_footer_background='{colors_footer_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/csv(colors_footer_background='{colors_footer_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterBackground>> GetDesignschemesgetbycolorsFooterBackgrounds(string colors_footer_background, Query query = null)
      {
          OnDesignschemesgetbycolorsFooterBackgroundsDefaultParams(ref colors_footer_background);

          var items = Context.DesignschemesgetbycolorsFooterBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_footer_background] @colors_footer_background={0}", colors_footer_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsFooterBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsFooterBackgroundsDefaultParams(ref string colors_footer_background);

      partial void OnDesignschemesgetbycolorsFooterBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterBackground> items);  

      public async Task ExportDesignschemesgetbycolorsFooterFontSizesToExcel(int? colors_footer_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterfontsizes/excel(colors_footer_font_size={colors_footer_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterfontsizes/excel(colors_footer_font_size={colors_footer_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsFooterFontSizesToCSV(int? colors_footer_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterfontsizes/csv(colors_footer_font_size={colors_footer_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterfontsizes/csv(colors_footer_font_size={colors_footer_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterFontSize>> GetDesignschemesgetbycolorsFooterFontSizes(int? colors_footer_font_size, Query query = null)
      {
          OnDesignschemesgetbycolorsFooterFontSizesDefaultParams(ref colors_footer_font_size);

          var items = Context.DesignschemesgetbycolorsFooterFontSizes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_footer_font_size] @colors_footer_font_size={0}", colors_footer_font_size).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsFooterFontSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsFooterFontSizesDefaultParams(ref int? colors_footer_font_size);

      partial void OnDesignschemesgetbycolorsFooterFontSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterFontSize> items);  

      public async Task ExportDesignschemesgetbycolorsFooterMarginsToExcel(string colors_footer_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfootermargins/excel(colors_footer_margin='{colors_footer_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfootermargins/excel(colors_footer_margin='{colors_footer_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsFooterMarginsToCSV(string colors_footer_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfootermargins/csv(colors_footer_margin='{colors_footer_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfootermargins/csv(colors_footer_margin='{colors_footer_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterMargin>> GetDesignschemesgetbycolorsFooterMargins(string colors_footer_margin, Query query = null)
      {
          OnDesignschemesgetbycolorsFooterMarginsDefaultParams(ref colors_footer_margin);

          var items = Context.DesignschemesgetbycolorsFooterMargins.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_footer_margin] @colors_footer_margin={0}", colors_footer_margin).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsFooterMarginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsFooterMarginsDefaultParams(ref string colors_footer_margin);

      partial void OnDesignschemesgetbycolorsFooterMarginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterMargin> items);  

      public async Task ExportDesignschemesgetbycolorsFooterPaddingsToExcel(string colors_footer_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterpaddings/excel(colors_footer_padding='{colors_footer_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterpaddings/excel(colors_footer_padding='{colors_footer_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsFooterPaddingsToCSV(string colors_footer_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterpaddings/csv(colors_footer_padding='{colors_footer_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterpaddings/csv(colors_footer_padding='{colors_footer_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterPadding>> GetDesignschemesgetbycolorsFooterPaddings(string colors_footer_padding, Query query = null)
      {
          OnDesignschemesgetbycolorsFooterPaddingsDefaultParams(ref colors_footer_padding);

          var items = Context.DesignschemesgetbycolorsFooterPaddings.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_footer_padding] @colors_footer_padding={0}", colors_footer_padding).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsFooterPaddingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsFooterPaddingsDefaultParams(ref string colors_footer_padding);

      partial void OnDesignschemesgetbycolorsFooterPaddingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterPadding> items);  

      public async Task ExportDesignschemesgetbycolorsGroupsToExcel(string colors_group, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsgroups/excel(colors_group='{colors_group}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsgroups/excel(colors_group='{colors_group}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsGroupsToCSV(string colors_group, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsgroups/csv(colors_group='{colors_group}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsgroups/csv(colors_group='{colors_group}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsGroup>> GetDesignschemesgetbycolorsGroups(string colors_group, Query query = null)
      {
          OnDesignschemesgetbycolorsGroupsDefaultParams(ref colors_group);

          var items = Context.DesignschemesgetbycolorsGroups.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_group] @colors_group={0}", colors_group).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsGroupsDefaultParams(ref string colors_group);

      partial void OnDesignschemesgetbycolorsGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsGroup> items);  

      public async Task ExportDesignschemesgetbycolorsHeaderBackgroundsToExcel(string colors_header_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/excel(colors_header_background='{colors_header_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/excel(colors_header_background='{colors_header_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsHeaderBackgroundsToCSV(string colors_header_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/csv(colors_header_background='{colors_header_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/csv(colors_header_background='{colors_header_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderBackground>> GetDesignschemesgetbycolorsHeaderBackgrounds(string colors_header_background, Query query = null)
      {
          OnDesignschemesgetbycolorsHeaderBackgroundsDefaultParams(ref colors_header_background);

          var items = Context.DesignschemesgetbycolorsHeaderBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_header_background] @colors_header_background={0}", colors_header_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsHeaderBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsHeaderBackgroundsDefaultParams(ref string colors_header_background);

      partial void OnDesignschemesgetbycolorsHeaderBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderBackground> items);  

      public async Task ExportDesignschemesgetbycolorsHeaderFontSizesToExcel(int? colors_header_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderfontsizes/excel(colors_header_font_size={colors_header_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderfontsizes/excel(colors_header_font_size={colors_header_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsHeaderFontSizesToCSV(int? colors_header_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderfontsizes/csv(colors_header_font_size={colors_header_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderfontsizes/csv(colors_header_font_size={colors_header_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderFontSize>> GetDesignschemesgetbycolorsHeaderFontSizes(int? colors_header_font_size, Query query = null)
      {
          OnDesignschemesgetbycolorsHeaderFontSizesDefaultParams(ref colors_header_font_size);

          var items = Context.DesignschemesgetbycolorsHeaderFontSizes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_header_font_size] @colors_header_font_size={0}", colors_header_font_size).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsHeaderFontSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsHeaderFontSizesDefaultParams(ref int? colors_header_font_size);

      partial void OnDesignschemesgetbycolorsHeaderFontSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderFontSize> items);  

      public async Task ExportDesignschemesgetbycolorsHeaderMarginsToExcel(string colors_header_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheadermargins/excel(colors_header_margin='{colors_header_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheadermargins/excel(colors_header_margin='{colors_header_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsHeaderMarginsToCSV(string colors_header_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheadermargins/csv(colors_header_margin='{colors_header_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheadermargins/csv(colors_header_margin='{colors_header_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderMargin>> GetDesignschemesgetbycolorsHeaderMargins(string colors_header_margin, Query query = null)
      {
          OnDesignschemesgetbycolorsHeaderMarginsDefaultParams(ref colors_header_margin);

          var items = Context.DesignschemesgetbycolorsHeaderMargins.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_header_margin] @colors_header_margin={0}", colors_header_margin).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsHeaderMarginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsHeaderMarginsDefaultParams(ref string colors_header_margin);

      partial void OnDesignschemesgetbycolorsHeaderMarginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderMargin> items);  

      public async Task ExportDesignschemesgetbycolorsHeaderPaddingsToExcel(string colors_header_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderpaddings/excel(colors_header_padding='{colors_header_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderpaddings/excel(colors_header_padding='{colors_header_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsHeaderPaddingsToCSV(string colors_header_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderpaddings/csv(colors_header_padding='{colors_header_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderpaddings/csv(colors_header_padding='{colors_header_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderPadding>> GetDesignschemesgetbycolorsHeaderPaddings(string colors_header_padding, Query query = null)
      {
          OnDesignschemesgetbycolorsHeaderPaddingsDefaultParams(ref colors_header_padding);

          var items = Context.DesignschemesgetbycolorsHeaderPaddings.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_header_padding] @colors_header_padding={0}", colors_header_padding).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsHeaderPaddingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsHeaderPaddingsDefaultParams(ref string colors_header_padding);

      partial void OnDesignschemesgetbycolorsHeaderPaddingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderPadding> items);  

      public async Task ExportDesignschemesgetbycolorsMenuBackgroundsToExcel(string colors_menu_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenubackgrounds/excel(colors_menu_background='{colors_menu_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenubackgrounds/excel(colors_menu_background='{colors_menu_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsMenuBackgroundsToCSV(string colors_menu_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenubackgrounds/csv(colors_menu_background='{colors_menu_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenubackgrounds/csv(colors_menu_background='{colors_menu_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuBackground>> GetDesignschemesgetbycolorsMenuBackgrounds(string colors_menu_background, Query query = null)
      {
          OnDesignschemesgetbycolorsMenuBackgroundsDefaultParams(ref colors_menu_background);

          var items = Context.DesignschemesgetbycolorsMenuBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_menu_background] @colors_menu_background={0}", colors_menu_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsMenuBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsMenuBackgroundsDefaultParams(ref string colors_menu_background);

      partial void OnDesignschemesgetbycolorsMenuBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuBackground> items);  

      public async Task ExportDesignschemesgetbycolorsMenuFontSizesToExcel(int? colors_menu_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenufontsizes/excel(colors_menu_font_size={colors_menu_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenufontsizes/excel(colors_menu_font_size={colors_menu_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsMenuFontSizesToCSV(int? colors_menu_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenufontsizes/csv(colors_menu_font_size={colors_menu_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenufontsizes/csv(colors_menu_font_size={colors_menu_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuFontSize>> GetDesignschemesgetbycolorsMenuFontSizes(int? colors_menu_font_size, Query query = null)
      {
          OnDesignschemesgetbycolorsMenuFontSizesDefaultParams(ref colors_menu_font_size);

          var items = Context.DesignschemesgetbycolorsMenuFontSizes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_menu_font_size] @colors_menu_font_size={0}", colors_menu_font_size).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsMenuFontSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsMenuFontSizesDefaultParams(ref int? colors_menu_font_size);

      partial void OnDesignschemesgetbycolorsMenuFontSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuFontSize> items);  

      public async Task ExportDesignschemesgetbycolorsMenuMarginsToExcel(string colors_menu_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenumargins/excel(colors_menu_margin='{colors_menu_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenumargins/excel(colors_menu_margin='{colors_menu_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsMenuMarginsToCSV(string colors_menu_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenumargins/csv(colors_menu_margin='{colors_menu_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenumargins/csv(colors_menu_margin='{colors_menu_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuMargin>> GetDesignschemesgetbycolorsMenuMargins(string colors_menu_margin, Query query = null)
      {
          OnDesignschemesgetbycolorsMenuMarginsDefaultParams(ref colors_menu_margin);

          var items = Context.DesignschemesgetbycolorsMenuMargins.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_menu_margin] @colors_menu_margin={0}", colors_menu_margin).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsMenuMarginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsMenuMarginsDefaultParams(ref string colors_menu_margin);

      partial void OnDesignschemesgetbycolorsMenuMarginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuMargin> items);  

      public async Task ExportDesignschemesgetbycolorsMenuPaddingsToExcel(string colors_menu_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenupaddings/excel(colors_menu_padding='{colors_menu_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenupaddings/excel(colors_menu_padding='{colors_menu_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsMenuPaddingsToCSV(string colors_menu_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenupaddings/csv(colors_menu_padding='{colors_menu_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenupaddings/csv(colors_menu_padding='{colors_menu_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuPadding>> GetDesignschemesgetbycolorsMenuPaddings(string colors_menu_padding, Query query = null)
      {
          OnDesignschemesgetbycolorsMenuPaddingsDefaultParams(ref colors_menu_padding);

          var items = Context.DesignschemesgetbycolorsMenuPaddings.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_menu_padding] @colors_menu_padding={0}", colors_menu_padding).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsMenuPaddingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsMenuPaddingsDefaultParams(ref string colors_menu_padding);

      partial void OnDesignschemesgetbycolorsMenuPaddingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuPadding> items);  

      public async Task ExportDesignschemesgetbycolorsWrapperBackgroundsToExcel(string colors_wrapper_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/excel(colors_wrapper_background='{colors_wrapper_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/excel(colors_wrapper_background='{colors_wrapper_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsWrapperBackgroundsToCSV(string colors_wrapper_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/csv(colors_wrapper_background='{colors_wrapper_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/csv(colors_wrapper_background='{colors_wrapper_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperBackground>> GetDesignschemesgetbycolorsWrapperBackgrounds(string colors_wrapper_background, Query query = null)
      {
          OnDesignschemesgetbycolorsWrapperBackgroundsDefaultParams(ref colors_wrapper_background);

          var items = Context.DesignschemesgetbycolorsWrapperBackgrounds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_wrapper_background] @colors_wrapper_background={0}", colors_wrapper_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsWrapperBackgroundsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsWrapperBackgroundsDefaultParams(ref string colors_wrapper_background);

      partial void OnDesignschemesgetbycolorsWrapperBackgroundsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperBackground> items);  

      public async Task ExportDesignschemesgetbycolorsWrapperFontSizesToExcel(int? colors_wrapper_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperfontsizes/excel(colors_wrapper_font_size={colors_wrapper_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperfontsizes/excel(colors_wrapper_font_size={colors_wrapper_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsWrapperFontSizesToCSV(int? colors_wrapper_font_size, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperfontsizes/csv(colors_wrapper_font_size={colors_wrapper_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperfontsizes/csv(colors_wrapper_font_size={colors_wrapper_font_size}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperFontSize>> GetDesignschemesgetbycolorsWrapperFontSizes(int? colors_wrapper_font_size, Query query = null)
      {
          OnDesignschemesgetbycolorsWrapperFontSizesDefaultParams(ref colors_wrapper_font_size);

          var items = Context.DesignschemesgetbycolorsWrapperFontSizes.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_wrapper_font_size] @colors_wrapper_font_size={0}", colors_wrapper_font_size).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsWrapperFontSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsWrapperFontSizesDefaultParams(ref int? colors_wrapper_font_size);

      partial void OnDesignschemesgetbycolorsWrapperFontSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperFontSize> items);  

      public async Task ExportDesignschemesgetbycolorsWrapperMarginsToExcel(string colors_wrapper_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrappermargins/excel(colors_wrapper_margin='{colors_wrapper_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrappermargins/excel(colors_wrapper_margin='{colors_wrapper_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsWrapperMarginsToCSV(string colors_wrapper_margin, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrappermargins/csv(colors_wrapper_margin='{colors_wrapper_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrappermargins/csv(colors_wrapper_margin='{colors_wrapper_margin}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperMargin>> GetDesignschemesgetbycolorsWrapperMargins(string colors_wrapper_margin, Query query = null)
      {
          OnDesignschemesgetbycolorsWrapperMarginsDefaultParams(ref colors_wrapper_margin);

          var items = Context.DesignschemesgetbycolorsWrapperMargins.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_wrapper_margin] @colors_wrapper_margin={0}", colors_wrapper_margin).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsWrapperMarginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsWrapperMarginsDefaultParams(ref string colors_wrapper_margin);

      partial void OnDesignschemesgetbycolorsWrapperMarginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperMargin> items);  

      public async Task ExportDesignschemesgetbycolorsWrapperPaddingsToExcel(string colors_wrapper_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperpaddings/excel(colors_wrapper_padding='{colors_wrapper_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperpaddings/excel(colors_wrapper_padding='{colors_wrapper_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsWrapperPaddingsToCSV(string colors_wrapper_padding, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperpaddings/csv(colors_wrapper_padding='{colors_wrapper_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperpaddings/csv(colors_wrapper_padding='{colors_wrapper_padding}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperPadding>> GetDesignschemesgetbycolorsWrapperPaddings(string colors_wrapper_padding, Query query = null)
      {
          OnDesignschemesgetbycolorsWrapperPaddingsDefaultParams(ref colors_wrapper_padding);

          var items = Context.DesignschemesgetbycolorsWrapperPaddings.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_wrapper_padding] @colors_wrapper_padding={0}", colors_wrapper_padding).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsWrapperPaddingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsWrapperPaddingsDefaultParams(ref string colors_wrapper_padding);

      partial void OnDesignschemesgetbycolorsWrapperPaddingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperPadding> items);  

      public async Task ExportDesignschemesgetbycolorsWrapperWidthsToExcel(int? colors_wrapper_width, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperwidths/excel(colors_wrapper_width={colors_wrapper_width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperwidths/excel(colors_wrapper_width={colors_wrapper_width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignschemesgetbycolorsWrapperWidthsToCSV(int? colors_wrapper_width, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperwidths/csv(colors_wrapper_width={colors_wrapper_width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperwidths/csv(colors_wrapper_width={colors_wrapper_width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperWidth>> GetDesignschemesgetbycolorsWrapperWidths(int? colors_wrapper_width, Query query = null)
      {
          OnDesignschemesgetbycolorsWrapperWidthsDefaultParams(ref colors_wrapper_width);

          var items = Context.DesignschemesgetbycolorsWrapperWidths.FromSqlRaw("EXEC [dbo].[DesignSchemesGetBycolors_wrapper_width] @colors_wrapper_width={0}", colors_wrapper_width).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignschemesgetbycolorsWrapperWidthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignschemesgetbycolorsWrapperWidthsDefaultParams(ref int? colors_wrapper_width);

      partial void OnDesignschemesgetbycolorsWrapperWidthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperWidth> items);  

      public async Task ExportDesignSchemesGetByIdsToExcel(string colors_body_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbyids/excel(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbyids/excel(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignSchemesGetByIdsToCSV(string colors_body_background, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbyids/csv(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbyids/csv(colors_body_background='{colors_body_background}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesGetById>> GetDesignSchemesGetByIds(string colors_body_background, Query query = null)
      {
          OnDesignSchemesGetByIdsDefaultParams(ref colors_body_background);

          var items = Context.DesignSchemesGetByIds.FromSqlRaw("EXEC [dbo].[DesignSchemesGetByID] @colors_body_background={0}", colors_body_background).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignSchemesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignSchemesGetByIdsDefaultParams(ref string colors_body_background);

      partial void OnDesignSchemesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesGetById> items);  

      public async Task ExportDesignSchemesInsertsToExcel(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesinserts/excel(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesinserts/excel(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignSchemesInsertsToCSV(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesinserts/csv(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesinserts/csv(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesInsert>> GetDesignSchemesInserts(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null)
      {
          OnDesignSchemesInsertsDefaultParams(ref colors_body_background, ref colors_body_font, ref colors_body_font_size, ref colors_body_font_color, ref colors_content_text_color, ref colors_content_border_color, ref colors_content_background, ref colors_content_padding, ref colors_content_margin, ref colors_menu_padding, ref colors_menu_font_size, ref colors_menu_background, ref colors_menu_margin, ref colors_header_padding, ref colors_header_font_size, ref colors_header_background, ref colors_header_margin, ref colors_footer_padding, ref colors_footer_font_size, ref colors_footer_background, ref colors_footer_margin, ref colors_wrapper_padding, ref colors_wrapper_font_size, ref colors_wrapper_background, ref colors_wrapper_margin, ref colors_group, ref colors_color1_rgb, ref colors_color1_brightness, ref colors_color1_isDark, ref colors_color2_hex, ref colors_color2_rgb, ref colors_color2_brightness, ref colors_color2_isDark, ref colors_color3_hex, ref colors_color3_rgb, ref colors_color3_brightness, ref colors_color3_isDark, ref colors_color4_hex, ref colors_color4_rgb, ref colors_color4_brightness, ref colors_color4_isDark, ref colors_color5_hex, ref colors_color5_rgb, ref colors_color5_brightness, ref colors_color5_isDark);

          var items = Context.DesignSchemesInserts.FromSqlRaw("EXEC [dbo].[DesignSchemesInsert] @colors_body_background={0}, @colors_body_font={1}, @colors_body_font_size={2}, @colors_body_font_color={3}, @colors_content_text_color={4}, @colors_content_border_color={5}, @colors_content_background={6}, @colors_content_padding={7}, @colors_content_margin={8}, @colors_menu_padding={9}, @colors_menu_font_size={10}, @colors_menu_background={11}, @colors_menu_margin={12}, @colors_header_padding={13}, @colors_header_font_size={14}, @colors_header_background={15}, @colors_header_margin={16}, @colors_footer_padding={17}, @colors_footer_font_size={18}, @colors_footer_background={19}, @colors_footer_margin={20}, @colors_wrapper_padding={21}, @colors_wrapper_font_size={22}, @colors_wrapper_background={23}, @colors_wrapper_margin={24}, @colors_group={25}, @colors_color1_rgb={26}, @colors_color1_brightness={27}, @colors_color1_isDark={28}, @colors_color2_hex={29}, @colors_color2_rgb={30}, @colors_color2_brightness={31}, @colors_color2_isDark={32}, @colors_color3_hex={33}, @colors_color3_rgb={34}, @colors_color3_brightness={35}, @colors_color3_isDark={36}, @colors_color4_hex={37}, @colors_color4_rgb={38}, @colors_color4_brightness={39}, @colors_color4_isDark={40}, @colors_color5_hex={41}, @colors_color5_rgb={42}, @colors_color5_brightness={43}, @colors_color5_isDark={44}", colors_body_background, colors_body_font, colors_body_font_size, colors_body_font_color, colors_content_text_color, colors_content_border_color, colors_content_background, colors_content_padding, colors_content_margin, colors_menu_padding, colors_menu_font_size, colors_menu_background, colors_menu_margin, colors_header_padding, colors_header_font_size, colors_header_background, colors_header_margin, colors_footer_padding, colors_footer_font_size, colors_footer_background, colors_footer_margin, colors_wrapper_padding, colors_wrapper_font_size, colors_wrapper_background, colors_wrapper_margin, colors_group, colors_color1_rgb, colors_color1_brightness, colors_color1_isDark, colors_color2_hex, colors_color2_rgb, colors_color2_brightness, colors_color2_isDark, colors_color3_hex, colors_color3_rgb, colors_color3_brightness, colors_color3_isDark, colors_color4_hex, colors_color4_rgb, colors_color4_brightness, colors_color4_isDark, colors_color5_hex, colors_color5_rgb, colors_color5_brightness, colors_color5_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignSchemesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignSchemesInsertsDefaultParams(ref string colors_body_background, ref string colors_body_font, ref int? colors_body_font_size, ref string colors_body_font_color, ref string colors_content_text_color, ref string colors_content_border_color, ref string colors_content_background, ref string colors_content_padding, ref string colors_content_margin, ref string colors_menu_padding, ref int? colors_menu_font_size, ref string colors_menu_background, ref string colors_menu_margin, ref string colors_header_padding, ref int? colors_header_font_size, ref string colors_header_background, ref string colors_header_margin, ref string colors_footer_padding, ref int? colors_footer_font_size, ref string colors_footer_background, ref string colors_footer_margin, ref string colors_wrapper_padding, ref int? colors_wrapper_font_size, ref string colors_wrapper_background, ref string colors_wrapper_margin, ref string colors_group, ref int? colors_color1_rgb, ref decimal? colors_color1_brightness, ref string colors_color1_isDark, ref int? colors_color2_hex, ref int? colors_color2_rgb, ref decimal? colors_color2_brightness, ref string colors_color2_isDark, ref int? colors_color3_hex, ref int? colors_color3_rgb, ref decimal? colors_color3_brightness, ref string colors_color3_isDark, ref int? colors_color4_hex, ref int? colors_color4_rgb, ref decimal? colors_color4_brightness, ref string colors_color4_isDark, ref int? colors_color5_hex, ref int? colors_color5_rgb, ref decimal? colors_color5_brightness, ref string colors_color5_isDark);

      partial void OnDesignSchemesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesInsert> items);  

      public async Task ExportDesignSchemesUpdatesToExcel(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, int? colors_wrapper_width, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesupdates/excel(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_wrapper_width={colors_wrapper_width}, colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesupdates/excel(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_wrapper_width={colors_wrapper_width}, colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDesignSchemesUpdatesToCSV(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, int? colors_wrapper_width, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesupdates/csv(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_wrapper_width={colors_wrapper_width}, colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesupdates/csv(colors_body_background='{colors_body_background}', colors_body_font='{colors_body_font}', colors_body_font_size={colors_body_font_size}, colors_body_font_color='{colors_body_font_color}', colors_content_text_color='{colors_content_text_color}', colors_content_border_color='{colors_content_border_color}', colors_content_background='{colors_content_background}', colors_content_padding='{colors_content_padding}', colors_content_margin='{colors_content_margin}', colors_menu_padding='{colors_menu_padding}', colors_menu_font_size={colors_menu_font_size}, colors_menu_background='{colors_menu_background}', colors_menu_margin='{colors_menu_margin}', colors_header_padding='{colors_header_padding}', colors_header_font_size={colors_header_font_size}, colors_header_background='{colors_header_background}', colors_header_margin='{colors_header_margin}', colors_footer_padding='{colors_footer_padding}', colors_footer_font_size={colors_footer_font_size}, colors_footer_background='{colors_footer_background}', colors_footer_margin='{colors_footer_margin}', colors_wrapper_padding='{colors_wrapper_padding}', colors_wrapper_font_size={colors_wrapper_font_size}, colors_wrapper_background='{colors_wrapper_background}', colors_wrapper_margin='{colors_wrapper_margin}', colors_wrapper_width={colors_wrapper_width}, colors_group='{colors_group}', colors_color1_rgb={colors_color1_rgb}, colors_color1_brightness={colors_color1_brightness}, colors_color1_isDark='{colors_color1_isDark}', colors_color2_hex={colors_color2_hex}, colors_color2_rgb={colors_color2_rgb}, colors_color2_brightness={colors_color2_brightness}, colors_color2_isDark='{colors_color2_isDark}', colors_color3_hex={colors_color3_hex}, colors_color3_rgb={colors_color3_rgb}, colors_color3_brightness={colors_color3_brightness}, colors_color3_isDark='{colors_color3_isDark}', colors_color4_hex={colors_color4_hex}, colors_color4_rgb={colors_color4_rgb}, colors_color4_brightness={colors_color4_brightness}, colors_color4_isDark='{colors_color4_isDark}', colors_color5_hex={colors_color5_hex}, colors_color5_rgb={colors_color5_rgb}, colors_color5_brightness={colors_color5_brightness}, colors_color5_isDark='{colors_color5_isDark}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesUpdate>> GetDesignSchemesUpdates(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, int? colors_wrapper_width, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null)
      {
          OnDesignSchemesUpdatesDefaultParams(ref colors_body_background, ref colors_body_font, ref colors_body_font_size, ref colors_body_font_color, ref colors_content_text_color, ref colors_content_border_color, ref colors_content_background, ref colors_content_padding, ref colors_content_margin, ref colors_menu_padding, ref colors_menu_font_size, ref colors_menu_background, ref colors_menu_margin, ref colors_header_padding, ref colors_header_font_size, ref colors_header_background, ref colors_header_margin, ref colors_footer_padding, ref colors_footer_font_size, ref colors_footer_background, ref colors_footer_margin, ref colors_wrapper_padding, ref colors_wrapper_font_size, ref colors_wrapper_background, ref colors_wrapper_margin, ref colors_wrapper_width, ref colors_group, ref colors_color1_rgb, ref colors_color1_brightness, ref colors_color1_isDark, ref colors_color2_hex, ref colors_color2_rgb, ref colors_color2_brightness, ref colors_color2_isDark, ref colors_color3_hex, ref colors_color3_rgb, ref colors_color3_brightness, ref colors_color3_isDark, ref colors_color4_hex, ref colors_color4_rgb, ref colors_color4_brightness, ref colors_color4_isDark, ref colors_color5_hex, ref colors_color5_rgb, ref colors_color5_brightness, ref colors_color5_isDark);

          var items = Context.DesignSchemesUpdates.FromSqlRaw("EXEC [dbo].[DesignSchemesUpdate] @colors_body_background={0}, @colors_body_font={1}, @colors_body_font_size={2}, @colors_body_font_color={3}, @colors_content_text_color={4}, @colors_content_border_color={5}, @colors_content_background={6}, @colors_content_padding={7}, @colors_content_margin={8}, @colors_menu_padding={9}, @colors_menu_font_size={10}, @colors_menu_background={11}, @colors_menu_margin={12}, @colors_header_padding={13}, @colors_header_font_size={14}, @colors_header_background={15}, @colors_header_margin={16}, @colors_footer_padding={17}, @colors_footer_font_size={18}, @colors_footer_background={19}, @colors_footer_margin={20}, @colors_wrapper_padding={21}, @colors_wrapper_font_size={22}, @colors_wrapper_background={23}, @colors_wrapper_margin={24}, @colors_wrapper_width={25}, @colors_group={26}, @colors_color1_rgb={27}, @colors_color1_brightness={28}, @colors_color1_isDark={29}, @colors_color2_hex={30}, @colors_color2_rgb={31}, @colors_color2_brightness={32}, @colors_color2_isDark={33}, @colors_color3_hex={34}, @colors_color3_rgb={35}, @colors_color3_brightness={36}, @colors_color3_isDark={37}, @colors_color4_hex={38}, @colors_color4_rgb={39}, @colors_color4_brightness={40}, @colors_color4_isDark={41}, @colors_color5_hex={42}, @colors_color5_rgb={43}, @colors_color5_brightness={44}, @colors_color5_isDark={45}", colors_body_background, colors_body_font, colors_body_font_size, colors_body_font_color, colors_content_text_color, colors_content_border_color, colors_content_background, colors_content_padding, colors_content_margin, colors_menu_padding, colors_menu_font_size, colors_menu_background, colors_menu_margin, colors_header_padding, colors_header_font_size, colors_header_background, colors_header_margin, colors_footer_padding, colors_footer_font_size, colors_footer_background, colors_footer_margin, colors_wrapper_padding, colors_wrapper_font_size, colors_wrapper_background, colors_wrapper_margin, colors_wrapper_width, colors_group, colors_color1_rgb, colors_color1_brightness, colors_color1_isDark, colors_color2_hex, colors_color2_rgb, colors_color2_brightness, colors_color2_isDark, colors_color3_hex, colors_color3_rgb, colors_color3_brightness, colors_color3_isDark, colors_color4_hex, colors_color4_rgb, colors_color4_brightness, colors_color4_isDark, colors_color5_hex, colors_color5_rgb, colors_color5_brightness, colors_color5_isDark).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDesignSchemesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDesignSchemesUpdatesDefaultParams(ref string colors_body_background, ref string colors_body_font, ref int? colors_body_font_size, ref string colors_body_font_color, ref string colors_content_text_color, ref string colors_content_border_color, ref string colors_content_background, ref string colors_content_padding, ref string colors_content_margin, ref string colors_menu_padding, ref int? colors_menu_font_size, ref string colors_menu_background, ref string colors_menu_margin, ref string colors_header_padding, ref int? colors_header_font_size, ref string colors_header_background, ref string colors_header_margin, ref string colors_footer_padding, ref int? colors_footer_font_size, ref string colors_footer_background, ref string colors_footer_margin, ref string colors_wrapper_padding, ref int? colors_wrapper_font_size, ref string colors_wrapper_background, ref string colors_wrapper_margin, ref int? colors_wrapper_width, ref string colors_group, ref int? colors_color1_rgb, ref decimal? colors_color1_brightness, ref string colors_color1_isDark, ref int? colors_color2_hex, ref int? colors_color2_rgb, ref decimal? colors_color2_brightness, ref string colors_color2_isDark, ref int? colors_color3_hex, ref int? colors_color3_rgb, ref decimal? colors_color3_brightness, ref string colors_color3_isDark, ref int? colors_color4_hex, ref int? colors_color4_rgb, ref decimal? colors_color4_brightness, ref string colors_color4_isDark, ref int? colors_color5_hex, ref int? colors_color5_rgb, ref decimal? colors_color5_brightness, ref string colors_color5_isDark);

      partial void OnDesignSchemesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DesignSchemesUpdate> items);  

      public async Task ExportDeviceGroupsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDeviceGroupsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetAll>> GetDeviceGroupsGetAlls(Query query = null)
      {
          OnDeviceGroupsGetAllsDefaultParams();

          var items = Context.DeviceGroupsGetAlls.FromSqlRaw("EXEC [dbo].[DeviceGroupsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDeviceGroupsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDeviceGroupsGetAllsDefaultParams();

      partial void OnDeviceGroupsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetAll> items);  

      public async Task ExportDeviceGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDeviceGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetById>> GetDeviceGroupsGetByIds(int? Id, Query query = null)
      {
          OnDeviceGroupsGetByIdsDefaultParams(ref Id);

          var items = Context.DeviceGroupsGetByIds.FromSqlRaw("EXEC [dbo].[DeviceGroupsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDeviceGroupsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDeviceGroupsGetByIdsDefaultParams(ref int? Id);

      partial void OnDeviceGroupsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetById> items);  

      public async Task ExportDeviceGroupsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDeviceGroupsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetByName>> GetDeviceGroupsGetByNames(string Name, Query query = null)
      {
          OnDeviceGroupsGetByNamesDefaultParams(ref Name);

          var items = Context.DeviceGroupsGetByNames.FromSqlRaw("EXEC [dbo].[DeviceGroupsGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDeviceGroupsGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDeviceGroupsGetByNamesDefaultParams(ref string Name);

      partial void OnDeviceGroupsGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetByName> items);  

      public async Task ExportDeviceGroupsInsertsToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsinserts/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsinserts/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDeviceGroupsInsertsToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsinserts/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsinserts/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsInsert>> GetDeviceGroupsInserts(string Name, Query query = null)
      {
          OnDeviceGroupsInsertsDefaultParams(ref Name);

          var items = Context.DeviceGroupsInserts.FromSqlRaw("EXEC [dbo].[DeviceGroupsInsert] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDeviceGroupsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDeviceGroupsInsertsDefaultParams(ref string Name);

      partial void OnDeviceGroupsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsInsert> items);  

      public async Task ExportDeviceGroupsUpdatesToExcel(int? Id, string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsupdates/excel(Id={Id}, Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsupdates/excel(Id={Id}, Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDeviceGroupsUpdatesToCSV(int? Id, string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsupdates/csv(Id={Id}, Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsupdates/csv(Id={Id}, Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsUpdate>> GetDeviceGroupsUpdates(int? Id, string Name, Query query = null)
      {
          OnDeviceGroupsUpdatesDefaultParams(ref Id, ref Name);

          var items = Context.DeviceGroupsUpdates.FromSqlRaw("EXEC [dbo].[DeviceGroupsUpdate] @Id={0}, @Name={1}", Id, Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDeviceGroupsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDeviceGroupsUpdatesDefaultParams(ref int? Id, ref string Name);

      partial void OnDeviceGroupsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DeviceGroupsUpdate> items);  

      public async Task ExportDevicesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetAll>> GetDevicesGetAlls(Query query = null)
      {
          OnDevicesGetAllsDefaultParams();

          var items = Context.DevicesGetAlls.FromSqlRaw("EXEC [dbo].[DevicesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetAllsDefaultParams();

      partial void OnDevicesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetAll> items);  

      public async Task ExportDevicesGetByBrandsToExcel(string Brand, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbybrands/excel(Brand='{Brand}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbybrands/excel(Brand='{Brand}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByBrandsToCSV(string Brand, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbybrands/csv(Brand='{Brand}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbybrands/csv(Brand='{Brand}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByBrand>> GetDevicesGetByBrands(string Brand, Query query = null)
      {
          OnDevicesGetByBrandsDefaultParams(ref Brand);

          var items = Context.DevicesGetByBrands.FromSqlRaw("EXEC [dbo].[DevicesGetByBrand] @Brand={0}", Brand).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByBrandsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByBrandsDefaultParams(ref string Brand);

      partial void OnDevicesGetByBrandsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByBrand> items);  

      public async Task ExportDevicesGetByDeviceGroupIdsToExcel(int? DeviceGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicegroupids/excel(DeviceGroupId={DeviceGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicegroupids/excel(DeviceGroupId={DeviceGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByDeviceGroupIdsToCSV(int? DeviceGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicegroupids/csv(DeviceGroupId={DeviceGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicegroupids/csv(DeviceGroupId={DeviceGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceGroupId>> GetDevicesGetByDeviceGroupIds(int? DeviceGroupId, Query query = null)
      {
          OnDevicesGetByDeviceGroupIdsDefaultParams(ref DeviceGroupId);

          var items = Context.DevicesGetByDeviceGroupIds.FromSqlRaw("EXEC [dbo].[DevicesGetByDeviceGroupId] @DeviceGroupId={0}", DeviceGroupId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByDeviceGroupIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByDeviceGroupIdsDefaultParams(ref int? DeviceGroupId);

      partial void OnDevicesGetByDeviceGroupIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceGroupId> items);  

      public async Task ExportDevicesGetByDeviceNamesToExcel(string DeviceName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicenames/excel(DeviceName='{DeviceName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicenames/excel(DeviceName='{DeviceName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByDeviceNamesToCSV(string DeviceName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicenames/csv(DeviceName='{DeviceName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicenames/csv(DeviceName='{DeviceName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceName>> GetDevicesGetByDeviceNames(string DeviceName, Query query = null)
      {
          OnDevicesGetByDeviceNamesDefaultParams(ref DeviceName);

          var items = Context.DevicesGetByDeviceNames.FromSqlRaw("EXEC [dbo].[DevicesGetByDeviceName] @DeviceName={0}", DeviceName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByDeviceNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByDeviceNamesDefaultParams(ref string DeviceName);

      partial void OnDevicesGetByDeviceNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceName> items);  

      public async Task ExportDevicesGetByHeightsToExcel(int? Height, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyheights/excel(Height={Height}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyheights/excel(Height={Height}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByHeightsToCSV(int? Height, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyheights/csv(Height={Height}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyheights/csv(Height={Height}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByHeight>> GetDevicesGetByHeights(int? Height, Query query = null)
      {
          OnDevicesGetByHeightsDefaultParams(ref Height);

          var items = Context.DevicesGetByHeights.FromSqlRaw("EXEC [dbo].[DevicesGetByHeight] @Height={0}", Height).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByHeightsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByHeightsDefaultParams(ref int? Height);

      partial void OnDevicesGetByHeightsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByHeight> items);  

      public async Task ExportDevicesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetById>> GetDevicesGetByIds(int? Id, Query query = null)
      {
          OnDevicesGetByIdsDefaultParams(ref Id);

          var items = Context.DevicesGetByIds.FromSqlRaw("EXEC [dbo].[DevicesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByIdsDefaultParams(ref int? Id);

      partial void OnDevicesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetById> items);  

      public async Task ExportDevicesGetByImgsToExcel(string Img, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyimgs/excel(Img='{Img}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyimgs/excel(Img='{Img}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByImgsToCSV(string Img, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyimgs/csv(Img='{Img}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyimgs/csv(Img='{Img}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByImg>> GetDevicesGetByImgs(string Img, Query query = null)
      {
          OnDevicesGetByImgsDefaultParams(ref Img);

          var items = Context.DevicesGetByImgs.FromSqlRaw("EXEC [dbo].[DevicesGetByImg] @Img={0}", Img).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByImgsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByImgsDefaultParams(ref string Img);

      partial void OnDevicesGetByImgsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByImg> items);  

      public async Task ExportDevicesGetByIsLandScapesToExcel(bool? IsLandScape, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyislandscapes/excel(IsLandScape={IsLandScape}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyislandscapes/excel(IsLandScape={IsLandScape}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByIsLandScapesToCSV(bool? IsLandScape, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyislandscapes/csv(IsLandScape={IsLandScape}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyislandscapes/csv(IsLandScape={IsLandScape}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByIsLandScape>> GetDevicesGetByIsLandScapes(bool? IsLandScape, Query query = null)
      {
          OnDevicesGetByIsLandScapesDefaultParams(ref IsLandScape);

          var items = Context.DevicesGetByIsLandScapes.FromSqlRaw("EXEC [dbo].[DevicesGetByIsLandScape] @IsLandScape={0}", IsLandScape).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByIsLandScapesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByIsLandScapesDefaultParams(ref bool? IsLandScape);

      partial void OnDevicesGetByIsLandScapesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByIsLandScape> items);  

      public async Task ExportDevicesGetByResulation1xesToExcel(string Resulation1x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation1xes/excel(Resulation1x='{Resulation1x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation1xes/excel(Resulation1x='{Resulation1x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByResulation1xesToCSV(string Resulation1x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation1xes/csv(Resulation1x='{Resulation1x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation1xes/csv(Resulation1x='{Resulation1x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation1x>> GetDevicesGetByResulation1xes(string Resulation1x, Query query = null)
      {
          OnDevicesGetByResulation1xesDefaultParams(ref Resulation1x);

          var items = Context.DevicesGetByResulation1xes.FromSqlRaw("EXEC [dbo].[DevicesGetByResulation1x] @Resulation1x={0}", Resulation1x).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByResulation1xesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByResulation1xesDefaultParams(ref string Resulation1x);

      partial void OnDevicesGetByResulation1xesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation1x> items);  

      public async Task ExportDevicesGetByResulation2xesToExcel(string Resulation2x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation2xes/excel(Resulation2x='{Resulation2x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation2xes/excel(Resulation2x='{Resulation2x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByResulation2xesToCSV(string Resulation2x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation2xes/csv(Resulation2x='{Resulation2x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation2xes/csv(Resulation2x='{Resulation2x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation2x>> GetDevicesGetByResulation2xes(string Resulation2x, Query query = null)
      {
          OnDevicesGetByResulation2xesDefaultParams(ref Resulation2x);

          var items = Context.DevicesGetByResulation2xes.FromSqlRaw("EXEC [dbo].[DevicesGetByResulation2x] @Resulation2x={0}", Resulation2x).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByResulation2xesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByResulation2xesDefaultParams(ref string Resulation2x);

      partial void OnDevicesGetByResulation2xesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation2x> items);  

      public async Task ExportDevicesGetByResulation3xesToExcel(string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation3xes/excel(Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation3xes/excel(Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByResulation3xesToCSV(string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation3xes/csv(Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation3xes/csv(Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation3x>> GetDevicesGetByResulation3xes(string Resulation3x, Query query = null)
      {
          OnDevicesGetByResulation3xesDefaultParams(ref Resulation3x);

          var items = Context.DevicesGetByResulation3xes.FromSqlRaw("EXEC [dbo].[DevicesGetByResulation3x] @Resulation3x={0}", Resulation3x).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByResulation3xesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByResulation3xesDefaultParams(ref string Resulation3x);

      partial void OnDevicesGetByResulation3xesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation3x> items);  

      public async Task ExportDevicesGetByWidthsToExcel(int? Width, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbywidths/excel(Width={Width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbywidths/excel(Width={Width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesGetByWidthsToCSV(int? Width, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbywidths/csv(Width={Width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbywidths/csv(Width={Width}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByWidth>> GetDevicesGetByWidths(int? Width, Query query = null)
      {
          OnDevicesGetByWidthsDefaultParams(ref Width);

          var items = Context.DevicesGetByWidths.FromSqlRaw("EXEC [dbo].[DevicesGetByWidth] @Width={0}", Width).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesGetByWidthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesGetByWidthsDefaultParams(ref int? Width);

      partial void OnDevicesGetByWidthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesGetByWidth> items);  

      public async Task ExportDevicesInsertsToExcel(string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesinserts/excel(DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesinserts/excel(DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesInsertsToCSV(string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesinserts/csv(DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesinserts/csv(DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesInsert>> GetDevicesInserts(string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null)
      {
          OnDevicesInsertsDefaultParams(ref DeviceName, ref DeviceGroupId, ref Width, ref Height, ref Brand, ref Img, ref IsLandScape, ref Resulation1x, ref Resulation2x, ref Resulation3x);

          var items = Context.DevicesInserts.FromSqlRaw("EXEC [dbo].[DevicesInsert] @DeviceName={0}, @DeviceGroupId={1}, @Width={2}, @Height={3}, @Brand={4}, @Img={5}, @IsLandScape={6}, @Resulation1x={7}, @Resulation2x={8}, @Resulation3x={9}", DeviceName, DeviceGroupId, Width, Height, Brand, Img, IsLandScape, Resulation1x, Resulation2x, Resulation3x).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesInsertsDefaultParams(ref string DeviceName, ref int? DeviceGroupId, ref int? Width, ref int? Height, ref string Brand, ref string Img, ref bool? IsLandScape, ref string Resulation1x, ref string Resulation2x, ref string Resulation3x);

      partial void OnDevicesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesInsert> items);  

      public async Task ExportDevicesUpdatesToExcel(int? Id, string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesupdates/excel(Id={Id}, DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesupdates/excel(Id={Id}, DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDevicesUpdatesToCSV(int? Id, string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesupdates/csv(Id={Id}, DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesupdates/csv(Id={Id}, DeviceName='{DeviceName}', DeviceGroupId={DeviceGroupId}, Width={Width}, Height={Height}, Brand='{Brand}', Img='{Img}', IsLandScape={IsLandScape}, Resulation1x='{Resulation1x}', Resulation2x='{Resulation2x}', Resulation3x='{Resulation3x}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DevicesUpdate>> GetDevicesUpdates(int? Id, string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null)
      {
          OnDevicesUpdatesDefaultParams(ref Id, ref DeviceName, ref DeviceGroupId, ref Width, ref Height, ref Brand, ref Img, ref IsLandScape, ref Resulation1x, ref Resulation2x, ref Resulation3x);

          var items = Context.DevicesUpdates.FromSqlRaw("EXEC [dbo].[DevicesUpdate] @Id={0}, @DeviceName={1}, @DeviceGroupId={2}, @Width={3}, @Height={4}, @Brand={5}, @Img={6}, @IsLandScape={7}, @Resulation1x={8}, @Resulation2x={9}, @Resulation3x={10}", Id, DeviceName, DeviceGroupId, Width, Height, Brand, Img, IsLandScape, Resulation1x, Resulation2x, Resulation3x).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDevicesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDevicesUpdatesDefaultParams(ref int? Id, ref string DeviceName, ref int? DeviceGroupId, ref int? Width, ref int? Height, ref string Brand, ref string Img, ref bool? IsLandScape, ref string Resulation1x, ref string Resulation2x, ref string Resulation3x);

      partial void OnDevicesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DevicesUpdate> items);  

      public async Task ExportDynamicQueueListsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicqueuelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicqueuelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicQueueListsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicqueuelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicqueuelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicQueueList>> GetDynamicQueueLists(Query query = null)
      {
          OnDynamicQueueListsDefaultParams();

          var items = Context.DynamicQueueLists.FromSqlRaw("EXEC [dbo].[DynamicQueueList] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicQueueListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicQueueListsDefaultParams();

      partial void OnDynamicQueueListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicQueueList> items);  

      public async Task ExportDynamicSpaceReportsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicspacereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicspacereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicSpaceReportsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicspacereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicspacereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicSpaceReport>> GetDynamicSpaceReports(Query query = null)
      {
          OnDynamicSpaceReportsDefaultParams();

          var items = Context.DynamicSpaceReports.FromSqlRaw("EXEC [dbo].[DynamicSpaceReport] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicSpaceReportsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicSpaceReportsDefaultParams();

      partial void OnDynamicSpaceReportsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicSpaceReport> items);  

      public async Task ExportDynamicTableCountsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablecounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablecounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTableCountsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablecounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablecounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableCount>> GetDynamicTableCounts(Query query = null)
      {
          OnDynamicTableCountsDefaultParams();

          var items = Context.DynamicTableCounts.FromSqlRaw("EXEC [dbo].[DynamicTableCount] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTableCountsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTableCountsDefaultParams();

      partial void OnDynamicTableCountsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableCount> items);  

      public async Task ExportDynamicTableForeignKeysToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictableforeignkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictableforeignkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTableForeignKeysToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictableforeignkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictableforeignkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableForeignKey>> GetDynamicTableForeignKeys(Query query = null)
      {
          OnDynamicTableForeignKeysDefaultParams();

          var items = Context.DynamicTableForeignKeys.FromSqlRaw("EXEC [dbo].[DynamicTableForeignKeys] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTableForeignKeysInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTableForeignKeysDefaultParams();

      partial void OnDynamicTableForeignKeysInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableForeignKey> items);  

      public async Task ExportDynamicTableReportsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTableReportsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableReport>> GetDynamicTableReports(Query query = null)
      {
          OnDynamicTableReportsDefaultParams();

          var items = Context.DynamicTableReports.FromSqlRaw("EXEC [dbo].[DynamicTableReport] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTableReportsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTableReportsDefaultParams();

      partial void OnDynamicTableReportsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableReport> items);  

      public async Task ExportDynamicTableSearchAllsToExcel(string SearchStr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchalls/excel(SearchStr='{SearchStr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchalls/excel(SearchStr='{SearchStr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTableSearchAllsToCSV(string SearchStr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchalls/csv(SearchStr='{SearchStr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchalls/csv(SearchStr='{SearchStr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableSearchAll>> GetDynamicTableSearchAlls(string SearchStr, Query query = null)
      {
          OnDynamicTableSearchAllsDefaultParams(ref SearchStr);

          var items = Context.DynamicTableSearchAlls.FromSqlRaw("EXEC [dbo].[DynamicTableSearchAll] @SearchStr={0}", SearchStr).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTableSearchAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTableSearchAllsDefaultParams(ref string SearchStr);

      partial void OnDynamicTableSearchAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableSearchAll> items);  

      public async Task ExportDynamicTableSearchTablesToExcel(string SearchStr, string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchtables/excel(SearchStr='{SearchStr}', TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchtables/excel(SearchStr='{SearchStr}', TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTableSearchTablesToCSV(string SearchStr, string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchtables/csv(SearchStr='{SearchStr}', TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchtables/csv(SearchStr='{SearchStr}', TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableSearchTable>> GetDynamicTableSearchTables(string SearchStr, string TableName, Query query = null)
      {
          OnDynamicTableSearchTablesDefaultParams(ref SearchStr, ref TableName);

          var items = Context.DynamicTableSearchTables.FromSqlRaw("EXEC [dbo].[DynamicTableSearchTable] @SearchStr={0}, @TableName={1}", SearchStr, TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTableSearchTablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTableSearchTablesDefaultParams(ref string SearchStr, ref string TableName);

      partial void OnDynamicTableSearchTablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTableSearchTable> items);  

      public async Task ExportDynamicTransactionReportsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictransactionreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictransactionreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicTransactionReportsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictransactionreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictransactionreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTransactionReport>> GetDynamicTransactionReports(Query query = null)
      {
          OnDynamicTransactionReportsDefaultParams();

          var items = Context.DynamicTransactionReports.FromSqlRaw("EXEC [dbo].[DynamicTransactionReport] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicTransactionReportsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicTransactionReportsDefaultParams();

      partial void OnDynamicTransactionReportsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicTransactionReport> items);  

      public async Task ExportDynamicViewDtosToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewdtos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewdtos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicViewDtosToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewdtos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewdtos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicViewDto>> GetDynamicViewDtos(Query query = null)
      {
          OnDynamicViewDtosDefaultParams();

          var items = Context.DynamicViewDtos.FromSqlRaw("EXEC [dbo].[DynamicViewDTO] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicViewDtosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicViewDtosDefaultParams();

      partial void OnDynamicViewDtosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicViewDto> items);  

      public async Task ExportDynamicViewReportsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportDynamicViewReportsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.DynamicViewReport>> GetDynamicViewReports(Query query = null)
      {
          OnDynamicViewReportsDefaultParams();

          var items = Context.DynamicViewReports.FromSqlRaw("EXEC [dbo].[DynamicViewReport] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnDynamicViewReportsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnDynamicViewReportsDefaultParams();

      partial void OnDynamicViewReportsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.DynamicViewReport> items);  

      public async Task ExportFieldsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetAll>> GetFieldsGetAlls(Query query = null)
      {
          OnFieldsGetAllsDefaultParams();

          var items = Context.FieldsGetAlls.FromSqlRaw("EXEC [dbo].[FieldsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetAllsDefaultParams();

      partial void OnFieldsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetAll> items);  

      public async Task ExportFieldsGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByColumnName>> GetFieldsGetByColumnNames(string ColumnName, Query query = null)
      {
          OnFieldsGetByColumnNamesDefaultParams(ref ColumnName);

          var items = Context.FieldsGetByColumnNames.FromSqlRaw("EXEC [dbo].[FieldsGetByColumnName] @ColumnName={0}", ColumnName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByColumnNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByColumnNamesDefaultParams(ref string ColumnName);

      partial void OnFieldsGetByColumnNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByColumnName> items);  

      public async Task ExportFieldsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByComment>> GetFieldsGetByComments(string Comment, Query query = null)
      {
          OnFieldsGetByCommentsDefaultParams(ref Comment);

          var items = Context.FieldsGetByComments.FromSqlRaw("EXEC [dbo].[FieldsGetByComment] @Comment={0}", Comment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByCommentsDefaultParams(ref string Comment);

      partial void OnFieldsGetByCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByComment> items);  

      public async Task ExportFieldsGetByConstraintRulesToExcel(string ConstraintRules, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyconstraintrules/excel(ConstraintRules='{ConstraintRules}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyconstraintrules/excel(ConstraintRules='{ConstraintRules}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByConstraintRulesToCSV(string ConstraintRules, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyconstraintrules/csv(ConstraintRules='{ConstraintRules}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyconstraintrules/csv(ConstraintRules='{ConstraintRules}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByConstraintRule>> GetFieldsGetByConstraintRules(string ConstraintRules, Query query = null)
      {
          OnFieldsGetByConstraintRulesDefaultParams(ref ConstraintRules);

          var items = Context.FieldsGetByConstraintRules.FromSqlRaw("EXEC [dbo].[FieldsGetByConstraintRules] @ConstraintRules={0}", ConstraintRules).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByConstraintRulesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByConstraintRulesDefaultParams(ref string ConstraintRules);

      partial void OnFieldsGetByConstraintRulesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByConstraintRule> items);  

      public async Task ExportFieldsGetByDbTypesToExcel(string DbType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydbtypes/excel(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydbtypes/excel(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByDbTypesToCSV(string DbType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydbtypes/csv(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydbtypes/csv(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByDbType>> GetFieldsGetByDbTypes(string DbType, Query query = null)
      {
          OnFieldsGetByDbTypesDefaultParams(ref DbType);

          var items = Context.FieldsGetByDbTypes.FromSqlRaw("EXEC [dbo].[FieldsGetByDbType] @DbType={0}", DbType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByDbTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByDbTypesDefaultParams(ref string DbType);

      partial void OnFieldsGetByDbTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByDbType> items);  

      public async Task ExportFieldsGetByDefaultValuesToExcel(string DefaultValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydefaultvalues/excel(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydefaultvalues/excel(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByDefaultValuesToCSV(string DefaultValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydefaultvalues/csv(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydefaultvalues/csv(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByDefaultValue>> GetFieldsGetByDefaultValues(string DefaultValue, Query query = null)
      {
          OnFieldsGetByDefaultValuesDefaultParams(ref DefaultValue);

          var items = Context.FieldsGetByDefaultValues.FromSqlRaw("EXEC [dbo].[FieldsGetByDefaultValue] @DefaultValue={0}", DefaultValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByDefaultValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByDefaultValuesDefaultParams(ref string DefaultValue);

      partial void OnFieldsGetByDefaultValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByDefaultValue> items);  

      public async Task ExportFieldsGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetById>> GetFieldsGetByIds(long? Id, Query query = null)
      {
          OnFieldsGetByIdsDefaultParams(ref Id);

          var items = Context.FieldsGetByIds.FromSqlRaw("EXEC [dbo].[FieldsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByIdsDefaultParams(ref long? Id);

      partial void OnFieldsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetById> items);  

      public async Task ExportFieldsGetByIsNullablesToExcel(bool? IsNullable, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisnullables/excel(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisnullables/excel(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByIsNullablesToCSV(bool? IsNullable, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisnullables/csv(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisnullables/csv(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByIsNullable>> GetFieldsGetByIsNullables(bool? IsNullable, Query query = null)
      {
          OnFieldsGetByIsNullablesDefaultParams(ref IsNullable);

          var items = Context.FieldsGetByIsNullables.FromSqlRaw("EXEC [dbo].[FieldsGetByIsNullable] @IsNullable={0}", IsNullable).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByIsNullablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByIsNullablesDefaultParams(ref bool? IsNullable);

      partial void OnFieldsGetByIsNullablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByIsNullable> items);  

      public async Task ExportFieldsGetByIsPrimariesToExcel(bool? IsPrimary, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisprimaries/excel(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisprimaries/excel(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByIsPrimariesToCSV(bool? IsPrimary, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisprimaries/csv(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisprimaries/csv(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByIsPrimary>> GetFieldsGetByIsPrimaries(bool? IsPrimary, Query query = null)
      {
          OnFieldsGetByIsPrimariesDefaultParams(ref IsPrimary);

          var items = Context.FieldsGetByIsPrimaries.FromSqlRaw("EXEC [dbo].[FieldsGetByIsPrimary] @IsPrimary={0}", IsPrimary).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByIsPrimariesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByIsPrimariesDefaultParams(ref bool? IsPrimary);

      partial void OnFieldsGetByIsPrimariesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByIsPrimary> items);  

      public async Task ExportFieldsGetByMaxLengthsToExcel(int? MaxLength, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbymaxlengths/excel(MaxLength={MaxLength}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbymaxlengths/excel(MaxLength={MaxLength}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByMaxLengthsToCSV(int? MaxLength, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbymaxlengths/csv(MaxLength={MaxLength}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbymaxlengths/csv(MaxLength={MaxLength}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByMaxLength>> GetFieldsGetByMaxLengths(int? MaxLength, Query query = null)
      {
          OnFieldsGetByMaxLengthsDefaultParams(ref MaxLength);

          var items = Context.FieldsGetByMaxLengths.FromSqlRaw("EXEC [dbo].[FieldsGetByMaxLength] @MaxLength={0}", MaxLength).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByMaxLengthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByMaxLengthsDefaultParams(ref int? MaxLength);

      partial void OnFieldsGetByMaxLengthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByMaxLength> items);  

      public async Task ExportFieldsGetByPrimitiveTypesToExcel(string PrimitiveType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprimitivetypes/excel(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprimitivetypes/excel(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByPrimitiveTypesToCSV(string PrimitiveType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprimitivetypes/csv(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprimitivetypes/csv(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByPrimitiveType>> GetFieldsGetByPrimitiveTypes(string PrimitiveType, Query query = null)
      {
          OnFieldsGetByPrimitiveTypesDefaultParams(ref PrimitiveType);

          var items = Context.FieldsGetByPrimitiveTypes.FromSqlRaw("EXEC [dbo].[FieldsGetByPrimitiveType] @PrimitiveType={0}", PrimitiveType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByPrimitiveTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByPrimitiveTypesDefaultParams(ref string PrimitiveType);

      partial void OnFieldsGetByPrimitiveTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByPrimitiveType> items);  

      public async Task ExportFieldsGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectId>> GetFieldsGetByProjectIds(long? ProjectId, Query query = null)
      {
          OnFieldsGetByProjectIdsDefaultParams(ref ProjectId);

          var items = Context.FieldsGetByProjectIds.FromSqlRaw("EXEC [dbo].[FieldsGetByProjectId] @ProjectId={0}", ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByProjectIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByProjectIdsDefaultParams(ref long? ProjectId);

      partial void OnFieldsGetByProjectIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectId> items);  

      public async Task ExportFieldsGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectName>> GetFieldsGetByProjectNames(string ProjectName, Query query = null)
      {
          OnFieldsGetByProjectNamesDefaultParams(ref ProjectName);

          var items = Context.FieldsGetByProjectNames.FromSqlRaw("EXEC [dbo].[FieldsGetByProjectName] @ProjectName={0}", ProjectName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByProjectNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByProjectNamesDefaultParams(ref string ProjectName);

      partial void OnFieldsGetByProjectNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectName> items);  

      public async Task ExportFieldsGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByTableId>> GetFieldsGetByTableIds(long? TableId, Query query = null)
      {
          OnFieldsGetByTableIdsDefaultParams(ref TableId);

          var items = Context.FieldsGetByTableIds.FromSqlRaw("EXEC [dbo].[FieldsGetByTableId] @TableId={0}", TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByTableIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByTableIdsDefaultParams(ref long? TableId);

      partial void OnFieldsGetByTableIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByTableId> items);  

      public async Task ExportFieldsGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByTableName>> GetFieldsGetByTableNames(string TableName, Query query = null)
      {
          OnFieldsGetByTableNamesDefaultParams(ref TableName);

          var items = Context.FieldsGetByTableNames.FromSqlRaw("EXEC [dbo].[FieldsGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsGetByTableNamesDefaultParams(ref string TableName);

      partial void OnFieldsGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsGetByTableName> items);  

      public async Task ExportFieldsInsertsToExcel(string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsinserts/excel(ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsinserts/excel(ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsInsertsToCSV(string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsinserts/csv(ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsinserts/csv(ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsInsert>> GetFieldsInserts(string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null)
      {
          OnFieldsInsertsDefaultParams(ref ColumnName, ref DbType, ref PrimitiveType, ref IsNullable, ref MaxLength, ref ConstraintRules, ref IsPrimary, ref Comment, ref DefaultValue, ref TableName, ref ProjectName, ref TableId, ref ProjectId);

          var items = Context.FieldsInserts.FromSqlRaw("EXEC [dbo].[FieldsInsert] @ColumnName={0}, @DbType={1}, @PrimitiveType={2}, @IsNullable={3}, @MaxLength={4}, @ConstraintRules={5}, @IsPrimary={6}, @Comment={7}, @DefaultValue={8}, @TableName={9}, @ProjectName={10}, @TableId={11}, @ProjectId={12}", ColumnName, DbType, PrimitiveType, IsNullable, MaxLength, ConstraintRules, IsPrimary, Comment, DefaultValue, TableName, ProjectName, TableId, ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsInsertsDefaultParams(ref string ColumnName, ref string DbType, ref string PrimitiveType, ref bool? IsNullable, ref int? MaxLength, ref string ConstraintRules, ref bool? IsPrimary, ref string Comment, ref string DefaultValue, ref string TableName, ref string ProjectName, ref long? TableId, ref long? ProjectId);

      partial void OnFieldsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsInsert> items);  

      public async Task ExportFieldsUpdatesToExcel(long? Id, string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsupdates/excel(Id={Id}, ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsupdates/excel(Id={Id}, ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportFieldsUpdatesToCSV(long? Id, string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsupdates/csv(Id={Id}, ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsupdates/csv(Id={Id}, ColumnName='{ColumnName}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', IsNullable={IsNullable}, MaxLength={MaxLength}, ConstraintRules='{ConstraintRules}', IsPrimary={IsPrimary}, Comment='{Comment}', DefaultValue='{DefaultValue}', TableName='{TableName}', ProjectName='{ProjectName}', TableId={TableId}, ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.FieldsUpdate>> GetFieldsUpdates(long? Id, string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null)
      {
          OnFieldsUpdatesDefaultParams(ref Id, ref ColumnName, ref DbType, ref PrimitiveType, ref IsNullable, ref MaxLength, ref ConstraintRules, ref IsPrimary, ref Comment, ref DefaultValue, ref TableName, ref ProjectName, ref TableId, ref ProjectId);

          var items = Context.FieldsUpdates.FromSqlRaw("EXEC [dbo].[FieldsUpdate] @Id={0}, @ColumnName={1}, @DbType={2}, @PrimitiveType={3}, @IsNullable={4}, @MaxLength={5}, @ConstraintRules={6}, @IsPrimary={7}, @Comment={8}, @DefaultValue={9}, @TableName={10}, @ProjectName={11}, @TableId={12}, @ProjectId={13}", Id, ColumnName, DbType, PrimitiveType, IsNullable, MaxLength, ConstraintRules, IsPrimary, Comment, DefaultValue, TableName, ProjectName, TableId, ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnFieldsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnFieldsUpdatesDefaultParams(ref long? Id, ref string ColumnName, ref string DbType, ref string PrimitiveType, ref bool? IsNullable, ref int? MaxLength, ref string ConstraintRules, ref bool? IsPrimary, ref string Comment, ref string DefaultValue, ref string TableName, ref string ProjectName, ref long? TableId, ref long? ProjectId);

      partial void OnFieldsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.FieldsUpdate> items);  

      public async Task ExportForeignKeyRulesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetAll>> GetForeignKeyRulesGetAlls(Query query = null)
      {
          OnForeignKeyRulesGetAllsDefaultParams();

          var items = Context.ForeignKeyRulesGetAlls.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetAllsDefaultParams();

      partial void OnForeignKeyRulesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetAll> items);  

      public async Task ExportForeignKeyRulesGetByColumnIdsToExcel(long? ColumnId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnids/excel(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnids/excel(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByColumnIdsToCSV(long? ColumnId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnids/csv(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnids/csv(ColumnId={ColumnId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnId>> GetForeignKeyRulesGetByColumnIds(long? ColumnId, Query query = null)
      {
          OnForeignKeyRulesGetByColumnIdsDefaultParams(ref ColumnId);

          var items = Context.ForeignKeyRulesGetByColumnIds.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByColumnId] @ColumnId={0}", ColumnId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByColumnIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByColumnIdsDefaultParams(ref long? ColumnId);

      partial void OnForeignKeyRulesGetByColumnIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnId> items);  

      public async Task ExportForeignKeyRulesGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnName>> GetForeignKeyRulesGetByColumnNames(string ColumnName, Query query = null)
      {
          OnForeignKeyRulesGetByColumnNamesDefaultParams(ref ColumnName);

          var items = Context.ForeignKeyRulesGetByColumnNames.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByColumnName] @ColumnName={0}", ColumnName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByColumnNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByColumnNamesDefaultParams(ref string ColumnName);

      partial void OnForeignKeyRulesGetByColumnNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnName> items);  

      public async Task ExportForeignKeyRulesGetByConstraintIdsToExcel(long? ConstraintId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyconstraintids/excel(ConstraintId={ConstraintId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyconstraintids/excel(ConstraintId={ConstraintId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByConstraintIdsToCSV(long? ConstraintId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyconstraintids/csv(ConstraintId={ConstraintId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyconstraintids/csv(ConstraintId={ConstraintId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByConstraintId>> GetForeignKeyRulesGetByConstraintIds(long? ConstraintId, Query query = null)
      {
          OnForeignKeyRulesGetByConstraintIdsDefaultParams(ref ConstraintId);

          var items = Context.ForeignKeyRulesGetByConstraintIds.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByConstraintId] @ConstraintId={0}", ConstraintId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByConstraintIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByConstraintIdsDefaultParams(ref long? ConstraintId);

      partial void OnForeignKeyRulesGetByConstraintIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByConstraintId> items);  

      public async Task ExportForeignKeyRulesGetByDeleteRulesToExcel(int? DeleteRule, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbydeleterules/excel(DeleteRule={DeleteRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbydeleterules/excel(DeleteRule={DeleteRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByDeleteRulesToCSV(int? DeleteRule, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbydeleterules/csv(DeleteRule={DeleteRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbydeleterules/csv(DeleteRule={DeleteRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByDeleteRule>> GetForeignKeyRulesGetByDeleteRules(int? DeleteRule, Query query = null)
      {
          OnForeignKeyRulesGetByDeleteRulesDefaultParams(ref DeleteRule);

          var items = Context.ForeignKeyRulesGetByDeleteRules.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByDeleteRule] @DeleteRule={0}", DeleteRule).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByDeleteRulesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByDeleteRulesDefaultParams(ref int? DeleteRule);

      partial void OnForeignKeyRulesGetByDeleteRulesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByDeleteRule> items);  

      public async Task ExportForeignKeyRulesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetById>> GetForeignKeyRulesGetByIds(long? Id, Query query = null)
      {
          OnForeignKeyRulesGetByIdsDefaultParams(ref Id);

          var items = Context.ForeignKeyRulesGetByIds.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByIdsDefaultParams(ref long? Id);

      partial void OnForeignKeyRulesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetById> items);  

      public async Task ExportForeignKeyRulesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectId>> GetForeignKeyRulesGetByProjectIds(long? ProjectId, Query query = null)
      {
          OnForeignKeyRulesGetByProjectIdsDefaultParams(ref ProjectId);

          var items = Context.ForeignKeyRulesGetByProjectIds.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByProjectId] @ProjectId={0}", ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByProjectIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByProjectIdsDefaultParams(ref long? ProjectId);

      partial void OnForeignKeyRulesGetByProjectIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectId> items);  

      public async Task ExportForeignKeyRulesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectName>> GetForeignKeyRulesGetByProjectNames(string ProjectName, Query query = null)
      {
          OnForeignKeyRulesGetByProjectNamesDefaultParams(ref ProjectName);

          var items = Context.ForeignKeyRulesGetByProjectNames.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByProjectName] @ProjectName={0}", ProjectName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByProjectNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByProjectNamesDefaultParams(ref string ProjectName);

      partial void OnForeignKeyRulesGetByProjectNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectName> items);  

      public async Task ExportForeignKeyRulesGetByReferencedColumnDbTypeComparesToExcel(string ReferencedColumnDbTypeCompare, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/excel(ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/excel(ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByReferencedColumnDbTypeComparesToCSV(string ReferencedColumnDbTypeCompare, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/csv(ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/csv(ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnDbTypeCompare>> GetForeignKeyRulesGetByReferencedColumnDbTypeCompares(string ReferencedColumnDbTypeCompare, Query query = null)
      {
          OnForeignKeyRulesGetByReferencedColumnDbTypeComparesDefaultParams(ref ReferencedColumnDbTypeCompare);

          var items = Context.ForeignKeyRulesGetByReferencedColumnDbTypeCompares.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByReferencedColumnDbTypeCompare] @ReferencedColumnDbTypeCompare={0}", ReferencedColumnDbTypeCompare).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByReferencedColumnDbTypeComparesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByReferencedColumnDbTypeComparesDefaultParams(ref string ReferencedColumnDbTypeCompare);

      partial void OnForeignKeyRulesGetByReferencedColumnDbTypeComparesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnDbTypeCompare> items);  

      public async Task ExportForeignKeyRulesGetByReferencedColumnNamesToExcel(string ReferencedColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/excel(ReferencedColumnName='{ReferencedColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/excel(ReferencedColumnName='{ReferencedColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByReferencedColumnNamesToCSV(string ReferencedColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/csv(ReferencedColumnName='{ReferencedColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/csv(ReferencedColumnName='{ReferencedColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnName>> GetForeignKeyRulesGetByReferencedColumnNames(string ReferencedColumnName, Query query = null)
      {
          OnForeignKeyRulesGetByReferencedColumnNamesDefaultParams(ref ReferencedColumnName);

          var items = Context.ForeignKeyRulesGetByReferencedColumnNames.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByReferencedColumnName] @ReferencedColumnName={0}", ReferencedColumnName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByReferencedColumnNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByReferencedColumnNamesDefaultParams(ref string ReferencedColumnName);

      partial void OnForeignKeyRulesGetByReferencedColumnNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnName> items);  

      public async Task ExportForeignKeyRulesGetByReferencedTableNamesToExcel(string ReferencedTableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/excel(ReferencedTableName='{ReferencedTableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/excel(ReferencedTableName='{ReferencedTableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByReferencedTableNamesToCSV(string ReferencedTableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/csv(ReferencedTableName='{ReferencedTableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/csv(ReferencedTableName='{ReferencedTableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedTableName>> GetForeignKeyRulesGetByReferencedTableNames(string ReferencedTableName, Query query = null)
      {
          OnForeignKeyRulesGetByReferencedTableNamesDefaultParams(ref ReferencedTableName);

          var items = Context.ForeignKeyRulesGetByReferencedTableNames.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByReferencedTableName] @ReferencedTableName={0}", ReferencedTableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByReferencedTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByReferencedTableNamesDefaultParams(ref string ReferencedTableName);

      partial void OnForeignKeyRulesGetByReferencedTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedTableName> items);  

      public async Task ExportForeignKeyRulesGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableId>> GetForeignKeyRulesGetByTableIds(long? TableId, Query query = null)
      {
          OnForeignKeyRulesGetByTableIdsDefaultParams(ref TableId);

          var items = Context.ForeignKeyRulesGetByTableIds.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByTableId] @TableId={0}", TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByTableIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByTableIdsDefaultParams(ref long? TableId);

      partial void OnForeignKeyRulesGetByTableIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableId> items);  

      public async Task ExportForeignKeyRulesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableName>> GetForeignKeyRulesGetByTableNames(string TableName, Query query = null)
      {
          OnForeignKeyRulesGetByTableNamesDefaultParams(ref TableName);

          var items = Context.ForeignKeyRulesGetByTableNames.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByTableNamesDefaultParams(ref string TableName);

      partial void OnForeignKeyRulesGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableName> items);  

      public async Task ExportForeignKeyRulesGetByUpdateRulesToExcel(int? UpdateRule, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyupdaterules/excel(UpdateRule={UpdateRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyupdaterules/excel(UpdateRule={UpdateRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesGetByUpdateRulesToCSV(int? UpdateRule, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyupdaterules/csv(UpdateRule={UpdateRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyupdaterules/csv(UpdateRule={UpdateRule}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByUpdateRule>> GetForeignKeyRulesGetByUpdateRules(int? UpdateRule, Query query = null)
      {
          OnForeignKeyRulesGetByUpdateRulesDefaultParams(ref UpdateRule);

          var items = Context.ForeignKeyRulesGetByUpdateRules.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesGetByUpdateRule] @UpdateRule={0}", UpdateRule).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesGetByUpdateRulesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesGetByUpdateRulesDefaultParams(ref int? UpdateRule);

      partial void OnForeignKeyRulesGetByUpdateRulesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByUpdateRule> items);  

      public async Task ExportForeignKeyRulesInsertsToExcel(string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesinserts/excel(ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesinserts/excel(ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesInsertsToCSV(string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesinserts/csv(ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesinserts/csv(ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesInsert>> GetForeignKeyRulesInserts(string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null)
      {
          OnForeignKeyRulesInsertsDefaultParams(ref ColumnName, ref ReferencedTableName, ref ReferencedColumnName, ref ReferencedColumnDbTypeCompare, ref DeleteRule, ref UpdateRule, ref TableName, ref ProjectName, ref ConstraintId, ref ColumnId, ref ProjectId, ref TableId);

          var items = Context.ForeignKeyRulesInserts.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesInsert] @ColumnName={0}, @ReferencedTableName={1}, @ReferencedColumnName={2}, @ReferencedColumnDbTypeCompare={3}, @DeleteRule={4}, @UpdateRule={5}, @TableName={6}, @ProjectName={7}, @ConstraintId={8}, @ColumnId={9}, @ProjectId={10}, @TableId={11}", ColumnName, ReferencedTableName, ReferencedColumnName, ReferencedColumnDbTypeCompare, DeleteRule, UpdateRule, TableName, ProjectName, ConstraintId, ColumnId, ProjectId, TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesInsertsDefaultParams(ref string ColumnName, ref string ReferencedTableName, ref string ReferencedColumnName, ref string ReferencedColumnDbTypeCompare, ref int? DeleteRule, ref int? UpdateRule, ref string TableName, ref string ProjectName, ref long? ConstraintId, ref long? ColumnId, ref long? ProjectId, ref long? TableId);

      partial void OnForeignKeyRulesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesInsert> items);  

      public async Task ExportForeignKeyRulesUpdatesToExcel(long? Id, string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesupdates/excel(Id={Id}, ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesupdates/excel(Id={Id}, ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportForeignKeyRulesUpdatesToCSV(long? Id, string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesupdates/csv(Id={Id}, ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesupdates/csv(Id={Id}, ColumnName='{ColumnName}', ReferencedTableName='{ReferencedTableName}', ReferencedColumnName='{ReferencedColumnName}', ReferencedColumnDbTypeCompare='{ReferencedColumnDbTypeCompare}', DeleteRule={DeleteRule}, UpdateRule={UpdateRule}, TableName='{TableName}', ProjectName='{ProjectName}', ConstraintId={ConstraintId}, ColumnId={ColumnId}, ProjectId={ProjectId}, TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesUpdate>> GetForeignKeyRulesUpdates(long? Id, string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null)
      {
          OnForeignKeyRulesUpdatesDefaultParams(ref Id, ref ColumnName, ref ReferencedTableName, ref ReferencedColumnName, ref ReferencedColumnDbTypeCompare, ref DeleteRule, ref UpdateRule, ref TableName, ref ProjectName, ref ConstraintId, ref ColumnId, ref ProjectId, ref TableId);

          var items = Context.ForeignKeyRulesUpdates.FromSqlRaw("EXEC [dbo].[ForeignKeyRulesUpdate] @Id={0}, @ColumnName={1}, @ReferencedTableName={2}, @ReferencedColumnName={3}, @ReferencedColumnDbTypeCompare={4}, @DeleteRule={5}, @UpdateRule={6}, @TableName={7}, @ProjectName={8}, @ConstraintId={9}, @ColumnId={10}, @ProjectId={11}, @TableId={12}", Id, ColumnName, ReferencedTableName, ReferencedColumnName, ReferencedColumnDbTypeCompare, DeleteRule, UpdateRule, TableName, ProjectName, ConstraintId, ColumnId, ProjectId, TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnForeignKeyRulesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnForeignKeyRulesUpdatesDefaultParams(ref long? Id, ref string ColumnName, ref string ReferencedTableName, ref string ReferencedColumnName, ref string ReferencedColumnDbTypeCompare, ref int? DeleteRule, ref int? UpdateRule, ref string TableName, ref string ProjectName, ref long? ConstraintId, ref long? ColumnId, ref long? ProjectId, ref long? TableId);

      partial void OnForeignKeyRulesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesUpdate> items);  

      public async Task ExportGetAccessControlsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getaccesscontrols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getaccesscontrols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetAccessControlsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getaccesscontrols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getaccesscontrols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetAccessControl>> GetGetAccessControls(Query query = null)
      {
          OnGetAccessControlsDefaultParams();

          var items = Context.GetAccessControls.FromSqlRaw("EXEC [dbo].[GetAccessControl] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetAccessControlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetAccessControlsDefaultParams();

      partial void OnGetAccessControlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetAccessControl> items);  

      public async Task ExportGetColumnsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetColumnsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetColumn>> GetGetColumns(Query query = null)
      {
          OnGetColumnsDefaultParams();

          var items = Context.GetColumns.FromSqlRaw("EXEC [dbo].[GetColumns] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetColumnsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetColumnsDefaultParams();

      partial void OnGetColumnsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetColumn> items);  

      public async Task ExportGetColumnsWithOutIdentitiesToExcel(string name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumnswithoutidentities/excel(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumnswithoutidentities/excel(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetColumnsWithOutIdentitiesToCSV(string name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumnswithoutidentities/csv(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumnswithoutidentities/csv(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetColumnsWithOutIdentity>> GetGetColumnsWithOutIdentities(string name, Query query = null)
      {
          OnGetColumnsWithOutIdentitiesDefaultParams(ref name);

          var items = Context.GetColumnsWithOutIdentities.FromSqlRaw("EXEC [dbo].[GetColumnsWithOutIdentity] @name={0}", name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetColumnsWithOutIdentitiesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetColumnsWithOutIdentitiesDefaultParams(ref string name);

      partial void OnGetColumnsWithOutIdentitiesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetColumnsWithOutIdentity> items);  

      public async Task ExportGetDependenciesToExcel(string Schema, string Table, string Column, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getdependencies/excel(Schema='{Schema}', Table='{Table}', Column='{Column}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getdependencies/excel(Schema='{Schema}', Table='{Table}', Column='{Column}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetDependenciesToCSV(string Schema, string Table, string Column, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getdependencies/csv(Schema='{Schema}', Table='{Table}', Column='{Column}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getdependencies/csv(Schema='{Schema}', Table='{Table}', Column='{Column}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetDependency>> GetGetDependencies(string Schema, string Table, string Column, Query query = null)
      {
          OnGetDependenciesDefaultParams(ref Schema, ref Table, ref Column);

          var items = Context.GetDependencies.FromSqlRaw("EXEC [dbo].[GetDependencies] @Schema={0}, @Table={1}, @Column={2}", Schema, Table, Column).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetDependenciesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetDependenciesDefaultParams(ref string Schema, ref string Table, ref string Column);

      partial void OnGetDependenciesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetDependency> items);  

      public async Task ExportGetExtendedsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getextendeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getextendeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetExtendedsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getextendeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getextendeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetExtended>> GetGetExtendeds(Query query = null)
      {
          OnGetExtendedsDefaultParams();

          var items = Context.GetExtendeds.FromSqlRaw("EXEC [dbo].[GetExtended] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetExtendedsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetExtendedsDefaultParams();

      partial void OnGetExtendedsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetExtended> items);  

      public async Task ExportGetIdentityListsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getidentitylists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getidentitylists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetIdentityListsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getidentitylists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getidentitylists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetIdentityList>> GetGetIdentityLists(Query query = null)
      {
          OnGetIdentityListsDefaultParams();

          var items = Context.GetIdentityLists.FromSqlRaw("EXEC [dbo].[GetIdentityList] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetIdentityListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetIdentityListsDefaultParams();

      partial void OnGetIdentityListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetIdentityList> items);  

      public async Task ExportGetIndexStatsToExcel(string table_name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getindexstats/excel(table_name='{table_name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getindexstats/excel(table_name='{table_name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetIndexStatsToCSV(string table_name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getindexstats/csv(table_name='{table_name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getindexstats/csv(table_name='{table_name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetIndexStat>> GetGetIndexStats(string table_name, Query query = null)
      {
          OnGetIndexStatsDefaultParams(ref table_name);

          var items = Context.GetIndexStats.FromSqlRaw("EXEC [dbo].[GetIndexStats] @table_name={0}", table_name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetIndexStatsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetIndexStatsDefaultParams(ref string table_name);

      partial void OnGetIndexStatsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetIndexStat> items);  

      public async Task ExportGetModifyDatesToExcel(string name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getmodifydates/excel(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getmodifydates/excel(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetModifyDatesToCSV(string name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getmodifydates/csv(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getmodifydates/csv(name='{name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetModifyDate>> GetGetModifyDates(string name, Query query = null)
      {
          OnGetModifyDatesDefaultParams(ref name);

          var items = Context.GetModifyDates.FromSqlRaw("EXEC [dbo].[GetModifyDate] @name={0}", name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetModifyDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetModifyDatesDefaultParams(ref string name);

      partial void OnGetModifyDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetModifyDate> items);  

      public async Task ExportGetParameterNamesToExcel(string Procedure, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getparameternames/excel(Procedure='{Procedure}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getparameternames/excel(Procedure='{Procedure}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetParameterNamesToCSV(string Procedure, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getparameternames/csv(Procedure='{Procedure}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getparameternames/csv(Procedure='{Procedure}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetParameterName>> GetGetParameterNames(string Procedure, Query query = null)
      {
          OnGetParameterNamesDefaultParams(ref Procedure);

          var items = Context.GetParameterNames.FromSqlRaw("EXEC [dbo].[GetParameterNames] @Procedure={0}", Procedure).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetParameterNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetParameterNamesDefaultParams(ref string Procedure);

      partial void OnGetParameterNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetParameterName> items);  

      public async Task ExportGetProcedureNamesToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getprocedurenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getprocedurenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetProcedureNamesToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getprocedurenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getprocedurenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetProcedureName>> GetGetProcedureNames(Query query = null)
      {
          OnGetProcedureNamesDefaultParams();

          var items = Context.GetProcedureNames.FromSqlRaw("EXEC [dbo].[GetProcedureNames] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetProcedureNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetProcedureNamesDefaultParams();

      partial void OnGetProcedureNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetProcedureName> items);  

      public async Task ExportGetRequestParameterNamesToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getrequestparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getrequestparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetRequestParameterNamesToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getrequestparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getrequestparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetRequestParameterName>> GetGetRequestParameterNames(Query query = null)
      {
          OnGetRequestParameterNamesDefaultParams();

          var items = Context.GetRequestParameterNames.FromSqlRaw("EXEC [dbo].[GetRequestParameterNames] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetRequestParameterNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetRequestParameterNamesDefaultParams();

      partial void OnGetRequestParameterNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetRequestParameterName> items);  

      public async Task ExportGetReturnParameterNamesToExcel(string ProcedureName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getreturnparameternames/excel(ProcedureName='{ProcedureName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getreturnparameternames/excel(ProcedureName='{ProcedureName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetReturnParameterNamesToCSV(string ProcedureName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getreturnparameternames/csv(ProcedureName='{ProcedureName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getreturnparameternames/csv(ProcedureName='{ProcedureName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetReturnParameterName>> GetGetReturnParameterNames(string ProcedureName, Query query = null)
      {
          OnGetReturnParameterNamesDefaultParams(ref ProcedureName);

          var items = Context.GetReturnParameterNames.FromSqlRaw("EXEC [dbo].[GetReturnParameterNames] @ProcedureName={0}", ProcedureName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetReturnParameterNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetReturnParameterNamesDefaultParams(ref string ProcedureName);

      partial void OnGetReturnParameterNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetReturnParameterName> items);  

      public async Task ExportGetServerInfosToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getserverinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getserverinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetServerInfosToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getserverinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getserverinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetServerInfo>> GetGetServerInfos(Query query = null)
      {
          OnGetServerInfosDefaultParams();

          var items = Context.GetServerInfos.FromSqlRaw("EXEC [dbo].[GetServerInfo] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetServerInfosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetServerInfosDefaultParams();

      partial void OnGetServerInfosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetServerInfo> items);  

      public async Task ExportGetSpLogsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getsplogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getsplogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetSpLogsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getsplogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getsplogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetSpLog>> GetGetSpLogs(Query query = null)
      {
          OnGetSpLogsDefaultParams();

          var items = Context.GetSpLogs.FromSqlRaw("EXEC [dbo].[GetSpLogs] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetSpLogsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetSpLogsDefaultParams();

      partial void OnGetSpLogsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetSpLog> items);  

      public async Task ExportGetStoredProceduresForATablesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getstoredproceduresforatables/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getstoredproceduresforatables/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetStoredProceduresForATablesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getstoredproceduresforatables/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getstoredproceduresforatables/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetStoredProceduresForATable>> GetGetStoredProceduresForATables(string TableName, Query query = null)
      {
          OnGetStoredProceduresForATablesDefaultParams(ref TableName);

          var items = Context.GetStoredProceduresForATables.FromSqlRaw("EXEC [dbo].[GetStoredProceduresForATable] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetStoredProceduresForATablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetStoredProceduresForATablesDefaultParams(ref string TableName);

      partial void OnGetStoredProceduresForATablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetStoredProceduresForATable> items);  

      public async Task ExportGetTableColumnsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetTableColumnsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetTableColumn>> GetGetTableColumns(Query query = null)
      {
          OnGetTableColumnsDefaultParams();

          var items = Context.GetTableColumns.FromSqlRaw("EXEC [dbo].[GetTableColumns] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetTableColumnsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetTableColumnsDefaultParams();

      partial void OnGetTableColumnsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetTableColumn> items);  

      public async Task ExportGetTableInfosToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettableinfos/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettableinfos/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetTableInfosToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettableinfos/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettableinfos/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetTableInfo>> GetGetTableInfos(string TableName, Query query = null)
      {
          OnGetTableInfosDefaultParams(ref TableName);

          var items = Context.GetTableInfos.FromSqlRaw("EXEC [dbo].[GetTableInfo] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetTableInfosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetTableInfosDefaultParams(ref string TableName);

      partial void OnGetTableInfosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetTableInfo> items);  

      public async Task ExportGetTableNamesToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetTableNamesToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetTableName>> GetGetTableNames(Query query = null)
      {
          OnGetTableNamesDefaultParams();

          var items = Context.GetTableNames.FromSqlRaw("EXEC [dbo].[GetTableNames] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetTableNamesDefaultParams();

      partial void OnGetTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetTableName> items);  

      public async Task ExportGetTablesToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetTablesToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetTable>> GetGetTables(Query query = null)
      {
          OnGetTablesDefaultParams();

          var items = Context.GetTables.FromSqlRaw("EXEC [dbo].[GetTables] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetTablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetTablesDefaultParams();

      partial void OnGetTablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetTable> items);  

      public async Task ExportGetTableSizesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablesizes/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablesizes/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetTableSizesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablesizes/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablesizes/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetTableSize>> GetGetTableSizes(string TableName, Query query = null)
      {
          OnGetTableSizesDefaultParams(ref TableName);

          var items = Context.GetTableSizes.FromSqlRaw("EXEC [dbo].[GetTableSize] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetTableSizesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetTableSizesDefaultParams(ref string TableName);

      partial void OnGetTableSizesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetTableSize> items);  

      public async Task ExportGetViewBackupHistoriesToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewbackuphistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewbackuphistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetViewBackupHistoriesToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewbackuphistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewbackuphistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetViewBackupHistory>> GetGetViewBackupHistories(Query query = null)
      {
          OnGetViewBackupHistoriesDefaultParams();

          var items = Context.GetViewBackupHistories.FromSqlRaw("EXEC [dbo].[GetViewBackupHistory] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetViewBackupHistoriesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetViewBackupHistoriesDefaultParams();

      partial void OnGetViewBackupHistoriesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetViewBackupHistory> items);  

      public async Task ExportGetViewListsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportGetViewListsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.GetViewList>> GetGetViewLists(Query query = null)
      {
          OnGetViewListsDefaultParams();

          var items = Context.GetViewLists.FromSqlRaw("EXEC [dbo].[GetViewList] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnGetViewListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnGetViewListsDefaultParams();

      partial void OnGetViewListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.GetViewList> items);  

      public async Task ExportProgrammingCategoryGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCategoryGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetAll>> GetProgrammingCategoryGetAlls(Query query = null)
      {
          OnProgrammingCategoryGetAllsDefaultParams();

          var items = Context.ProgrammingCategoryGetAlls.FromSqlRaw("EXEC [dbo].[ProgrammingCategoryGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCategoryGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCategoryGetAllsDefaultParams();

      partial void OnProgrammingCategoryGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetAll> items);  

      public async Task ExportProgrammingCategoryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCategoryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetById>> GetProgrammingCategoryGetByIds(int? Id, Query query = null)
      {
          OnProgrammingCategoryGetByIdsDefaultParams(ref Id);

          var items = Context.ProgrammingCategoryGetByIds.FromSqlRaw("EXEC [dbo].[ProgrammingCategoryGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCategoryGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCategoryGetByIdsDefaultParams(ref int? Id);

      partial void OnProgrammingCategoryGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetById> items);  

      public async Task ExportProgrammingCategoryGetByTypeNamesToExcel(string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbytypenames/excel(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbytypenames/excel(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCategoryGetByTypeNamesToCSV(string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbytypenames/csv(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbytypenames/csv(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetByTypeName>> GetProgrammingCategoryGetByTypeNames(string TypeName, Query query = null)
      {
          OnProgrammingCategoryGetByTypeNamesDefaultParams(ref TypeName);

          var items = Context.ProgrammingCategoryGetByTypeNames.FromSqlRaw("EXEC [dbo].[ProgrammingCategoryGetByTypeName] @TypeName={0}", TypeName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCategoryGetByTypeNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCategoryGetByTypeNamesDefaultParams(ref string TypeName);

      partial void OnProgrammingCategoryGetByTypeNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetByTypeName> items);  

      public async Task ExportProgrammingCategoryInsertsToExcel(string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryinserts/excel(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryinserts/excel(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCategoryInsertsToCSV(string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryinserts/csv(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryinserts/csv(TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryInsert>> GetProgrammingCategoryInserts(string TypeName, Query query = null)
      {
          OnProgrammingCategoryInsertsDefaultParams(ref TypeName);

          var items = Context.ProgrammingCategoryInserts.FromSqlRaw("EXEC [dbo].[ProgrammingCategoryInsert] @TypeName={0}", TypeName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCategoryInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCategoryInsertsDefaultParams(ref string TypeName);

      partial void OnProgrammingCategoryInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryInsert> items);  

      public async Task ExportProgrammingCategoryUpdatesToExcel(int? Id, string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryupdates/excel(Id={Id}, TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryupdates/excel(Id={Id}, TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCategoryUpdatesToCSV(int? Id, string TypeName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryupdates/csv(Id={Id}, TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryupdates/csv(Id={Id}, TypeName='{TypeName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryUpdate>> GetProgrammingCategoryUpdates(int? Id, string TypeName, Query query = null)
      {
          OnProgrammingCategoryUpdatesDefaultParams(ref Id, ref TypeName);

          var items = Context.ProgrammingCategoryUpdates.FromSqlRaw("EXEC [dbo].[ProgrammingCategoryUpdate] @Id={0}, @TypeName={1}", Id, TypeName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCategoryUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCategoryUpdatesDefaultParams(ref int? Id, ref string TypeName);

      partial void OnProgrammingCategoryUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryUpdate> items);  

      public async Task ExportProgrammingCodesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetAll>> GetProgrammingCodesGetAlls(Query query = null)
      {
          OnProgrammingCodesGetAllsDefaultParams();

          var items = Context.ProgrammingCodesGetAlls.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetAllsDefaultParams();

      partial void OnProgrammingCodesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetAll> items);  

      public async Task ExportProgrammingCodesGetByCodesToExcel(string Code, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbycodes/excel(Code='{Code}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbycodes/excel(Code='{Code}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByCodesToCSV(string Code, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbycodes/csv(Code='{Code}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbycodes/csv(Code='{Code}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByCode>> GetProgrammingCodesGetByCodes(string Code, Query query = null)
      {
          OnProgrammingCodesGetByCodesDefaultParams(ref Code);

          var items = Context.ProgrammingCodesGetByCodes.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByCode] @Code={0}", Code).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByCodesDefaultParams(ref string Code);

      partial void OnProgrammingCodesGetByCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByCode> items);  

      public async Task ExportProgrammingCodesGetByExampleCodesToExcel(string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyexamplecodes/excel(ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyexamplecodes/excel(ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByExampleCodesToCSV(string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyexamplecodes/csv(ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyexamplecodes/csv(ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByExampleCode>> GetProgrammingCodesGetByExampleCodes(string ExampleCodes, Query query = null)
      {
          OnProgrammingCodesGetByExampleCodesDefaultParams(ref ExampleCodes);

          var items = Context.ProgrammingCodesGetByExampleCodes.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByExampleCodes] @ExampleCodes={0}", ExampleCodes).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByExampleCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByExampleCodesDefaultParams(ref string ExampleCodes);

      partial void OnProgrammingCodesGetByExampleCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByExampleCode> items);  

      public async Task ExportProgrammingCodesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetById>> GetProgrammingCodesGetByIds(int? Id, Query query = null)
      {
          OnProgrammingCodesGetByIdsDefaultParams(ref Id);

          var items = Context.ProgrammingCodesGetByIds.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByIdsDefaultParams(ref int? Id);

      partial void OnProgrammingCodesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetById> items);  

      public async Task ExportProgrammingCodesGetByLanguageTypesToExcel(int? LanguageType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbylanguagetypes/excel(LanguageType={LanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbylanguagetypes/excel(LanguageType={LanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByLanguageTypesToCSV(int? LanguageType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbylanguagetypes/csv(LanguageType={LanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbylanguagetypes/csv(LanguageType={LanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByLanguageType>> GetProgrammingCodesGetByLanguageTypes(int? LanguageType, Query query = null)
      {
          OnProgrammingCodesGetByLanguageTypesDefaultParams(ref LanguageType);

          var items = Context.ProgrammingCodesGetByLanguageTypes.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByLanguageType] @LanguageType={0}", LanguageType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByLanguageTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByLanguageTypesDefaultParams(ref int? LanguageType);

      partial void OnProgrammingCodesGetByLanguageTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByLanguageType> items);  

      public async Task ExportProgrammingCodesGetByTargetLanguageCodesToExcel(string TargetLanguageCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagecodes/excel(TargetLanguageCode='{TargetLanguageCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagecodes/excel(TargetLanguageCode='{TargetLanguageCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByTargetLanguageCodesToCSV(string TargetLanguageCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagecodes/csv(TargetLanguageCode='{TargetLanguageCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagecodes/csv(TargetLanguageCode='{TargetLanguageCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageCode>> GetProgrammingCodesGetByTargetLanguageCodes(string TargetLanguageCode, Query query = null)
      {
          OnProgrammingCodesGetByTargetLanguageCodesDefaultParams(ref TargetLanguageCode);

          var items = Context.ProgrammingCodesGetByTargetLanguageCodes.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByTargetLanguageCode] @TargetLanguageCode={0}", TargetLanguageCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByTargetLanguageCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByTargetLanguageCodesDefaultParams(ref string TargetLanguageCode);

      partial void OnProgrammingCodesGetByTargetLanguageCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageCode> items);  

      public async Task ExportProgrammingCodesGetByTargetLanguageTypesToExcel(int? TargetLanguageType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagetypes/excel(TargetLanguageType={TargetLanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagetypes/excel(TargetLanguageType={TargetLanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesGetByTargetLanguageTypesToCSV(int? TargetLanguageType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagetypes/csv(TargetLanguageType={TargetLanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagetypes/csv(TargetLanguageType={TargetLanguageType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageType>> GetProgrammingCodesGetByTargetLanguageTypes(int? TargetLanguageType, Query query = null)
      {
          OnProgrammingCodesGetByTargetLanguageTypesDefaultParams(ref TargetLanguageType);

          var items = Context.ProgrammingCodesGetByTargetLanguageTypes.FromSqlRaw("EXEC [dbo].[ProgrammingCodesGetByTargetLanguageType] @TargetLanguageType={0}", TargetLanguageType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesGetByTargetLanguageTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesGetByTargetLanguageTypesDefaultParams(ref int? TargetLanguageType);

      partial void OnProgrammingCodesGetByTargetLanguageTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageType> items);  

      public async Task ExportProgrammingCodesInsertsToExcel(int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesinserts/excel(LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesinserts/excel(LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesInsertsToCSV(int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesinserts/csv(LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesinserts/csv(LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesInsert>> GetProgrammingCodesInserts(int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null)
      {
          OnProgrammingCodesInsertsDefaultParams(ref LanguageType, ref Code, ref TargetLanguageType, ref TargetLanguageCode, ref ExampleCodes);

          var items = Context.ProgrammingCodesInserts.FromSqlRaw("EXEC [dbo].[ProgrammingCodesInsert] @LanguageType={0}, @Code={1}, @TargetLanguageType={2}, @TargetLanguageCode={3}, @ExampleCodes={4}", LanguageType, Code, TargetLanguageType, TargetLanguageCode, ExampleCodes).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesInsertsDefaultParams(ref int? LanguageType, ref string Code, ref int? TargetLanguageType, ref string TargetLanguageCode, ref string ExampleCodes);

      partial void OnProgrammingCodesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesInsert> items);  

      public async Task ExportProgrammingCodesUpdatesToExcel(int? Id, int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesupdates/excel(Id={Id}, LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesupdates/excel(Id={Id}, LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodesUpdatesToCSV(int? Id, int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesupdates/csv(Id={Id}, LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesupdates/csv(Id={Id}, LanguageType={LanguageType}, Code='{Code}', TargetLanguageType={TargetLanguageType}, TargetLanguageCode='{TargetLanguageCode}', ExampleCodes='{ExampleCodes}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesUpdate>> GetProgrammingCodesUpdates(int? Id, int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null)
      {
          OnProgrammingCodesUpdatesDefaultParams(ref Id, ref LanguageType, ref Code, ref TargetLanguageType, ref TargetLanguageCode, ref ExampleCodes);

          var items = Context.ProgrammingCodesUpdates.FromSqlRaw("EXEC [dbo].[ProgrammingCodesUpdate] @Id={0}, @LanguageType={1}, @Code={2}, @TargetLanguageType={3}, @TargetLanguageCode={4}, @ExampleCodes={5}", Id, LanguageType, Code, TargetLanguageType, TargetLanguageCode, ExampleCodes).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodesUpdatesDefaultParams(ref int? Id, ref int? LanguageType, ref string Code, ref int? TargetLanguageType, ref string TargetLanguageCode, ref string ExampleCodes);

      partial void OnProgrammingCodesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodesUpdate> items);  

      public async Task ExportProgrammingCodeTemplatesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetAll>> GetProgrammingCodeTemplatesGetAlls(Query query = null)
      {
          OnProgrammingCodeTemplatesGetAllsDefaultParams();

          var items = Context.ProgrammingCodeTemplatesGetAlls.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesGetAllsDefaultParams();

      partial void OnProgrammingCodeTemplatesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetAll> items);  

      public async Task ExportProgrammingCodeTemplatesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetById>> GetProgrammingCodeTemplatesGetByIds(int? Id, Query query = null)
      {
          OnProgrammingCodeTemplatesGetByIdsDefaultParams(ref Id);

          var items = Context.ProgrammingCodeTemplatesGetByIds.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesGetByIdsDefaultParams(ref int? Id);

      partial void OnProgrammingCodeTemplatesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetById> items);  

      public async Task ExportProgrammingCodeTemplatesGetByProgrammingLanguagesToExcel(int? ProgrammingLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/excel(ProgrammingLanguage={ProgrammingLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/excel(ProgrammingLanguage={ProgrammingLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesGetByProgrammingLanguagesToCSV(int? ProgrammingLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/csv(ProgrammingLanguage={ProgrammingLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/csv(ProgrammingLanguage={ProgrammingLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByProgrammingLanguage>> GetProgrammingCodeTemplatesGetByProgrammingLanguages(int? ProgrammingLanguage, Query query = null)
      {
          OnProgrammingCodeTemplatesGetByProgrammingLanguagesDefaultParams(ref ProgrammingLanguage);

          var items = Context.ProgrammingCodeTemplatesGetByProgrammingLanguages.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesGetByProgrammingLanguage] @ProgrammingLanguage={0}", ProgrammingLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesGetByProgrammingLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesGetByProgrammingLanguagesDefaultParams(ref int? ProgrammingLanguage);

      partial void OnProgrammingCodeTemplatesGetByProgrammingLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByProgrammingLanguage> items);  

      public async Task ExportProgrammingCodeTemplatesGetByReplacedFieldsToExcel(string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/excel(ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/excel(ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesGetByReplacedFieldsToCSV(string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/csv(ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/csv(ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByReplacedField>> GetProgrammingCodeTemplatesGetByReplacedFields(string ReplacedFields, Query query = null)
      {
          OnProgrammingCodeTemplatesGetByReplacedFieldsDefaultParams(ref ReplacedFields);

          var items = Context.ProgrammingCodeTemplatesGetByReplacedFields.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesGetByReplacedFields] @ReplacedFields={0}", ReplacedFields).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesGetByReplacedFieldsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesGetByReplacedFieldsDefaultParams(ref string ReplacedFields);

      partial void OnProgrammingCodeTemplatesGetByReplacedFieldsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByReplacedField> items);  

      public async Task ExportProgrammingCodeTemplatesGetByTemplatesToExcel(string Template, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbytemplates/excel(Template='{Template}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbytemplates/excel(Template='{Template}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesGetByTemplatesToCSV(string Template, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbytemplates/csv(Template='{Template}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbytemplates/csv(Template='{Template}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByTemplate>> GetProgrammingCodeTemplatesGetByTemplates(string Template, Query query = null)
      {
          OnProgrammingCodeTemplatesGetByTemplatesDefaultParams(ref Template);

          var items = Context.ProgrammingCodeTemplatesGetByTemplates.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesGetByTemplate] @Template={0}", Template).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesGetByTemplatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesGetByTemplatesDefaultParams(ref string Template);

      partial void OnProgrammingCodeTemplatesGetByTemplatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByTemplate> items);  

      public async Task ExportProgrammingCodeTemplatesInsertsToExcel(int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesinserts/excel(ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesinserts/excel(ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesInsertsToCSV(int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesinserts/csv(ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesinserts/csv(ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesInsert>> GetProgrammingCodeTemplatesInserts(int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null)
      {
          OnProgrammingCodeTemplatesInsertsDefaultParams(ref ProgrammingLanguage, ref Template, ref ReplacedFields);

          var items = Context.ProgrammingCodeTemplatesInserts.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesInsert] @ProgrammingLanguage={0}, @Template={1}, @ReplacedFields={2}", ProgrammingLanguage, Template, ReplacedFields).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesInsertsDefaultParams(ref int? ProgrammingLanguage, ref string Template, ref string ReplacedFields);

      partial void OnProgrammingCodeTemplatesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesInsert> items);  

      public async Task ExportProgrammingCodeTemplatesUpdatesToExcel(int? Id, int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesupdates/excel(Id={Id}, ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesupdates/excel(Id={Id}, ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingCodeTemplatesUpdatesToCSV(int? Id, int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesupdates/csv(Id={Id}, ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesupdates/csv(Id={Id}, ProgrammingLanguage={ProgrammingLanguage}, Template='{Template}', ReplacedFields='{ReplacedFields}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesUpdate>> GetProgrammingCodeTemplatesUpdates(int? Id, int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null)
      {
          OnProgrammingCodeTemplatesUpdatesDefaultParams(ref Id, ref ProgrammingLanguage, ref Template, ref ReplacedFields);

          var items = Context.ProgrammingCodeTemplatesUpdates.FromSqlRaw("EXEC [dbo].[ProgrammingCodeTemplatesUpdate] @Id={0}, @ProgrammingLanguage={1}, @Template={2}, @ReplacedFields={3}", Id, ProgrammingLanguage, Template, ReplacedFields).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingCodeTemplatesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingCodeTemplatesUpdatesDefaultParams(ref int? Id, ref int? ProgrammingLanguage, ref string Template, ref string ReplacedFields);

      partial void OnProgrammingCodeTemplatesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesUpdate> items);  

      public async Task ExportProgrammingTechnologyGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetAll>> GetProgrammingTechnologyGetAlls(Query query = null)
      {
          OnProgrammingTechnologyGetAllsDefaultParams();

          var items = Context.ProgrammingTechnologyGetAlls.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyGetAllsDefaultParams();

      partial void OnProgrammingTechnologyGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetAll> items);  

      public async Task ExportProgrammingTechnologyGetByCodeFamilyNamesToExcel(string CodeFamilyName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodefamilynames/excel(CodeFamilyName='{CodeFamilyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodefamilynames/excel(CodeFamilyName='{CodeFamilyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyGetByCodeFamilyNamesToCSV(string CodeFamilyName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodefamilynames/csv(CodeFamilyName='{CodeFamilyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodefamilynames/csv(CodeFamilyName='{CodeFamilyName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeFamilyName>> GetProgrammingTechnologyGetByCodeFamilyNames(string CodeFamilyName, Query query = null)
      {
          OnProgrammingTechnologyGetByCodeFamilyNamesDefaultParams(ref CodeFamilyName);

          var items = Context.ProgrammingTechnologyGetByCodeFamilyNames.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyGetByCodeFamilyName] @CodeFamilyName={0}", CodeFamilyName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyGetByCodeFamilyNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyGetByCodeFamilyNamesDefaultParams(ref string CodeFamilyName);

      partial void OnProgrammingTechnologyGetByCodeFamilyNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeFamilyName> items);  

      public async Task ExportProgrammingTechnologyGetByCodeTypesToExcel(string CodeType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodetypes/excel(CodeType='{CodeType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodetypes/excel(CodeType='{CodeType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyGetByCodeTypesToCSV(string CodeType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodetypes/csv(CodeType='{CodeType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodetypes/csv(CodeType='{CodeType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeType>> GetProgrammingTechnologyGetByCodeTypes(string CodeType, Query query = null)
      {
          OnProgrammingTechnologyGetByCodeTypesDefaultParams(ref CodeType);

          var items = Context.ProgrammingTechnologyGetByCodeTypes.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyGetByCodeType] @CodeType={0}", CodeType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyGetByCodeTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyGetByCodeTypesDefaultParams(ref string CodeType);

      partial void OnProgrammingTechnologyGetByCodeTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeType> items);  

      public async Task ExportProgrammingTechnologyGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetById>> GetProgrammingTechnologyGetByIds(int? Id, Query query = null)
      {
          OnProgrammingTechnologyGetByIdsDefaultParams(ref Id);

          var items = Context.ProgrammingTechnologyGetByIds.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyGetByIdsDefaultParams(ref int? Id);

      partial void OnProgrammingTechnologyGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetById> items);  

      public async Task ExportProgrammingTechnologyGetByIdesToExcel(string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyides/excel(IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyides/excel(IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyGetByIdesToCSV(string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyides/csv(IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyides/csv(IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByIde>> GetProgrammingTechnologyGetByIdes(string IDE, Query query = null)
      {
          OnProgrammingTechnologyGetByIdesDefaultParams(ref IDE);

          var items = Context.ProgrammingTechnologyGetByIdes.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyGetByIDE] @IDE={0}", IDE).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyGetByIdesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyGetByIdesDefaultParams(ref string IDE);

      partial void OnProgrammingTechnologyGetByIdesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByIde> items);  

      public async Task ExportProgrammingTechnologyInsertsToExcel(string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyinserts/excel(CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyinserts/excel(CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyInsertsToCSV(string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyinserts/csv(CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyinserts/csv(CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyInsert>> GetProgrammingTechnologyInserts(string CodeFamilyName, string CodeType, string IDE, Query query = null)
      {
          OnProgrammingTechnologyInsertsDefaultParams(ref CodeFamilyName, ref CodeType, ref IDE);

          var items = Context.ProgrammingTechnologyInserts.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyInsert] @CodeFamilyName={0}, @CodeType={1}, @IDE={2}", CodeFamilyName, CodeType, IDE).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyInsertsDefaultParams(ref string CodeFamilyName, ref string CodeType, ref string IDE);

      partial void OnProgrammingTechnologyInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyInsert> items);  

      public async Task ExportProgrammingTechnologyUpdatesToExcel(int? Id, string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyupdates/excel(Id={Id}, CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyupdates/excel(Id={Id}, CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProgrammingTechnologyUpdatesToCSV(int? Id, string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyupdates/csv(Id={Id}, CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyupdates/csv(Id={Id}, CodeFamilyName='{CodeFamilyName}', CodeType='{CodeType}', IDE='{IDE}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyUpdate>> GetProgrammingTechnologyUpdates(int? Id, string CodeFamilyName, string CodeType, string IDE, Query query = null)
      {
          OnProgrammingTechnologyUpdatesDefaultParams(ref Id, ref CodeFamilyName, ref CodeType, ref IDE);

          var items = Context.ProgrammingTechnologyUpdates.FromSqlRaw("EXEC [dbo].[ProgrammingTechnologyUpdate] @Id={0}, @CodeFamilyName={1}, @CodeType={2}, @IDE={3}", Id, CodeFamilyName, CodeType, IDE).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProgrammingTechnologyUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProgrammingTechnologyUpdatesDefaultParams(ref int? Id, ref string CodeFamilyName, ref string CodeType, ref string IDE);

      partial void OnProgrammingTechnologyUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyUpdate> items);  

      public async Task ExportProjectCategoryGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetAll>> GetProjectCategoryGetAlls(Query query = null)
      {
          OnProjectCategoryGetAllsDefaultParams();

          var items = Context.ProjectCategoryGetAlls.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetAllsDefaultParams();

      partial void OnProjectCategoryGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetAll> items);  

      public async Task ExportProjectCategoryGetByCategoryNamesToExcel(string CategoryName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynames/excel(CategoryName='{CategoryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynames/excel(CategoryName='{CategoryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetByCategoryNamesToCSV(string CategoryName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynames/csv(CategoryName='{CategoryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynames/csv(CategoryName='{CategoryName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryName>> GetProjectCategoryGetByCategoryNames(string CategoryName, Query query = null)
      {
          OnProjectCategoryGetByCategoryNamesDefaultParams(ref CategoryName);

          var items = Context.ProjectCategoryGetByCategoryNames.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetByCategoryName] @CategoryName={0}", CategoryName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetByCategoryNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetByCategoryNamesDefaultParams(ref string CategoryName);

      partial void OnProjectCategoryGetByCategoryNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryName> items);  

      public async Task ExportProjectCategoryGetByCategoryNameTrsToExcel(string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynametrs/excel(CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynametrs/excel(CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetByCategoryNameTrsToCSV(string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynametrs/csv(CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynametrs/csv(CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryNameTr>> GetProjectCategoryGetByCategoryNameTrs(string CategoryNameTr, Query query = null)
      {
          OnProjectCategoryGetByCategoryNameTrsDefaultParams(ref CategoryNameTr);

          var items = Context.ProjectCategoryGetByCategoryNameTrs.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetByCategoryNameTr] @CategoryNameTr={0}", CategoryNameTr).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetByCategoryNameTrsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetByCategoryNameTrsDefaultParams(ref string CategoryNameTr);

      partial void OnProjectCategoryGetByCategoryNameTrsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryNameTr> items);  

      public async Task ExportProjectCategoryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetById>> GetProjectCategoryGetByIds(int? Id, Query query = null)
      {
          OnProjectCategoryGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectCategoryGetByIds.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectCategoryGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetById> items);  

      public async Task ExportProjectCategoryGetByParentIdsToExcel(int? ParentId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyparentids/excel(ParentId={ParentId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyparentids/excel(ParentId={ParentId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetByParentIdsToCSV(int? ParentId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyparentids/csv(ParentId={ParentId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyparentids/csv(ParentId={ParentId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByParentId>> GetProjectCategoryGetByParentIds(int? ParentId, Query query = null)
      {
          OnProjectCategoryGetByParentIdsDefaultParams(ref ParentId);

          var items = Context.ProjectCategoryGetByParentIds.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetByParentId] @ParentId={0}", ParentId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetByParentIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetByParentIdsDefaultParams(ref int? ParentId);

      partial void OnProjectCategoryGetByParentIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByParentId> items);  

      public async Task ExportProjectCategoryGetBySampleUrlsToExcel(string SampleUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbysampleurls/excel(SampleUrl='{SampleUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbysampleurls/excel(SampleUrl='{SampleUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryGetBySampleUrlsToCSV(string SampleUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbysampleurls/csv(SampleUrl='{SampleUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbysampleurls/csv(SampleUrl='{SampleUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetBySampleUrl>> GetProjectCategoryGetBySampleUrls(string SampleUrl, Query query = null)
      {
          OnProjectCategoryGetBySampleUrlsDefaultParams(ref SampleUrl);

          var items = Context.ProjectCategoryGetBySampleUrls.FromSqlRaw("EXEC [dbo].[ProjectCategoryGetBySampleUrl] @SampleUrl={0}", SampleUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryGetBySampleUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryGetBySampleUrlsDefaultParams(ref string SampleUrl);

      partial void OnProjectCategoryGetBySampleUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetBySampleUrl> items);  

      public async Task ExportProjectCategoryInsertsToExcel(string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryinserts/excel(CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryinserts/excel(CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryInsertsToCSV(string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryinserts/csv(CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryinserts/csv(CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryInsert>> GetProjectCategoryInserts(string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null)
      {
          OnProjectCategoryInsertsDefaultParams(ref CategoryName, ref ParentId, ref SampleUrl, ref CategoryNameTr);

          var items = Context.ProjectCategoryInserts.FromSqlRaw("EXEC [dbo].[ProjectCategoryInsert] @CategoryName={0}, @ParentId={1}, @SampleUrl={2}, @CategoryNameTr={3}", CategoryName, ParentId, SampleUrl, CategoryNameTr).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryInsertsDefaultParams(ref string CategoryName, ref int? ParentId, ref string SampleUrl, ref string CategoryNameTr);

      partial void OnProjectCategoryInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryInsert> items);  

      public async Task ExportProjectCategoryUpdatesToExcel(int? Id, string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryupdates/excel(Id={Id}, CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryupdates/excel(Id={Id}, CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectCategoryUpdatesToCSV(int? Id, string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryupdates/csv(Id={Id}, CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryupdates/csv(Id={Id}, CategoryName='{CategoryName}', ParentId={ParentId}, SampleUrl='{SampleUrl}', CategoryNameTr='{CategoryNameTr}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryUpdate>> GetProjectCategoryUpdates(int? Id, string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null)
      {
          OnProjectCategoryUpdatesDefaultParams(ref Id, ref CategoryName, ref ParentId, ref SampleUrl, ref CategoryNameTr);

          var items = Context.ProjectCategoryUpdates.FromSqlRaw("EXEC [dbo].[ProjectCategoryUpdate] @Id={0}, @CategoryName={1}, @ParentId={2}, @SampleUrl={3}, @CategoryNameTr={4}", Id, CategoryName, ParentId, SampleUrl, CategoryNameTr).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectCategoryUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectCategoryUpdatesDefaultParams(ref int? Id, ref string CategoryName, ref int? ParentId, ref string SampleUrl, ref string CategoryNameTr);

      partial void OnProjectCategoryUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectCategoryUpdate> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetAll>> GetProjectConfigurationKeyAndValueGetAlls(Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetAllsDefaultParams();

          var items = Context.ProjectConfigurationKeyAndValueGetAlls.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetAllsDefaultParams();

      partial void OnProjectConfigurationKeyAndValueGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetAll> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeysToExcel(string ConfigurationKey, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/excel(ConfigurationKey='{ConfigurationKey}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/excel(ConfigurationKey='{ConfigurationKey}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeysToCSV(string ConfigurationKey, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/csv(ConfigurationKey='{ConfigurationKey}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/csv(ConfigurationKey='{ConfigurationKey}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKey>> GetProjectConfigurationKeyAndValueGetByConfigurationKeys(string ConfigurationKey, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByConfigurationKeysDefaultParams(ref ConfigurationKey);

          var items = Context.ProjectConfigurationKeyAndValueGetByConfigurationKeys.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByConfigurationKey] @ConfigurationKey={0}", ConfigurationKey).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByConfigurationKeysInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeysDefaultParams(ref string ConfigurationKey);

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeysInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKey> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesToExcel(string ConfigurationKeyFieldType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/excel(ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/excel(ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesToCSV(string ConfigurationKeyFieldType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/csv(ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/csv(ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldType>> GetProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypes(string ConfigurationKeyFieldType, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesDefaultParams(ref ConfigurationKeyFieldType);

          var items = Context.ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypes.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldType] @ConfigurationKeyFieldType={0}", ConfigurationKeyFieldType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesDefaultParams(ref string ConfigurationKeyFieldType);

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldType> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesToExcel(int? ConfigurationKeyFromInputType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/excel(ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/excel(ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesToCSV(int? ConfigurationKeyFromInputType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/csv(ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/csv(ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputType>> GetProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypes(int? ConfigurationKeyFromInputType, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesDefaultParams(ref ConfigurationKeyFromInputType);

          var items = Context.ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypes.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputType] @ConfigurationKeyFromInputType={0}", ConfigurationKeyFromInputType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesDefaultParams(ref int? ConfigurationKeyFromInputType);

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputType> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationValuesToExcel(string ConfigurationValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/excel(ConfigurationValue='{ConfigurationValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/excel(ConfigurationValue='{ConfigurationValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationValuesToCSV(string ConfigurationValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/csv(ConfigurationValue='{ConfigurationValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/csv(ConfigurationValue='{ConfigurationValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValue>> GetProjectConfigurationKeyAndValueGetByConfigurationValues(string ConfigurationValue, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByConfigurationValuesDefaultParams(ref ConfigurationValue);

          var items = Context.ProjectConfigurationKeyAndValueGetByConfigurationValues.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByConfigurationValue] @ConfigurationValue={0}", ConfigurationValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByConfigurationValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationValuesDefaultParams(ref string ConfigurationValue);

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValue> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationValueTypesToExcel(int? ConfigurationValueType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/excel(ConfigurationValueType={ConfigurationValueType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/excel(ConfigurationValueType={ConfigurationValueType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByConfigurationValueTypesToCSV(int? ConfigurationValueType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/csv(ConfigurationValueType={ConfigurationValueType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/csv(ConfigurationValueType={ConfigurationValueType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValueType>> GetProjectConfigurationKeyAndValueGetByConfigurationValueTypes(int? ConfigurationValueType, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByConfigurationValueTypesDefaultParams(ref ConfigurationValueType);

          var items = Context.ProjectConfigurationKeyAndValueGetByConfigurationValueTypes.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByConfigurationValueType] @ConfigurationValueType={0}", ConfigurationValueType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByConfigurationValueTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationValueTypesDefaultParams(ref int? ConfigurationValueType);

      partial void OnProjectConfigurationKeyAndValueGetByConfigurationValueTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValueType> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetById>> GetProjectConfigurationKeyAndValueGetByIds(int? Id, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectConfigurationKeyAndValueGetByIds.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectConfigurationKeyAndValueGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetById> items);  

      public async Task ExportProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsToExcel(int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/excel(ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/excel(ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsToCSV(int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/csv(ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/csv(ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByParentConfigurationKeyId>> GetProjectConfigurationKeyAndValueGetByParentConfigurationKeyIds(int? ParentConfigurationKeyId, Query query = null)
      {
          OnProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsDefaultParams(ref ParentConfigurationKeyId);

          var items = Context.ProjectConfigurationKeyAndValueGetByParentConfigurationKeyIds.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueGetByParentConfigurationKeyId] @ParentConfigurationKeyId={0}", ParentConfigurationKeyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsDefaultParams(ref int? ParentConfigurationKeyId);

      partial void OnProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByParentConfigurationKeyId> items);  

      public async Task ExportProjectConfigurationKeyAndValueInsertsToExcel(string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueinserts/excel(ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueinserts/excel(ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueInsertsToCSV(string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueinserts/csv(ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueinserts/csv(ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueInsert>> GetProjectConfigurationKeyAndValueInserts(string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null)
      {
          OnProjectConfigurationKeyAndValueInsertsDefaultParams(ref ConfigurationKey, ref ConfigurationKeyFieldType, ref ConfigurationKeyFromInputType, ref ConfigurationValue, ref ConfigurationValueType, ref ParentConfigurationKeyId);

          var items = Context.ProjectConfigurationKeyAndValueInserts.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueInsert] @ConfigurationKey={0}, @ConfigurationKeyFieldType={1}, @ConfigurationKeyFromInputType={2}, @ConfigurationValue={3}, @ConfigurationValueType={4}, @ParentConfigurationKeyId={5}", ConfigurationKey, ConfigurationKeyFieldType, ConfigurationKeyFromInputType, ConfigurationValue, ConfigurationValueType, ParentConfigurationKeyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueInsertsDefaultParams(ref string ConfigurationKey, ref string ConfigurationKeyFieldType, ref int? ConfigurationKeyFromInputType, ref string ConfigurationValue, ref int? ConfigurationValueType, ref int? ParentConfigurationKeyId);

      partial void OnProjectConfigurationKeyAndValueInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueInsert> items);  

      public async Task ExportProjectConfigurationKeyAndValueUpdatesToExcel(int? Id, string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueupdates/excel(Id={Id}, ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueupdates/excel(Id={Id}, ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationKeyAndValueUpdatesToCSV(int? Id, string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueupdates/csv(Id={Id}, ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueupdates/csv(Id={Id}, ConfigurationKey='{ConfigurationKey}', ConfigurationKeyFieldType='{ConfigurationKeyFieldType}', ConfigurationKeyFromInputType={ConfigurationKeyFromInputType}, ConfigurationValue='{ConfigurationValue}', ConfigurationValueType={ConfigurationValueType}, ParentConfigurationKeyId={ParentConfigurationKeyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueUpdate>> GetProjectConfigurationKeyAndValueUpdates(int? Id, string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null)
      {
          OnProjectConfigurationKeyAndValueUpdatesDefaultParams(ref Id, ref ConfigurationKey, ref ConfigurationKeyFieldType, ref ConfigurationKeyFromInputType, ref ConfigurationValue, ref ConfigurationValueType, ref ParentConfigurationKeyId);

          var items = Context.ProjectConfigurationKeyAndValueUpdates.FromSqlRaw("EXEC [dbo].[ProjectConfigurationKeyAndValueUpdate] @Id={0}, @ConfigurationKey={1}, @ConfigurationKeyFieldType={2}, @ConfigurationKeyFromInputType={3}, @ConfigurationValue={4}, @ConfigurationValueType={5}, @ParentConfigurationKeyId={6}", Id, ConfigurationKey, ConfigurationKeyFieldType, ConfigurationKeyFromInputType, ConfigurationValue, ConfigurationValueType, ParentConfigurationKeyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationKeyAndValueUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationKeyAndValueUpdatesDefaultParams(ref int? Id, ref string ConfigurationKey, ref string ConfigurationKeyFieldType, ref int? ConfigurationKeyFromInputType, ref string ConfigurationValue, ref int? ConfigurationValueType, ref int? ParentConfigurationKeyId);

      partial void OnProjectConfigurationKeyAndValueUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueUpdate> items);  

      public async Task ExportProjectConfigurationsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetAll>> GetProjectConfigurationsGetAlls(Query query = null)
      {
          OnProjectConfigurationsGetAllsDefaultParams();

          var items = Context.ProjectConfigurationsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetAllsDefaultParams();

      partial void OnProjectConfigurationsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetAll> items);  

      public async Task ExportProjectConfigurationsGetByAngularConfigurationsToExcel(string AngularConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyangularconfigurations/excel(AngularConfiguration='{AngularConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyangularconfigurations/excel(AngularConfiguration='{AngularConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByAngularConfigurationsToCSV(string AngularConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyangularconfigurations/csv(AngularConfiguration='{AngularConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyangularconfigurations/csv(AngularConfiguration='{AngularConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByAngularConfiguration>> GetProjectConfigurationsGetByAngularConfigurations(string AngularConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByAngularConfigurationsDefaultParams(ref AngularConfiguration);

          var items = Context.ProjectConfigurationsGetByAngularConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByAngularConfiguration] @AngularConfiguration={0}", AngularConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByAngularConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByAngularConfigurationsDefaultParams(ref string AngularConfiguration);

      partial void OnProjectConfigurationsGetByAngularConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByAngularConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByBackgroundJobConfigurationsToExcel(string BackgroundJobConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/excel(BackgroundJobConfiguration='{BackgroundJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/excel(BackgroundJobConfiguration='{BackgroundJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByBackgroundJobConfigurationsToCSV(string BackgroundJobConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/csv(BackgroundJobConfiguration='{BackgroundJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/csv(BackgroundJobConfiguration='{BackgroundJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackgroundJobConfiguration>> GetProjectConfigurationsGetByBackgroundJobConfigurations(string BackgroundJobConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByBackgroundJobConfigurationsDefaultParams(ref BackgroundJobConfiguration);

          var items = Context.ProjectConfigurationsGetByBackgroundJobConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByBackgroundJobConfiguration] @BackgroundJobConfiguration={0}", BackgroundJobConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByBackgroundJobConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByBackgroundJobConfigurationsDefaultParams(ref string BackgroundJobConfiguration);

      partial void OnProjectConfigurationsGetByBackgroundJobConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackgroundJobConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByBackUpConfigurationsToExcel(string BackUpConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackupconfigurations/excel(BackUpConfiguration='{BackUpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackupconfigurations/excel(BackUpConfiguration='{BackUpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByBackUpConfigurationsToCSV(string BackUpConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackupconfigurations/csv(BackUpConfiguration='{BackUpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackupconfigurations/csv(BackUpConfiguration='{BackUpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackUpConfiguration>> GetProjectConfigurationsGetByBackUpConfigurations(string BackUpConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByBackUpConfigurationsDefaultParams(ref BackUpConfiguration);

          var items = Context.ProjectConfigurationsGetByBackUpConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByBackUpConfiguration] @BackUpConfiguration={0}", BackUpConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByBackUpConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByBackUpConfigurationsDefaultParams(ref string BackUpConfiguration);

      partial void OnProjectConfigurationsGetByBackUpConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackUpConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByBootStrapConfigurationsToExcel(string BootStrapConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/excel(BootStrapConfiguration='{BootStrapConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/excel(BootStrapConfiguration='{BootStrapConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByBootStrapConfigurationsToCSV(string BootStrapConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/csv(BootStrapConfiguration='{BootStrapConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/csv(BootStrapConfiguration='{BootStrapConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBootStrapConfiguration>> GetProjectConfigurationsGetByBootStrapConfigurations(string BootStrapConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByBootStrapConfigurationsDefaultParams(ref BootStrapConfiguration);

          var items = Context.ProjectConfigurationsGetByBootStrapConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByBootStrapConfiguration] @BootStrapConfiguration={0}", BootStrapConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByBootStrapConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByBootStrapConfigurationsDefaultParams(ref string BootStrapConfiguration);

      partial void OnProjectConfigurationsGetByBootStrapConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBootStrapConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByBuildConfigurationsToExcel(string BuildConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybuildconfigurations/excel(BuildConfiguration='{BuildConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybuildconfigurations/excel(BuildConfiguration='{BuildConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByBuildConfigurationsToCSV(string BuildConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybuildconfigurations/csv(BuildConfiguration='{BuildConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybuildconfigurations/csv(BuildConfiguration='{BuildConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBuildConfiguration>> GetProjectConfigurationsGetByBuildConfigurations(string BuildConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByBuildConfigurationsDefaultParams(ref BuildConfiguration);

          var items = Context.ProjectConfigurationsGetByBuildConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByBuildConfiguration] @BuildConfiguration={0}", BuildConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByBuildConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByBuildConfigurationsDefaultParams(ref string BuildConfiguration);

      partial void OnProjectConfigurationsGetByBuildConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBuildConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByCacheConfigurationsToExcel(string CacheConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycacheconfigurations/excel(CacheConfiguration='{CacheConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycacheconfigurations/excel(CacheConfiguration='{CacheConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCacheConfigurationsToCSV(string CacheConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycacheconfigurations/csv(CacheConfiguration='{CacheConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycacheconfigurations/csv(CacheConfiguration='{CacheConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCacheConfiguration>> GetProjectConfigurationsGetByCacheConfigurations(string CacheConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByCacheConfigurationsDefaultParams(ref CacheConfiguration);

          var items = Context.ProjectConfigurationsGetByCacheConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCacheConfiguration] @CacheConfiguration={0}", CacheConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCacheConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCacheConfigurationsDefaultParams(ref string CacheConfiguration);

      partial void OnProjectConfigurationsGetByCacheConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCacheConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByCanOverRidesToExcel(bool? CanOverRide, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycanoverrides/excel(CanOverRide={CanOverRide}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycanoverrides/excel(CanOverRide={CanOverRide}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCanOverRidesToCSV(bool? CanOverRide, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycanoverrides/csv(CanOverRide={CanOverRide}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycanoverrides/csv(CanOverRide={CanOverRide}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCanOverRide>> GetProjectConfigurationsGetByCanOverRides(bool? CanOverRide, Query query = null)
      {
          OnProjectConfigurationsGetByCanOverRidesDefaultParams(ref CanOverRide);

          var items = Context.ProjectConfigurationsGetByCanOverRides.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCanOverRide] @CanOverRide={0}", CanOverRide).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCanOverRidesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCanOverRidesDefaultParams(ref bool? CanOverRide);

      partial void OnProjectConfigurationsGetByCanOverRidesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCanOverRide> items);  

      public async Task ExportProjectConfigurationsGetByCmsConfigurationsToExcel(string CMSConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycmsconfigurations/excel(CMSConfiguration='{CMSConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycmsconfigurations/excel(CMSConfiguration='{CMSConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCmsConfigurationsToCSV(string CMSConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycmsconfigurations/csv(CMSConfiguration='{CMSConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycmsconfigurations/csv(CMSConfiguration='{CMSConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCmsConfiguration>> GetProjectConfigurationsGetByCmsConfigurations(string CMSConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByCmsConfigurationsDefaultParams(ref CMSConfiguration);

          var items = Context.ProjectConfigurationsGetByCmsConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCMSConfiguration] @CMSConfiguration={0}", CMSConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCmsConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCmsConfigurationsDefaultParams(ref string CMSConfiguration);

      partial void OnProjectConfigurationsGetByCmsConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCmsConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByColumnConfigurationsToExcel(string ColumnConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/excel(ColumnConfiguration='{ColumnConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/excel(ColumnConfiguration='{ColumnConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByColumnConfigurationsToCSV(string ColumnConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/csv(ColumnConfiguration='{ColumnConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/csv(ColumnConfiguration='{ColumnConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByColumnConfiguration>> GetProjectConfigurationsGetByColumnConfigurations(string ColumnConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByColumnConfigurationsDefaultParams(ref ColumnConfiguration);

          var items = Context.ProjectConfigurationsGetByColumnConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByColumnConfiguration] @ColumnConfiguration={0}", ColumnConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByColumnConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByColumnConfigurationsDefaultParams(ref string ColumnConfiguration);

      partial void OnProjectConfigurationsGetByColumnConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByColumnConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByComponentConfigurationsToExcel(string ComponentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/excel(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/excel(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByComponentConfigurationsToCSV(string ComponentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/csv(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/csv(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByComponentConfiguration>> GetProjectConfigurationsGetByComponentConfigurations(string ComponentConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByComponentConfigurationsDefaultParams(ref ComponentConfiguration);

          var items = Context.ProjectConfigurationsGetByComponentConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByComponentConfiguration] @ComponentConfiguration={0}", ComponentConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByComponentConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByComponentConfigurationsDefaultParams(ref string ComponentConfiguration);

      partial void OnProjectConfigurationsGetByComponentConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByComponentConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByConfigurationJsonSchemesToExcel(string ConfigurationJsonScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/excel(ConfigurationJsonScheme='{ConfigurationJsonScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/excel(ConfigurationJsonScheme='{ConfigurationJsonScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByConfigurationJsonSchemesToCSV(string ConfigurationJsonScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/csv(ConfigurationJsonScheme='{ConfigurationJsonScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/csv(ConfigurationJsonScheme='{ConfigurationJsonScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConfigurationJsonScheme>> GetProjectConfigurationsGetByConfigurationJsonSchemes(string ConfigurationJsonScheme, Query query = null)
      {
          OnProjectConfigurationsGetByConfigurationJsonSchemesDefaultParams(ref ConfigurationJsonScheme);

          var items = Context.ProjectConfigurationsGetByConfigurationJsonSchemes.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByConfigurationJsonScheme] @ConfigurationJsonScheme={0}", ConfigurationJsonScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByConfigurationJsonSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByConfigurationJsonSchemesDefaultParams(ref string ConfigurationJsonScheme);

      partial void OnProjectConfigurationsGetByConfigurationJsonSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConfigurationJsonScheme> items);  

      public async Task ExportProjectConfigurationsGetByConsoleAppConfigurationsToExcel(string ConsoleAppConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/excel(ConsoleAppConfiguration='{ConsoleAppConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/excel(ConsoleAppConfiguration='{ConsoleAppConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByConsoleAppConfigurationsToCSV(string ConsoleAppConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/csv(ConsoleAppConfiguration='{ConsoleAppConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/csv(ConsoleAppConfiguration='{ConsoleAppConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConsoleAppConfiguration>> GetProjectConfigurationsGetByConsoleAppConfigurations(string ConsoleAppConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByConsoleAppConfigurationsDefaultParams(ref ConsoleAppConfiguration);

          var items = Context.ProjectConfigurationsGetByConsoleAppConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByConsoleAppConfiguration] @ConsoleAppConfiguration={0}", ConsoleAppConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByConsoleAppConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByConsoleAppConfigurationsDefaultParams(ref string ConsoleAppConfiguration);

      partial void OnProjectConfigurationsGetByConsoleAppConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConsoleAppConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByCreatedByIdsToExcel(int? CreatedById, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreatedbyids/excel(CreatedById={CreatedById}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreatedbyids/excel(CreatedById={CreatedById}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCreatedByIdsToCSV(int? CreatedById, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreatedbyids/csv(CreatedById={CreatedById}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreatedbyids/csv(CreatedById={CreatedById}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedById>> GetProjectConfigurationsGetByCreatedByIds(int? CreatedById, Query query = null)
      {
          OnProjectConfigurationsGetByCreatedByIdsDefaultParams(ref CreatedById);

          var items = Context.ProjectConfigurationsGetByCreatedByIds.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCreatedById] @CreatedById={0}", CreatedById).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCreatedByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCreatedByIdsDefaultParams(ref int? CreatedById);

      partial void OnProjectConfigurationsGetByCreatedByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedById> items);  

      public async Task ExportProjectConfigurationsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedDate>> GetProjectConfigurationsGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnProjectConfigurationsGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ProjectConfigurationsGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnProjectConfigurationsGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedDate> items);  

      public async Task ExportProjectConfigurationsGetByCssConfigurationsToExcel(string CssConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycssconfigurations/excel(CssConfiguration='{CssConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycssconfigurations/excel(CssConfiguration='{CssConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByCssConfigurationsToCSV(string CssConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycssconfigurations/csv(CssConfiguration='{CssConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycssconfigurations/csv(CssConfiguration='{CssConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCssConfiguration>> GetProjectConfigurationsGetByCssConfigurations(string CssConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByCssConfigurationsDefaultParams(ref CssConfiguration);

          var items = Context.ProjectConfigurationsGetByCssConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByCssConfiguration] @CssConfiguration={0}", CssConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByCssConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByCssConfigurationsDefaultParams(ref string CssConfiguration);

      partial void OnProjectConfigurationsGetByCssConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCssConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDapperConfigurationsToExcel(string DapperConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydapperconfigurations/excel(DapperConfiguration='{DapperConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydapperconfigurations/excel(DapperConfiguration='{DapperConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDapperConfigurationsToCSV(string DapperConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydapperconfigurations/csv(DapperConfiguration='{DapperConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydapperconfigurations/csv(DapperConfiguration='{DapperConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDapperConfiguration>> GetProjectConfigurationsGetByDapperConfigurations(string DapperConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDapperConfigurationsDefaultParams(ref DapperConfiguration);

          var items = Context.ProjectConfigurationsGetByDapperConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDapperConfiguration] @DapperConfiguration={0}", DapperConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDapperConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDapperConfigurationsDefaultParams(ref string DapperConfiguration);

      partial void OnProjectConfigurationsGetByDapperConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDapperConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDataBaseConfigurationsToExcel(string DataBaseConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/excel(DataBaseConfiguration='{DataBaseConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/excel(DataBaseConfiguration='{DataBaseConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDataBaseConfigurationsToCSV(string DataBaseConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/csv(DataBaseConfiguration='{DataBaseConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/csv(DataBaseConfiguration='{DataBaseConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataBaseConfiguration>> GetProjectConfigurationsGetByDataBaseConfigurations(string DataBaseConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDataBaseConfigurationsDefaultParams(ref DataBaseConfiguration);

          var items = Context.ProjectConfigurationsGetByDataBaseConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDataBaseConfiguration] @DataBaseConfiguration={0}", DataBaseConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDataBaseConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDataBaseConfigurationsDefaultParams(ref string DataBaseConfiguration);

      partial void OnProjectConfigurationsGetByDataBaseConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataBaseConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDataTypeConfigurationsToExcel(string DataTypeConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/excel(DataTypeConfiguration='{DataTypeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/excel(DataTypeConfiguration='{DataTypeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDataTypeConfigurationsToCSV(string DataTypeConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/csv(DataTypeConfiguration='{DataTypeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/csv(DataTypeConfiguration='{DataTypeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataTypeConfiguration>> GetProjectConfigurationsGetByDataTypeConfigurations(string DataTypeConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDataTypeConfigurationsDefaultParams(ref DataTypeConfiguration);

          var items = Context.ProjectConfigurationsGetByDataTypeConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDataTypeConfiguration] @DataTypeConfiguration={0}", DataTypeConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDataTypeConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDataTypeConfigurationsDefaultParams(ref string DataTypeConfiguration);

      partial void OnProjectConfigurationsGetByDataTypeConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataTypeConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDbJobConfigurationsToExcel(string DBJobConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/excel(DBJobConfiguration='{DBJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/excel(DBJobConfiguration='{DBJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDbJobConfigurationsToCSV(string DBJobConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/csv(DBJobConfiguration='{DBJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/csv(DBJobConfiguration='{DBJobConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDbJobConfiguration>> GetProjectConfigurationsGetByDbJobConfigurations(string DBJobConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDbJobConfigurationsDefaultParams(ref DBJobConfiguration);

          var items = Context.ProjectConfigurationsGetByDbJobConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDBJobConfiguration] @DBJobConfiguration={0}", DBJobConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDbJobConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDbJobConfigurationsDefaultParams(ref string DBJobConfiguration);

      partial void OnProjectConfigurationsGetByDbJobConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDbJobConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDescriptionsToExcel(string Descriptions, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydescriptions/excel(Descriptions='{Descriptions}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydescriptions/excel(Descriptions='{Descriptions}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDescriptionsToCSV(string Descriptions, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydescriptions/csv(Descriptions='{Descriptions}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydescriptions/csv(Descriptions='{Descriptions}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDescription>> GetProjectConfigurationsGetByDescriptions(string Descriptions, Query query = null)
      {
          OnProjectConfigurationsGetByDescriptionsDefaultParams(ref Descriptions);

          var items = Context.ProjectConfigurationsGetByDescriptions.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDescriptions] @Descriptions={0}", Descriptions).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDescriptionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDescriptionsDefaultParams(ref string Descriptions);

      partial void OnProjectConfigurationsGetByDescriptionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDescription> items);  

      public async Task ExportProjectConfigurationsGetByDeviceConfigurationsToExcel(string DeviceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/excel(DeviceConfiguration='{DeviceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/excel(DeviceConfiguration='{DeviceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDeviceConfigurationsToCSV(string DeviceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/csv(DeviceConfiguration='{DeviceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/csv(DeviceConfiguration='{DeviceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDeviceConfiguration>> GetProjectConfigurationsGetByDeviceConfigurations(string DeviceConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDeviceConfigurationsDefaultParams(ref DeviceConfiguration);

          var items = Context.ProjectConfigurationsGetByDeviceConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDeviceConfiguration] @DeviceConfiguration={0}", DeviceConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDeviceConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDeviceConfigurationsDefaultParams(ref string DeviceConfiguration);

      partial void OnProjectConfigurationsGetByDeviceConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDeviceConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByDiagramConfigurationsToExcel(string DiagramConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/excel(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/excel(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByDiagramConfigurationsToCSV(string DiagramConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/csv(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/csv(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDiagramConfiguration>> GetProjectConfigurationsGetByDiagramConfigurations(string DiagramConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByDiagramConfigurationsDefaultParams(ref DiagramConfiguration);

          var items = Context.ProjectConfigurationsGetByDiagramConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByDiagramConfiguration] @DiagramConfiguration={0}", DiagramConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByDiagramConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByDiagramConfigurationsDefaultParams(ref string DiagramConfiguration);

      partial void OnProjectConfigurationsGetByDiagramConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDiagramConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByElasticSearchConfigurationsToExcel(string ElasticSearchConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/excel(ElasticSearchConfiguration='{ElasticSearchConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/excel(ElasticSearchConfiguration='{ElasticSearchConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByElasticSearchConfigurationsToCSV(string ElasticSearchConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/csv(ElasticSearchConfiguration='{ElasticSearchConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/csv(ElasticSearchConfiguration='{ElasticSearchConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByElasticSearchConfiguration>> GetProjectConfigurationsGetByElasticSearchConfigurations(string ElasticSearchConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByElasticSearchConfigurationsDefaultParams(ref ElasticSearchConfiguration);

          var items = Context.ProjectConfigurationsGetByElasticSearchConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByElasticSearchConfiguration] @ElasticSearchConfiguration={0}", ElasticSearchConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByElasticSearchConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByElasticSearchConfigurationsDefaultParams(ref string ElasticSearchConfiguration);

      partial void OnProjectConfigurationsGetByElasticSearchConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByElasticSearchConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByExceptionHandlingConfigurationsToExcel(string ExceptionHandlingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/excel(ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/excel(ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByExceptionHandlingConfigurationsToCSV(string ExceptionHandlingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/csv(ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/csv(ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExceptionHandlingConfiguration>> GetProjectConfigurationsGetByExceptionHandlingConfigurations(string ExceptionHandlingConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByExceptionHandlingConfigurationsDefaultParams(ref ExceptionHandlingConfiguration);

          var items = Context.ProjectConfigurationsGetByExceptionHandlingConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByExceptionHandlingConfiguration] @ExceptionHandlingConfiguration={0}", ExceptionHandlingConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByExceptionHandlingConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByExceptionHandlingConfigurationsDefaultParams(ref string ExceptionHandlingConfiguration);

      partial void OnProjectConfigurationsGetByExceptionHandlingConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExceptionHandlingConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByExportConfigurationsToExcel(string ExportConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexportconfigurations/excel(ExportConfiguration='{ExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexportconfigurations/excel(ExportConfiguration='{ExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByExportConfigurationsToCSV(string ExportConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexportconfigurations/csv(ExportConfiguration='{ExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexportconfigurations/csv(ExportConfiguration='{ExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExportConfiguration>> GetProjectConfigurationsGetByExportConfigurations(string ExportConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByExportConfigurationsDefaultParams(ref ExportConfiguration);

          var items = Context.ProjectConfigurationsGetByExportConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByExportConfiguration] @ExportConfiguration={0}", ExportConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByExportConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByExportConfigurationsDefaultParams(ref string ExportConfiguration);

      partial void OnProjectConfigurationsGetByExportConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExportConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByFigmaConfigirationsToExcel(string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/excel(FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/excel(FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByFigmaConfigirationsToCSV(string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/csv(FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/csv(FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFigmaConfigiration>> GetProjectConfigurationsGetByFigmaConfigirations(string FigmaConfigiration, Query query = null)
      {
          OnProjectConfigurationsGetByFigmaConfigirationsDefaultParams(ref FigmaConfigiration);

          var items = Context.ProjectConfigurationsGetByFigmaConfigirations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByFigmaConfigiration] @FigmaConfigiration={0}", FigmaConfigiration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByFigmaConfigirationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByFigmaConfigirationsDefaultParams(ref string FigmaConfigiration);

      partial void OnProjectConfigurationsGetByFigmaConfigirationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFigmaConfigiration> items);  

      public async Task ExportProjectConfigurationsGetByFileManagementConfigurationsToExcel(string FileManagementConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/excel(FileManagementConfiguration='{FileManagementConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/excel(FileManagementConfiguration='{FileManagementConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByFileManagementConfigurationsToCSV(string FileManagementConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/csv(FileManagementConfiguration='{FileManagementConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/csv(FileManagementConfiguration='{FileManagementConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileManagementConfiguration>> GetProjectConfigurationsGetByFileManagementConfigurations(string FileManagementConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByFileManagementConfigurationsDefaultParams(ref FileManagementConfiguration);

          var items = Context.ProjectConfigurationsGetByFileManagementConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByFileManagementConfiguration] @FileManagementConfiguration={0}", FileManagementConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByFileManagementConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByFileManagementConfigurationsDefaultParams(ref string FileManagementConfiguration);

      partial void OnProjectConfigurationsGetByFileManagementConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileManagementConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByFileOutputExtensionNamesToExcel(string FileOutputExtensionName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/excel(FileOutputExtensionName='{FileOutputExtensionName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/excel(FileOutputExtensionName='{FileOutputExtensionName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByFileOutputExtensionNamesToCSV(string FileOutputExtensionName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/csv(FileOutputExtensionName='{FileOutputExtensionName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/csv(FileOutputExtensionName='{FileOutputExtensionName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileOutputExtensionName>> GetProjectConfigurationsGetByFileOutputExtensionNames(string FileOutputExtensionName, Query query = null)
      {
          OnProjectConfigurationsGetByFileOutputExtensionNamesDefaultParams(ref FileOutputExtensionName);

          var items = Context.ProjectConfigurationsGetByFileOutputExtensionNames.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByFileOutputExtensionName] @FileOutputExtensionName={0}", FileOutputExtensionName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByFileOutputExtensionNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByFileOutputExtensionNamesDefaultParams(ref string FileOutputExtensionName);

      partial void OnProjectConfigurationsGetByFileOutputExtensionNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileOutputExtensionName> items);  

      public async Task ExportProjectConfigurationsGetByFtpConfigurationsToExcel(string FtpConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyftpconfigurations/excel(FtpConfiguration='{FtpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyftpconfigurations/excel(FtpConfiguration='{FtpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByFtpConfigurationsToCSV(string FtpConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyftpconfigurations/csv(FtpConfiguration='{FtpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyftpconfigurations/csv(FtpConfiguration='{FtpConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFtpConfiguration>> GetProjectConfigurationsGetByFtpConfigurations(string FtpConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByFtpConfigurationsDefaultParams(ref FtpConfiguration);

          var items = Context.ProjectConfigurationsGetByFtpConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByFtpConfiguration] @FtpConfiguration={0}", FtpConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByFtpConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByFtpConfigurationsDefaultParams(ref string FtpConfiguration);

      partial void OnProjectConfigurationsGetByFtpConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFtpConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByFunctionConfigurationsToExcel(string FunctionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/excel(FunctionConfiguration='{FunctionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/excel(FunctionConfiguration='{FunctionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByFunctionConfigurationsToCSV(string FunctionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/csv(FunctionConfiguration='{FunctionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/csv(FunctionConfiguration='{FunctionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFunctionConfiguration>> GetProjectConfigurationsGetByFunctionConfigurations(string FunctionConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByFunctionConfigurationsDefaultParams(ref FunctionConfiguration);

          var items = Context.ProjectConfigurationsGetByFunctionConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByFunctionConfiguration] @FunctionConfiguration={0}", FunctionConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByFunctionConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByFunctionConfigurationsDefaultParams(ref string FunctionConfiguration);

      partial void OnProjectConfigurationsGetByFunctionConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFunctionConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByHasNeedCompileOnChangesToExcel(string HasNeedCompileOnChange, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/excel(HasNeedCompileOnChange='{HasNeedCompileOnChange}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/excel(HasNeedCompileOnChange='{HasNeedCompileOnChange}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByHasNeedCompileOnChangesToCSV(string HasNeedCompileOnChange, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/csv(HasNeedCompileOnChange='{HasNeedCompileOnChange}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/csv(HasNeedCompileOnChange='{HasNeedCompileOnChange}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHasNeedCompileOnChange>> GetProjectConfigurationsGetByHasNeedCompileOnChanges(string HasNeedCompileOnChange, Query query = null)
      {
          OnProjectConfigurationsGetByHasNeedCompileOnChangesDefaultParams(ref HasNeedCompileOnChange);

          var items = Context.ProjectConfigurationsGetByHasNeedCompileOnChanges.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByHasNeedCompileOnChange] @HasNeedCompileOnChange={0}", HasNeedCompileOnChange).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByHasNeedCompileOnChangesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByHasNeedCompileOnChangesDefaultParams(ref string HasNeedCompileOnChange);

      partial void OnProjectConfigurationsGetByHasNeedCompileOnChangesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHasNeedCompileOnChange> items);  

      public async Task ExportProjectConfigurationsGetByHeaderConfigurationsToExcel(string HeaderConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/excel(HeaderConfiguration='{HeaderConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/excel(HeaderConfiguration='{HeaderConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByHeaderConfigurationsToCSV(string HeaderConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/csv(HeaderConfiguration='{HeaderConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/csv(HeaderConfiguration='{HeaderConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHeaderConfiguration>> GetProjectConfigurationsGetByHeaderConfigurations(string HeaderConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByHeaderConfigurationsDefaultParams(ref HeaderConfiguration);

          var items = Context.ProjectConfigurationsGetByHeaderConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByHeaderConfiguration] @HeaderConfiguration={0}", HeaderConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByHeaderConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByHeaderConfigurationsDefaultParams(ref string HeaderConfiguration);

      partial void OnProjectConfigurationsGetByHeaderConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHeaderConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByHelpDocumentConfigurationsToExcel(string HelpDocumentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/excel(HelpDocumentConfiguration='{HelpDocumentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/excel(HelpDocumentConfiguration='{HelpDocumentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByHelpDocumentConfigurationsToCSV(string HelpDocumentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/csv(HelpDocumentConfiguration='{HelpDocumentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/csv(HelpDocumentConfiguration='{HelpDocumentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHelpDocumentConfiguration>> GetProjectConfigurationsGetByHelpDocumentConfigurations(string HelpDocumentConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByHelpDocumentConfigurationsDefaultParams(ref HelpDocumentConfiguration);

          var items = Context.ProjectConfigurationsGetByHelpDocumentConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByHelpDocumentConfiguration] @HelpDocumentConfiguration={0}", HelpDocumentConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByHelpDocumentConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByHelpDocumentConfigurationsDefaultParams(ref string HelpDocumentConfiguration);

      partial void OnProjectConfigurationsGetByHelpDocumentConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHelpDocumentConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByHostingConfigurationsToExcel(string HostingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/excel(HostingConfiguration='{HostingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/excel(HostingConfiguration='{HostingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByHostingConfigurationsToCSV(string HostingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/csv(HostingConfiguration='{HostingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/csv(HostingConfiguration='{HostingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHostingConfiguration>> GetProjectConfigurationsGetByHostingConfigurations(string HostingConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByHostingConfigurationsDefaultParams(ref HostingConfiguration);

          var items = Context.ProjectConfigurationsGetByHostingConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByHostingConfiguration] @HostingConfiguration={0}", HostingConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByHostingConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByHostingConfigurationsDefaultParams(ref string HostingConfiguration);

      partial void OnProjectConfigurationsGetByHostingConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHostingConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByHtmlConfigurationsToExcel(string HtmlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/excel(HtmlConfiguration='{HtmlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/excel(HtmlConfiguration='{HtmlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByHtmlConfigurationsToCSV(string HtmlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/csv(HtmlConfiguration='{HtmlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/csv(HtmlConfiguration='{HtmlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHtmlConfiguration>> GetProjectConfigurationsGetByHtmlConfigurations(string HtmlConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByHtmlConfigurationsDefaultParams(ref HtmlConfiguration);

          var items = Context.ProjectConfigurationsGetByHtmlConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByHtmlConfiguration] @HtmlConfiguration={0}", HtmlConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByHtmlConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByHtmlConfigurationsDefaultParams(ref string HtmlConfiguration);

      partial void OnProjectConfigurationsGetByHtmlConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHtmlConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetById>> GetProjectConfigurationsGetByIds(int? Id, Query query = null)
      {
          OnProjectConfigurationsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectConfigurationsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectConfigurationsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetById> items);  

      public async Task ExportProjectConfigurationsGetByIısConfigurationsToExcel(string IISConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyiısconfigurations/excel(IISConfiguration='{IISConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyiısconfigurations/excel(IISConfiguration='{IISConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByIısConfigurationsToCSV(string IISConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyiısconfigurations/csv(IISConfiguration='{IISConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyiısconfigurations/csv(IISConfiguration='{IISConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByIısConfiguration>> GetProjectConfigurationsGetByIısConfigurations(string IISConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByIısConfigurationsDefaultParams(ref IISConfiguration);

          var items = Context.ProjectConfigurationsGetByIısConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByIISConfiguration] @IISConfiguration={0}", IISConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByIısConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByIısConfigurationsDefaultParams(ref string IISConfiguration);

      partial void OnProjectConfigurationsGetByIısConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByIısConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByInputConfigurationsToExcel(string InputConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyinputconfigurations/excel(InputConfiguration='{InputConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyinputconfigurations/excel(InputConfiguration='{InputConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByInputConfigurationsToCSV(string InputConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyinputconfigurations/csv(InputConfiguration='{InputConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyinputconfigurations/csv(InputConfiguration='{InputConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByInputConfiguration>> GetProjectConfigurationsGetByInputConfigurations(string InputConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByInputConfigurationsDefaultParams(ref InputConfiguration);

          var items = Context.ProjectConfigurationsGetByInputConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByInputConfiguration] @InputConfiguration={0}", InputConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByInputConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByInputConfigurationsDefaultParams(ref string InputConfiguration);

      partial void OnProjectConfigurationsGetByInputConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByInputConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByJsonConfigurationsToExcel(string JsonConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/excel(JsonConfiguration='{JsonConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/excel(JsonConfiguration='{JsonConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByJsonConfigurationsToCSV(string JsonConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/csv(JsonConfiguration='{JsonConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/csv(JsonConfiguration='{JsonConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByJsonConfiguration>> GetProjectConfigurationsGetByJsonConfigurations(string JsonConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByJsonConfigurationsDefaultParams(ref JsonConfiguration);

          var items = Context.ProjectConfigurationsGetByJsonConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByJsonConfiguration] @JsonConfiguration={0}", JsonConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByJsonConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByJsonConfigurationsDefaultParams(ref string JsonConfiguration);

      partial void OnProjectConfigurationsGetByJsonConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByJsonConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByLastValidDatesToExcel(string LastValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylastvaliddates/excel(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylastvaliddates/excel(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByLastValidDatesToCSV(string LastValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylastvaliddates/csv(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylastvaliddates/csv(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLastValidDate>> GetProjectConfigurationsGetByLastValidDates(string LastValidDate, Query query = null)
      {
          OnProjectConfigurationsGetByLastValidDatesDefaultParams(ref LastValidDate);

          var items = Context.ProjectConfigurationsGetByLastValidDates.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByLastValidDate] @LastValidDate={0}", LastValidDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByLastValidDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByLastValidDatesDefaultParams(ref string LastValidDate);

      partial void OnProjectConfigurationsGetByLastValidDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLastValidDate> items);  

      public async Task ExportProjectConfigurationsGetByLayoutConfigurationsToExcel(string LayoutConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/excel(LayoutConfiguration='{LayoutConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/excel(LayoutConfiguration='{LayoutConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByLayoutConfigurationsToCSV(string LayoutConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/csv(LayoutConfiguration='{LayoutConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/csv(LayoutConfiguration='{LayoutConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLayoutConfiguration>> GetProjectConfigurationsGetByLayoutConfigurations(string LayoutConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByLayoutConfigurationsDefaultParams(ref LayoutConfiguration);

          var items = Context.ProjectConfigurationsGetByLayoutConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByLayoutConfiguration] @LayoutConfiguration={0}", LayoutConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByLayoutConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByLayoutConfigurationsDefaultParams(ref string LayoutConfiguration);

      partial void OnProjectConfigurationsGetByLayoutConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLayoutConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByLogConfigurationsToExcel(string LogConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylogconfigurations/excel(LogConfiguration='{LogConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylogconfigurations/excel(LogConfiguration='{LogConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByLogConfigurationsToCSV(string LogConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylogconfigurations/csv(LogConfiguration='{LogConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylogconfigurations/csv(LogConfiguration='{LogConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLogConfiguration>> GetProjectConfigurationsGetByLogConfigurations(string LogConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByLogConfigurationsDefaultParams(ref LogConfiguration);

          var items = Context.ProjectConfigurationsGetByLogConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByLogConfiguration] @LogConfiguration={0}", LogConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByLogConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByLogConfigurationsDefaultParams(ref string LogConfiguration);

      partial void OnProjectConfigurationsGetByLogConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLogConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByMailConfigurationsToExcel(string MailConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymailconfigurations/excel(MailConfiguration='{MailConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymailconfigurations/excel(MailConfiguration='{MailConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByMailConfigurationsToCSV(string MailConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymailconfigurations/csv(MailConfiguration='{MailConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymailconfigurations/csv(MailConfiguration='{MailConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMailConfiguration>> GetProjectConfigurationsGetByMailConfigurations(string MailConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByMailConfigurationsDefaultParams(ref MailConfiguration);

          var items = Context.ProjectConfigurationsGetByMailConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByMailConfiguration] @MailConfiguration={0}", MailConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByMailConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByMailConfigurationsDefaultParams(ref string MailConfiguration);

      partial void OnProjectConfigurationsGetByMailConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMailConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByMongoConfigurationsToExcel(string MongoConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymongoconfigurations/excel(MongoConfiguration='{MongoConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymongoconfigurations/excel(MongoConfiguration='{MongoConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByMongoConfigurationsToCSV(string MongoConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymongoconfigurations/csv(MongoConfiguration='{MongoConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymongoconfigurations/csv(MongoConfiguration='{MongoConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMongoConfiguration>> GetProjectConfigurationsGetByMongoConfigurations(string MongoConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByMongoConfigurationsDefaultParams(ref MongoConfiguration);

          var items = Context.ProjectConfigurationsGetByMongoConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByMongoConfiguration] @MongoConfiguration={0}", MongoConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByMongoConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByMongoConfigurationsDefaultParams(ref string MongoConfiguration);

      partial void OnProjectConfigurationsGetByMongoConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMongoConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByMsSqlConfigurationsToExcel(string MsSqlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/excel(MsSqlConfiguration='{MsSqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/excel(MsSqlConfiguration='{MsSqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByMsSqlConfigurationsToCSV(string MsSqlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/csv(MsSqlConfiguration='{MsSqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/csv(MsSqlConfiguration='{MsSqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMsSqlConfiguration>> GetProjectConfigurationsGetByMsSqlConfigurations(string MsSqlConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByMsSqlConfigurationsDefaultParams(ref MsSqlConfiguration);

          var items = Context.ProjectConfigurationsGetByMsSqlConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByMsSqlConfiguration] @MsSqlConfiguration={0}", MsSqlConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByMsSqlConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByMsSqlConfigurationsDefaultParams(ref string MsSqlConfiguration);

      partial void OnProjectConfigurationsGetByMsSqlConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMsSqlConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByMySqlConfigurationsToExcel(string MySqlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/excel(MySqlConfiguration='{MySqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/excel(MySqlConfiguration='{MySqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByMySqlConfigurationsToCSV(string MySqlConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/csv(MySqlConfiguration='{MySqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/csv(MySqlConfiguration='{MySqlConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMySqlConfiguration>> GetProjectConfigurationsGetByMySqlConfigurations(string MySqlConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByMySqlConfigurationsDefaultParams(ref MySqlConfiguration);

          var items = Context.ProjectConfigurationsGetByMySqlConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByMySqlConfiguration] @MySqlConfiguration={0}", MySqlConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByMySqlConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByMySqlConfigurationsDefaultParams(ref string MySqlConfiguration);

      partial void OnProjectConfigurationsGetByMySqlConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMySqlConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByName>> GetProjectConfigurationsGetByNames(string Name, Query query = null)
      {
          OnProjectConfigurationsGetByNamesDefaultParams(ref Name);

          var items = Context.ProjectConfigurationsGetByNames.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNamesDefaultParams(ref string Name);

      partial void OnProjectConfigurationsGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByName> items);  

      public async Task ExportProjectConfigurationsGetByNameSpaceConfigurationsToExcel(string NameSpaceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/excel(NameSpaceConfiguration='{NameSpaceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/excel(NameSpaceConfiguration='{NameSpaceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNameSpaceConfigurationsToCSV(string NameSpaceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/csv(NameSpaceConfiguration='{NameSpaceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/csv(NameSpaceConfiguration='{NameSpaceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNameSpaceConfiguration>> GetProjectConfigurationsGetByNameSpaceConfigurations(string NameSpaceConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByNameSpaceConfigurationsDefaultParams(ref NameSpaceConfiguration);

          var items = Context.ProjectConfigurationsGetByNameSpaceConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByNameSpaceConfiguration] @NameSpaceConfiguration={0}", NameSpaceConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNameSpaceConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNameSpaceConfigurationsDefaultParams(ref string NameSpaceConfiguration);

      partial void OnProjectConfigurationsGetByNameSpaceConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNameSpaceConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByNetCoreApıConfigurationsToExcel(string NetCoreAPIConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/excel(NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/excel(NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNetCoreApıConfigurationsToCSV(string NetCoreAPIConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/csv(NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/csv(NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNetCoreApıConfiguration>> GetProjectConfigurationsGetByNetCoreApıConfigurations(string NetCoreAPIConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByNetCoreApıConfigurationsDefaultParams(ref NetCoreAPIConfiguration);

          var items = Context.ProjectConfigurationsGetByNetCoreApıConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByNetCoreAPIConfiguration] @NetCoreAPIConfiguration={0}", NetCoreAPIConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNetCoreApıConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNetCoreApıConfigurationsDefaultParams(ref string NetCoreAPIConfiguration);

      partial void OnProjectConfigurationsGetByNetCoreApıConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNetCoreApıConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByNginxConfigurationsToExcel(string NginxConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynginxconfigurations/excel(NginxConfiguration='{NginxConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynginxconfigurations/excel(NginxConfiguration='{NginxConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNginxConfigurationsToCSV(string NginxConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynginxconfigurations/csv(NginxConfiguration='{NginxConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynginxconfigurations/csv(NginxConfiguration='{NginxConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNginxConfiguration>> GetProjectConfigurationsGetByNginxConfigurations(string NginxConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByNginxConfigurationsDefaultParams(ref NginxConfiguration);

          var items = Context.ProjectConfigurationsGetByNginxConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByNginxConfiguration] @NginxConfiguration={0}", NginxConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNginxConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNginxConfigurationsDefaultParams(ref string NginxConfiguration);

      partial void OnProjectConfigurationsGetByNginxConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNginxConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByNodeJsExpressConfigurationsToExcel(string NodeJsExpressConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/excel(NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/excel(NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNodeJsExpressConfigurationsToCSV(string NodeJsExpressConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/csv(NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/csv(NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNodeJsExpressConfiguration>> GetProjectConfigurationsGetByNodeJsExpressConfigurations(string NodeJsExpressConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByNodeJsExpressConfigurationsDefaultParams(ref NodeJsExpressConfiguration);

          var items = Context.ProjectConfigurationsGetByNodeJsExpressConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByNodeJsExpressConfiguration] @NodeJsExpressConfiguration={0}", NodeJsExpressConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNodeJsExpressConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNodeJsExpressConfigurationsDefaultParams(ref string NodeJsExpressConfiguration);

      partial void OnProjectConfigurationsGetByNodeJsExpressConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNodeJsExpressConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByNoteHistoriesToExcel(string NoteHistory, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynotehistories/excel(NoteHistory='{NoteHistory}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynotehistories/excel(NoteHistory='{NoteHistory}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByNoteHistoriesToCSV(string NoteHistory, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynotehistories/csv(NoteHistory='{NoteHistory}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynotehistories/csv(NoteHistory='{NoteHistory}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNoteHistory>> GetProjectConfigurationsGetByNoteHistories(string NoteHistory, Query query = null)
      {
          OnProjectConfigurationsGetByNoteHistoriesDefaultParams(ref NoteHistory);

          var items = Context.ProjectConfigurationsGetByNoteHistories.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByNoteHistory] @NoteHistory={0}", NoteHistory).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByNoteHistoriesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByNoteHistoriesDefaultParams(ref string NoteHistory);

      partial void OnProjectConfigurationsGetByNoteHistoriesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNoteHistory> items);  

      public async Task ExportProjectConfigurationsGetByPackageConfigurationsToExcel(string PackageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypackageconfigurations/excel(PackageConfiguration='{PackageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypackageconfigurations/excel(PackageConfiguration='{PackageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByPackageConfigurationsToCSV(string PackageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypackageconfigurations/csv(PackageConfiguration='{PackageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypackageconfigurations/csv(PackageConfiguration='{PackageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPackageConfiguration>> GetProjectConfigurationsGetByPackageConfigurations(string PackageConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByPackageConfigurationsDefaultParams(ref PackageConfiguration);

          var items = Context.ProjectConfigurationsGetByPackageConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByPackageConfiguration] @PackageConfiguration={0}", PackageConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByPackageConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByPackageConfigurationsDefaultParams(ref string PackageConfiguration);

      partial void OnProjectConfigurationsGetByPackageConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPackageConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByPaymentConfigurationsToExcel(string PaymentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/excel(PaymentConfiguration='{PaymentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/excel(PaymentConfiguration='{PaymentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByPaymentConfigurationsToCSV(string PaymentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/csv(PaymentConfiguration='{PaymentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/csv(PaymentConfiguration='{PaymentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPaymentConfiguration>> GetProjectConfigurationsGetByPaymentConfigurations(string PaymentConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByPaymentConfigurationsDefaultParams(ref PaymentConfiguration);

          var items = Context.ProjectConfigurationsGetByPaymentConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByPaymentConfiguration] @PaymentConfiguration={0}", PaymentConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByPaymentConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByPaymentConfigurationsDefaultParams(ref string PaymentConfiguration);

      partial void OnProjectConfigurationsGetByPaymentConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPaymentConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByPrismaConfigurationsToExcel(string PrismaConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/excel(PrismaConfiguration='{PrismaConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/excel(PrismaConfiguration='{PrismaConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByPrismaConfigurationsToCSV(string PrismaConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/csv(PrismaConfiguration='{PrismaConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/csv(PrismaConfiguration='{PrismaConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPrismaConfiguration>> GetProjectConfigurationsGetByPrismaConfigurations(string PrismaConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByPrismaConfigurationsDefaultParams(ref PrismaConfiguration);

          var items = Context.ProjectConfigurationsGetByPrismaConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByPrismaConfiguration] @PrismaConfiguration={0}", PrismaConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByPrismaConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByPrismaConfigurationsDefaultParams(ref string PrismaConfiguration);

      partial void OnProjectConfigurationsGetByPrismaConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPrismaConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByPublishPathConfigurationsToExcel(string PublishPathConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/excel(PublishPathConfiguration='{PublishPathConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/excel(PublishPathConfiguration='{PublishPathConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByPublishPathConfigurationsToCSV(string PublishPathConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/csv(PublishPathConfiguration='{PublishPathConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/csv(PublishPathConfiguration='{PublishPathConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPublishPathConfiguration>> GetProjectConfigurationsGetByPublishPathConfigurations(string PublishPathConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByPublishPathConfigurationsDefaultParams(ref PublishPathConfiguration);

          var items = Context.ProjectConfigurationsGetByPublishPathConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByPublishPathConfiguration] @PublishPathConfiguration={0}", PublishPathConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByPublishPathConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByPublishPathConfigurationsDefaultParams(ref string PublishPathConfiguration);

      partial void OnProjectConfigurationsGetByPublishPathConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPublishPathConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByPurchasedToolConfigurationsToExcel(string PurchasedToolConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/excel(PurchasedToolConfiguration='{PurchasedToolConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/excel(PurchasedToolConfiguration='{PurchasedToolConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByPurchasedToolConfigurationsToCSV(string PurchasedToolConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/csv(PurchasedToolConfiguration='{PurchasedToolConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/csv(PurchasedToolConfiguration='{PurchasedToolConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPurchasedToolConfiguration>> GetProjectConfigurationsGetByPurchasedToolConfigurations(string PurchasedToolConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByPurchasedToolConfigurationsDefaultParams(ref PurchasedToolConfiguration);

          var items = Context.ProjectConfigurationsGetByPurchasedToolConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByPurchasedToolConfiguration] @PurchasedToolConfiguration={0}", PurchasedToolConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByPurchasedToolConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByPurchasedToolConfigurationsDefaultParams(ref string PurchasedToolConfiguration);

      partial void OnProjectConfigurationsGetByPurchasedToolConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPurchasedToolConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByRateLimitConfigurationsToExcel(string RateLimitConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/excel(RateLimitConfiguration='{RateLimitConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/excel(RateLimitConfiguration='{RateLimitConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByRateLimitConfigurationsToCSV(string RateLimitConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/csv(RateLimitConfiguration='{RateLimitConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/csv(RateLimitConfiguration='{RateLimitConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRateLimitConfiguration>> GetProjectConfigurationsGetByRateLimitConfigurations(string RateLimitConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByRateLimitConfigurationsDefaultParams(ref RateLimitConfiguration);

          var items = Context.ProjectConfigurationsGetByRateLimitConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByRateLimitConfiguration] @RateLimitConfiguration={0}", RateLimitConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByRateLimitConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByRateLimitConfigurationsDefaultParams(ref string RateLimitConfiguration);

      partial void OnProjectConfigurationsGetByRateLimitConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRateLimitConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByReactConfigurationsToExcel(string ReactConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyreactconfigurations/excel(ReactConfiguration='{ReactConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyreactconfigurations/excel(ReactConfiguration='{ReactConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByReactConfigurationsToCSV(string ReactConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyreactconfigurations/csv(ReactConfiguration='{ReactConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyreactconfigurations/csv(ReactConfiguration='{ReactConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByReactConfiguration>> GetProjectConfigurationsGetByReactConfigurations(string ReactConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByReactConfigurationsDefaultParams(ref ReactConfiguration);

          var items = Context.ProjectConfigurationsGetByReactConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByReactConfiguration] @ReactConfiguration={0}", ReactConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByReactConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByReactConfigurationsDefaultParams(ref string ReactConfiguration);

      partial void OnProjectConfigurationsGetByReactConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByReactConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByRedisConfigurationsToExcel(string RedisConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyredisconfigurations/excel(RedisConfiguration='{RedisConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyredisconfigurations/excel(RedisConfiguration='{RedisConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByRedisConfigurationsToCSV(string RedisConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyredisconfigurations/csv(RedisConfiguration='{RedisConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyredisconfigurations/csv(RedisConfiguration='{RedisConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRedisConfiguration>> GetProjectConfigurationsGetByRedisConfigurations(string RedisConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByRedisConfigurationsDefaultParams(ref RedisConfiguration);

          var items = Context.ProjectConfigurationsGetByRedisConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByRedisConfiguration] @RedisConfiguration={0}", RedisConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByRedisConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByRedisConfigurationsDefaultParams(ref string RedisConfiguration);

      partial void OnProjectConfigurationsGetByRedisConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRedisConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByRoleConfigurationsToExcel(string RoleConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyroleconfigurations/excel(RoleConfiguration='{RoleConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyroleconfigurations/excel(RoleConfiguration='{RoleConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByRoleConfigurationsToCSV(string RoleConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyroleconfigurations/csv(RoleConfiguration='{RoleConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyroleconfigurations/csv(RoleConfiguration='{RoleConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRoleConfiguration>> GetProjectConfigurationsGetByRoleConfigurations(string RoleConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByRoleConfigurationsDefaultParams(ref RoleConfiguration);

          var items = Context.ProjectConfigurationsGetByRoleConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByRoleConfiguration] @RoleConfiguration={0}", RoleConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByRoleConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByRoleConfigurationsDefaultParams(ref string RoleConfiguration);

      partial void OnProjectConfigurationsGetByRoleConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRoleConfiguration> items);  

      public async Task ExportProjectConfigurationsGetBySecurityConfigurationsToExcel(string SecurityConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/excel(SecurityConfiguration='{SecurityConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/excel(SecurityConfiguration='{SecurityConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetBySecurityConfigurationsToCSV(string SecurityConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/csv(SecurityConfiguration='{SecurityConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/csv(SecurityConfiguration='{SecurityConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySecurityConfiguration>> GetProjectConfigurationsGetBySecurityConfigurations(string SecurityConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetBySecurityConfigurationsDefaultParams(ref SecurityConfiguration);

          var items = Context.ProjectConfigurationsGetBySecurityConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetBySecurityConfiguration] @SecurityConfiguration={0}", SecurityConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetBySecurityConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetBySecurityConfigurationsDefaultParams(ref string SecurityConfiguration);

      partial void OnProjectConfigurationsGetBySecurityConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySecurityConfiguration> items);  

      public async Task ExportProjectConfigurationsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareLanguageId>> GetProjectConfigurationsGetBySoftwareLanguageIds(int? SoftwareLanguageId, Query query = null)
      {
          OnProjectConfigurationsGetBySoftwareLanguageIdsDefaultParams(ref SoftwareLanguageId);

          var items = Context.ProjectConfigurationsGetBySoftwareLanguageIds.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetBySoftwareLanguageId] @SoftwareLanguageId={0}", SoftwareLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetBySoftwareLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetBySoftwareLanguageIdsDefaultParams(ref int? SoftwareLanguageId);

      partial void OnProjectConfigurationsGetBySoftwareLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareLanguageId> items);  

      public async Task ExportProjectConfigurationsGetBySoftwareVersionConfigurationsToExcel(string SoftwareVersionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/excel(SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/excel(SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetBySoftwareVersionConfigurationsToCSV(string SoftwareVersionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/csv(SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/csv(SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareVersionConfiguration>> GetProjectConfigurationsGetBySoftwareVersionConfigurations(string SoftwareVersionConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetBySoftwareVersionConfigurationsDefaultParams(ref SoftwareVersionConfiguration);

          var items = Context.ProjectConfigurationsGetBySoftwareVersionConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetBySoftwareVersionConfiguration] @SoftwareVersionConfiguration={0}", SoftwareVersionConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetBySoftwareVersionConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetBySoftwareVersionConfigurationsDefaultParams(ref string SoftwareVersionConfiguration);

      partial void OnProjectConfigurationsGetBySoftwareVersionConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareVersionConfiguration> items);  

      public async Task ExportProjectConfigurationsGetBySslConfigurationsToExcel(string SSLConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysslconfigurations/excel(SSLConfiguration='{SSLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysslconfigurations/excel(SSLConfiguration='{SSLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetBySslConfigurationsToCSV(string SSLConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysslconfigurations/csv(SSLConfiguration='{SSLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysslconfigurations/csv(SSLConfiguration='{SSLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySslConfiguration>> GetProjectConfigurationsGetBySslConfigurations(string SSLConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetBySslConfigurationsDefaultParams(ref SSLConfiguration);

          var items = Context.ProjectConfigurationsGetBySslConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetBySSLConfiguration] @SSLConfiguration={0}", SSLConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetBySslConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetBySslConfigurationsDefaultParams(ref string SSLConfiguration);

      partial void OnProjectConfigurationsGetBySslConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySslConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTableConfigurationsToExcel(string TableConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytableconfigurations/excel(TableConfiguration='{TableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytableconfigurations/excel(TableConfiguration='{TableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTableConfigurationsToCSV(string TableConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytableconfigurations/csv(TableConfiguration='{TableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytableconfigurations/csv(TableConfiguration='{TableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTableConfiguration>> GetProjectConfigurationsGetByTableConfigurations(string TableConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTableConfigurationsDefaultParams(ref TableConfiguration);

          var items = Context.ProjectConfigurationsGetByTableConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTableConfiguration] @TableConfiguration={0}", TableConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTableConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTableConfigurationsDefaultParams(ref string TableConfiguration);

      partial void OnProjectConfigurationsGetByTableConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTableConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTenantApiKeyConfigurationsToExcel(string TenantApiKeyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/excel(TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/excel(TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTenantApiKeyConfigurationsToCSV(string TenantApiKeyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/csv(TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/csv(TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantApiKeyConfiguration>> GetProjectConfigurationsGetByTenantApiKeyConfigurations(string TenantApiKeyConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTenantApiKeyConfigurationsDefaultParams(ref TenantApiKeyConfiguration);

          var items = Context.ProjectConfigurationsGetByTenantApiKeyConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTenantApiKeyConfiguration] @TenantApiKeyConfiguration={0}", TenantApiKeyConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTenantApiKeyConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTenantApiKeyConfigurationsDefaultParams(ref string TenantApiKeyConfiguration);

      partial void OnProjectConfigurationsGetByTenantApiKeyConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantApiKeyConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTenantConfigurationsToExcel(string TenantConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantconfigurations/excel(TenantConfiguration='{TenantConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantconfigurations/excel(TenantConfiguration='{TenantConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTenantConfigurationsToCSV(string TenantConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantconfigurations/csv(TenantConfiguration='{TenantConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantconfigurations/csv(TenantConfiguration='{TenantConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantConfiguration>> GetProjectConfigurationsGetByTenantConfigurations(string TenantConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTenantConfigurationsDefaultParams(ref TenantConfiguration);

          var items = Context.ProjectConfigurationsGetByTenantConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTenantConfiguration] @TenantConfiguration={0}", TenantConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTenantConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTenantConfigurationsDefaultParams(ref string TenantConfiguration);

      partial void OnProjectConfigurationsGetByTenantConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTenantPriceConfigurationsToExcel(string TenantPriceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/excel(TenantPriceConfiguration='{TenantPriceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/excel(TenantPriceConfiguration='{TenantPriceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTenantPriceConfigurationsToCSV(string TenantPriceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/csv(TenantPriceConfiguration='{TenantPriceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/csv(TenantPriceConfiguration='{TenantPriceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantPriceConfiguration>> GetProjectConfigurationsGetByTenantPriceConfigurations(string TenantPriceConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTenantPriceConfigurationsDefaultParams(ref TenantPriceConfiguration);

          var items = Context.ProjectConfigurationsGetByTenantPriceConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTenantPriceConfiguration] @TenantPriceConfiguration={0}", TenantPriceConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTenantPriceConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTenantPriceConfigurationsDefaultParams(ref string TenantPriceConfiguration);

      partial void OnProjectConfigurationsGetByTenantPriceConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantPriceConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTenantWhiteListConfigurationsToExcel(string TenantWhiteListConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/excel(TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/excel(TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTenantWhiteListConfigurationsToCSV(string TenantWhiteListConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/csv(TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/csv(TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantWhiteListConfiguration>> GetProjectConfigurationsGetByTenantWhiteListConfigurations(string TenantWhiteListConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTenantWhiteListConfigurationsDefaultParams(ref TenantWhiteListConfiguration);

          var items = Context.ProjectConfigurationsGetByTenantWhiteListConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTenantWhiteListConfiguration] @TenantWhiteListConfiguration={0}", TenantWhiteListConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTenantWhiteListConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTenantWhiteListConfigurationsDefaultParams(ref string TenantWhiteListConfiguration);

      partial void OnProjectConfigurationsGetByTenantWhiteListConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantWhiteListConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTestConfigurationsToExcel(string TestConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytestconfigurations/excel(TestConfiguration='{TestConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytestconfigurations/excel(TestConfiguration='{TestConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTestConfigurationsToCSV(string TestConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytestconfigurations/csv(TestConfiguration='{TestConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytestconfigurations/csv(TestConfiguration='{TestConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTestConfiguration>> GetProjectConfigurationsGetByTestConfigurations(string TestConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTestConfigurationsDefaultParams(ref TestConfiguration);

          var items = Context.ProjectConfigurationsGetByTestConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTestConfiguration] @TestConfiguration={0}", TestConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTestConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTestConfigurationsDefaultParams(ref string TestConfiguration);

      partial void OnProjectConfigurationsGetByTestConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTestConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByThemeConfigurationsToExcel(string ThemeConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythemeconfigurations/excel(ThemeConfiguration='{ThemeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythemeconfigurations/excel(ThemeConfiguration='{ThemeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByThemeConfigurationsToCSV(string ThemeConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythemeconfigurations/csv(ThemeConfiguration='{ThemeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythemeconfigurations/csv(ThemeConfiguration='{ThemeConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThemeConfiguration>> GetProjectConfigurationsGetByThemeConfigurations(string ThemeConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByThemeConfigurationsDefaultParams(ref ThemeConfiguration);

          var items = Context.ProjectConfigurationsGetByThemeConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByThemeConfiguration] @ThemeConfiguration={0}", ThemeConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByThemeConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByThemeConfigurationsDefaultParams(ref string ThemeConfiguration);

      partial void OnProjectConfigurationsGetByThemeConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThemeConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByThirdPartyConfigurationsToExcel(string ThirdPartyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/excel(ThirdPartyConfiguration='{ThirdPartyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/excel(ThirdPartyConfiguration='{ThirdPartyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByThirdPartyConfigurationsToCSV(string ThirdPartyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/csv(ThirdPartyConfiguration='{ThirdPartyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/csv(ThirdPartyConfiguration='{ThirdPartyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThirdPartyConfiguration>> GetProjectConfigurationsGetByThirdPartyConfigurations(string ThirdPartyConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByThirdPartyConfigurationsDefaultParams(ref ThirdPartyConfiguration);

          var items = Context.ProjectConfigurationsGetByThirdPartyConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByThirdPartyConfiguration] @ThirdPartyConfiguration={0}", ThirdPartyConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByThirdPartyConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByThirdPartyConfigurationsDefaultParams(ref string ThirdPartyConfiguration);

      partial void OnProjectConfigurationsGetByThirdPartyConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThirdPartyConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTokenConfigurationsToExcel(string TokenConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytokenconfigurations/excel(TokenConfiguration='{TokenConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytokenconfigurations/excel(TokenConfiguration='{TokenConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTokenConfigurationsToCSV(string TokenConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytokenconfigurations/csv(TokenConfiguration='{TokenConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytokenconfigurations/csv(TokenConfiguration='{TokenConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTokenConfiguration>> GetProjectConfigurationsGetByTokenConfigurations(string TokenConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTokenConfigurationsDefaultParams(ref TokenConfiguration);

          var items = Context.ProjectConfigurationsGetByTokenConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTokenConfiguration] @TokenConfiguration={0}", TokenConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTokenConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTokenConfigurationsDefaultParams(ref string TokenConfiguration);

      partial void OnProjectConfigurationsGetByTokenConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTokenConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByTsConfigurationsToExcel(string TsConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytsconfigurations/excel(TsConfiguration='{TsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytsconfigurations/excel(TsConfiguration='{TsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByTsConfigurationsToCSV(string TsConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytsconfigurations/csv(TsConfiguration='{TsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytsconfigurations/csv(TsConfiguration='{TsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTsConfiguration>> GetProjectConfigurationsGetByTsConfigurations(string TsConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByTsConfigurationsDefaultParams(ref TsConfiguration);

          var items = Context.ProjectConfigurationsGetByTsConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByTsConfiguration] @TsConfiguration={0}", TsConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByTsConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByTsConfigurationsDefaultParams(ref string TsConfiguration);

      partial void OnProjectConfigurationsGetByTsConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTsConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByWcfConfigurationsToExcel(string WCFConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywcfconfigurations/excel(WCFConfiguration='{WCFConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywcfconfigurations/excel(WCFConfiguration='{WCFConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByWcfConfigurationsToCSV(string WCFConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywcfconfigurations/csv(WCFConfiguration='{WCFConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywcfconfigurations/csv(WCFConfiguration='{WCFConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWcfConfiguration>> GetProjectConfigurationsGetByWcfConfigurations(string WCFConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByWcfConfigurationsDefaultParams(ref WCFConfiguration);

          var items = Context.ProjectConfigurationsGetByWcfConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByWCFConfiguration] @WCFConfiguration={0}", WCFConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByWcfConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByWcfConfigurationsDefaultParams(ref string WCFConfiguration);

      partial void OnProjectConfigurationsGetByWcfConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWcfConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByWindowsServiceConfigurationsToExcel(string WindowsServiceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/excel(WindowsServiceConfiguration='{WindowsServiceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/excel(WindowsServiceConfiguration='{WindowsServiceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByWindowsServiceConfigurationsToCSV(string WindowsServiceConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/csv(WindowsServiceConfiguration='{WindowsServiceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/csv(WindowsServiceConfiguration='{WindowsServiceConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWindowsServiceConfiguration>> GetProjectConfigurationsGetByWindowsServiceConfigurations(string WindowsServiceConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByWindowsServiceConfigurationsDefaultParams(ref WindowsServiceConfiguration);

          var items = Context.ProjectConfigurationsGetByWindowsServiceConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByWindowsServiceConfiguration] @WindowsServiceConfiguration={0}", WindowsServiceConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByWindowsServiceConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByWindowsServiceConfigurationsDefaultParams(ref string WindowsServiceConfiguration);

      partial void OnProjectConfigurationsGetByWindowsServiceConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWindowsServiceConfiguration> items);  

      public async Task ExportProjectConfigurationsGetByXmlConfigurationsToExcel(string XMLConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/excel(XMLConfiguration='{XMLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/excel(XMLConfiguration='{XMLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetByXmlConfigurationsToCSV(string XMLConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/csv(XMLConfiguration='{XMLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/csv(XMLConfiguration='{XMLConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByXmlConfiguration>> GetProjectConfigurationsGetByXmlConfigurations(string XMLConfiguration, Query query = null)
      {
          OnProjectConfigurationsGetByXmlConfigurationsDefaultParams(ref XMLConfiguration);

          var items = Context.ProjectConfigurationsGetByXmlConfigurations.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetByXMLConfiguration] @XMLConfiguration={0}", XMLConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetByXmlConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetByXmlConfigurationsDefaultParams(ref string XMLConfiguration);

      partial void OnProjectConfigurationsGetByXmlConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByXmlConfiguration> items);  

      public async Task ExportProjectConfigurationsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetCreatedDateBetween>> GetProjectConfigurationsGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnProjectConfigurationsGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ProjectConfigurationsGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnProjectConfigurationsGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetCreatedDateBetween> items);  

      public async Task ExportProjectConfigurationsGetLastValidDateBetweensToExcel(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/excel(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/excel(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsGetLastValidDateBetweensToCSV(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/csv(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/csv(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetLastValidDateBetween>> GetProjectConfigurationsGetLastValidDateBetweens(string LastValidDateStart, string LastValidDateEnd, Query query = null)
      {
          OnProjectConfigurationsGetLastValidDateBetweensDefaultParams(ref LastValidDateStart, ref LastValidDateEnd);

          var items = Context.ProjectConfigurationsGetLastValidDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsGetLastValidDateBetween] @LastValidDateStart={0}, @LastValidDateEnd={1}", LastValidDateStart, LastValidDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsGetLastValidDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsGetLastValidDateBetweensDefaultParams(ref string LastValidDateStart, ref string LastValidDateEnd);

      partial void OnProjectConfigurationsGetLastValidDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetLastValidDateBetween> items);  

      public async Task ExportProjectConfigurationsInsertsToExcel(string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsinserts/excel(Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsinserts/excel(Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsInsertsToCSV(string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsinserts/csv(Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsinserts/csv(Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsInsert>> GetProjectConfigurationsInserts(string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null)
      {
          OnProjectConfigurationsInsertsDefaultParams(ref Name, ref ConfigurationJsonScheme, ref NoteHistory, ref Descriptions, ref CanOverRide, ref HasNeedCompileOnChange, ref CreatedById, ref SecurityConfiguration, ref LogConfiguration, ref CacheConfiguration, ref DataBaseConfiguration, ref NameSpaceConfiguration, ref ReactConfiguration, ref AngularConfiguration, ref NodeJsExpressConfiguration, ref NetCoreAPIConfiguration, ref IISConfiguration, ref HostingConfiguration, ref BuildConfiguration, ref BackUpConfiguration, ref DBJobConfiguration, ref DataTypeConfiguration, ref FileManagementConfiguration, ref DapperConfiguration, ref RateLimitConfiguration, ref TenantConfiguration, ref TenantApiKeyConfiguration, ref TenantPriceConfiguration, ref NginxConfiguration, ref LastValidDate, ref CreatedDate, ref PublishPathConfiguration, ref FtpConfiguration, ref BackgroundJobConfiguration, ref WindowsServiceConfiguration, ref ConsoleAppConfiguration, ref WCFConfiguration, ref TokenConfiguration, ref PaymentConfiguration, ref PurchasedToolConfiguration, ref TenantWhiteListConfiguration, ref HelpDocumentConfiguration, ref HeaderConfiguration, ref RoleConfiguration, ref MongoConfiguration, ref MsSqlConfiguration, ref MySqlConfiguration, ref ElasticSearchConfiguration, ref TableConfiguration, ref ColumnConfiguration, ref FunctionConfiguration, ref InputConfiguration, ref CMSConfiguration, ref ThemeConfiguration, ref SSLConfiguration, ref SoftwareVersionConfiguration, ref ExceptionHandlingConfiguration, ref JsonConfiguration, ref XMLConfiguration, ref SoftwareLanguageId, ref CssConfiguration, ref HtmlConfiguration, ref TsConfiguration, ref PackageConfiguration, ref TestConfiguration, ref DeviceConfiguration, ref RedisConfiguration, ref FileOutputExtensionName, ref ExportConfiguration, ref MailConfiguration, ref ThirdPartyConfiguration, ref DiagramConfiguration, ref PrismaConfiguration, ref BootStrapConfiguration, ref LayoutConfiguration, ref ComponentConfiguration, ref FigmaConfigiration);

          var items = Context.ProjectConfigurationsInserts.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsInsert] @Name={0}, @ConfigurationJsonScheme={1}, @NoteHistory={2}, @Descriptions={3}, @CanOverRide={4}, @HasNeedCompileOnChange={5}, @CreatedById={6}, @SecurityConfiguration={7}, @LogConfiguration={8}, @CacheConfiguration={9}, @DataBaseConfiguration={10}, @NameSpaceConfiguration={11}, @ReactConfiguration={12}, @AngularConfiguration={13}, @NodeJsExpressConfiguration={14}, @NetCoreAPIConfiguration={15}, @IISConfiguration={16}, @HostingConfiguration={17}, @BuildConfiguration={18}, @BackUpConfiguration={19}, @DBJobConfiguration={20}, @DataTypeConfiguration={21}, @FileManagementConfiguration={22}, @DapperConfiguration={23}, @RateLimitConfiguration={24}, @TenantConfiguration={25}, @TenantApiKeyConfiguration={26}, @TenantPriceConfiguration={27}, @NginxConfiguration={28}, @LastValidDate={29}, @CreatedDate={30}, @PublishPathConfiguration={31}, @FtpConfiguration={32}, @BackgroundJobConfiguration={33}, @WindowsServiceConfiguration={34}, @ConsoleAppConfiguration={35}, @WCFConfiguration={36}, @TokenConfiguration={37}, @PaymentConfiguration={38}, @PurchasedToolConfiguration={39}, @TenantWhiteListConfiguration={40}, @HelpDocumentConfiguration={41}, @HeaderConfiguration={42}, @RoleConfiguration={43}, @MongoConfiguration={44}, @MsSqlConfiguration={45}, @MySqlConfiguration={46}, @ElasticSearchConfiguration={47}, @TableConfiguration={48}, @ColumnConfiguration={49}, @FunctionConfiguration={50}, @InputConfiguration={51}, @CMSConfiguration={52}, @ThemeConfiguration={53}, @SSLConfiguration={54}, @SoftwareVersionConfiguration={55}, @ExceptionHandlingConfiguration={56}, @JsonConfiguration={57}, @XMLConfiguration={58}, @SoftwareLanguageId={59}, @CssConfiguration={60}, @HtmlConfiguration={61}, @TsConfiguration={62}, @PackageConfiguration={63}, @TestConfiguration={64}, @DeviceConfiguration={65}, @RedisConfiguration={66}, @FileOutputExtensionName={67}, @ExportConfiguration={68}, @MailConfiguration={69}, @ThirdPartyConfiguration={70}, @DiagramConfiguration={71}, @PrismaConfiguration={72}, @BootStrapConfiguration={73}, @LayoutConfiguration={74}, @ComponentConfiguration={75}, @FigmaConfigiration={76}", Name, ConfigurationJsonScheme, NoteHistory, Descriptions, CanOverRide, HasNeedCompileOnChange, CreatedById, SecurityConfiguration, LogConfiguration, CacheConfiguration, DataBaseConfiguration, NameSpaceConfiguration, ReactConfiguration, AngularConfiguration, NodeJsExpressConfiguration, NetCoreAPIConfiguration, IISConfiguration, HostingConfiguration, BuildConfiguration, BackUpConfiguration, DBJobConfiguration, DataTypeConfiguration, FileManagementConfiguration, DapperConfiguration, RateLimitConfiguration, TenantConfiguration, TenantApiKeyConfiguration, TenantPriceConfiguration, NginxConfiguration, LastValidDate, CreatedDate, PublishPathConfiguration, FtpConfiguration, BackgroundJobConfiguration, WindowsServiceConfiguration, ConsoleAppConfiguration, WCFConfiguration, TokenConfiguration, PaymentConfiguration, PurchasedToolConfiguration, TenantWhiteListConfiguration, HelpDocumentConfiguration, HeaderConfiguration, RoleConfiguration, MongoConfiguration, MsSqlConfiguration, MySqlConfiguration, ElasticSearchConfiguration, TableConfiguration, ColumnConfiguration, FunctionConfiguration, InputConfiguration, CMSConfiguration, ThemeConfiguration, SSLConfiguration, SoftwareVersionConfiguration, ExceptionHandlingConfiguration, JsonConfiguration, XMLConfiguration, SoftwareLanguageId, CssConfiguration, HtmlConfiguration, TsConfiguration, PackageConfiguration, TestConfiguration, DeviceConfiguration, RedisConfiguration, FileOutputExtensionName, ExportConfiguration, MailConfiguration, ThirdPartyConfiguration, DiagramConfiguration, PrismaConfiguration, BootStrapConfiguration, LayoutConfiguration, ComponentConfiguration, FigmaConfigiration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsInsertsDefaultParams(ref string Name, ref string ConfigurationJsonScheme, ref string NoteHistory, ref string Descriptions, ref bool? CanOverRide, ref string HasNeedCompileOnChange, ref int? CreatedById, ref string SecurityConfiguration, ref string LogConfiguration, ref string CacheConfiguration, ref string DataBaseConfiguration, ref string NameSpaceConfiguration, ref string ReactConfiguration, ref string AngularConfiguration, ref string NodeJsExpressConfiguration, ref string NetCoreAPIConfiguration, ref string IISConfiguration, ref string HostingConfiguration, ref string BuildConfiguration, ref string BackUpConfiguration, ref string DBJobConfiguration, ref string DataTypeConfiguration, ref string FileManagementConfiguration, ref string DapperConfiguration, ref string RateLimitConfiguration, ref string TenantConfiguration, ref string TenantApiKeyConfiguration, ref string TenantPriceConfiguration, ref string NginxConfiguration, ref string LastValidDate, ref string CreatedDate, ref string PublishPathConfiguration, ref string FtpConfiguration, ref string BackgroundJobConfiguration, ref string WindowsServiceConfiguration, ref string ConsoleAppConfiguration, ref string WCFConfiguration, ref string TokenConfiguration, ref string PaymentConfiguration, ref string PurchasedToolConfiguration, ref string TenantWhiteListConfiguration, ref string HelpDocumentConfiguration, ref string HeaderConfiguration, ref string RoleConfiguration, ref string MongoConfiguration, ref string MsSqlConfiguration, ref string MySqlConfiguration, ref string ElasticSearchConfiguration, ref string TableConfiguration, ref string ColumnConfiguration, ref string FunctionConfiguration, ref string InputConfiguration, ref string CMSConfiguration, ref string ThemeConfiguration, ref string SSLConfiguration, ref string SoftwareVersionConfiguration, ref string ExceptionHandlingConfiguration, ref string JsonConfiguration, ref string XMLConfiguration, ref int? SoftwareLanguageId, ref string CssConfiguration, ref string HtmlConfiguration, ref string TsConfiguration, ref string PackageConfiguration, ref string TestConfiguration, ref string DeviceConfiguration, ref string RedisConfiguration, ref string FileOutputExtensionName, ref string ExportConfiguration, ref string MailConfiguration, ref string ThirdPartyConfiguration, ref string DiagramConfiguration, ref string PrismaConfiguration, ref string BootStrapConfiguration, ref string LayoutConfiguration, ref string ComponentConfiguration, ref string FigmaConfigiration);

      partial void OnProjectConfigurationsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsInsert> items);  

      public async Task ExportProjectConfigurationsUpdatesToExcel(int? Id, string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsupdates/excel(Id={Id}, Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsupdates/excel(Id={Id}, Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectConfigurationsUpdatesToCSV(int? Id, string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsupdates/csv(Id={Id}, Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsupdates/csv(Id={Id}, Name='{Name}', ConfigurationJsonScheme='{ConfigurationJsonScheme}', NoteHistory='{NoteHistory}', Descriptions='{Descriptions}', CanOverRide={CanOverRide}, HasNeedCompileOnChange='{HasNeedCompileOnChange}', CreatedById={CreatedById}, SecurityConfiguration='{SecurityConfiguration}', LogConfiguration='{LogConfiguration}', CacheConfiguration='{CacheConfiguration}', DataBaseConfiguration='{DataBaseConfiguration}', NameSpaceConfiguration='{NameSpaceConfiguration}', ReactConfiguration='{ReactConfiguration}', AngularConfiguration='{AngularConfiguration}', NodeJsExpressConfiguration='{NodeJsExpressConfiguration}', NetCoreAPIConfiguration='{NetCoreAPIConfiguration}', IISConfiguration='{IISConfiguration}', HostingConfiguration='{HostingConfiguration}', BuildConfiguration='{BuildConfiguration}', BackUpConfiguration='{BackUpConfiguration}', DBJobConfiguration='{DBJobConfiguration}', DataTypeConfiguration='{DataTypeConfiguration}', FileManagementConfiguration='{FileManagementConfiguration}', DapperConfiguration='{DapperConfiguration}', RateLimitConfiguration='{RateLimitConfiguration}', TenantConfiguration='{TenantConfiguration}', TenantApiKeyConfiguration='{TenantApiKeyConfiguration}', TenantPriceConfiguration='{TenantPriceConfiguration}', NginxConfiguration='{NginxConfiguration}', LastValidDate='{LastValidDate}', CreatedDate='{CreatedDate}', PublishPathConfiguration='{PublishPathConfiguration}', FtpConfiguration='{FtpConfiguration}', BackgroundJobConfiguration='{BackgroundJobConfiguration}', WindowsServiceConfiguration='{WindowsServiceConfiguration}', ConsoleAppConfiguration='{ConsoleAppConfiguration}', WCFConfiguration='{WCFConfiguration}', TokenConfiguration='{TokenConfiguration}', PaymentConfiguration='{PaymentConfiguration}', PurchasedToolConfiguration='{PurchasedToolConfiguration}', TenantWhiteListConfiguration='{TenantWhiteListConfiguration}', HelpDocumentConfiguration='{HelpDocumentConfiguration}', HeaderConfiguration='{HeaderConfiguration}', RoleConfiguration='{RoleConfiguration}', MongoConfiguration='{MongoConfiguration}', MsSqlConfiguration='{MsSqlConfiguration}', MySqlConfiguration='{MySqlConfiguration}', ElasticSearchConfiguration='{ElasticSearchConfiguration}', TableConfiguration='{TableConfiguration}', ColumnConfiguration='{ColumnConfiguration}', FunctionConfiguration='{FunctionConfiguration}', InputConfiguration='{InputConfiguration}', CMSConfiguration='{CMSConfiguration}', ThemeConfiguration='{ThemeConfiguration}', SSLConfiguration='{SSLConfiguration}', SoftwareVersionConfiguration='{SoftwareVersionConfiguration}', ExceptionHandlingConfiguration='{ExceptionHandlingConfiguration}', JsonConfiguration='{JsonConfiguration}', XMLConfiguration='{XMLConfiguration}', SoftwareLanguageId={SoftwareLanguageId}, CssConfiguration='{CssConfiguration}', HtmlConfiguration='{HtmlConfiguration}', TsConfiguration='{TsConfiguration}', PackageConfiguration='{PackageConfiguration}', TestConfiguration='{TestConfiguration}', DeviceConfiguration='{DeviceConfiguration}', RedisConfiguration='{RedisConfiguration}', FileOutputExtensionName='{FileOutputExtensionName}', ExportConfiguration='{ExportConfiguration}', MailConfiguration='{MailConfiguration}', ThirdPartyConfiguration='{ThirdPartyConfiguration}', DiagramConfiguration='{DiagramConfiguration}', PrismaConfiguration='{PrismaConfiguration}', BootStrapConfiguration='{BootStrapConfiguration}', LayoutConfiguration='{LayoutConfiguration}', ComponentConfiguration='{ComponentConfiguration}', FigmaConfigiration='{FigmaConfigiration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsUpdate>> GetProjectConfigurationsUpdates(int? Id, string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null)
      {
          OnProjectConfigurationsUpdatesDefaultParams(ref Id, ref Name, ref ConfigurationJsonScheme, ref NoteHistory, ref Descriptions, ref CanOverRide, ref HasNeedCompileOnChange, ref CreatedById, ref SecurityConfiguration, ref LogConfiguration, ref CacheConfiguration, ref DataBaseConfiguration, ref NameSpaceConfiguration, ref ReactConfiguration, ref AngularConfiguration, ref NodeJsExpressConfiguration, ref NetCoreAPIConfiguration, ref IISConfiguration, ref HostingConfiguration, ref BuildConfiguration, ref BackUpConfiguration, ref DBJobConfiguration, ref DataTypeConfiguration, ref FileManagementConfiguration, ref DapperConfiguration, ref RateLimitConfiguration, ref TenantConfiguration, ref TenantApiKeyConfiguration, ref TenantPriceConfiguration, ref NginxConfiguration, ref LastValidDate, ref CreatedDate, ref PublishPathConfiguration, ref FtpConfiguration, ref BackgroundJobConfiguration, ref WindowsServiceConfiguration, ref ConsoleAppConfiguration, ref WCFConfiguration, ref TokenConfiguration, ref PaymentConfiguration, ref PurchasedToolConfiguration, ref TenantWhiteListConfiguration, ref HelpDocumentConfiguration, ref HeaderConfiguration, ref RoleConfiguration, ref MongoConfiguration, ref MsSqlConfiguration, ref MySqlConfiguration, ref ElasticSearchConfiguration, ref TableConfiguration, ref ColumnConfiguration, ref FunctionConfiguration, ref InputConfiguration, ref CMSConfiguration, ref ThemeConfiguration, ref SSLConfiguration, ref SoftwareVersionConfiguration, ref ExceptionHandlingConfiguration, ref JsonConfiguration, ref XMLConfiguration, ref SoftwareLanguageId, ref CssConfiguration, ref HtmlConfiguration, ref TsConfiguration, ref PackageConfiguration, ref TestConfiguration, ref DeviceConfiguration, ref RedisConfiguration, ref FileOutputExtensionName, ref ExportConfiguration, ref MailConfiguration, ref ThirdPartyConfiguration, ref DiagramConfiguration, ref PrismaConfiguration, ref BootStrapConfiguration, ref LayoutConfiguration, ref ComponentConfiguration, ref FigmaConfigiration);

          var items = Context.ProjectConfigurationsUpdates.FromSqlRaw("EXEC [dbo].[ProjectConfigurationsUpdate] @Id={0}, @Name={1}, @ConfigurationJsonScheme={2}, @NoteHistory={3}, @Descriptions={4}, @CanOverRide={5}, @HasNeedCompileOnChange={6}, @CreatedById={7}, @SecurityConfiguration={8}, @LogConfiguration={9}, @CacheConfiguration={10}, @DataBaseConfiguration={11}, @NameSpaceConfiguration={12}, @ReactConfiguration={13}, @AngularConfiguration={14}, @NodeJsExpressConfiguration={15}, @NetCoreAPIConfiguration={16}, @IISConfiguration={17}, @HostingConfiguration={18}, @BuildConfiguration={19}, @BackUpConfiguration={20}, @DBJobConfiguration={21}, @DataTypeConfiguration={22}, @FileManagementConfiguration={23}, @DapperConfiguration={24}, @RateLimitConfiguration={25}, @TenantConfiguration={26}, @TenantApiKeyConfiguration={27}, @TenantPriceConfiguration={28}, @NginxConfiguration={29}, @LastValidDate={30}, @CreatedDate={31}, @PublishPathConfiguration={32}, @FtpConfiguration={33}, @BackgroundJobConfiguration={34}, @WindowsServiceConfiguration={35}, @ConsoleAppConfiguration={36}, @WCFConfiguration={37}, @TokenConfiguration={38}, @PaymentConfiguration={39}, @PurchasedToolConfiguration={40}, @TenantWhiteListConfiguration={41}, @HelpDocumentConfiguration={42}, @HeaderConfiguration={43}, @RoleConfiguration={44}, @MongoConfiguration={45}, @MsSqlConfiguration={46}, @MySqlConfiguration={47}, @ElasticSearchConfiguration={48}, @TableConfiguration={49}, @ColumnConfiguration={50}, @FunctionConfiguration={51}, @InputConfiguration={52}, @CMSConfiguration={53}, @ThemeConfiguration={54}, @SSLConfiguration={55}, @SoftwareVersionConfiguration={56}, @ExceptionHandlingConfiguration={57}, @JsonConfiguration={58}, @XMLConfiguration={59}, @SoftwareLanguageId={60}, @CssConfiguration={61}, @HtmlConfiguration={62}, @TsConfiguration={63}, @PackageConfiguration={64}, @TestConfiguration={65}, @DeviceConfiguration={66}, @RedisConfiguration={67}, @FileOutputExtensionName={68}, @ExportConfiguration={69}, @MailConfiguration={70}, @ThirdPartyConfiguration={71}, @DiagramConfiguration={72}, @PrismaConfiguration={73}, @BootStrapConfiguration={74}, @LayoutConfiguration={75}, @ComponentConfiguration={76}, @FigmaConfigiration={77}", Id, Name, ConfigurationJsonScheme, NoteHistory, Descriptions, CanOverRide, HasNeedCompileOnChange, CreatedById, SecurityConfiguration, LogConfiguration, CacheConfiguration, DataBaseConfiguration, NameSpaceConfiguration, ReactConfiguration, AngularConfiguration, NodeJsExpressConfiguration, NetCoreAPIConfiguration, IISConfiguration, HostingConfiguration, BuildConfiguration, BackUpConfiguration, DBJobConfiguration, DataTypeConfiguration, FileManagementConfiguration, DapperConfiguration, RateLimitConfiguration, TenantConfiguration, TenantApiKeyConfiguration, TenantPriceConfiguration, NginxConfiguration, LastValidDate, CreatedDate, PublishPathConfiguration, FtpConfiguration, BackgroundJobConfiguration, WindowsServiceConfiguration, ConsoleAppConfiguration, WCFConfiguration, TokenConfiguration, PaymentConfiguration, PurchasedToolConfiguration, TenantWhiteListConfiguration, HelpDocumentConfiguration, HeaderConfiguration, RoleConfiguration, MongoConfiguration, MsSqlConfiguration, MySqlConfiguration, ElasticSearchConfiguration, TableConfiguration, ColumnConfiguration, FunctionConfiguration, InputConfiguration, CMSConfiguration, ThemeConfiguration, SSLConfiguration, SoftwareVersionConfiguration, ExceptionHandlingConfiguration, JsonConfiguration, XMLConfiguration, SoftwareLanguageId, CssConfiguration, HtmlConfiguration, TsConfiguration, PackageConfiguration, TestConfiguration, DeviceConfiguration, RedisConfiguration, FileOutputExtensionName, ExportConfiguration, MailConfiguration, ThirdPartyConfiguration, DiagramConfiguration, PrismaConfiguration, BootStrapConfiguration, LayoutConfiguration, ComponentConfiguration, FigmaConfigiration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectConfigurationsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectConfigurationsUpdatesDefaultParams(ref int? Id, ref string Name, ref string ConfigurationJsonScheme, ref string NoteHistory, ref string Descriptions, ref bool? CanOverRide, ref string HasNeedCompileOnChange, ref int? CreatedById, ref string SecurityConfiguration, ref string LogConfiguration, ref string CacheConfiguration, ref string DataBaseConfiguration, ref string NameSpaceConfiguration, ref string ReactConfiguration, ref string AngularConfiguration, ref string NodeJsExpressConfiguration, ref string NetCoreAPIConfiguration, ref string IISConfiguration, ref string HostingConfiguration, ref string BuildConfiguration, ref string BackUpConfiguration, ref string DBJobConfiguration, ref string DataTypeConfiguration, ref string FileManagementConfiguration, ref string DapperConfiguration, ref string RateLimitConfiguration, ref string TenantConfiguration, ref string TenantApiKeyConfiguration, ref string TenantPriceConfiguration, ref string NginxConfiguration, ref string LastValidDate, ref string CreatedDate, ref string PublishPathConfiguration, ref string FtpConfiguration, ref string BackgroundJobConfiguration, ref string WindowsServiceConfiguration, ref string ConsoleAppConfiguration, ref string WCFConfiguration, ref string TokenConfiguration, ref string PaymentConfiguration, ref string PurchasedToolConfiguration, ref string TenantWhiteListConfiguration, ref string HelpDocumentConfiguration, ref string HeaderConfiguration, ref string RoleConfiguration, ref string MongoConfiguration, ref string MsSqlConfiguration, ref string MySqlConfiguration, ref string ElasticSearchConfiguration, ref string TableConfiguration, ref string ColumnConfiguration, ref string FunctionConfiguration, ref string InputConfiguration, ref string CMSConfiguration, ref string ThemeConfiguration, ref string SSLConfiguration, ref string SoftwareVersionConfiguration, ref string ExceptionHandlingConfiguration, ref string JsonConfiguration, ref string XMLConfiguration, ref int? SoftwareLanguageId, ref string CssConfiguration, ref string HtmlConfiguration, ref string TsConfiguration, ref string PackageConfiguration, ref string TestConfiguration, ref string DeviceConfiguration, ref string RedisConfiguration, ref string FileOutputExtensionName, ref string ExportConfiguration, ref string MailConfiguration, ref string ThirdPartyConfiguration, ref string DiagramConfiguration, ref string PrismaConfiguration, ref string BootStrapConfiguration, ref string LayoutConfiguration, ref string ComponentConfiguration, ref string FigmaConfigiration);

      partial void OnProjectConfigurationsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsUpdate> items);  

      public async Task ExportProjectFunctionGroupsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetAll>> GetProjectFunctionGroupsGetAlls(Query query = null)
      {
          OnProjectFunctionGroupsGetAllsDefaultParams();

          var items = Context.ProjectFunctionGroupsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetAllsDefaultParams();

      partial void OnProjectFunctionGroupsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetAll> items);  

      public async Task ExportProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesToExcel(int? CallAfterFunctionsSuccessfullResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/excel(CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/excel(CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesToCSV(int? CallAfterFunctionsSuccessfullResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/csv(CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/csv(CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponse>> GetProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponses(int? CallAfterFunctionsSuccessfullResponse, Query query = null)
      {
          OnProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesDefaultParams(ref CallAfterFunctionsSuccessfullResponse);

          var items = Context.ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponses.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponse] @CallAfterFunctionsSuccessfullResponse={0}", CallAfterFunctionsSuccessfullResponse).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesDefaultParams(ref int? CallAfterFunctionsSuccessfullResponse);

      partial void OnProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponse> items);  

      public async Task ExportProjectFunctionGroupsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCommission>> GetProjectFunctionGroupsGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectFunctionGroupsGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectFunctionGroupsGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectFunctionGroupsGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCommission> items);  

      public async Task ExportProjectFunctionGroupsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCurrencyId>> GetProjectFunctionGroupsGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectFunctionGroupsGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectFunctionGroupsGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectFunctionGroupsGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCurrencyId> items);  

      public async Task ExportProjectFunctionGroupsGetByFunctionGroupNamesToExcel(string FunctionGroupName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/excel(FunctionGroupName='{FunctionGroupName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/excel(FunctionGroupName='{FunctionGroupName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByFunctionGroupNamesToCSV(string FunctionGroupName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/csv(FunctionGroupName='{FunctionGroupName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/csv(FunctionGroupName='{FunctionGroupName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByFunctionGroupName>> GetProjectFunctionGroupsGetByFunctionGroupNames(string FunctionGroupName, Query query = null)
      {
          OnProjectFunctionGroupsGetByFunctionGroupNamesDefaultParams(ref FunctionGroupName);

          var items = Context.ProjectFunctionGroupsGetByFunctionGroupNames.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByFunctionGroupName] @FunctionGroupName={0}", FunctionGroupName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByFunctionGroupNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByFunctionGroupNamesDefaultParams(ref string FunctionGroupName);

      partial void OnProjectFunctionGroupsGetByFunctionGroupNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByFunctionGroupName> items);  

      public async Task ExportProjectFunctionGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetById>> GetProjectFunctionGroupsGetByIds(int? Id, Query query = null)
      {
          OnProjectFunctionGroupsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectFunctionGroupsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectFunctionGroupsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetById> items);  

      public async Task ExportProjectFunctionGroupsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByPrice>> GetProjectFunctionGroupsGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectFunctionGroupsGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectFunctionGroupsGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectFunctionGroupsGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByPrice> items);  

      public async Task ExportProjectFunctionGroupsGetBySoftWareLanguageIdsToExcel(int? SoftWareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/excel(SoftWareLanguageId={SoftWareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/excel(SoftWareLanguageId={SoftWareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsGetBySoftWareLanguageIdsToCSV(int? SoftWareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/csv(SoftWareLanguageId={SoftWareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/csv(SoftWareLanguageId={SoftWareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetBySoftWareLanguageId>> GetProjectFunctionGroupsGetBySoftWareLanguageIds(int? SoftWareLanguageId, Query query = null)
      {
          OnProjectFunctionGroupsGetBySoftWareLanguageIdsDefaultParams(ref SoftWareLanguageId);

          var items = Context.ProjectFunctionGroupsGetBySoftWareLanguageIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsGetBySoftWareLanguageId] @SoftWareLanguageId={0}", SoftWareLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsGetBySoftWareLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsGetBySoftWareLanguageIdsDefaultParams(ref int? SoftWareLanguageId);

      partial void OnProjectFunctionGroupsGetBySoftWareLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetBySoftWareLanguageId> items);  

      public async Task ExportProjectFunctionGroupsInsertsToExcel(string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsinserts/excel(FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsinserts/excel(FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsInsertsToCSV(string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsinserts/csv(FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsinserts/csv(FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsInsert>> GetProjectFunctionGroupsInserts(string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null)
      {
          OnProjectFunctionGroupsInsertsDefaultParams(ref FunctionGroupName, ref CallAfterFunctionsSuccessfullResponse, ref SoftWareLanguageId, ref CurrencyId, ref Price, ref Commission);

          var items = Context.ProjectFunctionGroupsInserts.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsInsert] @FunctionGroupName={0}, @CallAfterFunctionsSuccessfullResponse={1}, @SoftWareLanguageId={2}, @CurrencyId={3}, @Price={4}, @Commission={5}", FunctionGroupName, CallAfterFunctionsSuccessfullResponse, SoftWareLanguageId, CurrencyId, Price, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsInsertsDefaultParams(ref string FunctionGroupName, ref int? CallAfterFunctionsSuccessfullResponse, ref int? SoftWareLanguageId, ref int? CurrencyId, ref decimal? Price, ref decimal? Commission);

      partial void OnProjectFunctionGroupsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsInsert> items);  

      public async Task ExportProjectFunctionGroupsUpdatesToExcel(int? Id, string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsupdates/excel(Id={Id}, FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsupdates/excel(Id={Id}, FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionGroupsUpdatesToCSV(int? Id, string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsupdates/csv(Id={Id}, FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsupdates/csv(Id={Id}, FunctionGroupName='{FunctionGroupName}', CallAfterFunctionsSuccessfullResponse={CallAfterFunctionsSuccessfullResponse}, SoftWareLanguageId={SoftWareLanguageId}, CurrencyId={CurrencyId}, Price={Price}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsUpdate>> GetProjectFunctionGroupsUpdates(int? Id, string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null)
      {
          OnProjectFunctionGroupsUpdatesDefaultParams(ref Id, ref FunctionGroupName, ref CallAfterFunctionsSuccessfullResponse, ref SoftWareLanguageId, ref CurrencyId, ref Price, ref Commission);

          var items = Context.ProjectFunctionGroupsUpdates.FromSqlRaw("EXEC [dbo].[ProjectFunctionGroupsUpdate] @Id={0}, @FunctionGroupName={1}, @CallAfterFunctionsSuccessfullResponse={2}, @SoftWareLanguageId={3}, @CurrencyId={4}, @Price={5}, @Commission={6}", Id, FunctionGroupName, CallAfterFunctionsSuccessfullResponse, SoftWareLanguageId, CurrencyId, Price, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionGroupsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionGroupsUpdatesDefaultParams(ref int? Id, ref string FunctionGroupName, ref int? CallAfterFunctionsSuccessfullResponse, ref int? SoftWareLanguageId, ref int? CurrencyId, ref decimal? Price, ref decimal? Commission);

      partial void OnProjectFunctionGroupsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsUpdate> items);  

      public async Task ExportProjectFunctionsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetAll>> GetProjectFunctionsGetAlls(Query query = null)
      {
          OnProjectFunctionsGetAllsDefaultParams();

          var items = Context.ProjectFunctionsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetAllsDefaultParams();

      partial void OnProjectFunctionsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetAll> items);  

      public async Task ExportProjectFunctionsGetByAcceptableQuerystringsToExcel(string AcceptableQuerystrings, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/excel(AcceptableQuerystrings='{AcceptableQuerystrings}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/excel(AcceptableQuerystrings='{AcceptableQuerystrings}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByAcceptableQuerystringsToCSV(string AcceptableQuerystrings, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/csv(AcceptableQuerystrings='{AcceptableQuerystrings}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/csv(AcceptableQuerystrings='{AcceptableQuerystrings}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAcceptableQuerystring>> GetProjectFunctionsGetByAcceptableQuerystrings(string AcceptableQuerystrings, Query query = null)
      {
          OnProjectFunctionsGetByAcceptableQuerystringsDefaultParams(ref AcceptableQuerystrings);

          var items = Context.ProjectFunctionsGetByAcceptableQuerystrings.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByAcceptableQuerystrings] @AcceptableQuerystrings={0}", AcceptableQuerystrings).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByAcceptableQuerystringsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByAcceptableQuerystringsDefaultParams(ref string AcceptableQuerystrings);

      partial void OnProjectFunctionsGetByAcceptableQuerystringsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAcceptableQuerystring> items);  

      public async Task ExportProjectFunctionsGetByAccessModifierIdsToExcel(int? AccessModifierId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyaccessmodifierids/excel(AccessModifierId={AccessModifierId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyaccessmodifierids/excel(AccessModifierId={AccessModifierId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByAccessModifierIdsToCSV(int? AccessModifierId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyaccessmodifierids/csv(AccessModifierId={AccessModifierId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyaccessmodifierids/csv(AccessModifierId={AccessModifierId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAccessModifierId>> GetProjectFunctionsGetByAccessModifierIds(int? AccessModifierId, Query query = null)
      {
          OnProjectFunctionsGetByAccessModifierIdsDefaultParams(ref AccessModifierId);

          var items = Context.ProjectFunctionsGetByAccessModifierIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByAccessModifierId] @AccessModifierId={0}", AccessModifierId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByAccessModifierIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByAccessModifierIdsDefaultParams(ref int? AccessModifierId);

      partial void OnProjectFunctionsGetByAccessModifierIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAccessModifierId> items);  

      public async Task ExportProjectFunctionsGetByApiMethodCommentsToExcel(string ApiMethodComment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyapimethodcomments/excel(ApiMethodComment='{ApiMethodComment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyapimethodcomments/excel(ApiMethodComment='{ApiMethodComment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByApiMethodCommentsToCSV(string ApiMethodComment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyapimethodcomments/csv(ApiMethodComment='{ApiMethodComment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyapimethodcomments/csv(ApiMethodComment='{ApiMethodComment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByApiMethodComment>> GetProjectFunctionsGetByApiMethodComments(string ApiMethodComment, Query query = null)
      {
          OnProjectFunctionsGetByApiMethodCommentsDefaultParams(ref ApiMethodComment);

          var items = Context.ProjectFunctionsGetByApiMethodComments.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByApiMethodComment] @ApiMethodComment={0}", ApiMethodComment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByApiMethodCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByApiMethodCommentsDefaultParams(ref string ApiMethodComment);

      partial void OnProjectFunctionsGetByApiMethodCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByApiMethodComment> items);  

      public async Task ExportProjectFunctionsGetByCacheDbConnectionsToExcel(int? CacheDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachedbconnections/excel(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachedbconnections/excel(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCacheDbConnectionsToCSV(int? CacheDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachedbconnections/csv(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachedbconnections/csv(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheDbConnection>> GetProjectFunctionsGetByCacheDbConnections(int? CacheDBConnection, Query query = null)
      {
          OnProjectFunctionsGetByCacheDbConnectionsDefaultParams(ref CacheDBConnection);

          var items = Context.ProjectFunctionsGetByCacheDbConnections.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCacheDBConnection] @CacheDBConnection={0}", CacheDBConnection).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCacheDbConnectionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCacheDbConnectionsDefaultParams(ref int? CacheDBConnection);

      partial void OnProjectFunctionsGetByCacheDbConnectionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheDbConnection> items);  

      public async Task ExportProjectFunctionsGetByCacheTypesToExcel(int? CacheType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachetypes/excel(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachetypes/excel(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCacheTypesToCSV(int? CacheType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachetypes/csv(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachetypes/csv(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheType>> GetProjectFunctionsGetByCacheTypes(int? CacheType, Query query = null)
      {
          OnProjectFunctionsGetByCacheTypesDefaultParams(ref CacheType);

          var items = Context.ProjectFunctionsGetByCacheTypes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCacheType] @CacheType={0}", CacheType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCacheTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCacheTypesDefaultParams(ref int? CacheType);

      partial void OnProjectFunctionsGetByCacheTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheType> items);  

      public async Task ExportProjectFunctionsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCommission>> GetProjectFunctionsGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectFunctionsGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectFunctionsGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectFunctionsGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCommission> items);  

      public async Task ExportProjectFunctionsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCreatedDate>> GetProjectFunctionsGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnProjectFunctionsGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ProjectFunctionsGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnProjectFunctionsGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCreatedDate> items);  

      public async Task ExportProjectFunctionsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCrudType>> GetProjectFunctionsGetByCrudTypes(int? CrudType, Query query = null)
      {
          OnProjectFunctionsGetByCrudTypesDefaultParams(ref CrudType);

          var items = Context.ProjectFunctionsGetByCrudTypes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCrudType] @CrudType={0}", CrudType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCrudTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCrudTypesDefaultParams(ref int? CrudType);

      partial void OnProjectFunctionsGetByCrudTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCrudType> items);  

      public async Task ExportProjectFunctionsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCurrencyId>> GetProjectFunctionsGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectFunctionsGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectFunctionsGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectFunctionsGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCurrencyId> items);  

      public async Task ExportProjectFunctionsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCustomCode>> GetProjectFunctionsGetByCustomCodes(string CustomCode, Query query = null)
      {
          OnProjectFunctionsGetByCustomCodesDefaultParams(ref CustomCode);

          var items = Context.ProjectFunctionsGetByCustomCodes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByCustomCode] @CustomCode={0}", CustomCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByCustomCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByCustomCodesDefaultParams(ref string CustomCode);

      partial void OnProjectFunctionsGetByCustomCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCustomCode> items);  

      public async Task ExportProjectFunctionsGetByDatabaseTypesIdsToExcel(int? DatabaseTypesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydatabasetypesids/excel(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydatabasetypesids/excel(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByDatabaseTypesIdsToCSV(int? DatabaseTypesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydatabasetypesids/csv(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydatabasetypesids/csv(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDatabaseTypesId>> GetProjectFunctionsGetByDatabaseTypesIds(int? DatabaseTypesId, Query query = null)
      {
          OnProjectFunctionsGetByDatabaseTypesIdsDefaultParams(ref DatabaseTypesId);

          var items = Context.ProjectFunctionsGetByDatabaseTypesIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByDatabaseTypesId] @DatabaseTypesId={0}", DatabaseTypesId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByDatabaseTypesIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByDatabaseTypesIdsDefaultParams(ref int? DatabaseTypesId);

      partial void OnProjectFunctionsGetByDatabaseTypesIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDatabaseTypesId> items);  

      public async Task ExportProjectFunctionsGetByDocumentUrlsToExcel(string DocumentUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydocumenturls/excel(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydocumenturls/excel(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByDocumentUrlsToCSV(string DocumentUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydocumenturls/csv(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydocumenturls/csv(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDocumentUrl>> GetProjectFunctionsGetByDocumentUrls(string DocumentUrl, Query query = null)
      {
          OnProjectFunctionsGetByDocumentUrlsDefaultParams(ref DocumentUrl);

          var items = Context.ProjectFunctionsGetByDocumentUrls.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByDocumentUrl] @DocumentUrl={0}", DocumentUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByDocumentUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByDocumentUrlsDefaultParams(ref string DocumentUrl);

      partial void OnProjectFunctionsGetByDocumentUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDocumentUrl> items);  

      public async Task ExportProjectFunctionsGetByEventTypesToExcel(int? EventType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyeventtypes/excel(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyeventtypes/excel(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByEventTypesToCSV(int? EventType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyeventtypes/csv(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyeventtypes/csv(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByEventType>> GetProjectFunctionsGetByEventTypes(int? EventType, Query query = null)
      {
          OnProjectFunctionsGetByEventTypesDefaultParams(ref EventType);

          var items = Context.ProjectFunctionsGetByEventTypes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByEventType] @EventType={0}", EventType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByEventTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByEventTypesDefaultParams(ref int? EventType);

      partial void OnProjectFunctionsGetByEventTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByEventType> items);  

      public async Task ExportProjectFunctionsGetByExampleRequestsToExcel(string ExampleRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexamplerequests/excel(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexamplerequests/excel(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByExampleRequestsToCSV(string ExampleRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexamplerequests/csv(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexamplerequests/csv(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleRequest>> GetProjectFunctionsGetByExampleRequests(string ExampleRequest, Query query = null)
      {
          OnProjectFunctionsGetByExampleRequestsDefaultParams(ref ExampleRequest);

          var items = Context.ProjectFunctionsGetByExampleRequests.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByExampleRequest] @ExampleRequest={0}", ExampleRequest).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByExampleRequestsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByExampleRequestsDefaultParams(ref string ExampleRequest);

      partial void OnProjectFunctionsGetByExampleRequestsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleRequest> items);  

      public async Task ExportProjectFunctionsGetByExampleResponsesToExcel(string ExampleResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexampleresponses/excel(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexampleresponses/excel(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByExampleResponsesToCSV(string ExampleResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexampleresponses/csv(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexampleresponses/csv(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleResponse>> GetProjectFunctionsGetByExampleResponses(string ExampleResponse, Query query = null)
      {
          OnProjectFunctionsGetByExampleResponsesDefaultParams(ref ExampleResponse);

          var items = Context.ProjectFunctionsGetByExampleResponses.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByExampleResponse] @ExampleResponse={0}", ExampleResponse).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByExampleResponsesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByExampleResponsesDefaultParams(ref string ExampleResponse);

      partial void OnProjectFunctionsGetByExampleResponsesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleResponse> items);  

      public async Task ExportProjectFunctionsGetByFunctionCallRankInGroupsToExcel(int? FunctionCallRankInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/excel(FunctionCallRankInGroup={FunctionCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/excel(FunctionCallRankInGroup={FunctionCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByFunctionCallRankInGroupsToCSV(int? FunctionCallRankInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/csv(FunctionCallRankInGroup={FunctionCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/csv(FunctionCallRankInGroup={FunctionCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionCallRankInGroup>> GetProjectFunctionsGetByFunctionCallRankInGroups(int? FunctionCallRankInGroup, Query query = null)
      {
          OnProjectFunctionsGetByFunctionCallRankInGroupsDefaultParams(ref FunctionCallRankInGroup);

          var items = Context.ProjectFunctionsGetByFunctionCallRankInGroups.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByFunctionCallRankInGroup] @FunctionCallRankInGroup={0}", FunctionCallRankInGroup).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByFunctionCallRankInGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByFunctionCallRankInGroupsDefaultParams(ref int? FunctionCallRankInGroup);

      partial void OnProjectFunctionsGetByFunctionCallRankInGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionCallRankInGroup> items);  

      public async Task ExportProjectFunctionsGetByFunctionGroupIdsToExcel(int? FunctionGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctiongroupids/excel(FunctionGroupId={FunctionGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctiongroupids/excel(FunctionGroupId={FunctionGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByFunctionGroupIdsToCSV(int? FunctionGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctiongroupids/csv(FunctionGroupId={FunctionGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctiongroupids/csv(FunctionGroupId={FunctionGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionGroupId>> GetProjectFunctionsGetByFunctionGroupIds(int? FunctionGroupId, Query query = null)
      {
          OnProjectFunctionsGetByFunctionGroupIdsDefaultParams(ref FunctionGroupId);

          var items = Context.ProjectFunctionsGetByFunctionGroupIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByFunctionGroupId] @FunctionGroupId={0}", FunctionGroupId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByFunctionGroupIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByFunctionGroupIdsDefaultParams(ref int? FunctionGroupId);

      partial void OnProjectFunctionsGetByFunctionGroupIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionGroupId> items);  

      public async Task ExportProjectFunctionsGetByFunctionIsParentInGroupsToExcel(bool? FunctionIsParentInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/excel(FunctionIsParentInGroup={FunctionIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/excel(FunctionIsParentInGroup={FunctionIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByFunctionIsParentInGroupsToCSV(bool? FunctionIsParentInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/csv(FunctionIsParentInGroup={FunctionIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/csv(FunctionIsParentInGroup={FunctionIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionIsParentInGroup>> GetProjectFunctionsGetByFunctionIsParentInGroups(bool? FunctionIsParentInGroup, Query query = null)
      {
          OnProjectFunctionsGetByFunctionIsParentInGroupsDefaultParams(ref FunctionIsParentInGroup);

          var items = Context.ProjectFunctionsGetByFunctionIsParentInGroups.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByFunctionIsParentInGroup] @FunctionIsParentInGroup={0}", FunctionIsParentInGroup).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByFunctionIsParentInGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByFunctionIsParentInGroupsDefaultParams(ref bool? FunctionIsParentInGroup);

      partial void OnProjectFunctionsGetByFunctionIsParentInGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionIsParentInGroup> items);  

      public async Task ExportProjectFunctionsGetByHasAsyncsToExcel(bool? HasAsync, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasasyncs/excel(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasasyncs/excel(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHasAsyncsToCSV(bool? HasAsync, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasasyncs/csv(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasasyncs/csv(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAsync>> GetProjectFunctionsGetByHasAsyncs(bool? HasAsync, Query query = null)
      {
          OnProjectFunctionsGetByHasAsyncsDefaultParams(ref HasAsync);

          var items = Context.ProjectFunctionsGetByHasAsyncs.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHasAsync] @HasAsync={0}", HasAsync).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHasAsyncsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHasAsyncsDefaultParams(ref bool? HasAsync);

      partial void OnProjectFunctionsGetByHasAsyncsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAsync> items);  

      public async Task ExportProjectFunctionsGetByHasAuditEventsToExcel(bool? HasAuditEvents, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasauditevents/excel(HasAuditEvents={HasAuditEvents}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasauditevents/excel(HasAuditEvents={HasAuditEvents}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHasAuditEventsToCSV(bool? HasAuditEvents, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasauditevents/csv(HasAuditEvents={HasAuditEvents}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasauditevents/csv(HasAuditEvents={HasAuditEvents}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAuditEvent>> GetProjectFunctionsGetByHasAuditEvents(bool? HasAuditEvents, Query query = null)
      {
          OnProjectFunctionsGetByHasAuditEventsDefaultParams(ref HasAuditEvents);

          var items = Context.ProjectFunctionsGetByHasAuditEvents.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHasAuditEvents] @HasAuditEvents={0}", HasAuditEvents).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHasAuditEventsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHasAuditEventsDefaultParams(ref bool? HasAuditEvents);

      partial void OnProjectFunctionsGetByHasAuditEventsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAuditEvent> items);  

      public async Task ExportProjectFunctionsGetByHasBusEventsToExcel(bool? HasBusEvent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasbusevents/excel(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasbusevents/excel(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHasBusEventsToCSV(bool? HasBusEvent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasbusevents/csv(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasbusevents/csv(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasBusEvent>> GetProjectFunctionsGetByHasBusEvents(bool? HasBusEvent, Query query = null)
      {
          OnProjectFunctionsGetByHasBusEventsDefaultParams(ref HasBusEvent);

          var items = Context.ProjectFunctionsGetByHasBusEvents.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHasBusEvent] @HasBusEvent={0}", HasBusEvent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHasBusEventsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHasBusEventsDefaultParams(ref bool? HasBusEvent);

      partial void OnProjectFunctionsGetByHasBusEventsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasBusEvent> items);  

      public async Task ExportProjectFunctionsGetByHasCacheMethodsToExcel(bool? HasCacheMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhascachemethods/excel(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhascachemethods/excel(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHasCacheMethodsToCSV(bool? HasCacheMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhascachemethods/csv(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhascachemethods/csv(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasCacheMethod>> GetProjectFunctionsGetByHasCacheMethods(bool? HasCacheMethod, Query query = null)
      {
          OnProjectFunctionsGetByHasCacheMethodsDefaultParams(ref HasCacheMethod);

          var items = Context.ProjectFunctionsGetByHasCacheMethods.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHasCacheMethod] @HasCacheMethod={0}", HasCacheMethod).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHasCacheMethodsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHasCacheMethodsDefaultParams(ref bool? HasCacheMethod);

      partial void OnProjectFunctionsGetByHasCacheMethodsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasCacheMethod> items);  

      public async Task ExportProjectFunctionsGetByHasRateLimitsToExcel(bool? HasRateLimit, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasratelimits/excel(HasRateLimit={HasRateLimit}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasratelimits/excel(HasRateLimit={HasRateLimit}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHasRateLimitsToCSV(bool? HasRateLimit, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasratelimits/csv(HasRateLimit={HasRateLimit}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasratelimits/csv(HasRateLimit={HasRateLimit}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasRateLimit>> GetProjectFunctionsGetByHasRateLimits(bool? HasRateLimit, Query query = null)
      {
          OnProjectFunctionsGetByHasRateLimitsDefaultParams(ref HasRateLimit);

          var items = Context.ProjectFunctionsGetByHasRateLimits.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHasRateLimit] @HasRateLimit={0}", HasRateLimit).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHasRateLimitsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHasRateLimitsDefaultParams(ref bool? HasRateLimit);

      partial void OnProjectFunctionsGetByHasRateLimitsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasRateLimit> items);  

      public async Task ExportProjectFunctionsGetByHeaderSchemesToExcel(string HeaderScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyheaderschemes/excel(HeaderScheme='{HeaderScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyheaderschemes/excel(HeaderScheme='{HeaderScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByHeaderSchemesToCSV(string HeaderScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyheaderschemes/csv(HeaderScheme='{HeaderScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyheaderschemes/csv(HeaderScheme='{HeaderScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHeaderScheme>> GetProjectFunctionsGetByHeaderSchemes(string HeaderScheme, Query query = null)
      {
          OnProjectFunctionsGetByHeaderSchemesDefaultParams(ref HeaderScheme);

          var items = Context.ProjectFunctionsGetByHeaderSchemes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByHeaderScheme] @HeaderScheme={0}", HeaderScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByHeaderSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByHeaderSchemesDefaultParams(ref string HeaderScheme);

      partial void OnProjectFunctionsGetByHeaderSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHeaderScheme> items);  

      public async Task ExportProjectFunctionsGetByi18JsonsToExcel(string i18Json, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyi18jsons/excel(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyi18jsons/excel(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByi18JsonsToCSV(string i18Json, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyi18jsons/csv(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyi18jsons/csv(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByi18Json>> GetProjectFunctionsGetByi18Jsons(string i18Json, Query query = null)
      {
          OnProjectFunctionsGetByi18JsonsDefaultParams(ref i18Json);

          var items = Context.ProjectFunctionsGetByi18Jsons.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByi18Json] @i18Json={0}", i18Json).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByi18JsonsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByi18JsonsDefaultParams(ref string i18Json);

      partial void OnProjectFunctionsGetByi18JsonsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByi18Json> items);  

      public async Task ExportProjectFunctionsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetById>> GetProjectFunctionsGetByIds(int? Id, Query query = null)
      {
          OnProjectFunctionsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectFunctionsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectFunctionsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetById> items);  

      public async Task ExportProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsToExcel(int? IfResponseIsSuccessCallThisFunctionId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/excel(IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/excel(IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsToCSV(int? IfResponseIsSuccessCallThisFunctionId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/csv(IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/csv(IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionId>> GetProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIds(int? IfResponseIsSuccessCallThisFunctionId, Query query = null)
      {
          OnProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsDefaultParams(ref IfResponseIsSuccessCallThisFunctionId);

          var items = Context.ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionId] @IfResponseIsSuccessCallThisFunctionId={0}", IfResponseIsSuccessCallThisFunctionId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsDefaultParams(ref int? IfResponseIsSuccessCallThisFunctionId);

      partial void OnProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionId> items);  

      public async Task ExportProjectFunctionsGetByIsDeletedsToExcel(bool? IsDeleted, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyisdeleteds/excel(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyisdeleteds/excel(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByIsDeletedsToCSV(bool? IsDeleted, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyisdeleteds/csv(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyisdeleteds/csv(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIsDeleted>> GetProjectFunctionsGetByIsDeleteds(bool? IsDeleted, Query query = null)
      {
          OnProjectFunctionsGetByIsDeletedsDefaultParams(ref IsDeleted);

          var items = Context.ProjectFunctionsGetByIsDeleteds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByIsDeleted] @IsDeleted={0}", IsDeleted).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByIsDeletedsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByIsDeletedsDefaultParams(ref bool? IsDeleted);

      partial void OnProjectFunctionsGetByIsDeletedsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIsDeleted> items);  

      public async Task ExportProjectFunctionsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLastScanDate>> GetProjectFunctionsGetByLastScanDates(string LastScanDate, Query query = null)
      {
          OnProjectFunctionsGetByLastScanDatesDefaultParams(ref LastScanDate);

          var items = Context.ProjectFunctionsGetByLastScanDates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByLastScanDate] @LastScanDate={0}", LastScanDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByLastScanDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByLastScanDatesDefaultParams(ref string LastScanDate);

      partial void OnProjectFunctionsGetByLastScanDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLastScanDate> items);  

      public async Task ExportProjectFunctionsGetByLogCodeMergeDateDbConnectionsToExcel(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/excel(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/excel(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByLogCodeMergeDateDbConnectionsToCSV(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/csv(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/csv(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbConnection>> GetProjectFunctionsGetByLogCodeMergeDateDbConnections(string LogCodeMergeDateDBConnection, Query query = null)
      {
          OnProjectFunctionsGetByLogCodeMergeDateDbConnectionsDefaultParams(ref LogCodeMergeDateDBConnection);

          var items = Context.ProjectFunctionsGetByLogCodeMergeDateDbConnections.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByLogCodeMergeDateDBConnection] @LogCodeMergeDateDBConnection={0}", LogCodeMergeDateDBConnection).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByLogCodeMergeDateDbConnectionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByLogCodeMergeDateDbConnectionsDefaultParams(ref string LogCodeMergeDateDBConnection);

      partial void OnProjectFunctionsGetByLogCodeMergeDateDbConnectionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbConnection> items);  

      public async Task ExportProjectFunctionsGetByLogCodeMergeDateDbTypesToExcel(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/excel(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/excel(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByLogCodeMergeDateDbTypesToCSV(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/csv(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/csv(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbType>> GetProjectFunctionsGetByLogCodeMergeDateDbTypes(int? LogCodeMergeDateDBType, Query query = null)
      {
          OnProjectFunctionsGetByLogCodeMergeDateDbTypesDefaultParams(ref LogCodeMergeDateDBType);

          var items = Context.ProjectFunctionsGetByLogCodeMergeDateDbTypes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByLogCodeMergeDateDBType] @LogCodeMergeDateDBType={0}", LogCodeMergeDateDBType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByLogCodeMergeDateDbTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByLogCodeMergeDateDbTypesDefaultParams(ref int? LogCodeMergeDateDBType);

      partial void OnProjectFunctionsGetByLogCodeMergeDateDbTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbType> items);  

      public async Task ExportProjectFunctionsGetByNameSpaceListsToExcel(string NameSpaceList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbynamespacelists/excel(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbynamespacelists/excel(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByNameSpaceListsToCSV(string NameSpaceList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbynamespacelists/csv(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbynamespacelists/csv(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByNameSpaceList>> GetProjectFunctionsGetByNameSpaceLists(string NameSpaceList, Query query = null)
      {
          OnProjectFunctionsGetByNameSpaceListsDefaultParams(ref NameSpaceList);

          var items = Context.ProjectFunctionsGetByNameSpaceLists.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByNameSpaceList] @NameSpaceList={0}", NameSpaceList).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByNameSpaceListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByNameSpaceListsDefaultParams(ref string NameSpaceList);

      partial void OnProjectFunctionsGetByNameSpaceListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByNameSpaceList> items);  

      public async Task ExportProjectFunctionsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPrice>> GetProjectFunctionsGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectFunctionsGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectFunctionsGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectFunctionsGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPrice> items);  

      public async Task ExportProjectFunctionsGetByPublishedDatesToExcel(string PublishedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbypublisheddates/excel(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbypublisheddates/excel(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByPublishedDatesToCSV(string PublishedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbypublisheddates/csv(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbypublisheddates/csv(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPublishedDate>> GetProjectFunctionsGetByPublishedDates(string PublishedDate, Query query = null)
      {
          OnProjectFunctionsGetByPublishedDatesDefaultParams(ref PublishedDate);

          var items = Context.ProjectFunctionsGetByPublishedDates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByPublishedDate] @PublishedDate={0}", PublishedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByPublishedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByPublishedDatesDefaultParams(ref string PublishedDate);

      partial void OnProjectFunctionsGetByPublishedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPublishedDate> items);  

      public async Task ExportProjectFunctionsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByQuery>> GetProjectFunctionsGetByQueries(string Query, Query query = null)
      {
          OnProjectFunctionsGetByQueriesDefaultParams(ref Query);

          var items = Context.ProjectFunctionsGetByQueries.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByQuery] @Query={0}", Query).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByQueriesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByQueriesDefaultParams(ref string Query);

      partial void OnProjectFunctionsGetByQueriesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByQuery> items);  

      public async Task ExportProjectFunctionsGetByRateLimitPropertiesToExcel(string RateLimitProperty, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyratelimitproperties/excel(RateLimitProperty='{RateLimitProperty}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyratelimitproperties/excel(RateLimitProperty='{RateLimitProperty}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByRateLimitPropertiesToCSV(string RateLimitProperty, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyratelimitproperties/csv(RateLimitProperty='{RateLimitProperty}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyratelimitproperties/csv(RateLimitProperty='{RateLimitProperty}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRateLimitProperty>> GetProjectFunctionsGetByRateLimitProperties(string RateLimitProperty, Query query = null)
      {
          OnProjectFunctionsGetByRateLimitPropertiesDefaultParams(ref RateLimitProperty);

          var items = Context.ProjectFunctionsGetByRateLimitProperties.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByRateLimitProperty] @RateLimitProperty={0}", RateLimitProperty).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByRateLimitPropertiesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByRateLimitPropertiesDefaultParams(ref string RateLimitProperty);

      partial void OnProjectFunctionsGetByRateLimitPropertiesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRateLimitProperty> items);  

      public async Task ExportProjectFunctionsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRequestScheme>> GetProjectFunctionsGetByRequestSchemes(string RequestScheme, Query query = null)
      {
          OnProjectFunctionsGetByRequestSchemesDefaultParams(ref RequestScheme);

          var items = Context.ProjectFunctionsGetByRequestSchemes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByRequestScheme] @RequestScheme={0}", RequestScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByRequestSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByRequestSchemesDefaultParams(ref string RequestScheme);

      partial void OnProjectFunctionsGetByRequestSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRequestScheme> items);  

      public async Task ExportProjectFunctionsGetByResponseHasMultiModelsToExcel(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/excel(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/excel(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByResponseHasMultiModelsToCSV(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/csv(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/csv(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasMultiModel>> GetProjectFunctionsGetByResponseHasMultiModels(bool? ResponseHasMultiModel, Query query = null)
      {
          OnProjectFunctionsGetByResponseHasMultiModelsDefaultParams(ref ResponseHasMultiModel);

          var items = Context.ProjectFunctionsGetByResponseHasMultiModels.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByResponseHasMultiModel] @ResponseHasMultiModel={0}", ResponseHasMultiModel).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByResponseHasMultiModelsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByResponseHasMultiModelsDefaultParams(ref bool? ResponseHasMultiModel);

      partial void OnProjectFunctionsGetByResponseHasMultiModelsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasMultiModel> items);  

      public async Task ExportProjectFunctionsGetByResponseHasReturnValuesToExcel(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/excel(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/excel(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByResponseHasReturnValuesToCSV(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/csv(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/csv(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasReturnValue>> GetProjectFunctionsGetByResponseHasReturnValues(bool? ResponseHasReturnValue, Query query = null)
      {
          OnProjectFunctionsGetByResponseHasReturnValuesDefaultParams(ref ResponseHasReturnValue);

          var items = Context.ProjectFunctionsGetByResponseHasReturnValues.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByResponseHasReturnValue] @ResponseHasReturnValue={0}", ResponseHasReturnValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByResponseHasReturnValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByResponseHasReturnValuesDefaultParams(ref bool? ResponseHasReturnValue);

      partial void OnProjectFunctionsGetByResponseHasReturnValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasReturnValue> items);  

      public async Task ExportProjectFunctionsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseScheme>> GetProjectFunctionsGetByResponseSchemes(string ResponseScheme, Query query = null)
      {
          OnProjectFunctionsGetByResponseSchemesDefaultParams(ref ResponseScheme);

          var items = Context.ProjectFunctionsGetByResponseSchemes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByResponseScheme] @ResponseScheme={0}", ResponseScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByResponseSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByResponseSchemesDefaultParams(ref string ResponseScheme);

      partial void OnProjectFunctionsGetByResponseSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseScheme> items);  

      public async Task ExportProjectFunctionsGetByRoutesToExcel(string Route, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyroutes/excel(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyroutes/excel(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByRoutesToCSV(string Route, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyroutes/csv(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyroutes/csv(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRoute>> GetProjectFunctionsGetByRoutes(string Route, Query query = null)
      {
          OnProjectFunctionsGetByRoutesDefaultParams(ref Route);

          var items = Context.ProjectFunctionsGetByRoutes.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByRoute] @Route={0}", Route).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByRoutesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByRoutesDefaultParams(ref string Route);

      partial void OnProjectFunctionsGetByRoutesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRoute> items);  

      public async Task ExportProjectFunctionsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySoftwareLanguageId>> GetProjectFunctionsGetBySoftwareLanguageIds(int? SoftwareLanguageId, Query query = null)
      {
          OnProjectFunctionsGetBySoftwareLanguageIdsDefaultParams(ref SoftwareLanguageId);

          var items = Context.ProjectFunctionsGetBySoftwareLanguageIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetBySoftwareLanguageId] @SoftwareLanguageId={0}", SoftwareLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetBySoftwareLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetBySoftwareLanguageIdsDefaultParams(ref int? SoftwareLanguageId);

      partial void OnProjectFunctionsGetBySoftwareLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySoftwareLanguageId> items);  

      public async Task ExportProjectFunctionsGetByStatusToExcel(int? Statu, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbystatus/excel(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbystatus/excel(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByStatusToCSV(int? Statu, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbystatus/csv(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbystatus/csv(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByStatu>> GetProjectFunctionsGetByStatus(int? Statu, Query query = null)
      {
          OnProjectFunctionsGetByStatusDefaultParams(ref Statu);

          var items = Context.ProjectFunctionsGetByStatus.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByStatu] @Statu={0}", Statu).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByStatusInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByStatusDefaultParams(ref int? Statu);

      partial void OnProjectFunctionsGetByStatusInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByStatu> items);  

      public async Task ExportProjectFunctionsGetBySuccessNotificationTemplatesToExcel(string SuccessNotificationTemplate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/excel(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/excel(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetBySuccessNotificationTemplatesToCSV(string SuccessNotificationTemplate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/csv(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/csv(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySuccessNotificationTemplate>> GetProjectFunctionsGetBySuccessNotificationTemplates(string SuccessNotificationTemplate, Query query = null)
      {
          OnProjectFunctionsGetBySuccessNotificationTemplatesDefaultParams(ref SuccessNotificationTemplate);

          var items = Context.ProjectFunctionsGetBySuccessNotificationTemplates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetBySuccessNotificationTemplate] @SuccessNotificationTemplate={0}", SuccessNotificationTemplate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetBySuccessNotificationTemplatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetBySuccessNotificationTemplatesDefaultParams(ref string SuccessNotificationTemplate);

      partial void OnProjectFunctionsGetBySuccessNotificationTemplatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySuccessNotificationTemplate> items);  

      public async Task ExportProjectFunctionsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserAgent>> GetProjectFunctionsGetByUserAgents(string UserAgent, Query query = null)
      {
          OnProjectFunctionsGetByUserAgentsDefaultParams(ref UserAgent);

          var items = Context.ProjectFunctionsGetByUserAgents.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByUserAgent] @UserAgent={0}", UserAgent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByUserAgentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByUserAgentsDefaultParams(ref string UserAgent);

      partial void OnProjectFunctionsGetByUserAgentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserAgent> items);  

      public async Task ExportProjectFunctionsGetByUserConnectionsIdsToExcel(int? UserConnectionsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserconnectionsids/excel(UserConnectionsId={UserConnectionsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserconnectionsids/excel(UserConnectionsId={UserConnectionsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByUserConnectionsIdsToCSV(int? UserConnectionsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserconnectionsids/csv(UserConnectionsId={UserConnectionsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserconnectionsids/csv(UserConnectionsId={UserConnectionsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserConnectionsId>> GetProjectFunctionsGetByUserConnectionsIds(int? UserConnectionsId, Query query = null)
      {
          OnProjectFunctionsGetByUserConnectionsIdsDefaultParams(ref UserConnectionsId);

          var items = Context.ProjectFunctionsGetByUserConnectionsIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByUserConnectionsId] @UserConnectionsId={0}", UserConnectionsId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByUserConnectionsIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByUserConnectionsIdsDefaultParams(ref int? UserConnectionsId);

      partial void OnProjectFunctionsGetByUserConnectionsIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserConnectionsId> items);  

      public async Task ExportProjectFunctionsGetByUserDescriptionForMethodsToExcel(string UserDescriptionForMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/excel(UserDescriptionForMethod='{UserDescriptionForMethod}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/excel(UserDescriptionForMethod='{UserDescriptionForMethod}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByUserDescriptionForMethodsToCSV(string UserDescriptionForMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/csv(UserDescriptionForMethod='{UserDescriptionForMethod}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/csv(UserDescriptionForMethod='{UserDescriptionForMethod}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserDescriptionForMethod>> GetProjectFunctionsGetByUserDescriptionForMethods(string UserDescriptionForMethod, Query query = null)
      {
          OnProjectFunctionsGetByUserDescriptionForMethodsDefaultParams(ref UserDescriptionForMethod);

          var items = Context.ProjectFunctionsGetByUserDescriptionForMethods.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByUserDescriptionForMethod] @UserDescriptionForMethod={0}", UserDescriptionForMethod).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByUserDescriptionForMethodsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByUserDescriptionForMethodsDefaultParams(ref string UserDescriptionForMethod);

      partial void OnProjectFunctionsGetByUserDescriptionForMethodsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserDescriptionForMethod> items);  

      public async Task ExportProjectFunctionsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserId>> GetProjectFunctionsGetByUserIds(int? UserId, Query query = null)
      {
          OnProjectFunctionsGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ProjectFunctionsGetByUserIds.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnProjectFunctionsGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserId> items);  

      public async Task ExportProjectFunctionsGetByWillLogAllRequestsToExcel(bool? WillLogAllRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallrequests/excel(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallrequests/excel(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWillLogAllRequestsToCSV(bool? WillLogAllRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallrequests/csv(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallrequests/csv(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllRequest>> GetProjectFunctionsGetByWillLogAllRequests(bool? WillLogAllRequest, Query query = null)
      {
          OnProjectFunctionsGetByWillLogAllRequestsDefaultParams(ref WillLogAllRequest);

          var items = Context.ProjectFunctionsGetByWillLogAllRequests.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWillLogAllRequest] @WillLogAllRequest={0}", WillLogAllRequest).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWillLogAllRequestsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWillLogAllRequestsDefaultParams(ref bool? WillLogAllRequest);

      partial void OnProjectFunctionsGetByWillLogAllRequestsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllRequest> items);  

      public async Task ExportProjectFunctionsGetByWillLogAllResponsesToExcel(bool? WillLogAllResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallresponses/excel(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallresponses/excel(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWillLogAllResponsesToCSV(bool? WillLogAllResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallresponses/csv(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallresponses/csv(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllResponse>> GetProjectFunctionsGetByWillLogAllResponses(bool? WillLogAllResponse, Query query = null)
      {
          OnProjectFunctionsGetByWillLogAllResponsesDefaultParams(ref WillLogAllResponse);

          var items = Context.ProjectFunctionsGetByWillLogAllResponses.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWillLogAllResponse] @WillLogAllResponse={0}", WillLogAllResponse).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWillLogAllResponsesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWillLogAllResponsesDefaultParams(ref bool? WillLogAllResponse);

      partial void OnProjectFunctionsGetByWillLogAllResponsesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllResponse> items);  

      public async Task ExportProjectFunctionsGetByWillLogCodeMergeDatesToExcel(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/excel(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/excel(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWillLogCodeMergeDatesToCSV(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/csv(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/csv(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogCodeMergeDate>> GetProjectFunctionsGetByWillLogCodeMergeDates(bool? WillLogCodeMergeDate, Query query = null)
      {
          OnProjectFunctionsGetByWillLogCodeMergeDatesDefaultParams(ref WillLogCodeMergeDate);

          var items = Context.ProjectFunctionsGetByWillLogCodeMergeDates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWillLogCodeMergeDate] @WillLogCodeMergeDate={0}", WillLogCodeMergeDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWillLogCodeMergeDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWillLogCodeMergeDatesDefaultParams(ref bool? WillLogCodeMergeDate);

      partial void OnProjectFunctionsGetByWillLogCodeMergeDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogCodeMergeDate> items);  

      public async Task ExportProjectFunctionsGetByWithHeadersToExcel(string WithHeaders, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithheaders/excel(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithheaders/excel(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWithHeadersToCSV(string WithHeaders, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithheaders/csv(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithheaders/csv(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithHeader>> GetProjectFunctionsGetByWithHeaders(string WithHeaders, Query query = null)
      {
          OnProjectFunctionsGetByWithHeadersDefaultParams(ref WithHeaders);

          var items = Context.ProjectFunctionsGetByWithHeaders.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWithHeaders] @WithHeaders={0}", WithHeaders).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWithHeadersInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWithHeadersDefaultParams(ref string WithHeaders);

      partial void OnProjectFunctionsGetByWithHeadersInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithHeader> items);  

      public async Task ExportProjectFunctionsGetByWithMethodsToExcel(string WithMethods, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithmethods/excel(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithmethods/excel(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWithMethodsToCSV(string WithMethods, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithmethods/csv(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithmethods/csv(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithMethod>> GetProjectFunctionsGetByWithMethods(string WithMethods, Query query = null)
      {
          OnProjectFunctionsGetByWithMethodsDefaultParams(ref WithMethods);

          var items = Context.ProjectFunctionsGetByWithMethods.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWithMethods] @WithMethods={0}", WithMethods).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWithMethodsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWithMethodsDefaultParams(ref string WithMethods);

      partial void OnProjectFunctionsGetByWithMethodsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithMethod> items);  

      public async Task ExportProjectFunctionsGetByWithOriginsToExcel(string WithOrigins, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithorigins/excel(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithorigins/excel(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetByWithOriginsToCSV(string WithOrigins, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithorigins/csv(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithorigins/csv(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithOrigin>> GetProjectFunctionsGetByWithOrigins(string WithOrigins, Query query = null)
      {
          OnProjectFunctionsGetByWithOriginsDefaultParams(ref WithOrigins);

          var items = Context.ProjectFunctionsGetByWithOrigins.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetByWithOrigins] @WithOrigins={0}", WithOrigins).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetByWithOriginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetByWithOriginsDefaultParams(ref string WithOrigins);

      partial void OnProjectFunctionsGetByWithOriginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithOrigin> items);  

      public async Task ExportProjectFunctionsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetCreatedDateBetween>> GetProjectFunctionsGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnProjectFunctionsGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ProjectFunctionsGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnProjectFunctionsGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetCreatedDateBetween> items);  

      public async Task ExportProjectFunctionsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetLastScanDateBetween>> GetProjectFunctionsGetLastScanDateBetweens(string LastScanDateStart, string LastScanDateEnd, Query query = null)
      {
          OnProjectFunctionsGetLastScanDateBetweensDefaultParams(ref LastScanDateStart, ref LastScanDateEnd);

          var items = Context.ProjectFunctionsGetLastScanDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetLastScanDateBetween] @LastScanDateStart={0}, @LastScanDateEnd={1}", LastScanDateStart, LastScanDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetLastScanDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetLastScanDateBetweensDefaultParams(ref string LastScanDateStart, ref string LastScanDateEnd);

      partial void OnProjectFunctionsGetLastScanDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetLastScanDateBetween> items);  

      public async Task ExportProjectFunctionsGetPublishedDateBetweensToExcel(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetpublisheddatebetweens/excel(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetpublisheddatebetweens/excel(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsGetPublishedDateBetweensToCSV(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetpublisheddatebetweens/csv(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetpublisheddatebetweens/csv(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetPublishedDateBetween>> GetProjectFunctionsGetPublishedDateBetweens(string PublishedDateStart, string PublishedDateEnd, Query query = null)
      {
          OnProjectFunctionsGetPublishedDateBetweensDefaultParams(ref PublishedDateStart, ref PublishedDateEnd);

          var items = Context.ProjectFunctionsGetPublishedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectFunctionsGetPublishedDateBetween] @PublishedDateStart={0}, @PublishedDateEnd={1}", PublishedDateStart, PublishedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsGetPublishedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsGetPublishedDateBetweensDefaultParams(ref string PublishedDateStart, ref string PublishedDateEnd);

      partial void OnProjectFunctionsGetPublishedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetPublishedDateBetween> items);  

      public async Task ExportProjectFunctionsInsertsToExcel(int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsinserts/excel(DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsinserts/excel(DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsInsertsToCSV(int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsinserts/csv(DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsinserts/csv(DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsInsert>> GetProjectFunctionsInserts(int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null)
      {
          OnProjectFunctionsInsertsDefaultParams(ref DatabaseTypesId, ref CrudType, ref Query, ref UserId, ref UserAgent, ref CreatedDate, ref LastScanDate, ref UserConnectionsId, ref RequestScheme, ref ResponseScheme, ref Route, ref HeaderScheme, ref WithMethods, ref WithHeaders, ref WithOrigins, ref CacheDBConnection, ref CacheType, ref DocumentUrl, ref ExampleRequest, ref ExampleResponse, ref HasAsync, ref HasCacheMethod, ref ResponseHasMultiModel, ref ResponseHasReturnValue, ref LogCodeMergeDateDBType, ref LogCodeMergeDateDBConnection, ref WillLogAllRequest, ref WillLogCodeMergeDate, ref WillLogAllResponse, ref IsDeleted, ref Statu, ref PublishedDate, ref EventType, ref AccessModifierId, ref AcceptableQuerystrings, ref HasRateLimit, ref RateLimitProperty, ref HasAuditEvents, ref HasBusEvent, ref i18Json, ref IfResponseIsSuccessCallThisFunctionId, ref SuccessNotificationTemplate, ref ApiMethodComment, ref UserDescriptionForMethod, ref NameSpaceList, ref SoftwareLanguageId, ref FunctionGroupId, ref FunctionIsParentInGroup, ref FunctionCallRankInGroup, ref CustomCode, ref Price, ref CurrencyId, ref Commission);

          var items = Context.ProjectFunctionsInserts.FromSqlRaw("EXEC [dbo].[ProjectFunctionsInsert] @DatabaseTypesId={0}, @CrudType={1}, @Query={2}, @UserId={3}, @UserAgent={4}, @CreatedDate={5}, @LastScanDate={6}, @UserConnectionsId={7}, @RequestScheme={8}, @ResponseScheme={9}, @Route={10}, @HeaderScheme={11}, @WithMethods={12}, @WithHeaders={13}, @WithOrigins={14}, @CacheDBConnection={15}, @CacheType={16}, @DocumentUrl={17}, @ExampleRequest={18}, @ExampleResponse={19}, @HasAsync={20}, @HasCacheMethod={21}, @ResponseHasMultiModel={22}, @ResponseHasReturnValue={23}, @LogCodeMergeDateDBType={24}, @LogCodeMergeDateDBConnection={25}, @WillLogAllRequest={26}, @WillLogCodeMergeDate={27}, @WillLogAllResponse={28}, @IsDeleted={29}, @Statu={30}, @PublishedDate={31}, @EventType={32}, @AccessModifierId={33}, @AcceptableQuerystrings={34}, @HasRateLimit={35}, @RateLimitProperty={36}, @HasAuditEvents={37}, @HasBusEvent={38}, @i18Json={39}, @IfResponseIsSuccessCallThisFunctionId={40}, @SuccessNotificationTemplate={41}, @ApiMethodComment={42}, @UserDescriptionForMethod={43}, @NameSpaceList={44}, @SoftwareLanguageId={45}, @FunctionGroupId={46}, @FunctionIsParentInGroup={47}, @FunctionCallRankInGroup={48}, @CustomCode={49}, @Price={50}, @CurrencyId={51}, @Commission={52}", DatabaseTypesId, CrudType, Query, UserId, UserAgent, CreatedDate, LastScanDate, UserConnectionsId, RequestScheme, ResponseScheme, Route, HeaderScheme, WithMethods, WithHeaders, WithOrigins, CacheDBConnection, CacheType, DocumentUrl, ExampleRequest, ExampleResponse, HasAsync, HasCacheMethod, ResponseHasMultiModel, ResponseHasReturnValue, LogCodeMergeDateDBType, LogCodeMergeDateDBConnection, WillLogAllRequest, WillLogCodeMergeDate, WillLogAllResponse, IsDeleted, Statu, PublishedDate, EventType, AccessModifierId, AcceptableQuerystrings, HasRateLimit, RateLimitProperty, HasAuditEvents, HasBusEvent, i18Json, IfResponseIsSuccessCallThisFunctionId, SuccessNotificationTemplate, ApiMethodComment, UserDescriptionForMethod, NameSpaceList, SoftwareLanguageId, FunctionGroupId, FunctionIsParentInGroup, FunctionCallRankInGroup, CustomCode, Price, CurrencyId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsInsertsDefaultParams(ref int? DatabaseTypesId, ref int? CrudType, ref string Query, ref int? UserId, ref string UserAgent, ref string CreatedDate, ref string LastScanDate, ref int? UserConnectionsId, ref string RequestScheme, ref string ResponseScheme, ref string Route, ref string HeaderScheme, ref string WithMethods, ref string WithHeaders, ref string WithOrigins, ref int? CacheDBConnection, ref int? CacheType, ref string DocumentUrl, ref string ExampleRequest, ref string ExampleResponse, ref bool? HasAsync, ref bool? HasCacheMethod, ref bool? ResponseHasMultiModel, ref bool? ResponseHasReturnValue, ref int? LogCodeMergeDateDBType, ref string LogCodeMergeDateDBConnection, ref bool? WillLogAllRequest, ref bool? WillLogCodeMergeDate, ref bool? WillLogAllResponse, ref bool? IsDeleted, ref int? Statu, ref string PublishedDate, ref int? EventType, ref int? AccessModifierId, ref string AcceptableQuerystrings, ref bool? HasRateLimit, ref string RateLimitProperty, ref bool? HasAuditEvents, ref bool? HasBusEvent, ref string i18Json, ref int? IfResponseIsSuccessCallThisFunctionId, ref string SuccessNotificationTemplate, ref string ApiMethodComment, ref string UserDescriptionForMethod, ref string NameSpaceList, ref int? SoftwareLanguageId, ref int? FunctionGroupId, ref bool? FunctionIsParentInGroup, ref int? FunctionCallRankInGroup, ref string CustomCode, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission);

      partial void OnProjectFunctionsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsInsert> items);  

      public async Task ExportProjectFunctionsUpdatesToExcel(int? Id, int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsupdates/excel(Id={Id}, DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsupdates/excel(Id={Id}, DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectFunctionsUpdatesToCSV(int? Id, int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsupdates/csv(Id={Id}, DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsupdates/csv(Id={Id}, DatabaseTypesId={DatabaseTypesId}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserConnectionsId={UserConnectionsId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', Route='{Route}', HeaderScheme='{HeaderScheme}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', ExampleRequest='{ExampleRequest}', ExampleResponse='{ExampleResponse}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, AccessModifierId={AccessModifierId}, AcceptableQuerystrings='{AcceptableQuerystrings}', HasRateLimit={HasRateLimit}, RateLimitProperty='{RateLimitProperty}', HasAuditEvents={HasAuditEvents}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', ApiMethodComment='{ApiMethodComment}', UserDescriptionForMethod='{UserDescriptionForMethod}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, FunctionGroupId={FunctionGroupId}, FunctionIsParentInGroup={FunctionIsParentInGroup}, FunctionCallRankInGroup={FunctionCallRankInGroup}, CustomCode='{CustomCode}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsUpdate>> GetProjectFunctionsUpdates(int? Id, int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null)
      {
          OnProjectFunctionsUpdatesDefaultParams(ref Id, ref DatabaseTypesId, ref CrudType, ref Query, ref UserId, ref UserAgent, ref CreatedDate, ref LastScanDate, ref UserConnectionsId, ref RequestScheme, ref ResponseScheme, ref Route, ref HeaderScheme, ref WithMethods, ref WithHeaders, ref WithOrigins, ref CacheDBConnection, ref CacheType, ref DocumentUrl, ref ExampleRequest, ref ExampleResponse, ref HasAsync, ref HasCacheMethod, ref ResponseHasMultiModel, ref ResponseHasReturnValue, ref LogCodeMergeDateDBType, ref LogCodeMergeDateDBConnection, ref WillLogAllRequest, ref WillLogCodeMergeDate, ref WillLogAllResponse, ref IsDeleted, ref Statu, ref PublishedDate, ref EventType, ref AccessModifierId, ref AcceptableQuerystrings, ref HasRateLimit, ref RateLimitProperty, ref HasAuditEvents, ref HasBusEvent, ref i18Json, ref IfResponseIsSuccessCallThisFunctionId, ref SuccessNotificationTemplate, ref ApiMethodComment, ref UserDescriptionForMethod, ref NameSpaceList, ref SoftwareLanguageId, ref FunctionGroupId, ref FunctionIsParentInGroup, ref FunctionCallRankInGroup, ref CustomCode, ref Price, ref CurrencyId, ref Commission);

          var items = Context.ProjectFunctionsUpdates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsUpdate] @Id={0}, @DatabaseTypesId={1}, @CrudType={2}, @Query={3}, @UserId={4}, @UserAgent={5}, @CreatedDate={6}, @LastScanDate={7}, @UserConnectionsId={8}, @RequestScheme={9}, @ResponseScheme={10}, @Route={11}, @HeaderScheme={12}, @WithMethods={13}, @WithHeaders={14}, @WithOrigins={15}, @CacheDBConnection={16}, @CacheType={17}, @DocumentUrl={18}, @ExampleRequest={19}, @ExampleResponse={20}, @HasAsync={21}, @HasCacheMethod={22}, @ResponseHasMultiModel={23}, @ResponseHasReturnValue={24}, @LogCodeMergeDateDBType={25}, @LogCodeMergeDateDBConnection={26}, @WillLogAllRequest={27}, @WillLogCodeMergeDate={28}, @WillLogAllResponse={29}, @IsDeleted={30}, @Statu={31}, @PublishedDate={32}, @EventType={33}, @AccessModifierId={34}, @AcceptableQuerystrings={35}, @HasRateLimit={36}, @RateLimitProperty={37}, @HasAuditEvents={38}, @HasBusEvent={39}, @i18Json={40}, @IfResponseIsSuccessCallThisFunctionId={41}, @SuccessNotificationTemplate={42}, @ApiMethodComment={43}, @UserDescriptionForMethod={44}, @NameSpaceList={45}, @SoftwareLanguageId={46}, @FunctionGroupId={47}, @FunctionIsParentInGroup={48}, @FunctionCallRankInGroup={49}, @CustomCode={50}, @Price={51}, @CurrencyId={52}, @Commission={53}", Id, DatabaseTypesId, CrudType, Query, UserId, UserAgent, CreatedDate, LastScanDate, UserConnectionsId, RequestScheme, ResponseScheme, Route, HeaderScheme, WithMethods, WithHeaders, WithOrigins, CacheDBConnection, CacheType, DocumentUrl, ExampleRequest, ExampleResponse, HasAsync, HasCacheMethod, ResponseHasMultiModel, ResponseHasReturnValue, LogCodeMergeDateDBType, LogCodeMergeDateDBConnection, WillLogAllRequest, WillLogCodeMergeDate, WillLogAllResponse, IsDeleted, Statu, PublishedDate, EventType, AccessModifierId, AcceptableQuerystrings, HasRateLimit, RateLimitProperty, HasAuditEvents, HasBusEvent, i18Json, IfResponseIsSuccessCallThisFunctionId, SuccessNotificationTemplate, ApiMethodComment, UserDescriptionForMethod, NameSpaceList, SoftwareLanguageId, FunctionGroupId, FunctionIsParentInGroup, FunctionCallRankInGroup, CustomCode, Price, CurrencyId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectFunctionsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectFunctionsUpdatesDefaultParams(ref int? Id, ref int? DatabaseTypesId, ref int? CrudType, ref string Query, ref int? UserId, ref string UserAgent, ref string CreatedDate, ref string LastScanDate, ref int? UserConnectionsId, ref string RequestScheme, ref string ResponseScheme, ref string Route, ref string HeaderScheme, ref string WithMethods, ref string WithHeaders, ref string WithOrigins, ref int? CacheDBConnection, ref int? CacheType, ref string DocumentUrl, ref string ExampleRequest, ref string ExampleResponse, ref bool? HasAsync, ref bool? HasCacheMethod, ref bool? ResponseHasMultiModel, ref bool? ResponseHasReturnValue, ref int? LogCodeMergeDateDBType, ref string LogCodeMergeDateDBConnection, ref bool? WillLogAllRequest, ref bool? WillLogCodeMergeDate, ref bool? WillLogAllResponse, ref bool? IsDeleted, ref int? Statu, ref string PublishedDate, ref int? EventType, ref int? AccessModifierId, ref string AcceptableQuerystrings, ref bool? HasRateLimit, ref string RateLimitProperty, ref bool? HasAuditEvents, ref bool? HasBusEvent, ref string i18Json, ref int? IfResponseIsSuccessCallThisFunctionId, ref string SuccessNotificationTemplate, ref string ApiMethodComment, ref string UserDescriptionForMethod, ref string NameSpaceList, ref int? SoftwareLanguageId, ref int? FunctionGroupId, ref bool? FunctionIsParentInGroup, ref int? FunctionCallRankInGroup, ref string CustomCode, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission);

      partial void OnProjectFunctionsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsUpdate> items);  

      public async Task ExportProjectPageComponentElementsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetAll>> GetProjectPageComponentElementsGetAlls(Query query = null)
      {
          OnProjectPageComponentElementsGetAllsDefaultParams();

          var items = Context.ProjectPageComponentElementsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetAllsDefaultParams();

      partial void OnProjectPageComponentElementsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetAll> items);  

      public async Task ExportProjectPageComponentElementsGetByApiRequestUrlsToExcel(string ApiRequestUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/excel(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/excel(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByApiRequestUrlsToCSV(string ApiRequestUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/csv(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/csv(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByApiRequestUrl>> GetProjectPageComponentElementsGetByApiRequestUrls(string ApiRequestUrl, Query query = null)
      {
          OnProjectPageComponentElementsGetByApiRequestUrlsDefaultParams(ref ApiRequestUrl);

          var items = Context.ProjectPageComponentElementsGetByApiRequestUrls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByApiRequestUrl] @ApiRequestUrl={0}", ApiRequestUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByApiRequestUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByApiRequestUrlsDefaultParams(ref string ApiRequestUrl);

      partial void OnProjectPageComponentElementsGetByApiRequestUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByApiRequestUrl> items);  

      public async Task ExportProjectPageComponentElementsGetByBusEventConnectionIdsToExcel(int? BusEventConnectionId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/excel(BusEventConnectionId={BusEventConnectionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/excel(BusEventConnectionId={BusEventConnectionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByBusEventConnectionIdsToCSV(int? BusEventConnectionId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/csv(BusEventConnectionId={BusEventConnectionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/csv(BusEventConnectionId={BusEventConnectionId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByBusEventConnectionId>> GetProjectPageComponentElementsGetByBusEventConnectionIds(int? BusEventConnectionId, Query query = null)
      {
          OnProjectPageComponentElementsGetByBusEventConnectionIdsDefaultParams(ref BusEventConnectionId);

          var items = Context.ProjectPageComponentElementsGetByBusEventConnectionIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByBusEventConnectionId] @BusEventConnectionId={0}", BusEventConnectionId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByBusEventConnectionIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByBusEventConnectionIdsDefaultParams(ref int? BusEventConnectionId);

      partial void OnProjectPageComponentElementsGetByBusEventConnectionIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByBusEventConnectionId> items);  

      public async Task ExportProjectPageComponentElementsGetByCacheDbConnectionsToExcel(int? CacheDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/excel(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/excel(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCacheDbConnectionsToCSV(int? CacheDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/csv(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/csv(CacheDBConnection={CacheDBConnection}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheDbConnection>> GetProjectPageComponentElementsGetByCacheDbConnections(int? CacheDBConnection, Query query = null)
      {
          OnProjectPageComponentElementsGetByCacheDbConnectionsDefaultParams(ref CacheDBConnection);

          var items = Context.ProjectPageComponentElementsGetByCacheDbConnections.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCacheDBConnection] @CacheDBConnection={0}", CacheDBConnection).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCacheDbConnectionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCacheDbConnectionsDefaultParams(ref int? CacheDBConnection);

      partial void OnProjectPageComponentElementsGetByCacheDbConnectionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheDbConnection> items);  

      public async Task ExportProjectPageComponentElementsGetByCacheTypesToExcel(int? CacheType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachetypes/excel(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachetypes/excel(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCacheTypesToCSV(int? CacheType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachetypes/csv(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachetypes/csv(CacheType={CacheType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheType>> GetProjectPageComponentElementsGetByCacheTypes(int? CacheType, Query query = null)
      {
          OnProjectPageComponentElementsGetByCacheTypesDefaultParams(ref CacheType);

          var items = Context.ProjectPageComponentElementsGetByCacheTypes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCacheType] @CacheType={0}", CacheType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCacheTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCacheTypesDefaultParams(ref int? CacheType);

      partial void OnProjectPageComponentElementsGetByCacheTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheType> items);  

      public async Task ExportProjectPageComponentElementsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComment>> GetProjectPageComponentElementsGetByComments(string Comment, Query query = null)
      {
          OnProjectPageComponentElementsGetByCommentsDefaultParams(ref Comment);

          var items = Context.ProjectPageComponentElementsGetByComments.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByComment] @Comment={0}", Comment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCommentsDefaultParams(ref string Comment);

      partial void OnProjectPageComponentElementsGetByCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComment> items);  

      public async Task ExportProjectPageComponentElementsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCommission>> GetProjectPageComponentElementsGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectPageComponentElementsGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectPageComponentElementsGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectPageComponentElementsGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCommission> items);  

      public async Task ExportProjectPageComponentElementsGetByComponentCallRankInGroupsToExcel(int? ComponentCallRankInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/excel(ComponentCallRankInGroup={ComponentCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/excel(ComponentCallRankInGroup={ComponentCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByComponentCallRankInGroupsToCSV(int? ComponentCallRankInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/csv(ComponentCallRankInGroup={ComponentCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/csv(ComponentCallRankInGroup={ComponentCallRankInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentCallRankInGroup>> GetProjectPageComponentElementsGetByComponentCallRankInGroups(int? ComponentCallRankInGroup, Query query = null)
      {
          OnProjectPageComponentElementsGetByComponentCallRankInGroupsDefaultParams(ref ComponentCallRankInGroup);

          var items = Context.ProjectPageComponentElementsGetByComponentCallRankInGroups.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByComponentCallRankInGroup] @ComponentCallRankInGroup={0}", ComponentCallRankInGroup).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByComponentCallRankInGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByComponentCallRankInGroupsDefaultParams(ref int? ComponentCallRankInGroup);

      partial void OnProjectPageComponentElementsGetByComponentCallRankInGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentCallRankInGroup> items);  

      public async Task ExportProjectPageComponentElementsGetByComponentGroupIdsToExcel(int? ComponentGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/excel(ComponentGroupId={ComponentGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/excel(ComponentGroupId={ComponentGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByComponentGroupIdsToCSV(int? ComponentGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/csv(ComponentGroupId={ComponentGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/csv(ComponentGroupId={ComponentGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentGroupId>> GetProjectPageComponentElementsGetByComponentGroupIds(int? ComponentGroupId, Query query = null)
      {
          OnProjectPageComponentElementsGetByComponentGroupIdsDefaultParams(ref ComponentGroupId);

          var items = Context.ProjectPageComponentElementsGetByComponentGroupIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByComponentGroupId] @ComponentGroupId={0}", ComponentGroupId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByComponentGroupIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByComponentGroupIdsDefaultParams(ref int? ComponentGroupId);

      partial void OnProjectPageComponentElementsGetByComponentGroupIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentGroupId> items);  

      public async Task ExportProjectPageComponentElementsGetByComponentIsParentInGroupsToExcel(bool? ComponentIsParentInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/excel(ComponentIsParentInGroup={ComponentIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/excel(ComponentIsParentInGroup={ComponentIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByComponentIsParentInGroupsToCSV(bool? ComponentIsParentInGroup, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/csv(ComponentIsParentInGroup={ComponentIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/csv(ComponentIsParentInGroup={ComponentIsParentInGroup}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentIsParentInGroup>> GetProjectPageComponentElementsGetByComponentIsParentInGroups(bool? ComponentIsParentInGroup, Query query = null)
      {
          OnProjectPageComponentElementsGetByComponentIsParentInGroupsDefaultParams(ref ComponentIsParentInGroup);

          var items = Context.ProjectPageComponentElementsGetByComponentIsParentInGroups.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByComponentIsParentInGroup] @ComponentIsParentInGroup={0}", ComponentIsParentInGroup).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByComponentIsParentInGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByComponentIsParentInGroupsDefaultParams(ref bool? ComponentIsParentInGroup);

      partial void OnProjectPageComponentElementsGetByComponentIsParentInGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentIsParentInGroup> items);  

      public async Task ExportProjectPageComponentElementsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCreatedDate>> GetProjectPageComponentElementsGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnProjectPageComponentElementsGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ProjectPageComponentElementsGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnProjectPageComponentElementsGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCreatedDate> items);  

      public async Task ExportProjectPageComponentElementsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCrudType>> GetProjectPageComponentElementsGetByCrudTypes(int? CrudType, Query query = null)
      {
          OnProjectPageComponentElementsGetByCrudTypesDefaultParams(ref CrudType);

          var items = Context.ProjectPageComponentElementsGetByCrudTypes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCrudType] @CrudType={0}", CrudType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCrudTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCrudTypesDefaultParams(ref int? CrudType);

      partial void OnProjectPageComponentElementsGetByCrudTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCrudType> items);  

      public async Task ExportProjectPageComponentElementsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCurrencyId>> GetProjectPageComponentElementsGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectPageComponentElementsGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectPageComponentElementsGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectPageComponentElementsGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCurrencyId> items);  

      public async Task ExportProjectPageComponentElementsGetByCustomAnimationSchemesToExcel(string CustomAnimationScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/excel(CustomAnimationScheme='{CustomAnimationScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/excel(CustomAnimationScheme='{CustomAnimationScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCustomAnimationSchemesToCSV(string CustomAnimationScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/csv(CustomAnimationScheme='{CustomAnimationScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/csv(CustomAnimationScheme='{CustomAnimationScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomAnimationScheme>> GetProjectPageComponentElementsGetByCustomAnimationSchemes(string CustomAnimationScheme, Query query = null)
      {
          OnProjectPageComponentElementsGetByCustomAnimationSchemesDefaultParams(ref CustomAnimationScheme);

          var items = Context.ProjectPageComponentElementsGetByCustomAnimationSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCustomAnimationScheme] @CustomAnimationScheme={0}", CustomAnimationScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCustomAnimationSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCustomAnimationSchemesDefaultParams(ref string CustomAnimationScheme);

      partial void OnProjectPageComponentElementsGetByCustomAnimationSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomAnimationScheme> items);  

      public async Task ExportProjectPageComponentElementsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCode>> GetProjectPageComponentElementsGetByCustomCodes(string CustomCode, Query query = null)
      {
          OnProjectPageComponentElementsGetByCustomCodesDefaultParams(ref CustomCode);

          var items = Context.ProjectPageComponentElementsGetByCustomCodes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCustomCode] @CustomCode={0}", CustomCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCustomCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCustomCodesDefaultParams(ref string CustomCode);

      partial void OnProjectPageComponentElementsGetByCustomCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCode> items);  

      public async Task ExportProjectPageComponentElementsGetByCustomCssesToExcel(string CustomCss, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/excel(CustomCss='{CustomCss}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/excel(CustomCss='{CustomCss}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCustomCssesToCSV(string CustomCss, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/csv(CustomCss='{CustomCss}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/csv(CustomCss='{CustomCss}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCss>> GetProjectPageComponentElementsGetByCustomCsses(string CustomCss, Query query = null)
      {
          OnProjectPageComponentElementsGetByCustomCssesDefaultParams(ref CustomCss);

          var items = Context.ProjectPageComponentElementsGetByCustomCsses.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCustomCss] @CustomCss={0}", CustomCss).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCustomCssesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCustomCssesDefaultParams(ref string CustomCss);

      partial void OnProjectPageComponentElementsGetByCustomCssesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCss> items);  

      public async Task ExportProjectPageComponentElementsGetByCustomSchemesToExcel(string CustomScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/excel(CustomScheme='{CustomScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/excel(CustomScheme='{CustomScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCustomSchemesToCSV(string CustomScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/csv(CustomScheme='{CustomScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/csv(CustomScheme='{CustomScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScheme>> GetProjectPageComponentElementsGetByCustomSchemes(string CustomScheme, Query query = null)
      {
          OnProjectPageComponentElementsGetByCustomSchemesDefaultParams(ref CustomScheme);

          var items = Context.ProjectPageComponentElementsGetByCustomSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCustomScheme] @CustomScheme={0}", CustomScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCustomSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCustomSchemesDefaultParams(ref string CustomScheme);

      partial void OnProjectPageComponentElementsGetByCustomSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScheme> items);  

      public async Task ExportProjectPageComponentElementsGetByCustomScriptsToExcel(string CustomScript, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/excel(CustomScript='{CustomScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/excel(CustomScript='{CustomScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByCustomScriptsToCSV(string CustomScript, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/csv(CustomScript='{CustomScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/csv(CustomScript='{CustomScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScript>> GetProjectPageComponentElementsGetByCustomScripts(string CustomScript, Query query = null)
      {
          OnProjectPageComponentElementsGetByCustomScriptsDefaultParams(ref CustomScript);

          var items = Context.ProjectPageComponentElementsGetByCustomScripts.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByCustomScript] @CustomScript={0}", CustomScript).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByCustomScriptsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByCustomScriptsDefaultParams(ref string CustomScript);

      partial void OnProjectPageComponentElementsGetByCustomScriptsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScript> items);  

      public async Task ExportProjectPageComponentElementsGetByDatabaseTypesIdsToExcel(int? DatabaseTypesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/excel(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/excel(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByDatabaseTypesIdsToCSV(int? DatabaseTypesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/csv(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/csv(DatabaseTypesId={DatabaseTypesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDatabaseTypesId>> GetProjectPageComponentElementsGetByDatabaseTypesIds(int? DatabaseTypesId, Query query = null)
      {
          OnProjectPageComponentElementsGetByDatabaseTypesIdsDefaultParams(ref DatabaseTypesId);

          var items = Context.ProjectPageComponentElementsGetByDatabaseTypesIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByDatabaseTypesId] @DatabaseTypesId={0}", DatabaseTypesId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByDatabaseTypesIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByDatabaseTypesIdsDefaultParams(ref int? DatabaseTypesId);

      partial void OnProjectPageComponentElementsGetByDatabaseTypesIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDatabaseTypesId> items);  

      public async Task ExportProjectPageComponentElementsGetByDocumentUrlsToExcel(string DocumentUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/excel(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/excel(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByDocumentUrlsToCSV(string DocumentUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/csv(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/csv(DocumentUrl='{DocumentUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDocumentUrl>> GetProjectPageComponentElementsGetByDocumentUrls(string DocumentUrl, Query query = null)
      {
          OnProjectPageComponentElementsGetByDocumentUrlsDefaultParams(ref DocumentUrl);

          var items = Context.ProjectPageComponentElementsGetByDocumentUrls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByDocumentUrl] @DocumentUrl={0}", DocumentUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByDocumentUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByDocumentUrlsDefaultParams(ref string DocumentUrl);

      partial void OnProjectPageComponentElementsGetByDocumentUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDocumentUrl> items);  

      public async Task ExportProjectPageComponentElementsGetByEventTypesToExcel(int? EventType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/excel(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/excel(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByEventTypesToCSV(int? EventType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/csv(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/csv(EventType={EventType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByEventType>> GetProjectPageComponentElementsGetByEventTypes(int? EventType, Query query = null)
      {
          OnProjectPageComponentElementsGetByEventTypesDefaultParams(ref EventType);

          var items = Context.ProjectPageComponentElementsGetByEventTypes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByEventType] @EventType={0}", EventType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByEventTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByEventTypesDefaultParams(ref int? EventType);

      partial void OnProjectPageComponentElementsGetByEventTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByEventType> items);  

      public async Task ExportProjectPageComponentElementsGetByExampleHtmlCodesToExcel(string ExampleHtmlCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/excel(ExampleHtmlCode='{ExampleHtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/excel(ExampleHtmlCode='{ExampleHtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByExampleHtmlCodesToCSV(string ExampleHtmlCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/csv(ExampleHtmlCode='{ExampleHtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/csv(ExampleHtmlCode='{ExampleHtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleHtmlCode>> GetProjectPageComponentElementsGetByExampleHtmlCodes(string ExampleHtmlCode, Query query = null)
      {
          OnProjectPageComponentElementsGetByExampleHtmlCodesDefaultParams(ref ExampleHtmlCode);

          var items = Context.ProjectPageComponentElementsGetByExampleHtmlCodes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByExampleHtmlCode] @ExampleHtmlCode={0}", ExampleHtmlCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByExampleHtmlCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByExampleHtmlCodesDefaultParams(ref string ExampleHtmlCode);

      partial void OnProjectPageComponentElementsGetByExampleHtmlCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleHtmlCode> items);  

      public async Task ExportProjectPageComponentElementsGetByExampleRequestsToExcel(string ExampleRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/excel(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/excel(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByExampleRequestsToCSV(string ExampleRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/csv(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/csv(ExampleRequest='{ExampleRequest}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleRequest>> GetProjectPageComponentElementsGetByExampleRequests(string ExampleRequest, Query query = null)
      {
          OnProjectPageComponentElementsGetByExampleRequestsDefaultParams(ref ExampleRequest);

          var items = Context.ProjectPageComponentElementsGetByExampleRequests.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByExampleRequest] @ExampleRequest={0}", ExampleRequest).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByExampleRequestsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByExampleRequestsDefaultParams(ref string ExampleRequest);

      partial void OnProjectPageComponentElementsGetByExampleRequestsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleRequest> items);  

      public async Task ExportProjectPageComponentElementsGetByExampleResponsesToExcel(string ExampleResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/excel(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/excel(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByExampleResponsesToCSV(string ExampleResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/csv(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/csv(ExampleResponse='{ExampleResponse}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleResponse>> GetProjectPageComponentElementsGetByExampleResponses(string ExampleResponse, Query query = null)
      {
          OnProjectPageComponentElementsGetByExampleResponsesDefaultParams(ref ExampleResponse);

          var items = Context.ProjectPageComponentElementsGetByExampleResponses.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByExampleResponse] @ExampleResponse={0}", ExampleResponse).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByExampleResponsesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByExampleResponsesDefaultParams(ref string ExampleResponse);

      partial void OnProjectPageComponentElementsGetByExampleResponsesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleResponse> items);  

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersToExcel(int? FunctionTriggerCallAfterSuccessfullTrigger, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/excel(FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/excel(FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersToCSV(int? FunctionTriggerCallAfterSuccessfullTrigger, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/csv(FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/csv(FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTrigger>> GetProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggers(int? FunctionTriggerCallAfterSuccessfullTrigger, Query query = null)
      {
          OnProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersDefaultParams(ref FunctionTriggerCallAfterSuccessfullTrigger);

          var items = Context.ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggers.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTrigger] @FunctionTriggerCallAfterSuccessfullTrigger={0}", FunctionTriggerCallAfterSuccessfullTrigger).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersDefaultParams(ref int? FunctionTriggerCallAfterSuccessfullTrigger);

      partial void OnProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTrigger> items);  

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerGroupIdsToExcel(int? FunctionTriggerGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/excel(FunctionTriggerGroupId={FunctionTriggerGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/excel(FunctionTriggerGroupId={FunctionTriggerGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerGroupIdsToCSV(int? FunctionTriggerGroupId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/csv(FunctionTriggerGroupId={FunctionTriggerGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/csv(FunctionTriggerGroupId={FunctionTriggerGroupId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerGroupId>> GetProjectPageComponentElementsGetByFunctionTriggerGroupIds(int? FunctionTriggerGroupId, Query query = null)
      {
          OnProjectPageComponentElementsGetByFunctionTriggerGroupIdsDefaultParams(ref FunctionTriggerGroupId);

          var items = Context.ProjectPageComponentElementsGetByFunctionTriggerGroupIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByFunctionTriggerGroupId] @FunctionTriggerGroupId={0}", FunctionTriggerGroupId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByFunctionTriggerGroupIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByFunctionTriggerGroupIdsDefaultParams(ref int? FunctionTriggerGroupId);

      partial void OnProjectPageComponentElementsGetByFunctionTriggerGroupIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerGroupId> items);  

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerRanksToExcel(int? FunctionTriggerRank, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/excel(FunctionTriggerRank={FunctionTriggerRank}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/excel(FunctionTriggerRank={FunctionTriggerRank}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByFunctionTriggerRanksToCSV(int? FunctionTriggerRank, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/csv(FunctionTriggerRank={FunctionTriggerRank}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/csv(FunctionTriggerRank={FunctionTriggerRank}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerRank>> GetProjectPageComponentElementsGetByFunctionTriggerRanks(int? FunctionTriggerRank, Query query = null)
      {
          OnProjectPageComponentElementsGetByFunctionTriggerRanksDefaultParams(ref FunctionTriggerRank);

          var items = Context.ProjectPageComponentElementsGetByFunctionTriggerRanks.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByFunctionTriggerRank] @FunctionTriggerRank={0}", FunctionTriggerRank).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByFunctionTriggerRanksInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByFunctionTriggerRanksDefaultParams(ref int? FunctionTriggerRank);

      partial void OnProjectPageComponentElementsGetByFunctionTriggerRanksInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerRank> items);  

      public async Task ExportProjectPageComponentElementsGetByHasAsyncsToExcel(bool? HasAsync, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/excel(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/excel(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByHasAsyncsToCSV(bool? HasAsync, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/csv(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/csv(HasAsync={HasAsync}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasAsync>> GetProjectPageComponentElementsGetByHasAsyncs(bool? HasAsync, Query query = null)
      {
          OnProjectPageComponentElementsGetByHasAsyncsDefaultParams(ref HasAsync);

          var items = Context.ProjectPageComponentElementsGetByHasAsyncs.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByHasAsync] @HasAsync={0}", HasAsync).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByHasAsyncsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByHasAsyncsDefaultParams(ref bool? HasAsync);

      partial void OnProjectPageComponentElementsGetByHasAsyncsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasAsync> items);  

      public async Task ExportProjectPageComponentElementsGetByHasBusEventsToExcel(bool? HasBusEvent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/excel(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/excel(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByHasBusEventsToCSV(bool? HasBusEvent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/csv(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/csv(HasBusEvent={HasBusEvent}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasBusEvent>> GetProjectPageComponentElementsGetByHasBusEvents(bool? HasBusEvent, Query query = null)
      {
          OnProjectPageComponentElementsGetByHasBusEventsDefaultParams(ref HasBusEvent);

          var items = Context.ProjectPageComponentElementsGetByHasBusEvents.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByHasBusEvent] @HasBusEvent={0}", HasBusEvent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByHasBusEventsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByHasBusEventsDefaultParams(ref bool? HasBusEvent);

      partial void OnProjectPageComponentElementsGetByHasBusEventsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasBusEvent> items);  

      public async Task ExportProjectPageComponentElementsGetByHasCacheMethodsToExcel(bool? HasCacheMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/excel(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/excel(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByHasCacheMethodsToCSV(bool? HasCacheMethod, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/csv(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/csv(HasCacheMethod={HasCacheMethod}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCacheMethod>> GetProjectPageComponentElementsGetByHasCacheMethods(bool? HasCacheMethod, Query query = null)
      {
          OnProjectPageComponentElementsGetByHasCacheMethodsDefaultParams(ref HasCacheMethod);

          var items = Context.ProjectPageComponentElementsGetByHasCacheMethods.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByHasCacheMethod] @HasCacheMethod={0}", HasCacheMethod).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByHasCacheMethodsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByHasCacheMethodsDefaultParams(ref bool? HasCacheMethod);

      partial void OnProjectPageComponentElementsGetByHasCacheMethodsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCacheMethod> items);  

      public async Task ExportProjectPageComponentElementsGetByHasCodeBuildsToExcel(string HasCodeBuild, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/excel(HasCodeBuild='{HasCodeBuild}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/excel(HasCodeBuild='{HasCodeBuild}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByHasCodeBuildsToCSV(string HasCodeBuild, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/csv(HasCodeBuild='{HasCodeBuild}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/csv(HasCodeBuild='{HasCodeBuild}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCodeBuild>> GetProjectPageComponentElementsGetByHasCodeBuilds(string HasCodeBuild, Query query = null)
      {
          OnProjectPageComponentElementsGetByHasCodeBuildsDefaultParams(ref HasCodeBuild);

          var items = Context.ProjectPageComponentElementsGetByHasCodeBuilds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByHasCodeBuild] @HasCodeBuild={0}", HasCodeBuild).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByHasCodeBuildsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByHasCodeBuildsDefaultParams(ref string HasCodeBuild);

      partial void OnProjectPageComponentElementsGetByHasCodeBuildsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCodeBuild> items);  

      public async Task ExportProjectPageComponentElementsGetByi18JsonsToExcel(string i18Json, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/excel(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/excel(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByi18JsonsToCSV(string i18Json, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/csv(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/csv(i18Json='{i18Json}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByi18Json>> GetProjectPageComponentElementsGetByi18Jsons(string i18Json, Query query = null)
      {
          OnProjectPageComponentElementsGetByi18JsonsDefaultParams(ref i18Json);

          var items = Context.ProjectPageComponentElementsGetByi18Jsons.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByi18Json] @i18Json={0}", i18Json).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByi18JsonsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByi18JsonsDefaultParams(ref string i18Json);

      partial void OnProjectPageComponentElementsGetByi18JsonsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByi18Json> items);  

      public async Task ExportProjectPageComponentElementsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetById>> GetProjectPageComponentElementsGetByIds(int? Id, Query query = null)
      {
          OnProjectPageComponentElementsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectPageComponentElementsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectPageComponentElementsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetById> items);  

      public async Task ExportProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsToExcel(int? IfResponseIsSuccessCallThisComponentPartId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/excel(IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/excel(IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsToCSV(int? IfResponseIsSuccessCallThisComponentPartId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/csv(IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/csv(IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartId>> GetProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIds(int? IfResponseIsSuccessCallThisComponentPartId, Query query = null)
      {
          OnProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsDefaultParams(ref IfResponseIsSuccessCallThisComponentPartId);

          var items = Context.ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartId] @IfResponseIsSuccessCallThisComponentPartId={0}", IfResponseIsSuccessCallThisComponentPartId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsDefaultParams(ref int? IfResponseIsSuccessCallThisComponentPartId);

      partial void OnProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartId> items);  

      public async Task ExportProjectPageComponentElementsGetByIsDeletedsToExcel(bool? IsDeleted, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/excel(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/excel(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByIsDeletedsToCSV(bool? IsDeleted, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/csv(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/csv(IsDeleted={IsDeleted}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIsDeleted>> GetProjectPageComponentElementsGetByIsDeleteds(bool? IsDeleted, Query query = null)
      {
          OnProjectPageComponentElementsGetByIsDeletedsDefaultParams(ref IsDeleted);

          var items = Context.ProjectPageComponentElementsGetByIsDeleteds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByIsDeleted] @IsDeleted={0}", IsDeleted).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByIsDeletedsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByIsDeletedsDefaultParams(ref bool? IsDeleted);

      partial void OnProjectPageComponentElementsGetByIsDeletedsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIsDeleted> items);  

      public async Task ExportProjectPageComponentElementsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLastScanDate>> GetProjectPageComponentElementsGetByLastScanDates(string LastScanDate, Query query = null)
      {
          OnProjectPageComponentElementsGetByLastScanDatesDefaultParams(ref LastScanDate);

          var items = Context.ProjectPageComponentElementsGetByLastScanDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByLastScanDate] @LastScanDate={0}", LastScanDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByLastScanDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByLastScanDatesDefaultParams(ref string LastScanDate);

      partial void OnProjectPageComponentElementsGetByLastScanDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLastScanDate> items);  

      public async Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsToExcel(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/excel(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/excel(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsToCSV(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/csv(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/csv(LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbConnection>> GetProjectPageComponentElementsGetByLogCodeMergeDateDbConnections(string LogCodeMergeDateDBConnection, Query query = null)
      {
          OnProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsDefaultParams(ref LogCodeMergeDateDBConnection);

          var items = Context.ProjectPageComponentElementsGetByLogCodeMergeDateDbConnections.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByLogCodeMergeDateDBConnection] @LogCodeMergeDateDBConnection={0}", LogCodeMergeDateDBConnection).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsDefaultParams(ref string LogCodeMergeDateDBConnection);

      partial void OnProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbConnection> items);  

      public async Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbTypesToExcel(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/excel(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/excel(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbTypesToCSV(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/csv(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/csv(LogCodeMergeDateDBType={LogCodeMergeDateDBType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbType>> GetProjectPageComponentElementsGetByLogCodeMergeDateDbTypes(int? LogCodeMergeDateDBType, Query query = null)
      {
          OnProjectPageComponentElementsGetByLogCodeMergeDateDbTypesDefaultParams(ref LogCodeMergeDateDBType);

          var items = Context.ProjectPageComponentElementsGetByLogCodeMergeDateDbTypes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByLogCodeMergeDateDBType] @LogCodeMergeDateDBType={0}", LogCodeMergeDateDBType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByLogCodeMergeDateDbTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByLogCodeMergeDateDbTypesDefaultParams(ref int? LogCodeMergeDateDBType);

      partial void OnProjectPageComponentElementsGetByLogCodeMergeDateDbTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbType> items);  

      public async Task ExportProjectPageComponentElementsGetByNameSpaceListsToExcel(string NameSpaceList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/excel(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/excel(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByNameSpaceListsToCSV(string NameSpaceList, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/csv(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/csv(NameSpaceList='{NameSpaceList}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByNameSpaceList>> GetProjectPageComponentElementsGetByNameSpaceLists(string NameSpaceList, Query query = null)
      {
          OnProjectPageComponentElementsGetByNameSpaceListsDefaultParams(ref NameSpaceList);

          var items = Context.ProjectPageComponentElementsGetByNameSpaceLists.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByNameSpaceList] @NameSpaceList={0}", NameSpaceList).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByNameSpaceListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByNameSpaceListsDefaultParams(ref string NameSpaceList);

      partial void OnProjectPageComponentElementsGetByNameSpaceListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByNameSpaceList> items);  

      public async Task ExportProjectPageComponentElementsGetByPreviewCodesToExcel(string PreviewCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/excel(PreviewCode='{PreviewCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/excel(PreviewCode='{PreviewCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByPreviewCodesToCSV(string PreviewCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/csv(PreviewCode='{PreviewCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/csv(PreviewCode='{PreviewCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewCode>> GetProjectPageComponentElementsGetByPreviewCodes(string PreviewCode, Query query = null)
      {
          OnProjectPageComponentElementsGetByPreviewCodesDefaultParams(ref PreviewCode);

          var items = Context.ProjectPageComponentElementsGetByPreviewCodes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByPreviewCode] @PreviewCode={0}", PreviewCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByPreviewCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByPreviewCodesDefaultParams(ref string PreviewCode);

      partial void OnProjectPageComponentElementsGetByPreviewCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewCode> items);  

      public async Task ExportProjectPageComponentElementsGetByPreviewUrlsToExcel(string PreviewUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/excel(PreviewUrl='{PreviewUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/excel(PreviewUrl='{PreviewUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByPreviewUrlsToCSV(string PreviewUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/csv(PreviewUrl='{PreviewUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/csv(PreviewUrl='{PreviewUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewUrl>> GetProjectPageComponentElementsGetByPreviewUrls(string PreviewUrl, Query query = null)
      {
          OnProjectPageComponentElementsGetByPreviewUrlsDefaultParams(ref PreviewUrl);

          var items = Context.ProjectPageComponentElementsGetByPreviewUrls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByPreviewUrl] @PreviewUrl={0}", PreviewUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByPreviewUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByPreviewUrlsDefaultParams(ref string PreviewUrl);

      partial void OnProjectPageComponentElementsGetByPreviewUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewUrl> items);  

      public async Task ExportProjectPageComponentElementsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPrice>> GetProjectPageComponentElementsGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectPageComponentElementsGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectPageComponentElementsGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectPageComponentElementsGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPrice> items);  

      public async Task ExportProjectPageComponentElementsGetByPublishedDatesToExcel(string PublishedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/excel(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/excel(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByPublishedDatesToCSV(string PublishedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/csv(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/csv(PublishedDate='{PublishedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPublishedDate>> GetProjectPageComponentElementsGetByPublishedDates(string PublishedDate, Query query = null)
      {
          OnProjectPageComponentElementsGetByPublishedDatesDefaultParams(ref PublishedDate);

          var items = Context.ProjectPageComponentElementsGetByPublishedDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByPublishedDate] @PublishedDate={0}", PublishedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByPublishedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByPublishedDatesDefaultParams(ref string PublishedDate);

      partial void OnProjectPageComponentElementsGetByPublishedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPublishedDate> items);  

      public async Task ExportProjectPageComponentElementsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByQuery>> GetProjectPageComponentElementsGetByQueries(string Query, Query query = null)
      {
          OnProjectPageComponentElementsGetByQueriesDefaultParams(ref Query);

          var items = Context.ProjectPageComponentElementsGetByQueries.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByQuery] @Query={0}", Query).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByQueriesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByQueriesDefaultParams(ref string Query);

      partial void OnProjectPageComponentElementsGetByQueriesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByQuery> items);  

      public async Task ExportProjectPageComponentElementsGetByRequestHeadersToExcel(string RequestHeader, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/excel(RequestHeader='{RequestHeader}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/excel(RequestHeader='{RequestHeader}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByRequestHeadersToCSV(string RequestHeader, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/csv(RequestHeader='{RequestHeader}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/csv(RequestHeader='{RequestHeader}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestHeader>> GetProjectPageComponentElementsGetByRequestHeaders(string RequestHeader, Query query = null)
      {
          OnProjectPageComponentElementsGetByRequestHeadersDefaultParams(ref RequestHeader);

          var items = Context.ProjectPageComponentElementsGetByRequestHeaders.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByRequestHeader] @RequestHeader={0}", RequestHeader).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByRequestHeadersInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByRequestHeadersDefaultParams(ref string RequestHeader);

      partial void OnProjectPageComponentElementsGetByRequestHeadersInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestHeader> items);  

      public async Task ExportProjectPageComponentElementsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestScheme>> GetProjectPageComponentElementsGetByRequestSchemes(string RequestScheme, Query query = null)
      {
          OnProjectPageComponentElementsGetByRequestSchemesDefaultParams(ref RequestScheme);

          var items = Context.ProjectPageComponentElementsGetByRequestSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByRequestScheme] @RequestScheme={0}", RequestScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByRequestSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByRequestSchemesDefaultParams(ref string RequestScheme);

      partial void OnProjectPageComponentElementsGetByRequestSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestScheme> items);  

      public async Task ExportProjectPageComponentElementsGetByResponseHasMultiModelsToExcel(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/excel(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/excel(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByResponseHasMultiModelsToCSV(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/csv(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/csv(ResponseHasMultiModel={ResponseHasMultiModel}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasMultiModel>> GetProjectPageComponentElementsGetByResponseHasMultiModels(bool? ResponseHasMultiModel, Query query = null)
      {
          OnProjectPageComponentElementsGetByResponseHasMultiModelsDefaultParams(ref ResponseHasMultiModel);

          var items = Context.ProjectPageComponentElementsGetByResponseHasMultiModels.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByResponseHasMultiModel] @ResponseHasMultiModel={0}", ResponseHasMultiModel).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByResponseHasMultiModelsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByResponseHasMultiModelsDefaultParams(ref bool? ResponseHasMultiModel);

      partial void OnProjectPageComponentElementsGetByResponseHasMultiModelsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasMultiModel> items);  

      public async Task ExportProjectPageComponentElementsGetByResponseHasReturnValuesToExcel(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/excel(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/excel(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByResponseHasReturnValuesToCSV(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/csv(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/csv(ResponseHasReturnValue={ResponseHasReturnValue}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasReturnValue>> GetProjectPageComponentElementsGetByResponseHasReturnValues(bool? ResponseHasReturnValue, Query query = null)
      {
          OnProjectPageComponentElementsGetByResponseHasReturnValuesDefaultParams(ref ResponseHasReturnValue);

          var items = Context.ProjectPageComponentElementsGetByResponseHasReturnValues.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByResponseHasReturnValue] @ResponseHasReturnValue={0}", ResponseHasReturnValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByResponseHasReturnValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByResponseHasReturnValuesDefaultParams(ref bool? ResponseHasReturnValue);

      partial void OnProjectPageComponentElementsGetByResponseHasReturnValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasReturnValue> items);  

      public async Task ExportProjectPageComponentElementsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseScheme>> GetProjectPageComponentElementsGetByResponseSchemes(string ResponseScheme, Query query = null)
      {
          OnProjectPageComponentElementsGetByResponseSchemesDefaultParams(ref ResponseScheme);

          var items = Context.ProjectPageComponentElementsGetByResponseSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByResponseScheme] @ResponseScheme={0}", ResponseScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByResponseSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByResponseSchemesDefaultParams(ref string ResponseScheme);

      partial void OnProjectPageComponentElementsGetByResponseSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseScheme> items);  

      public async Task ExportProjectPageComponentElementsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySoftwareLanguageId>> GetProjectPageComponentElementsGetBySoftwareLanguageIds(int? SoftwareLanguageId, Query query = null)
      {
          OnProjectPageComponentElementsGetBySoftwareLanguageIdsDefaultParams(ref SoftwareLanguageId);

          var items = Context.ProjectPageComponentElementsGetBySoftwareLanguageIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetBySoftwareLanguageId] @SoftwareLanguageId={0}", SoftwareLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetBySoftwareLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetBySoftwareLanguageIdsDefaultParams(ref int? SoftwareLanguageId);

      partial void OnProjectPageComponentElementsGetBySoftwareLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySoftwareLanguageId> items);  

      public async Task ExportProjectPageComponentElementsGetByStatusToExcel(int? Statu, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbystatus/excel(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbystatus/excel(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByStatusToCSV(int? Statu, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbystatus/csv(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbystatus/csv(Statu={Statu}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByStatu>> GetProjectPageComponentElementsGetByStatus(int? Statu, Query query = null)
      {
          OnProjectPageComponentElementsGetByStatusDefaultParams(ref Statu);

          var items = Context.ProjectPageComponentElementsGetByStatus.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByStatu] @Statu={0}", Statu).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByStatusInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByStatusDefaultParams(ref int? Statu);

      partial void OnProjectPageComponentElementsGetByStatusInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByStatu> items);  

      public async Task ExportProjectPageComponentElementsGetBySuccessNotificationTemplatesToExcel(string SuccessNotificationTemplate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/excel(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/excel(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetBySuccessNotificationTemplatesToCSV(string SuccessNotificationTemplate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/csv(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/csv(SuccessNotificationTemplate='{SuccessNotificationTemplate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySuccessNotificationTemplate>> GetProjectPageComponentElementsGetBySuccessNotificationTemplates(string SuccessNotificationTemplate, Query query = null)
      {
          OnProjectPageComponentElementsGetBySuccessNotificationTemplatesDefaultParams(ref SuccessNotificationTemplate);

          var items = Context.ProjectPageComponentElementsGetBySuccessNotificationTemplates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetBySuccessNotificationTemplate] @SuccessNotificationTemplate={0}", SuccessNotificationTemplate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetBySuccessNotificationTemplatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetBySuccessNotificationTemplatesDefaultParams(ref string SuccessNotificationTemplate);

      partial void OnProjectPageComponentElementsGetBySuccessNotificationTemplatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySuccessNotificationTemplate> items);  

      public async Task ExportProjectPageComponentElementsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserAgent>> GetProjectPageComponentElementsGetByUserAgents(string UserAgent, Query query = null)
      {
          OnProjectPageComponentElementsGetByUserAgentsDefaultParams(ref UserAgent);

          var items = Context.ProjectPageComponentElementsGetByUserAgents.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByUserAgent] @UserAgent={0}", UserAgent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByUserAgentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByUserAgentsDefaultParams(ref string UserAgent);

      partial void OnProjectPageComponentElementsGetByUserAgentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserAgent> items);  

      public async Task ExportProjectPageComponentElementsGetByUserDescriptionForComponentsToExcel(string UserDescriptionForComponent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/excel(UserDescriptionForComponent='{UserDescriptionForComponent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/excel(UserDescriptionForComponent='{UserDescriptionForComponent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByUserDescriptionForComponentsToCSV(string UserDescriptionForComponent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/csv(UserDescriptionForComponent='{UserDescriptionForComponent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/csv(UserDescriptionForComponent='{UserDescriptionForComponent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserDescriptionForComponent>> GetProjectPageComponentElementsGetByUserDescriptionForComponents(string UserDescriptionForComponent, Query query = null)
      {
          OnProjectPageComponentElementsGetByUserDescriptionForComponentsDefaultParams(ref UserDescriptionForComponent);

          var items = Context.ProjectPageComponentElementsGetByUserDescriptionForComponents.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByUserDescriptionForComponent] @UserDescriptionForComponent={0}", UserDescriptionForComponent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByUserDescriptionForComponentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByUserDescriptionForComponentsDefaultParams(ref string UserDescriptionForComponent);

      partial void OnProjectPageComponentElementsGetByUserDescriptionForComponentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserDescriptionForComponent> items);  

      public async Task ExportProjectPageComponentElementsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserId>> GetProjectPageComponentElementsGetByUserIds(int? UserId, Query query = null)
      {
          OnProjectPageComponentElementsGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ProjectPageComponentElementsGetByUserIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnProjectPageComponentElementsGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserId> items);  

      public async Task ExportProjectPageComponentElementsGetByWebSitePageComponentsIdsToExcel(int? WebSitePageComponentsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/excel(WebSitePageComponentsId={WebSitePageComponentsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/excel(WebSitePageComponentsId={WebSitePageComponentsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWebSitePageComponentsIdsToCSV(int? WebSitePageComponentsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/csv(WebSitePageComponentsId={WebSitePageComponentsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/csv(WebSitePageComponentsId={WebSitePageComponentsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWebSitePageComponentsId>> GetProjectPageComponentElementsGetByWebSitePageComponentsIds(int? WebSitePageComponentsId, Query query = null)
      {
          OnProjectPageComponentElementsGetByWebSitePageComponentsIdsDefaultParams(ref WebSitePageComponentsId);

          var items = Context.ProjectPageComponentElementsGetByWebSitePageComponentsIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWebSitePageComponentsId] @WebSitePageComponentsId={0}", WebSitePageComponentsId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWebSitePageComponentsIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWebSitePageComponentsIdsDefaultParams(ref int? WebSitePageComponentsId);

      partial void OnProjectPageComponentElementsGetByWebSitePageComponentsIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWebSitePageComponentsId> items);  

      public async Task ExportProjectPageComponentElementsGetByWillLogAllRequestsToExcel(bool? WillLogAllRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/excel(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/excel(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWillLogAllRequestsToCSV(bool? WillLogAllRequest, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/csv(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/csv(WillLogAllRequest={WillLogAllRequest}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllRequest>> GetProjectPageComponentElementsGetByWillLogAllRequests(bool? WillLogAllRequest, Query query = null)
      {
          OnProjectPageComponentElementsGetByWillLogAllRequestsDefaultParams(ref WillLogAllRequest);

          var items = Context.ProjectPageComponentElementsGetByWillLogAllRequests.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWillLogAllRequest] @WillLogAllRequest={0}", WillLogAllRequest).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWillLogAllRequestsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWillLogAllRequestsDefaultParams(ref bool? WillLogAllRequest);

      partial void OnProjectPageComponentElementsGetByWillLogAllRequestsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllRequest> items);  

      public async Task ExportProjectPageComponentElementsGetByWillLogAllResponsesToExcel(bool? WillLogAllResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/excel(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/excel(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWillLogAllResponsesToCSV(bool? WillLogAllResponse, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/csv(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/csv(WillLogAllResponse={WillLogAllResponse}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllResponse>> GetProjectPageComponentElementsGetByWillLogAllResponses(bool? WillLogAllResponse, Query query = null)
      {
          OnProjectPageComponentElementsGetByWillLogAllResponsesDefaultParams(ref WillLogAllResponse);

          var items = Context.ProjectPageComponentElementsGetByWillLogAllResponses.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWillLogAllResponse] @WillLogAllResponse={0}", WillLogAllResponse).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWillLogAllResponsesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWillLogAllResponsesDefaultParams(ref bool? WillLogAllResponse);

      partial void OnProjectPageComponentElementsGetByWillLogAllResponsesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllResponse> items);  

      public async Task ExportProjectPageComponentElementsGetByWillLogCodeMergeDatesToExcel(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/excel(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/excel(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWillLogCodeMergeDatesToCSV(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/csv(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/csv(WillLogCodeMergeDate={WillLogCodeMergeDate}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogCodeMergeDate>> GetProjectPageComponentElementsGetByWillLogCodeMergeDates(bool? WillLogCodeMergeDate, Query query = null)
      {
          OnProjectPageComponentElementsGetByWillLogCodeMergeDatesDefaultParams(ref WillLogCodeMergeDate);

          var items = Context.ProjectPageComponentElementsGetByWillLogCodeMergeDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWillLogCodeMergeDate] @WillLogCodeMergeDate={0}", WillLogCodeMergeDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWillLogCodeMergeDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWillLogCodeMergeDatesDefaultParams(ref bool? WillLogCodeMergeDate);

      partial void OnProjectPageComponentElementsGetByWillLogCodeMergeDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogCodeMergeDate> items);  

      public async Task ExportProjectPageComponentElementsGetByWithHeadersToExcel(string WithHeaders, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithheaders/excel(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithheaders/excel(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWithHeadersToCSV(string WithHeaders, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithheaders/csv(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithheaders/csv(WithHeaders='{WithHeaders}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithHeader>> GetProjectPageComponentElementsGetByWithHeaders(string WithHeaders, Query query = null)
      {
          OnProjectPageComponentElementsGetByWithHeadersDefaultParams(ref WithHeaders);

          var items = Context.ProjectPageComponentElementsGetByWithHeaders.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWithHeaders] @WithHeaders={0}", WithHeaders).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWithHeadersInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWithHeadersDefaultParams(ref string WithHeaders);

      partial void OnProjectPageComponentElementsGetByWithHeadersInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithHeader> items);  

      public async Task ExportProjectPageComponentElementsGetByWithMethodsToExcel(string WithMethods, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithmethods/excel(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithmethods/excel(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWithMethodsToCSV(string WithMethods, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithmethods/csv(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithmethods/csv(WithMethods='{WithMethods}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithMethod>> GetProjectPageComponentElementsGetByWithMethods(string WithMethods, Query query = null)
      {
          OnProjectPageComponentElementsGetByWithMethodsDefaultParams(ref WithMethods);

          var items = Context.ProjectPageComponentElementsGetByWithMethods.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWithMethods] @WithMethods={0}", WithMethods).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWithMethodsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWithMethodsDefaultParams(ref string WithMethods);

      partial void OnProjectPageComponentElementsGetByWithMethodsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithMethod> items);  

      public async Task ExportProjectPageComponentElementsGetByWithOriginsToExcel(string WithOrigins, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithorigins/excel(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithorigins/excel(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetByWithOriginsToCSV(string WithOrigins, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithorigins/csv(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithorigins/csv(WithOrigins='{WithOrigins}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithOrigin>> GetProjectPageComponentElementsGetByWithOrigins(string WithOrigins, Query query = null)
      {
          OnProjectPageComponentElementsGetByWithOriginsDefaultParams(ref WithOrigins);

          var items = Context.ProjectPageComponentElementsGetByWithOrigins.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetByWithOrigins] @WithOrigins={0}", WithOrigins).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetByWithOriginsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetByWithOriginsDefaultParams(ref string WithOrigins);

      partial void OnProjectPageComponentElementsGetByWithOriginsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithOrigin> items);  

      public async Task ExportProjectPageComponentElementsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetCreatedDateBetween>> GetProjectPageComponentElementsGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnProjectPageComponentElementsGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ProjectPageComponentElementsGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnProjectPageComponentElementsGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetCreatedDateBetween> items);  

      public async Task ExportProjectPageComponentElementsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetLastScanDateBetween>> GetProjectPageComponentElementsGetLastScanDateBetweens(string LastScanDateStart, string LastScanDateEnd, Query query = null)
      {
          OnProjectPageComponentElementsGetLastScanDateBetweensDefaultParams(ref LastScanDateStart, ref LastScanDateEnd);

          var items = Context.ProjectPageComponentElementsGetLastScanDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetLastScanDateBetween] @LastScanDateStart={0}, @LastScanDateEnd={1}", LastScanDateStart, LastScanDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetLastScanDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetLastScanDateBetweensDefaultParams(ref string LastScanDateStart, ref string LastScanDateEnd);

      partial void OnProjectPageComponentElementsGetLastScanDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetLastScanDateBetween> items);  

      public async Task ExportProjectPageComponentElementsGetPublishedDateBetweensToExcel(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/excel(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/excel(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsGetPublishedDateBetweensToCSV(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/csv(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/csv(PublishedDateStart='{PublishedDateStart}', PublishedDateEnd='{PublishedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetPublishedDateBetween>> GetProjectPageComponentElementsGetPublishedDateBetweens(string PublishedDateStart, string PublishedDateEnd, Query query = null)
      {
          OnProjectPageComponentElementsGetPublishedDateBetweensDefaultParams(ref PublishedDateStart, ref PublishedDateEnd);

          var items = Context.ProjectPageComponentElementsGetPublishedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsGetPublishedDateBetween] @PublishedDateStart={0}, @PublishedDateEnd={1}", PublishedDateStart, PublishedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsGetPublishedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsGetPublishedDateBetweensDefaultParams(ref string PublishedDateStart, ref string PublishedDateEnd);

      partial void OnProjectPageComponentElementsGetPublishedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetPublishedDateBetween> items);  

      public async Task ExportProjectPageComponentElementsInsertsToExcel(int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsinserts/excel(WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsinserts/excel(WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsInsertsToCSV(int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsinserts/csv(WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsinserts/csv(WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsInsert>> GetProjectPageComponentElementsInserts(int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null)
      {
          OnProjectPageComponentElementsInsertsDefaultParams(ref WebSitePageComponentsId, ref DatabaseTypesId, ref FunctionTriggerGroupId, ref FunctionTriggerRank, ref FunctionTriggerCallAfterSuccessfullTrigger, ref CrudType, ref Query, ref UserId, ref UserAgent, ref CreatedDate, ref LastScanDate, ref ExampleRequest, ref ExampleHtmlCode, ref PreviewCode, ref PreviewUrl, ref HasCodeBuild, ref ExampleResponse, ref RequestScheme, ref ResponseScheme, ref ApiRequestUrl, ref RequestHeader, ref WithMethods, ref WithHeaders, ref WithOrigins, ref CacheDBConnection, ref CacheType, ref DocumentUrl, ref HasAsync, ref HasCacheMethod, ref ResponseHasMultiModel, ref ResponseHasReturnValue, ref LogCodeMergeDateDBType, ref LogCodeMergeDateDBConnection, ref WillLogAllRequest, ref WillLogCodeMergeDate, ref WillLogAllResponse, ref IsDeleted, ref Statu, ref PublishedDate, ref EventType, ref HasBusEvent, ref i18Json, ref IfResponseIsSuccessCallThisComponentPartId, ref SuccessNotificationTemplate, ref Comment, ref UserDescriptionForComponent, ref NameSpaceList, ref SoftwareLanguageId, ref ComponentGroupId, ref ComponentIsParentInGroup, ref ComponentCallRankInGroup, ref CustomCode, ref CustomCss, ref CustomScript, ref CustomScheme, ref CustomAnimationScheme, ref Price, ref CurrencyId, ref BusEventConnectionId, ref Commission);

          var items = Context.ProjectPageComponentElementsInserts.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsInsert] @WebSitePageComponentsId={0}, @DatabaseTypesId={1}, @FunctionTriggerGroupId={2}, @FunctionTriggerRank={3}, @FunctionTriggerCallAfterSuccessfullTrigger={4}, @CrudType={5}, @Query={6}, @UserId={7}, @UserAgent={8}, @CreatedDate={9}, @LastScanDate={10}, @ExampleRequest={11}, @ExampleHtmlCode={12}, @PreviewCode={13}, @PreviewUrl={14}, @HasCodeBuild={15}, @ExampleResponse={16}, @RequestScheme={17}, @ResponseScheme={18}, @ApiRequestUrl={19}, @RequestHeader={20}, @WithMethods={21}, @WithHeaders={22}, @WithOrigins={23}, @CacheDBConnection={24}, @CacheType={25}, @DocumentUrl={26}, @HasAsync={27}, @HasCacheMethod={28}, @ResponseHasMultiModel={29}, @ResponseHasReturnValue={30}, @LogCodeMergeDateDBType={31}, @LogCodeMergeDateDBConnection={32}, @WillLogAllRequest={33}, @WillLogCodeMergeDate={34}, @WillLogAllResponse={35}, @IsDeleted={36}, @Statu={37}, @PublishedDate={38}, @EventType={39}, @HasBusEvent={40}, @i18Json={41}, @IfResponseIsSuccessCallThisComponentPartId={42}, @SuccessNotificationTemplate={43}, @Comment={44}, @UserDescriptionForComponent={45}, @NameSpaceList={46}, @SoftwareLanguageId={47}, @ComponentGroupId={48}, @ComponentIsParentInGroup={49}, @ComponentCallRankInGroup={50}, @CustomCode={51}, @CustomCss={52}, @CustomScript={53}, @CustomScheme={54}, @CustomAnimationScheme={55}, @Price={56}, @CurrencyId={57}, @BusEventConnectionId={58}, @Commission={59}", WebSitePageComponentsId, DatabaseTypesId, FunctionTriggerGroupId, FunctionTriggerRank, FunctionTriggerCallAfterSuccessfullTrigger, CrudType, Query, UserId, UserAgent, CreatedDate, LastScanDate, ExampleRequest, ExampleHtmlCode, PreviewCode, PreviewUrl, HasCodeBuild, ExampleResponse, RequestScheme, ResponseScheme, ApiRequestUrl, RequestHeader, WithMethods, WithHeaders, WithOrigins, CacheDBConnection, CacheType, DocumentUrl, HasAsync, HasCacheMethod, ResponseHasMultiModel, ResponseHasReturnValue, LogCodeMergeDateDBType, LogCodeMergeDateDBConnection, WillLogAllRequest, WillLogCodeMergeDate, WillLogAllResponse, IsDeleted, Statu, PublishedDate, EventType, HasBusEvent, i18Json, IfResponseIsSuccessCallThisComponentPartId, SuccessNotificationTemplate, Comment, UserDescriptionForComponent, NameSpaceList, SoftwareLanguageId, ComponentGroupId, ComponentIsParentInGroup, ComponentCallRankInGroup, CustomCode, CustomCss, CustomScript, CustomScheme, CustomAnimationScheme, Price, CurrencyId, BusEventConnectionId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsInsertsDefaultParams(ref int? WebSitePageComponentsId, ref int? DatabaseTypesId, ref int? FunctionTriggerGroupId, ref int? FunctionTriggerRank, ref int? FunctionTriggerCallAfterSuccessfullTrigger, ref int? CrudType, ref string Query, ref int? UserId, ref string UserAgent, ref string CreatedDate, ref string LastScanDate, ref string ExampleRequest, ref string ExampleHtmlCode, ref string PreviewCode, ref string PreviewUrl, ref string HasCodeBuild, ref string ExampleResponse, ref string RequestScheme, ref string ResponseScheme, ref string ApiRequestUrl, ref string RequestHeader, ref string WithMethods, ref string WithHeaders, ref string WithOrigins, ref int? CacheDBConnection, ref int? CacheType, ref string DocumentUrl, ref bool? HasAsync, ref bool? HasCacheMethod, ref bool? ResponseHasMultiModel, ref bool? ResponseHasReturnValue, ref int? LogCodeMergeDateDBType, ref string LogCodeMergeDateDBConnection, ref bool? WillLogAllRequest, ref bool? WillLogCodeMergeDate, ref bool? WillLogAllResponse, ref bool? IsDeleted, ref int? Statu, ref string PublishedDate, ref int? EventType, ref bool? HasBusEvent, ref string i18Json, ref int? IfResponseIsSuccessCallThisComponentPartId, ref string SuccessNotificationTemplate, ref string Comment, ref string UserDescriptionForComponent, ref string NameSpaceList, ref int? SoftwareLanguageId, ref int? ComponentGroupId, ref bool? ComponentIsParentInGroup, ref int? ComponentCallRankInGroup, ref string CustomCode, ref string CustomCss, ref string CustomScript, ref string CustomScheme, ref string CustomAnimationScheme, ref decimal? Price, ref int? CurrencyId, ref int? BusEventConnectionId, ref decimal? Commission);

      partial void OnProjectPageComponentElementsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsInsert> items);  

      public async Task ExportProjectPageComponentElementsUpdatesToExcel(int? Id, int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsupdates/excel(Id={Id}, WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsupdates/excel(Id={Id}, WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentElementsUpdatesToCSV(int? Id, int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsupdates/csv(Id={Id}, WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsupdates/csv(Id={Id}, WebSitePageComponentsId={WebSitePageComponentsId}, DatabaseTypesId={DatabaseTypesId}, FunctionTriggerGroupId={FunctionTriggerGroupId}, FunctionTriggerRank={FunctionTriggerRank}, FunctionTriggerCallAfterSuccessfullTrigger={FunctionTriggerCallAfterSuccessfullTrigger}, CrudType={CrudType}, Query='{Query}', UserId={UserId}, UserAgent='{UserAgent}', CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', ExampleRequest='{ExampleRequest}', ExampleHtmlCode='{ExampleHtmlCode}', PreviewCode='{PreviewCode}', PreviewUrl='{PreviewUrl}', HasCodeBuild='{HasCodeBuild}', ExampleResponse='{ExampleResponse}', RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', ApiRequestUrl='{ApiRequestUrl}', RequestHeader='{RequestHeader}', WithMethods='{WithMethods}', WithHeaders='{WithHeaders}', WithOrigins='{WithOrigins}', CacheDBConnection={CacheDBConnection}, CacheType={CacheType}, DocumentUrl='{DocumentUrl}', HasAsync={HasAsync}, HasCacheMethod={HasCacheMethod}, ResponseHasMultiModel={ResponseHasMultiModel}, ResponseHasReturnValue={ResponseHasReturnValue}, LogCodeMergeDateDBType={LogCodeMergeDateDBType}, LogCodeMergeDateDBConnection='{LogCodeMergeDateDBConnection}', WillLogAllRequest={WillLogAllRequest}, WillLogCodeMergeDate={WillLogCodeMergeDate}, WillLogAllResponse={WillLogAllResponse}, IsDeleted={IsDeleted}, Statu={Statu}, PublishedDate='{PublishedDate}', EventType={EventType}, HasBusEvent={HasBusEvent}, i18Json='{i18Json}', IfResponseIsSuccessCallThisComponentPartId={IfResponseIsSuccessCallThisComponentPartId}, SuccessNotificationTemplate='{SuccessNotificationTemplate}', Comment='{Comment}', UserDescriptionForComponent='{UserDescriptionForComponent}', NameSpaceList='{NameSpaceList}', SoftwareLanguageId={SoftwareLanguageId}, ComponentGroupId={ComponentGroupId}, ComponentIsParentInGroup={ComponentIsParentInGroup}, ComponentCallRankInGroup={ComponentCallRankInGroup}, CustomCode='{CustomCode}', CustomCss='{CustomCss}', CustomScript='{CustomScript}', CustomScheme='{CustomScheme}', CustomAnimationScheme='{CustomAnimationScheme}', Price={Price}, CurrencyId={CurrencyId}, BusEventConnectionId={BusEventConnectionId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsUpdate>> GetProjectPageComponentElementsUpdates(int? Id, int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null)
      {
          OnProjectPageComponentElementsUpdatesDefaultParams(ref Id, ref WebSitePageComponentsId, ref DatabaseTypesId, ref FunctionTriggerGroupId, ref FunctionTriggerRank, ref FunctionTriggerCallAfterSuccessfullTrigger, ref CrudType, ref Query, ref UserId, ref UserAgent, ref CreatedDate, ref LastScanDate, ref ExampleRequest, ref ExampleHtmlCode, ref PreviewCode, ref PreviewUrl, ref HasCodeBuild, ref ExampleResponse, ref RequestScheme, ref ResponseScheme, ref ApiRequestUrl, ref RequestHeader, ref WithMethods, ref WithHeaders, ref WithOrigins, ref CacheDBConnection, ref CacheType, ref DocumentUrl, ref HasAsync, ref HasCacheMethod, ref ResponseHasMultiModel, ref ResponseHasReturnValue, ref LogCodeMergeDateDBType, ref LogCodeMergeDateDBConnection, ref WillLogAllRequest, ref WillLogCodeMergeDate, ref WillLogAllResponse, ref IsDeleted, ref Statu, ref PublishedDate, ref EventType, ref HasBusEvent, ref i18Json, ref IfResponseIsSuccessCallThisComponentPartId, ref SuccessNotificationTemplate, ref Comment, ref UserDescriptionForComponent, ref NameSpaceList, ref SoftwareLanguageId, ref ComponentGroupId, ref ComponentIsParentInGroup, ref ComponentCallRankInGroup, ref CustomCode, ref CustomCss, ref CustomScript, ref CustomScheme, ref CustomAnimationScheme, ref Price, ref CurrencyId, ref BusEventConnectionId, ref Commission);

          var items = Context.ProjectPageComponentElementsUpdates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentElementsUpdate] @Id={0}, @WebSitePageComponentsId={1}, @DatabaseTypesId={2}, @FunctionTriggerGroupId={3}, @FunctionTriggerRank={4}, @FunctionTriggerCallAfterSuccessfullTrigger={5}, @CrudType={6}, @Query={7}, @UserId={8}, @UserAgent={9}, @CreatedDate={10}, @LastScanDate={11}, @ExampleRequest={12}, @ExampleHtmlCode={13}, @PreviewCode={14}, @PreviewUrl={15}, @HasCodeBuild={16}, @ExampleResponse={17}, @RequestScheme={18}, @ResponseScheme={19}, @ApiRequestUrl={20}, @RequestHeader={21}, @WithMethods={22}, @WithHeaders={23}, @WithOrigins={24}, @CacheDBConnection={25}, @CacheType={26}, @DocumentUrl={27}, @HasAsync={28}, @HasCacheMethod={29}, @ResponseHasMultiModel={30}, @ResponseHasReturnValue={31}, @LogCodeMergeDateDBType={32}, @LogCodeMergeDateDBConnection={33}, @WillLogAllRequest={34}, @WillLogCodeMergeDate={35}, @WillLogAllResponse={36}, @IsDeleted={37}, @Statu={38}, @PublishedDate={39}, @EventType={40}, @HasBusEvent={41}, @i18Json={42}, @IfResponseIsSuccessCallThisComponentPartId={43}, @SuccessNotificationTemplate={44}, @Comment={45}, @UserDescriptionForComponent={46}, @NameSpaceList={47}, @SoftwareLanguageId={48}, @ComponentGroupId={49}, @ComponentIsParentInGroup={50}, @ComponentCallRankInGroup={51}, @CustomCode={52}, @CustomCss={53}, @CustomScript={54}, @CustomScheme={55}, @CustomAnimationScheme={56}, @Price={57}, @CurrencyId={58}, @BusEventConnectionId={59}, @Commission={60}", Id, WebSitePageComponentsId, DatabaseTypesId, FunctionTriggerGroupId, FunctionTriggerRank, FunctionTriggerCallAfterSuccessfullTrigger, CrudType, Query, UserId, UserAgent, CreatedDate, LastScanDate, ExampleRequest, ExampleHtmlCode, PreviewCode, PreviewUrl, HasCodeBuild, ExampleResponse, RequestScheme, ResponseScheme, ApiRequestUrl, RequestHeader, WithMethods, WithHeaders, WithOrigins, CacheDBConnection, CacheType, DocumentUrl, HasAsync, HasCacheMethod, ResponseHasMultiModel, ResponseHasReturnValue, LogCodeMergeDateDBType, LogCodeMergeDateDBConnection, WillLogAllRequest, WillLogCodeMergeDate, WillLogAllResponse, IsDeleted, Statu, PublishedDate, EventType, HasBusEvent, i18Json, IfResponseIsSuccessCallThisComponentPartId, SuccessNotificationTemplate, Comment, UserDescriptionForComponent, NameSpaceList, SoftwareLanguageId, ComponentGroupId, ComponentIsParentInGroup, ComponentCallRankInGroup, CustomCode, CustomCss, CustomScript, CustomScheme, CustomAnimationScheme, Price, CurrencyId, BusEventConnectionId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentElementsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentElementsUpdatesDefaultParams(ref int? Id, ref int? WebSitePageComponentsId, ref int? DatabaseTypesId, ref int? FunctionTriggerGroupId, ref int? FunctionTriggerRank, ref int? FunctionTriggerCallAfterSuccessfullTrigger, ref int? CrudType, ref string Query, ref int? UserId, ref string UserAgent, ref string CreatedDate, ref string LastScanDate, ref string ExampleRequest, ref string ExampleHtmlCode, ref string PreviewCode, ref string PreviewUrl, ref string HasCodeBuild, ref string ExampleResponse, ref string RequestScheme, ref string ResponseScheme, ref string ApiRequestUrl, ref string RequestHeader, ref string WithMethods, ref string WithHeaders, ref string WithOrigins, ref int? CacheDBConnection, ref int? CacheType, ref string DocumentUrl, ref bool? HasAsync, ref bool? HasCacheMethod, ref bool? ResponseHasMultiModel, ref bool? ResponseHasReturnValue, ref int? LogCodeMergeDateDBType, ref string LogCodeMergeDateDBConnection, ref bool? WillLogAllRequest, ref bool? WillLogCodeMergeDate, ref bool? WillLogAllResponse, ref bool? IsDeleted, ref int? Statu, ref string PublishedDate, ref int? EventType, ref bool? HasBusEvent, ref string i18Json, ref int? IfResponseIsSuccessCallThisComponentPartId, ref string SuccessNotificationTemplate, ref string Comment, ref string UserDescriptionForComponent, ref string NameSpaceList, ref int? SoftwareLanguageId, ref int? ComponentGroupId, ref bool? ComponentIsParentInGroup, ref int? ComponentCallRankInGroup, ref string CustomCode, ref string CustomCss, ref string CustomScript, ref string CustomScheme, ref string CustomAnimationScheme, ref decimal? Price, ref int? CurrencyId, ref int? BusEventConnectionId, ref decimal? Commission);

      partial void OnProjectPageComponentElementsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsUpdate> items);  

      public async Task ExportProjectPageComponentsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetAll>> GetProjectPageComponentsGetAlls(Query query = null)
      {
          OnProjectPageComponentsGetAllsDefaultParams();

          var items = Context.ProjectPageComponentsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetAllsDefaultParams();

      partial void OnProjectPageComponentsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetAll> items);  

      public async Task ExportProjectPageComponentsGetByApiRequestUrlsToExcel(string ApiRequestUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyapirequesturls/excel(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyapirequesturls/excel(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByApiRequestUrlsToCSV(string ApiRequestUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyapirequesturls/csv(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyapirequesturls/csv(ApiRequestUrl='{ApiRequestUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByApiRequestUrl>> GetProjectPageComponentsGetByApiRequestUrls(string ApiRequestUrl, Query query = null)
      {
          OnProjectPageComponentsGetByApiRequestUrlsDefaultParams(ref ApiRequestUrl);

          var items = Context.ProjectPageComponentsGetByApiRequestUrls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByApiRequestUrl] @ApiRequestUrl={0}", ApiRequestUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByApiRequestUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByApiRequestUrlsDefaultParams(ref string ApiRequestUrl);

      partial void OnProjectPageComponentsGetByApiRequestUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByApiRequestUrl> items);  

      public async Task ExportProjectPageComponentsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCommission>> GetProjectPageComponentsGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectPageComponentsGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectPageComponentsGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectPageComponentsGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCommission> items);  

      public async Task ExportProjectPageComponentsGetByComponentNamesToExcel(string ComponentName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycomponentnames/excel(ComponentName='{ComponentName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycomponentnames/excel(ComponentName='{ComponentName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByComponentNamesToCSV(string ComponentName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycomponentnames/csv(ComponentName='{ComponentName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycomponentnames/csv(ComponentName='{ComponentName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByComponentName>> GetProjectPageComponentsGetByComponentNames(string ComponentName, Query query = null)
      {
          OnProjectPageComponentsGetByComponentNamesDefaultParams(ref ComponentName);

          var items = Context.ProjectPageComponentsGetByComponentNames.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByComponentName] @ComponentName={0}", ComponentName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByComponentNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByComponentNamesDefaultParams(ref string ComponentName);

      partial void OnProjectPageComponentsGetByComponentNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByComponentName> items);  

      public async Task ExportProjectPageComponentsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCreatedDate>> GetProjectPageComponentsGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnProjectPageComponentsGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ProjectPageComponentsGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnProjectPageComponentsGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCreatedDate> items);  

      public async Task ExportProjectPageComponentsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycrudtypes/excel(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycrudtypes/csv(CrudType={CrudType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCrudType>> GetProjectPageComponentsGetByCrudTypes(int? CrudType, Query query = null)
      {
          OnProjectPageComponentsGetByCrudTypesDefaultParams(ref CrudType);

          var items = Context.ProjectPageComponentsGetByCrudTypes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByCrudType] @CrudType={0}", CrudType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByCrudTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByCrudTypesDefaultParams(ref int? CrudType);

      partial void OnProjectPageComponentsGetByCrudTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCrudType> items);  

      public async Task ExportProjectPageComponentsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCurrencyId>> GetProjectPageComponentsGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectPageComponentsGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectPageComponentsGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectPageComponentsGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCurrencyId> items);  

      public async Task ExportProjectPageComponentsGetByDatabaseIdsToExcel(int? DatabaseId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydatabaseids/excel(DatabaseId={DatabaseId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydatabaseids/excel(DatabaseId={DatabaseId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByDatabaseIdsToCSV(int? DatabaseId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydatabaseids/csv(DatabaseId={DatabaseId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydatabaseids/csv(DatabaseId={DatabaseId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDatabaseId>> GetProjectPageComponentsGetByDatabaseIds(int? DatabaseId, Query query = null)
      {
          OnProjectPageComponentsGetByDatabaseIdsDefaultParams(ref DatabaseId);

          var items = Context.ProjectPageComponentsGetByDatabaseIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByDatabaseId] @DatabaseId={0}", DatabaseId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByDatabaseIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByDatabaseIdsDefaultParams(ref int? DatabaseId);

      partial void OnProjectPageComponentsGetByDatabaseIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDatabaseId> items);  

      public async Task ExportProjectPageComponentsGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDefaultLanguage>> GetProjectPageComponentsGetByDefaultLanguages(int? DefaultLanguage, Query query = null)
      {
          OnProjectPageComponentsGetByDefaultLanguagesDefaultParams(ref DefaultLanguage);

          var items = Context.ProjectPageComponentsGetByDefaultLanguages.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByDefaultLanguage] @DefaultLanguage={0}", DefaultLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByDefaultLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByDefaultLanguagesDefaultParams(ref int? DefaultLanguage);

      partial void OnProjectPageComponentsGetByDefaultLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDefaultLanguage> items);  

      public async Task ExportProjectPageComponentsGetByFormActionUrlsToExcel(string FormActionUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyformactionurls/excel(FormActionUrl='{FormActionUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyformactionurls/excel(FormActionUrl='{FormActionUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByFormActionUrlsToCSV(string FormActionUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyformactionurls/csv(FormActionUrl='{FormActionUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyformactionurls/csv(FormActionUrl='{FormActionUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByFormActionUrl>> GetProjectPageComponentsGetByFormActionUrls(string FormActionUrl, Query query = null)
      {
          OnProjectPageComponentsGetByFormActionUrlsDefaultParams(ref FormActionUrl);

          var items = Context.ProjectPageComponentsGetByFormActionUrls.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByFormActionUrl] @FormActionUrl={0}", FormActionUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByFormActionUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByFormActionUrlsDefaultParams(ref string FormActionUrl);

      partial void OnProjectPageComponentsGetByFormActionUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByFormActionUrl> items);  

      public async Task ExportProjectPageComponentsGetByHasFinishedSuccessfulliesToExcel(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/excel(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/excel(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByHasFinishedSuccessfulliesToCSV(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/csv(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/csv(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasFinishedSuccessfully>> GetProjectPageComponentsGetByHasFinishedSuccessfullies(bool? HasFinishedSuccessfully, Query query = null)
      {
          OnProjectPageComponentsGetByHasFinishedSuccessfulliesDefaultParams(ref HasFinishedSuccessfully);

          var items = Context.ProjectPageComponentsGetByHasFinishedSuccessfullies.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByHasFinishedSuccessfully] @HasFinishedSuccessfully={0}", HasFinishedSuccessfully).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByHasFinishedSuccessfulliesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByHasFinishedSuccessfulliesDefaultParams(ref bool? HasFinishedSuccessfully);

      partial void OnProjectPageComponentsGetByHasFinishedSuccessfulliesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasFinishedSuccessfully> items);  

      public async Task ExportProjectPageComponentsGetByHasFormsToExcel(bool? HasForm, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasforms/excel(HasForm={HasForm}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasforms/excel(HasForm={HasForm}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByHasFormsToCSV(bool? HasForm, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasforms/csv(HasForm={HasForm}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasforms/csv(HasForm={HasForm}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasForm>> GetProjectPageComponentsGetByHasForms(bool? HasForm, Query query = null)
      {
          OnProjectPageComponentsGetByHasFormsDefaultParams(ref HasForm);

          var items = Context.ProjectPageComponentsGetByHasForms.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByHasForm] @HasForm={0}", HasForm).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByHasFormsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByHasFormsDefaultParams(ref bool? HasForm);

      partial void OnProjectPageComponentsGetByHasFormsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasForm> items);  

      public async Task ExportProjectPageComponentsGetByHasMultiLanguagesToExcel(string HasMultiLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/excel(HasMultiLanguage='{HasMultiLanguage}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/excel(HasMultiLanguage='{HasMultiLanguage}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByHasMultiLanguagesToCSV(string HasMultiLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/csv(HasMultiLanguage='{HasMultiLanguage}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/csv(HasMultiLanguage='{HasMultiLanguage}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasMultiLanguage>> GetProjectPageComponentsGetByHasMultiLanguages(string HasMultiLanguage, Query query = null)
      {
          OnProjectPageComponentsGetByHasMultiLanguagesDefaultParams(ref HasMultiLanguage);

          var items = Context.ProjectPageComponentsGetByHasMultiLanguages.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByHasMultiLanguage] @HasMultiLanguage={0}", HasMultiLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByHasMultiLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByHasMultiLanguagesDefaultParams(ref string HasMultiLanguage);

      partial void OnProjectPageComponentsGetByHasMultiLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasMultiLanguage> items);  

      public async Task ExportProjectPageComponentsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetById>> GetProjectPageComponentsGetByIds(int? Id, Query query = null)
      {
          OnProjectPageComponentsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectPageComponentsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectPageComponentsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetById> items);  

      public async Task ExportProjectPageComponentsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastScanDate>> GetProjectPageComponentsGetByLastScanDates(string LastScanDate, Query query = null)
      {
          OnProjectPageComponentsGetByLastScanDatesDefaultParams(ref LastScanDate);

          var items = Context.ProjectPageComponentsGetByLastScanDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByLastScanDate] @LastScanDate={0}", LastScanDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByLastScanDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByLastScanDatesDefaultParams(ref string LastScanDate);

      partial void OnProjectPageComponentsGetByLastScanDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastScanDate> items);  

      public async Task ExportProjectPageComponentsGetByLastValidDatesToExcel(string LastValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastvaliddates/excel(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastvaliddates/excel(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByLastValidDatesToCSV(string LastValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastvaliddates/csv(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastvaliddates/csv(LastValidDate='{LastValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastValidDate>> GetProjectPageComponentsGetByLastValidDates(string LastValidDate, Query query = null)
      {
          OnProjectPageComponentsGetByLastValidDatesDefaultParams(ref LastValidDate);

          var items = Context.ProjectPageComponentsGetByLastValidDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByLastValidDate] @LastValidDate={0}", LastValidDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByLastValidDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByLastValidDatesDefaultParams(ref string LastValidDate);

      partial void OnProjectPageComponentsGetByLastValidDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastValidDate> items);  

      public async Task ExportProjectPageComponentsGetByModifyDatesToExcel(string ModifyDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbymodifydates/excel(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbymodifydates/excel(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByModifyDatesToCSV(string ModifyDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbymodifydates/csv(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbymodifydates/csv(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByModifyDate>> GetProjectPageComponentsGetByModifyDates(string ModifyDate, Query query = null)
      {
          OnProjectPageComponentsGetByModifyDatesDefaultParams(ref ModifyDate);

          var items = Context.ProjectPageComponentsGetByModifyDates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByModifyDate] @ModifyDate={0}", ModifyDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByModifyDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByModifyDatesDefaultParams(ref string ModifyDate);

      partial void OnProjectPageComponentsGetByModifyDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByModifyDate> items);  

      public async Task ExportProjectPageComponentsGetByOnHoversToExcel(bool? OnHover, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyonhovers/excel(OnHover={OnHover}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyonhovers/excel(OnHover={OnHover}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByOnHoversToCSV(bool? OnHover, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyonhovers/csv(OnHover={OnHover}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyonhovers/csv(OnHover={OnHover}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByOnHover>> GetProjectPageComponentsGetByOnHovers(bool? OnHover, Query query = null)
      {
          OnProjectPageComponentsGetByOnHoversDefaultParams(ref OnHover);

          var items = Context.ProjectPageComponentsGetByOnHovers.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByOnHover] @OnHover={0}", OnHover).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByOnHoversInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByOnHoversDefaultParams(ref bool? OnHover);

      partial void OnProjectPageComponentsGetByOnHoversInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByOnHover> items);  

      public async Task ExportProjectPageComponentsGetByParentWebSitePartsIdsToExcel(int? ParentWebSitePartsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/excel(ParentWebSitePartsId={ParentWebSitePartsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/excel(ParentWebSitePartsId={ParentWebSitePartsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByParentWebSitePartsIdsToCSV(int? ParentWebSitePartsId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/csv(ParentWebSitePartsId={ParentWebSitePartsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/csv(ParentWebSitePartsId={ParentWebSitePartsId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByParentWebSitePartsId>> GetProjectPageComponentsGetByParentWebSitePartsIds(int? ParentWebSitePartsId, Query query = null)
      {
          OnProjectPageComponentsGetByParentWebSitePartsIdsDefaultParams(ref ParentWebSitePartsId);

          var items = Context.ProjectPageComponentsGetByParentWebSitePartsIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByParentWebSitePartsId] @ParentWebSitePartsId={0}", ParentWebSitePartsId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByParentWebSitePartsIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByParentWebSitePartsIdsDefaultParams(ref int? ParentWebSitePartsId);

      partial void OnProjectPageComponentsGetByParentWebSitePartsIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByParentWebSitePartsId> items);  

      public async Task ExportProjectPageComponentsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByPrice>> GetProjectPageComponentsGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectPageComponentsGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectPageComponentsGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectPageComponentsGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByPrice> items);  

      public async Task ExportProjectPageComponentsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyqueries/excel(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyqueries/csv(Query='{Query}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByQuery>> GetProjectPageComponentsGetByQueries(string Query, Query query = null)
      {
          OnProjectPageComponentsGetByQueriesDefaultParams(ref Query);

          var items = Context.ProjectPageComponentsGetByQueries.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByQuery] @Query={0}", Query).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByQueriesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByQueriesDefaultParams(ref string Query);

      partial void OnProjectPageComponentsGetByQueriesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByQuery> items);  

      public async Task ExportProjectPageComponentsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyrequestschemes/excel(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyrequestschemes/csv(RequestScheme='{RequestScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByRequestScheme>> GetProjectPageComponentsGetByRequestSchemes(string RequestScheme, Query query = null)
      {
          OnProjectPageComponentsGetByRequestSchemesDefaultParams(ref RequestScheme);

          var items = Context.ProjectPageComponentsGetByRequestSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByRequestScheme] @RequestScheme={0}", RequestScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByRequestSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByRequestSchemesDefaultParams(ref string RequestScheme);

      partial void OnProjectPageComponentsGetByRequestSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByRequestScheme> items);  

      public async Task ExportProjectPageComponentsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyresponseschemes/excel(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyresponseschemes/csv(ResponseScheme='{ResponseScheme}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByResponseScheme>> GetProjectPageComponentsGetByResponseSchemes(string ResponseScheme, Query query = null)
      {
          OnProjectPageComponentsGetByResponseSchemesDefaultParams(ref ResponseScheme);

          var items = Context.ProjectPageComponentsGetByResponseSchemes.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByResponseScheme] @ResponseScheme={0}", ResponseScheme).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByResponseSchemesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByResponseSchemesDefaultParams(ref string ResponseScheme);

      partial void OnProjectPageComponentsGetByResponseSchemesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByResponseScheme> items);  

      public async Task ExportProjectPageComponentsGetByScannedLanguagesToExcel(int? ScannedLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/excel(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/excel(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByScannedLanguagesToCSV(int? ScannedLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/csv(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/csv(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByScannedLanguage>> GetProjectPageComponentsGetByScannedLanguages(int? ScannedLanguage, Query query = null)
      {
          OnProjectPageComponentsGetByScannedLanguagesDefaultParams(ref ScannedLanguage);

          var items = Context.ProjectPageComponentsGetByScannedLanguages.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByScannedLanguage] @ScannedLanguage={0}", ScannedLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByScannedLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByScannedLanguagesDefaultParams(ref int? ScannedLanguage);

      partial void OnProjectPageComponentsGetByScannedLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByScannedLanguage> items);  

      public async Task ExportProjectPageComponentsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuseragents/excel(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuseragents/csv(UserAgent='{UserAgent}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserAgent>> GetProjectPageComponentsGetByUserAgents(string UserAgent, Query query = null)
      {
          OnProjectPageComponentsGetByUserAgentsDefaultParams(ref UserAgent);

          var items = Context.ProjectPageComponentsGetByUserAgents.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByUserAgent] @UserAgent={0}", UserAgent).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByUserAgentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByUserAgentsDefaultParams(ref string UserAgent);

      partial void OnProjectPageComponentsGetByUserAgentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserAgent> items);  

      public async Task ExportProjectPageComponentsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserId>> GetProjectPageComponentsGetByUserIds(int? UserId, Query query = null)
      {
          OnProjectPageComponentsGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ProjectPageComponentsGetByUserIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnProjectPageComponentsGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserId> items);  

      public async Task ExportProjectPageComponentsGetByWebSitePagesIdsToExcel(int? WebSitePagesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/excel(WebSitePagesId={WebSitePagesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/excel(WebSitePagesId={WebSitePagesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetByWebSitePagesIdsToCSV(int? WebSitePagesId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/csv(WebSitePagesId={WebSitePagesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/csv(WebSitePagesId={WebSitePagesId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByWebSitePagesId>> GetProjectPageComponentsGetByWebSitePagesIds(int? WebSitePagesId, Query query = null)
      {
          OnProjectPageComponentsGetByWebSitePagesIdsDefaultParams(ref WebSitePagesId);

          var items = Context.ProjectPageComponentsGetByWebSitePagesIds.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetByWebSitePagesId] @WebSitePagesId={0}", WebSitePagesId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetByWebSitePagesIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetByWebSitePagesIdsDefaultParams(ref int? WebSitePagesId);

      partial void OnProjectPageComponentsGetByWebSitePagesIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByWebSitePagesId> items);  

      public async Task ExportProjectPageComponentsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetCreatedDateBetween>> GetProjectPageComponentsGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnProjectPageComponentsGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ProjectPageComponentsGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnProjectPageComponentsGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetCreatedDateBetween> items);  

      public async Task ExportProjectPageComponentsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastScanDateBetween>> GetProjectPageComponentsGetLastScanDateBetweens(string LastScanDateStart, string LastScanDateEnd, Query query = null)
      {
          OnProjectPageComponentsGetLastScanDateBetweensDefaultParams(ref LastScanDateStart, ref LastScanDateEnd);

          var items = Context.ProjectPageComponentsGetLastScanDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetLastScanDateBetween] @LastScanDateStart={0}, @LastScanDateEnd={1}", LastScanDateStart, LastScanDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetLastScanDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetLastScanDateBetweensDefaultParams(ref string LastScanDateStart, ref string LastScanDateEnd);

      partial void OnProjectPageComponentsGetLastScanDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastScanDateBetween> items);  

      public async Task ExportProjectPageComponentsGetLastValidDateBetweensToExcel(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/excel(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/excel(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetLastValidDateBetweensToCSV(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/csv(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/csv(LastValidDateStart='{LastValidDateStart}', LastValidDateEnd='{LastValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastValidDateBetween>> GetProjectPageComponentsGetLastValidDateBetweens(string LastValidDateStart, string LastValidDateEnd, Query query = null)
      {
          OnProjectPageComponentsGetLastValidDateBetweensDefaultParams(ref LastValidDateStart, ref LastValidDateEnd);

          var items = Context.ProjectPageComponentsGetLastValidDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetLastValidDateBetween] @LastValidDateStart={0}, @LastValidDateEnd={1}", LastValidDateStart, LastValidDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetLastValidDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetLastValidDateBetweensDefaultParams(ref string LastValidDateStart, ref string LastValidDateEnd);

      partial void OnProjectPageComponentsGetLastValidDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastValidDateBetween> items);  

      public async Task ExportProjectPageComponentsGetModifyDateBetweensToExcel(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/excel(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/excel(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsGetModifyDateBetweensToCSV(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/csv(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/csv(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetModifyDateBetween>> GetProjectPageComponentsGetModifyDateBetweens(string ModifyDateStart, string ModifyDateEnd, Query query = null)
      {
          OnProjectPageComponentsGetModifyDateBetweensDefaultParams(ref ModifyDateStart, ref ModifyDateEnd);

          var items = Context.ProjectPageComponentsGetModifyDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsGetModifyDateBetween] @ModifyDateStart={0}, @ModifyDateEnd={1}", ModifyDateStart, ModifyDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsGetModifyDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsGetModifyDateBetweensDefaultParams(ref string ModifyDateStart, ref string ModifyDateEnd);

      partial void OnProjectPageComponentsGetModifyDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetModifyDateBetween> items);  

      public async Task ExportProjectPageComponentsInsertsToExcel(int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsinserts/excel(WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsinserts/excel(WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsInsertsToCSV(int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsinserts/csv(WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsinserts/csv(WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsInsert>> GetProjectPageComponentsInserts(int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null)
      {
          OnProjectPageComponentsInsertsDefaultParams(ref WebSitePagesId, ref ComponentName, ref CrudType, ref Query, ref DatabaseId, ref RequestScheme, ref ResponseScheme, ref CreatedDate, ref ModifyDate, ref LastScanDate, ref UserId, ref UserAgent, ref LastValidDate, ref HasForm, ref ParentWebSitePartsId, ref HasMultiLanguage, ref DefaultLanguage, ref ScannedLanguage, ref HasFinishedSuccessfully, ref OnHover, ref ApiRequestUrl, ref FormActionUrl, ref Price, ref CurrencyId, ref Commission);

          var items = Context.ProjectPageComponentsInserts.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsInsert] @WebSitePagesId={0}, @ComponentName={1}, @CrudType={2}, @Query={3}, @DatabaseId={4}, @RequestScheme={5}, @ResponseScheme={6}, @CreatedDate={7}, @ModifyDate={8}, @LastScanDate={9}, @UserId={10}, @UserAgent={11}, @LastValidDate={12}, @HasForm={13}, @ParentWebSitePartsId={14}, @HasMultiLanguage={15}, @DefaultLanguage={16}, @ScannedLanguage={17}, @HasFinishedSuccessfully={18}, @OnHover={19}, @ApiRequestUrl={20}, @FormActionUrl={21}, @Price={22}, @CurrencyId={23}, @Commission={24}", WebSitePagesId, ComponentName, CrudType, Query, DatabaseId, RequestScheme, ResponseScheme, CreatedDate, ModifyDate, LastScanDate, UserId, UserAgent, LastValidDate, HasForm, ParentWebSitePartsId, HasMultiLanguage, DefaultLanguage, ScannedLanguage, HasFinishedSuccessfully, OnHover, ApiRequestUrl, FormActionUrl, Price, CurrencyId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsInsertsDefaultParams(ref int? WebSitePagesId, ref string ComponentName, ref int? CrudType, ref string Query, ref int? DatabaseId, ref string RequestScheme, ref string ResponseScheme, ref string CreatedDate, ref string ModifyDate, ref string LastScanDate, ref int? UserId, ref string UserAgent, ref string LastValidDate, ref bool? HasForm, ref int? ParentWebSitePartsId, ref string HasMultiLanguage, ref int? DefaultLanguage, ref int? ScannedLanguage, ref bool? HasFinishedSuccessfully, ref bool? OnHover, ref string ApiRequestUrl, ref string FormActionUrl, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission);

      partial void OnProjectPageComponentsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsInsert> items);  

      public async Task ExportProjectPageComponentsUpdatesToExcel(int? Id, int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsupdates/excel(Id={Id}, WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsupdates/excel(Id={Id}, WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPageComponentsUpdatesToCSV(int? Id, int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsupdates/csv(Id={Id}, WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsupdates/csv(Id={Id}, WebSitePagesId={WebSitePagesId}, ComponentName='{ComponentName}', CrudType={CrudType}, Query='{Query}', DatabaseId={DatabaseId}, RequestScheme='{RequestScheme}', ResponseScheme='{ResponseScheme}', CreatedDate='{CreatedDate}', ModifyDate='{ModifyDate}', LastScanDate='{LastScanDate}', UserId={UserId}, UserAgent='{UserAgent}', LastValidDate='{LastValidDate}', HasForm={HasForm}, ParentWebSitePartsId={ParentWebSitePartsId}, HasMultiLanguage='{HasMultiLanguage}', DefaultLanguage={DefaultLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, OnHover={OnHover}, ApiRequestUrl='{ApiRequestUrl}', FormActionUrl='{FormActionUrl}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsUpdate>> GetProjectPageComponentsUpdates(int? Id, int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null)
      {
          OnProjectPageComponentsUpdatesDefaultParams(ref Id, ref WebSitePagesId, ref ComponentName, ref CrudType, ref Query, ref DatabaseId, ref RequestScheme, ref ResponseScheme, ref CreatedDate, ref ModifyDate, ref LastScanDate, ref UserId, ref UserAgent, ref LastValidDate, ref HasForm, ref ParentWebSitePartsId, ref HasMultiLanguage, ref DefaultLanguage, ref ScannedLanguage, ref HasFinishedSuccessfully, ref OnHover, ref ApiRequestUrl, ref FormActionUrl, ref Price, ref CurrencyId, ref Commission);

          var items = Context.ProjectPageComponentsUpdates.FromSqlRaw("EXEC [dbo].[ProjectPageComponentsUpdate] @Id={0}, @WebSitePagesId={1}, @ComponentName={2}, @CrudType={3}, @Query={4}, @DatabaseId={5}, @RequestScheme={6}, @ResponseScheme={7}, @CreatedDate={8}, @ModifyDate={9}, @LastScanDate={10}, @UserId={11}, @UserAgent={12}, @LastValidDate={13}, @HasForm={14}, @ParentWebSitePartsId={15}, @HasMultiLanguage={16}, @DefaultLanguage={17}, @ScannedLanguage={18}, @HasFinishedSuccessfully={19}, @OnHover={20}, @ApiRequestUrl={21}, @FormActionUrl={22}, @Price={23}, @CurrencyId={24}, @Commission={25}", Id, WebSitePagesId, ComponentName, CrudType, Query, DatabaseId, RequestScheme, ResponseScheme, CreatedDate, ModifyDate, LastScanDate, UserId, UserAgent, LastValidDate, HasForm, ParentWebSitePartsId, HasMultiLanguage, DefaultLanguage, ScannedLanguage, HasFinishedSuccessfully, OnHover, ApiRequestUrl, FormActionUrl, Price, CurrencyId, Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPageComponentsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPageComponentsUpdatesDefaultParams(ref int? Id, ref int? WebSitePagesId, ref string ComponentName, ref int? CrudType, ref string Query, ref int? DatabaseId, ref string RequestScheme, ref string ResponseScheme, ref string CreatedDate, ref string ModifyDate, ref string LastScanDate, ref int? UserId, ref string UserAgent, ref string LastValidDate, ref bool? HasForm, ref int? ParentWebSitePartsId, ref string HasMultiLanguage, ref int? DefaultLanguage, ref int? ScannedLanguage, ref bool? HasFinishedSuccessfully, ref bool? OnHover, ref string ApiRequestUrl, ref string FormActionUrl, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission);

      partial void OnProjectPageComponentsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsUpdate> items);  

      public async Task ExportProjectPagesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetAll>> GetProjectPagesGetAlls(Query query = null)
      {
          OnProjectPagesGetAllsDefaultParams();

          var items = Context.ProjectPagesGetAlls.FromSqlRaw("EXEC [dbo].[ProjectPagesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetAllsDefaultParams();

      partial void OnProjectPagesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetAll> items);  

      public async Task ExportProjectPagesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCommission>> GetProjectPagesGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectPagesGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectPagesGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectPagesGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCommission> items);  

      public async Task ExportProjectPagesGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCreatedDate>> GetProjectPagesGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnProjectPagesGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ProjectPagesGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnProjectPagesGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCreatedDate> items);  

      public async Task ExportProjectPagesGetByCssCodesToExcel(string CssCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycsscodes/excel(CssCode='{CssCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycsscodes/excel(CssCode='{CssCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByCssCodesToCSV(string CssCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycsscodes/csv(CssCode='{CssCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycsscodes/csv(CssCode='{CssCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCssCode>> GetProjectPagesGetByCssCodes(string CssCode, Query query = null)
      {
          OnProjectPagesGetByCssCodesDefaultParams(ref CssCode);

          var items = Context.ProjectPagesGetByCssCodes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByCssCode] @CssCode={0}", CssCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByCssCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByCssCodesDefaultParams(ref string CssCode);

      partial void OnProjectPagesGetByCssCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCssCode> items);  

      public async Task ExportProjectPagesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCurrencyId>> GetProjectPagesGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectPagesGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectPagesGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectPagesGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCurrencyId> items);  

      public async Task ExportProjectPagesGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCustomCode>> GetProjectPagesGetByCustomCodes(string CustomCode, Query query = null)
      {
          OnProjectPagesGetByCustomCodesDefaultParams(ref CustomCode);

          var items = Context.ProjectPagesGetByCustomCodes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByCustomCode] @CustomCode={0}", CustomCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByCustomCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByCustomCodesDefaultParams(ref string CustomCode);

      partial void OnProjectPagesGetByCustomCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCustomCode> items);  

      public async Task ExportProjectPagesGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByDefaultLanguage>> GetProjectPagesGetByDefaultLanguages(int? DefaultLanguage, Query query = null)
      {
          OnProjectPagesGetByDefaultLanguagesDefaultParams(ref DefaultLanguage);

          var items = Context.ProjectPagesGetByDefaultLanguages.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByDefaultLanguage] @DefaultLanguage={0}", DefaultLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByDefaultLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByDefaultLanguagesDefaultParams(ref int? DefaultLanguage);

      partial void OnProjectPagesGetByDefaultLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByDefaultLanguage> items);  

      public async Task ExportProjectPagesGetByHasFinishedSuccessfulliesToExcel(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/excel(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/excel(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByHasFinishedSuccessfulliesToCSV(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/csv(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/csv(HasFinishedSuccessfully={HasFinishedSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasFinishedSuccessfully>> GetProjectPagesGetByHasFinishedSuccessfullies(bool? HasFinishedSuccessfully, Query query = null)
      {
          OnProjectPagesGetByHasFinishedSuccessfulliesDefaultParams(ref HasFinishedSuccessfully);

          var items = Context.ProjectPagesGetByHasFinishedSuccessfullies.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByHasFinishedSuccessfully] @HasFinishedSuccessfully={0}", HasFinishedSuccessfully).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByHasFinishedSuccessfulliesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByHasFinishedSuccessfulliesDefaultParams(ref bool? HasFinishedSuccessfully);

      partial void OnProjectPagesGetByHasFinishedSuccessfulliesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasFinishedSuccessfully> items);  

      public async Task ExportProjectPagesGetByHasMultipleLanguagesToExcel(bool? HasMultipleLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasmultiplelanguages/excel(HasMultipleLanguage={HasMultipleLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasmultiplelanguages/excel(HasMultipleLanguage={HasMultipleLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByHasMultipleLanguagesToCSV(bool? HasMultipleLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasmultiplelanguages/csv(HasMultipleLanguage={HasMultipleLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasmultiplelanguages/csv(HasMultipleLanguage={HasMultipleLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasMultipleLanguage>> GetProjectPagesGetByHasMultipleLanguages(bool? HasMultipleLanguage, Query query = null)
      {
          OnProjectPagesGetByHasMultipleLanguagesDefaultParams(ref HasMultipleLanguage);

          var items = Context.ProjectPagesGetByHasMultipleLanguages.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByHasMultipleLanguage] @HasMultipleLanguage={0}", HasMultipleLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByHasMultipleLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByHasMultipleLanguagesDefaultParams(ref bool? HasMultipleLanguage);

      partial void OnProjectPagesGetByHasMultipleLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasMultipleLanguage> items);  

      public async Task ExportProjectPagesGetByHasPaidsToExcel(bool? HasPaid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhaspaids/excel(HasPaid={HasPaid}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhaspaids/excel(HasPaid={HasPaid}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByHasPaidsToCSV(bool? HasPaid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhaspaids/csv(HasPaid={HasPaid}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhaspaids/csv(HasPaid={HasPaid}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasPaid>> GetProjectPagesGetByHasPaids(bool? HasPaid, Query query = null)
      {
          OnProjectPagesGetByHasPaidsDefaultParams(ref HasPaid);

          var items = Context.ProjectPagesGetByHasPaids.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByHasPaid] @HasPaid={0}", HasPaid).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByHasPaidsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByHasPaidsDefaultParams(ref bool? HasPaid);

      partial void OnProjectPagesGetByHasPaidsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasPaid> items);  

      public async Task ExportProjectPagesGetByHtmlCodesToExcel(string HtmlCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhtmlcodes/excel(HtmlCode='{HtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhtmlcodes/excel(HtmlCode='{HtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByHtmlCodesToCSV(string HtmlCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhtmlcodes/csv(HtmlCode='{HtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhtmlcodes/csv(HtmlCode='{HtmlCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHtmlCode>> GetProjectPagesGetByHtmlCodes(string HtmlCode, Query query = null)
      {
          OnProjectPagesGetByHtmlCodesDefaultParams(ref HtmlCode);

          var items = Context.ProjectPagesGetByHtmlCodes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByHtmlCode] @HtmlCode={0}", HtmlCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByHtmlCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByHtmlCodesDefaultParams(ref string HtmlCode);

      partial void OnProjectPagesGetByHtmlCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHtmlCode> items);  

      public async Task ExportProjectPagesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetById>> GetProjectPagesGetByIds(int? Id, Query query = null)
      {
          OnProjectPagesGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectPagesGetByIds.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectPagesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetById> items);  

      public async Task ExportProjectPagesGetByJsCodesToExcel(string JsCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjscodes/excel(JsCode='{JsCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjscodes/excel(JsCode='{JsCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByJsCodesToCSV(string JsCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjscodes/csv(JsCode='{JsCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjscodes/csv(JsCode='{JsCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsCode>> GetProjectPagesGetByJsCodes(string JsCode, Query query = null)
      {
          OnProjectPagesGetByJsCodesDefaultParams(ref JsCode);

          var items = Context.ProjectPagesGetByJsCodes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByJsCode] @JsCode={0}", JsCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByJsCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByJsCodesDefaultParams(ref string JsCode);

      partial void OnProjectPagesGetByJsCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsCode> items);  

      public async Task ExportProjectPagesGetByJsonCodesToExcel(string JsonCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjsoncodes/excel(JsonCode='{JsonCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjsoncodes/excel(JsonCode='{JsonCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByJsonCodesToCSV(string JsonCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjsoncodes/csv(JsonCode='{JsonCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjsoncodes/csv(JsonCode='{JsonCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsonCode>> GetProjectPagesGetByJsonCodes(string JsonCode, Query query = null)
      {
          OnProjectPagesGetByJsonCodesDefaultParams(ref JsonCode);

          var items = Context.ProjectPagesGetByJsonCodes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByJsonCode] @JsonCode={0}", JsonCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByJsonCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByJsonCodesDefaultParams(ref string JsonCode);

      partial void OnProjectPagesGetByJsonCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsonCode> items);  

      public async Task ExportProjectPagesGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbylastscandates/excel(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbylastscandates/csv(LastScanDate='{LastScanDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByLastScanDate>> GetProjectPagesGetByLastScanDates(string LastScanDate, Query query = null)
      {
          OnProjectPagesGetByLastScanDatesDefaultParams(ref LastScanDate);

          var items = Context.ProjectPagesGetByLastScanDates.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByLastScanDate] @LastScanDate={0}", LastScanDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByLastScanDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByLastScanDatesDefaultParams(ref string LastScanDate);

      partial void OnProjectPagesGetByLastScanDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByLastScanDate> items);  

      public async Task ExportProjectPagesGetByPageCycleEventDefinationsToExcel(string PageCycleEventDefination, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefinations/excel(PageCycleEventDefination='{PageCycleEventDefination}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefinations/excel(PageCycleEventDefination='{PageCycleEventDefination}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByPageCycleEventDefinationsToCSV(string PageCycleEventDefination, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefinations/csv(PageCycleEventDefination='{PageCycleEventDefination}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefinations/csv(PageCycleEventDefination='{PageCycleEventDefination}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination>> GetProjectPagesGetByPageCycleEventDefinations(string PageCycleEventDefination, Query query = null)
      {
          OnProjectPagesGetByPageCycleEventDefinationsDefaultParams(ref PageCycleEventDefination);

          var items = Context.ProjectPagesGetByPageCycleEventDefinations.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByPageCycleEventDefination] @PageCycleEventDefination={0}", PageCycleEventDefination).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByPageCycleEventDefinationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByPageCycleEventDefinationsDefaultParams(ref string PageCycleEventDefination);

      partial void OnProjectPagesGetByPageCycleEventDefinationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination> items);  

      public async Task ExportProjectPagesGetByPageCycleEventDefination1SToExcel(string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/excel(PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/excel(PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByPageCycleEventDefination1SToCSV(string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/csv(PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/csv(PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination1>> GetProjectPagesGetByPageCycleEventDefination1S(string PageCycleEventDefination1, Query query = null)
      {
          OnProjectPagesGetByPageCycleEventDefination1SDefaultParams(ref PageCycleEventDefination1);

          var items = Context.ProjectPagesGetByPageCycleEventDefination1S.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByPageCycleEventDefination1] @PageCycleEventDefination1={0}", PageCycleEventDefination1).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByPageCycleEventDefination1SInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByPageCycleEventDefination1SDefaultParams(ref string PageCycleEventDefination1);

      partial void OnProjectPagesGetByPageCycleEventDefination1SInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination1> items);  

      public async Task ExportProjectPagesGetByPageNamesToExcel(string PageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagenames/excel(PageName='{PageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagenames/excel(PageName='{PageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByPageNamesToCSV(string PageName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagenames/csv(PageName='{PageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagenames/csv(PageName='{PageName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageName>> GetProjectPagesGetByPageNames(string PageName, Query query = null)
      {
          OnProjectPagesGetByPageNamesDefaultParams(ref PageName);

          var items = Context.ProjectPagesGetByPageNames.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByPageName] @PageName={0}", PageName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByPageNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByPageNamesDefaultParams(ref string PageName);

      partial void OnProjectPagesGetByPageNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageName> items);  

      public async Task ExportProjectPagesGetByPageUrlsToExcel(string PageUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypageurls/excel(PageUrl='{PageUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypageurls/excel(PageUrl='{PageUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByPageUrlsToCSV(string PageUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypageurls/csv(PageUrl='{PageUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypageurls/csv(PageUrl='{PageUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageUrl>> GetProjectPagesGetByPageUrls(string PageUrl, Query query = null)
      {
          OnProjectPagesGetByPageUrlsDefaultParams(ref PageUrl);

          var items = Context.ProjectPagesGetByPageUrls.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByPageUrl] @PageUrl={0}", PageUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByPageUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByPageUrlsDefaultParams(ref string PageUrl);

      partial void OnProjectPagesGetByPageUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageUrl> items);  

      public async Task ExportProjectPagesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPrice>> GetProjectPagesGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectPagesGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectPagesGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectPagesGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPrice> items);  

      public async Task ExportProjectPagesGetByProjectIdsToExcel(int? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByProjectIdsToCSV(int? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByProjectId>> GetProjectPagesGetByProjectIds(int? ProjectId, Query query = null)
      {
          OnProjectPagesGetByProjectIdsDefaultParams(ref ProjectId);

          var items = Context.ProjectPagesGetByProjectIds.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByProjectId] @ProjectId={0}", ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByProjectIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByProjectIdsDefaultParams(ref int? ProjectId);

      partial void OnProjectPagesGetByProjectIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByProjectId> items);  

      public async Task ExportProjectPagesGetByReferralUrlsToExcel(string ReferralUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyreferralurls/excel(ReferralUrl='{ReferralUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyreferralurls/excel(ReferralUrl='{ReferralUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByReferralUrlsToCSV(string ReferralUrl, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyreferralurls/csv(ReferralUrl='{ReferralUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyreferralurls/csv(ReferralUrl='{ReferralUrl}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByReferralUrl>> GetProjectPagesGetByReferralUrls(string ReferralUrl, Query query = null)
      {
          OnProjectPagesGetByReferralUrlsDefaultParams(ref ReferralUrl);

          var items = Context.ProjectPagesGetByReferralUrls.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByReferralUrl] @ReferralUrl={0}", ReferralUrl).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByReferralUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByReferralUrlsDefaultParams(ref string ReferralUrl);

      partial void OnProjectPagesGetByReferralUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByReferralUrl> items);  

      public async Task ExportProjectPagesGetByRoutesToExcel(string Route, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyroutes/excel(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyroutes/excel(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByRoutesToCSV(string Route, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyroutes/csv(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyroutes/csv(Route='{Route}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByRoute>> GetProjectPagesGetByRoutes(string Route, Query query = null)
      {
          OnProjectPagesGetByRoutesDefaultParams(ref Route);

          var items = Context.ProjectPagesGetByRoutes.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByRoute] @Route={0}", Route).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByRoutesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByRoutesDefaultParams(ref string Route);

      partial void OnProjectPagesGetByRoutesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByRoute> items);  

      public async Task ExportProjectPagesGetByScannedLanguagesToExcel(int? ScannedLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyscannedlanguages/excel(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyscannedlanguages/excel(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByScannedLanguagesToCSV(int? ScannedLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyscannedlanguages/csv(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyscannedlanguages/csv(ScannedLanguage={ScannedLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByScannedLanguage>> GetProjectPagesGetByScannedLanguages(int? ScannedLanguage, Query query = null)
      {
          OnProjectPagesGetByScannedLanguagesDefaultParams(ref ScannedLanguage);

          var items = Context.ProjectPagesGetByScannedLanguages.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByScannedLanguage] @ScannedLanguage={0}", ScannedLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByScannedLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByScannedLanguagesDefaultParams(ref int? ScannedLanguage);

      partial void OnProjectPagesGetByScannedLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByScannedLanguage> items);  

      public async Task ExportProjectPagesGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByUserId>> GetProjectPagesGetByUserIds(int? UserId, Query query = null)
      {
          OnProjectPagesGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ProjectPagesGetByUserIds.FromSqlRaw("EXEC [dbo].[ProjectPagesGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnProjectPagesGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByUserId> items);  

      public async Task ExportProjectPagesGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetCreatedDateBetween>> GetProjectPagesGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnProjectPagesGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ProjectPagesGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPagesGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnProjectPagesGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetCreatedDateBetween> items);  

      public async Task ExportProjectPagesGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetlastscandatebetweens/excel(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetlastscandatebetweens/csv(LastScanDateStart='{LastScanDateStart}', LastScanDateEnd='{LastScanDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetLastScanDateBetween>> GetProjectPagesGetLastScanDateBetweens(string LastScanDateStart, string LastScanDateEnd, Query query = null)
      {
          OnProjectPagesGetLastScanDateBetweensDefaultParams(ref LastScanDateStart, ref LastScanDateEnd);

          var items = Context.ProjectPagesGetLastScanDateBetweens.FromSqlRaw("EXEC [dbo].[ProjectPagesGetLastScanDateBetween] @LastScanDateStart={0}, @LastScanDateEnd={1}", LastScanDateStart, LastScanDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesGetLastScanDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesGetLastScanDateBetweensDefaultParams(ref string LastScanDateStart, ref string LastScanDateEnd);

      partial void OnProjectPagesGetLastScanDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesGetLastScanDateBetween> items);  

      public async Task ExportProjectPagesInsertsToExcel(string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesinserts/excel(PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesinserts/excel(PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesInsertsToCSV(string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesinserts/csv(PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesinserts/csv(PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesInsert>> GetProjectPagesInserts(string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null)
      {
          OnProjectPagesInsertsDefaultParams(ref PageUrl, ref ProjectId, ref CreatedDate, ref LastScanDate, ref UserId, ref HasPaid, ref ReferralUrl, ref HtmlCode, ref JsonCode, ref PageName, ref Route, ref DefaultLanguage, ref HasMultipleLanguage, ref ScannedLanguage, ref HasFinishedSuccessfully, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref CssCode, ref JsCode, ref PageCycleEventDefination, ref PageCycleEventDefination1);

          var items = Context.ProjectPagesInserts.FromSqlRaw("EXEC [dbo].[ProjectPagesInsert] @PageUrl={0}, @ProjectId={1}, @CreatedDate={2}, @LastScanDate={3}, @UserId={4}, @HasPaid={5}, @ReferralUrl={6}, @HtmlCode={7}, @JsonCode={8}, @PageName={9}, @Route={10}, @DefaultLanguage={11}, @HasMultipleLanguage={12}, @ScannedLanguage={13}, @HasFinishedSuccessfully={14}, @Price={15}, @CurrencyId={16}, @Commission={17}, @CustomCode={18}, @CssCode={19}, @JsCode={20}, @PageCycleEventDefination={21}, @PageCycleEventDefination1={22}", PageUrl, ProjectId, CreatedDate, LastScanDate, UserId, HasPaid, ReferralUrl, HtmlCode, JsonCode, PageName, Route, DefaultLanguage, HasMultipleLanguage, ScannedLanguage, HasFinishedSuccessfully, Price, CurrencyId, Commission, CustomCode, CssCode, JsCode, PageCycleEventDefination, PageCycleEventDefination1).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesInsertsDefaultParams(ref string PageUrl, ref int? ProjectId, ref string CreatedDate, ref string LastScanDate, ref int? UserId, ref bool? HasPaid, ref string ReferralUrl, ref string HtmlCode, ref string JsonCode, ref string PageName, ref string Route, ref int? DefaultLanguage, ref bool? HasMultipleLanguage, ref int? ScannedLanguage, ref bool? HasFinishedSuccessfully, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string CssCode, ref string JsCode, ref string PageCycleEventDefination, ref string PageCycleEventDefination1);

      partial void OnProjectPagesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesInsert> items);  

      public async Task ExportProjectPagesUpdatesToExcel(int? Id, string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesupdates/excel(Id={Id}, PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesupdates/excel(Id={Id}, PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectPagesUpdatesToCSV(int? Id, string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesupdates/csv(Id={Id}, PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesupdates/csv(Id={Id}, PageUrl='{PageUrl}', ProjectId={ProjectId}, CreatedDate='{CreatedDate}', LastScanDate='{LastScanDate}', UserId={UserId}, HasPaid={HasPaid}, ReferralUrl='{ReferralUrl}', HtmlCode='{HtmlCode}', JsonCode='{JsonCode}', PageName='{PageName}', Route='{Route}', DefaultLanguage={DefaultLanguage}, HasMultipleLanguage={HasMultipleLanguage}, ScannedLanguage={ScannedLanguage}, HasFinishedSuccessfully={HasFinishedSuccessfully}, Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CssCode='{CssCode}', JsCode='{JsCode}', PageCycleEventDefination='{PageCycleEventDefination}', PageCycleEventDefination1='{PageCycleEventDefination1}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesUpdate>> GetProjectPagesUpdates(int? Id, string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null)
      {
          OnProjectPagesUpdatesDefaultParams(ref Id, ref PageUrl, ref ProjectId, ref CreatedDate, ref LastScanDate, ref UserId, ref HasPaid, ref ReferralUrl, ref HtmlCode, ref JsonCode, ref PageName, ref Route, ref DefaultLanguage, ref HasMultipleLanguage, ref ScannedLanguage, ref HasFinishedSuccessfully, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref CssCode, ref JsCode, ref PageCycleEventDefination, ref PageCycleEventDefination1);

          var items = Context.ProjectPagesUpdates.FromSqlRaw("EXEC [dbo].[ProjectPagesUpdate] @Id={0}, @PageUrl={1}, @ProjectId={2}, @CreatedDate={3}, @LastScanDate={4}, @UserId={5}, @HasPaid={6}, @ReferralUrl={7}, @HtmlCode={8}, @JsonCode={9}, @PageName={10}, @Route={11}, @DefaultLanguage={12}, @HasMultipleLanguage={13}, @ScannedLanguage={14}, @HasFinishedSuccessfully={15}, @Price={16}, @CurrencyId={17}, @Commission={18}, @CustomCode={19}, @CssCode={20}, @JsCode={21}, @PageCycleEventDefination={22}, @PageCycleEventDefination1={23}", Id, PageUrl, ProjectId, CreatedDate, LastScanDate, UserId, HasPaid, ReferralUrl, HtmlCode, JsonCode, PageName, Route, DefaultLanguage, HasMultipleLanguage, ScannedLanguage, HasFinishedSuccessfully, Price, CurrencyId, Commission, CustomCode, CssCode, JsCode, PageCycleEventDefination, PageCycleEventDefination1).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectPagesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectPagesUpdatesDefaultParams(ref int? Id, ref string PageUrl, ref int? ProjectId, ref string CreatedDate, ref string LastScanDate, ref int? UserId, ref bool? HasPaid, ref string ReferralUrl, ref string HtmlCode, ref string JsonCode, ref string PageName, ref string Route, ref int? DefaultLanguage, ref bool? HasMultipleLanguage, ref int? ScannedLanguage, ref bool? HasFinishedSuccessfully, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string CssCode, ref string JsCode, ref string PageCycleEventDefination, ref string PageCycleEventDefination1);

      partial void OnProjectPagesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectPagesUpdate> items);  

      public async Task ExportProjectsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetAll>> GetProjectsGetAlls(Query query = null)
      {
          OnProjectsGetAllsDefaultParams();

          var items = Context.ProjectsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetAllsDefaultParams();

      partial void OnProjectsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetAll> items);  

      public async Task ExportProjectsGetByConfigurationsToExcel(string Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconfigurations/excel(Configuration='{Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconfigurations/excel(Configuration='{Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByConfigurationsToCSV(string Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconfigurations/csv(Configuration='{Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconfigurations/csv(Configuration='{Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByConfiguration>> GetProjectsGetByConfigurations(string Configuration, Query query = null)
      {
          OnProjectsGetByConfigurationsDefaultParams(ref Configuration);

          var items = Context.ProjectsGetByConfigurations.FromSqlRaw("EXEC [dbo].[ProjectsGetByConfiguration] @Configuration={0}", Configuration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByConfigurationsDefaultParams(ref string Configuration);

      partial void OnProjectsGetByConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByConfiguration> items);  

      public async Task ExportProjectsGetByConnectionSettingsToExcel(object ConnectionSettings, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconnectionsettings/excel(ConnectionSettings={ConnectionSettings}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconnectionsettings/excel(ConnectionSettings={ConnectionSettings}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByConnectionSettingsToCSV(object ConnectionSettings, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconnectionsettings/csv(ConnectionSettings={ConnectionSettings}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconnectionsettings/csv(ConnectionSettings={ConnectionSettings}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByConnectionSetting>> GetProjectsGetByConnectionSettings(object ConnectionSettings, Query query = null)
      {
          OnProjectsGetByConnectionSettingsDefaultParams(ref ConnectionSettings);

          var items = Context.ProjectsGetByConnectionSettings.FromSqlRaw("EXEC [dbo].[ProjectsGetByConnectionSettings] @ConnectionSettings={0}", ConnectionSettings).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByConnectionSettingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByConnectionSettingsDefaultParams(ref object ConnectionSettings);

      partial void OnProjectsGetByConnectionSettingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByConnectionSetting> items);  

      public async Task ExportProjectsGetByDatabaseSchemasToExcel(string DatabaseSchemas, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbydatabaseschemas/excel(DatabaseSchemas='{DatabaseSchemas}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbydatabaseschemas/excel(DatabaseSchemas='{DatabaseSchemas}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByDatabaseSchemasToCSV(string DatabaseSchemas, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbydatabaseschemas/csv(DatabaseSchemas='{DatabaseSchemas}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbydatabaseschemas/csv(DatabaseSchemas='{DatabaseSchemas}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByDatabaseSchema>> GetProjectsGetByDatabaseSchemas(string DatabaseSchemas, Query query = null)
      {
          OnProjectsGetByDatabaseSchemasDefaultParams(ref DatabaseSchemas);

          var items = Context.ProjectsGetByDatabaseSchemas.FromSqlRaw("EXEC [dbo].[ProjectsGetByDatabaseSchemas] @DatabaseSchemas={0}", DatabaseSchemas).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByDatabaseSchemasInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByDatabaseSchemasDefaultParams(ref string DatabaseSchemas);

      partial void OnProjectsGetByDatabaseSchemasInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByDatabaseSchema> items);  

      public async Task ExportProjectsGetByEndpointsToExcel(object Endpoints, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyendpoints/excel(Endpoints={Endpoints}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyendpoints/excel(Endpoints={Endpoints}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByEndpointsToCSV(object Endpoints, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyendpoints/csv(Endpoints={Endpoints}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyendpoints/csv(Endpoints={Endpoints}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByEndpoint>> GetProjectsGetByEndpoints(object Endpoints, Query query = null)
      {
          OnProjectsGetByEndpointsDefaultParams(ref Endpoints);

          var items = Context.ProjectsGetByEndpoints.FromSqlRaw("EXEC [dbo].[ProjectsGetByEndpoints] @Endpoints={0}", Endpoints).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByEndpointsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByEndpointsDefaultParams(ref object Endpoints);

      partial void OnProjectsGetByEndpointsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByEndpoint> items);  

      public async Task ExportProjectsGetByEnumListsToExcel(object EnumLists, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyenumlists/excel(EnumLists={EnumLists}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyenumlists/excel(EnumLists={EnumLists}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByEnumListsToCSV(object EnumLists, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyenumlists/csv(EnumLists={EnumLists}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyenumlists/csv(EnumLists={EnumLists}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByEnumList>> GetProjectsGetByEnumLists(object EnumLists, Query query = null)
      {
          OnProjectsGetByEnumListsDefaultParams(ref EnumLists);

          var items = Context.ProjectsGetByEnumLists.FromSqlRaw("EXEC [dbo].[ProjectsGetByEnumLists] @EnumLists={0}", EnumLists).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByEnumListsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByEnumListsDefaultParams(ref object EnumLists);

      partial void OnProjectsGetByEnumListsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByEnumList> items);  

      public async Task ExportProjectsGetByGuidsToExcel(string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyguids/excel(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyguids/excel(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByGuidsToCSV(string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyguids/csv(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyguids/csv(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByGuid>> GetProjectsGetByGuids(string Guid, Query query = null)
      {
          OnProjectsGetByGuidsDefaultParams(ref Guid);

          var items = Context.ProjectsGetByGuids.FromSqlRaw("EXEC [dbo].[ProjectsGetByGuid] @Guid={0}", Guid).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByGuidsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByGuidsDefaultParams(ref string Guid);

      partial void OnProjectsGetByGuidsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByGuid> items);  

      public async Task ExportProjectsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetById>> GetProjectsGetByIds(int? Id, Query query = null)
      {
          OnProjectsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetById> items);  

      public async Task ExportProjectsGetByLanguageDefinationsToExcel(object LanguageDefinations, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylanguagedefinations/excel(LanguageDefinations={LanguageDefinations}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylanguagedefinations/excel(LanguageDefinations={LanguageDefinations}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByLanguageDefinationsToCSV(object LanguageDefinations, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylanguagedefinations/csv(LanguageDefinations={LanguageDefinations}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylanguagedefinations/csv(LanguageDefinations={LanguageDefinations}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByLanguageDefination>> GetProjectsGetByLanguageDefinations(object LanguageDefinations, Query query = null)
      {
          OnProjectsGetByLanguageDefinationsDefaultParams(ref LanguageDefinations);

          var items = Context.ProjectsGetByLanguageDefinations.FromSqlRaw("EXEC [dbo].[ProjectsGetByLanguageDefinations] @LanguageDefinations={0}", LanguageDefinations).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByLanguageDefinationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByLanguageDefinationsDefaultParams(ref object LanguageDefinations);

      partial void OnProjectsGetByLanguageDefinationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByLanguageDefination> items);  

      public async Task ExportProjectsGetByLookupsToExcel(object Lookups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylookups/excel(Lookups={Lookups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylookups/excel(Lookups={Lookups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByLookupsToCSV(object Lookups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylookups/csv(Lookups={Lookups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylookups/csv(Lookups={Lookups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByLookup>> GetProjectsGetByLookups(object Lookups, Query query = null)
      {
          OnProjectsGetByLookupsDefaultParams(ref Lookups);

          var items = Context.ProjectsGetByLookups.FromSqlRaw("EXEC [dbo].[ProjectsGetByLookups] @Lookups={0}", Lookups).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByLookupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByLookupsDefaultParams(ref object Lookups);

      partial void OnProjectsGetByLookupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByLookup> items);  

      public async Task ExportProjectsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByName>> GetProjectsGetByNames(string Name, Query query = null)
      {
          OnProjectsGetByNamesDefaultParams(ref Name);

          var items = Context.ProjectsGetByNames.FromSqlRaw("EXEC [dbo].[ProjectsGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByNamesDefaultParams(ref string Name);

      partial void OnProjectsGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByName> items);  

      public async Task ExportProjectsGetByRuleGroupsToExcel(string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyrulegroups/excel(RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyrulegroups/excel(RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByRuleGroupsToCSV(string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyrulegroups/csv(RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyrulegroups/csv(RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByRuleGroup>> GetProjectsGetByRuleGroups(string RuleGroups, Query query = null)
      {
          OnProjectsGetByRuleGroupsDefaultParams(ref RuleGroups);

          var items = Context.ProjectsGetByRuleGroups.FromSqlRaw("EXEC [dbo].[ProjectsGetByRuleGroups] @RuleGroups={0}", RuleGroups).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByRuleGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByRuleGroupsDefaultParams(ref string RuleGroups);

      partial void OnProjectsGetByRuleGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByRuleGroup> items);  

      public async Task ExportProjectsGetByTableGroupsToExcel(object TableGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytablegroups/excel(TableGroups={TableGroups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytablegroups/excel(TableGroups={TableGroups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByTableGroupsToCSV(object TableGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytablegroups/csv(TableGroups={TableGroups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytablegroups/csv(TableGroups={TableGroups}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByTableGroup>> GetProjectsGetByTableGroups(object TableGroups, Query query = null)
      {
          OnProjectsGetByTableGroupsDefaultParams(ref TableGroups);

          var items = Context.ProjectsGetByTableGroups.FromSqlRaw("EXEC [dbo].[ProjectsGetByTableGroups] @TableGroups={0}", TableGroups).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByTableGroupsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByTableGroupsDefaultParams(ref object TableGroups);

      partial void OnProjectsGetByTableGroupsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByTableGroup> items);  

      public async Task ExportProjectsGetByTablesToExcel(string Tables, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytables/excel(Tables='{Tables}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytables/excel(Tables='{Tables}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByTablesToCSV(string Tables, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytables/csv(Tables='{Tables}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytables/csv(Tables='{Tables}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByTable>> GetProjectsGetByTables(string Tables, Query query = null)
      {
          OnProjectsGetByTablesDefaultParams(ref Tables);

          var items = Context.ProjectsGetByTables.FromSqlRaw("EXEC [dbo].[ProjectsGetByTables] @Tables={0}", Tables).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByTablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByTablesDefaultParams(ref string Tables);

      partial void OnProjectsGetByTablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByTable> items);  

      public async Task ExportProjectsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByUserId>> GetProjectsGetByUserIds(int? UserId, Query query = null)
      {
          OnProjectsGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ProjectsGetByUserIds.FromSqlRaw("EXEC [dbo].[ProjectsGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnProjectsGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsGetByUserId> items);  

      public async Task ExportProjectsInsertsToExcel(int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsinserts/excel(UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsinserts/excel(UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsInsertsToCSV(int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsinserts/csv(UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsinserts/csv(UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsInsert>> GetProjectsInserts(int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null)
      {
          OnProjectsInsertsDefaultParams(ref UserId, ref Name, ref Guid, ref Tables, ref Configuration, ref TableGroups, ref EnumLists, ref Endpoints, ref LanguageDefinations, ref Lookups, ref ConnectionSettings, ref DatabaseSchemas, ref RuleGroups);

          var items = Context.ProjectsInserts.FromSqlRaw("EXEC [dbo].[ProjectsInsert] @UserId={0}, @Name={1}, @Guid={2}, @Tables={3}, @Configuration={4}, @TableGroups={5}, @EnumLists={6}, @Endpoints={7}, @LanguageDefinations={8}, @Lookups={9}, @ConnectionSettings={10}, @DatabaseSchemas={11}, @RuleGroups={12}", UserId, Name, Guid, Tables, Configuration, TableGroups, EnumLists, Endpoints, LanguageDefinations, Lookups, ConnectionSettings, DatabaseSchemas, RuleGroups).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsInsertsDefaultParams(ref int? UserId, ref string Name, ref string Guid, ref string Tables, ref string Configuration, ref object TableGroups, ref object EnumLists, ref object Endpoints, ref object LanguageDefinations, ref object Lookups, ref object ConnectionSettings, ref string DatabaseSchemas, ref string RuleGroups);

      partial void OnProjectsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsInsert> items);  

      public async Task ExportProjectsUpdatesToExcel(int? Id, int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsupdates/excel(Id={Id}, UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsupdates/excel(Id={Id}, UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectsUpdatesToCSV(int? Id, int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsupdates/csv(Id={Id}, UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsupdates/csv(Id={Id}, UserId={UserId}, Name='{Name}', Guid='{Guid}', Tables='{Tables}', Configuration='{Configuration}', TableGroups={TableGroups}, EnumLists={EnumLists}, Endpoints={Endpoints}, LanguageDefinations={LanguageDefinations}, Lookups={Lookups}, ConnectionSettings={ConnectionSettings}, DatabaseSchemas='{DatabaseSchemas}', RuleGroups='{RuleGroups}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsUpdate>> GetProjectsUpdates(int? Id, int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null)
      {
          OnProjectsUpdatesDefaultParams(ref Id, ref UserId, ref Name, ref Guid, ref Tables, ref Configuration, ref TableGroups, ref EnumLists, ref Endpoints, ref LanguageDefinations, ref Lookups, ref ConnectionSettings, ref DatabaseSchemas, ref RuleGroups);

          var items = Context.ProjectsUpdates.FromSqlRaw("EXEC [dbo].[ProjectsUpdate] @Id={0}, @UserId={1}, @Name={2}, @Guid={3}, @Tables={4}, @Configuration={5}, @TableGroups={6}, @EnumLists={7}, @Endpoints={8}, @LanguageDefinations={9}, @Lookups={10}, @ConnectionSettings={11}, @DatabaseSchemas={12}, @RuleGroups={13}", Id, UserId, Name, Guid, Tables, Configuration, TableGroups, EnumLists, Endpoints, LanguageDefinations, Lookups, ConnectionSettings, DatabaseSchemas, RuleGroups).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectsUpdatesDefaultParams(ref int? Id, ref int? UserId, ref string Name, ref string Guid, ref string Tables, ref string Configuration, ref object TableGroups, ref object EnumLists, ref object Endpoints, ref object LanguageDefinations, ref object Lookups, ref object ConnectionSettings, ref string DatabaseSchemas, ref string RuleGroups);

      partial void OnProjectsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectsUpdate> items);  

      public async Task ExportProjectTableColumnsGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetAll>> GetProjectTableColumnsGetAlls(Query query = null)
      {
          OnProjectTableColumnsGetAllsDefaultParams();

          var items = Context.ProjectTableColumnsGetAlls.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetAllsDefaultParams();

      partial void OnProjectTableColumnsGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetAll> items);  

      public async Task ExportProjectTableColumnsGetByCmsCreatePageConfigurationsToExcel(string CMSCreatePageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/excel(CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/excel(CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCmsCreatePageConfigurationsToCSV(string CMSCreatePageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/csv(CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/csv(CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsCreatePageConfiguration>> GetProjectTableColumnsGetByCmsCreatePageConfigurations(string CMSCreatePageConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByCmsCreatePageConfigurationsDefaultParams(ref CMSCreatePageConfiguration);

          var items = Context.ProjectTableColumnsGetByCmsCreatePageConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCMSCreatePageConfiguration] @CMSCreatePageConfiguration={0}", CMSCreatePageConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCmsCreatePageConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCmsCreatePageConfigurationsDefaultParams(ref string CMSCreatePageConfiguration);

      partial void OnProjectTableColumnsGetByCmsCreatePageConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsCreatePageConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByCmsDeletePageConfigurationsToExcel(string CMSDeletePageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/excel(CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/excel(CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCmsDeletePageConfigurationsToCSV(string CMSDeletePageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/csv(CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/csv(CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsDeletePageConfiguration>> GetProjectTableColumnsGetByCmsDeletePageConfigurations(string CMSDeletePageConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByCmsDeletePageConfigurationsDefaultParams(ref CMSDeletePageConfiguration);

          var items = Context.ProjectTableColumnsGetByCmsDeletePageConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCMSDeletePageConfiguration] @CMSDeletePageConfiguration={0}", CMSDeletePageConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCmsDeletePageConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCmsDeletePageConfigurationsDefaultParams(ref string CMSDeletePageConfiguration);

      partial void OnProjectTableColumnsGetByCmsDeletePageConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsDeletePageConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByCmsEditPageConfigurationsToExcel(string CMSEditPageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/excel(CMSEditPageConfiguration='{CMSEditPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/excel(CMSEditPageConfiguration='{CMSEditPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCmsEditPageConfigurationsToCSV(string CMSEditPageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/csv(CMSEditPageConfiguration='{CMSEditPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/csv(CMSEditPageConfiguration='{CMSEditPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsEditPageConfiguration>> GetProjectTableColumnsGetByCmsEditPageConfigurations(string CMSEditPageConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByCmsEditPageConfigurationsDefaultParams(ref CMSEditPageConfiguration);

          var items = Context.ProjectTableColumnsGetByCmsEditPageConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCMSEditPageConfiguration] @CMSEditPageConfiguration={0}", CMSEditPageConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCmsEditPageConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCmsEditPageConfigurationsDefaultParams(ref string CMSEditPageConfiguration);

      partial void OnProjectTableColumnsGetByCmsEditPageConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsEditPageConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByCmsListPageConfigurationsToExcel(string CMSListPageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/excel(CMSListPageConfiguration='{CMSListPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/excel(CMSListPageConfiguration='{CMSListPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCmsListPageConfigurationsToCSV(string CMSListPageConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/csv(CMSListPageConfiguration='{CMSListPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/csv(CMSListPageConfiguration='{CMSListPageConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsListPageConfiguration>> GetProjectTableColumnsGetByCmsListPageConfigurations(string CMSListPageConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByCmsListPageConfigurationsDefaultParams(ref CMSListPageConfiguration);

          var items = Context.ProjectTableColumnsGetByCmsListPageConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCMSListPageConfiguration] @CMSListPageConfiguration={0}", CMSListPageConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCmsListPageConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCmsListPageConfigurationsDefaultParams(ref string CMSListPageConfiguration);

      partial void OnProjectTableColumnsGetByCmsListPageConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsListPageConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnames/excel(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnames/csv(ColumnName='{ColumnName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnName>> GetProjectTableColumnsGetByColumnNames(string ColumnName, Query query = null)
      {
          OnProjectTableColumnsGetByColumnNamesDefaultParams(ref ColumnName);

          var items = Context.ProjectTableColumnsGetByColumnNames.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByColumnName] @ColumnName={0}", ColumnName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByColumnNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByColumnNamesDefaultParams(ref string ColumnName);

      partial void OnProjectTableColumnsGetByColumnNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnName> items);  

      public async Task ExportProjectTableColumnsGetByColumnNameCryptosToExcel(string ColumnNameCrypto, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/excel(ColumnNameCrypto='{ColumnNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/excel(ColumnNameCrypto='{ColumnNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByColumnNameCryptosToCSV(string ColumnNameCrypto, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/csv(ColumnNameCrypto='{ColumnNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/csv(ColumnNameCrypto='{ColumnNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameCrypto>> GetProjectTableColumnsGetByColumnNameCryptos(string ColumnNameCrypto, Query query = null)
      {
          OnProjectTableColumnsGetByColumnNameCryptosDefaultParams(ref ColumnNameCrypto);

          var items = Context.ProjectTableColumnsGetByColumnNameCryptos.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByColumnNameCrypto] @ColumnNameCrypto={0}", ColumnNameCrypto).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByColumnNameCryptosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByColumnNameCryptosDefaultParams(ref string ColumnNameCrypto);

      partial void OnProjectTableColumnsGetByColumnNameCryptosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameCrypto> items);  

      public async Task ExportProjectTableColumnsGetByColumnNameI18SToExcel(string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/excel(ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/excel(ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByColumnNameI18SToCSV(string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/csv(ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/csv(ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameI18>> GetProjectTableColumnsGetByColumnNameI18S(string ColumnNameI18, Query query = null)
      {
          OnProjectTableColumnsGetByColumnNameI18SDefaultParams(ref ColumnNameI18);

          var items = Context.ProjectTableColumnsGetByColumnNameI18S.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByColumnNameI18] @ColumnNameI18={0}", ColumnNameI18).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByColumnNameI18SInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByColumnNameI18SDefaultParams(ref string ColumnNameI18);

      partial void OnProjectTableColumnsGetByColumnNameI18SInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameI18> items);  

      public async Task ExportProjectTableColumnsGetByColumnsConfigurationsToExcel(string ColumnsConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/excel(ColumnsConfiguration='{ColumnsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/excel(ColumnsConfiguration='{ColumnsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByColumnsConfigurationsToCSV(string ColumnsConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/csv(ColumnsConfiguration='{ColumnsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/csv(ColumnsConfiguration='{ColumnsConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnsConfiguration>> GetProjectTableColumnsGetByColumnsConfigurations(string ColumnsConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByColumnsConfigurationsDefaultParams(ref ColumnsConfiguration);

          var items = Context.ProjectTableColumnsGetByColumnsConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByColumnsConfiguration] @ColumnsConfiguration={0}", ColumnsConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByColumnsConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByColumnsConfigurationsDefaultParams(ref string ColumnsConfiguration);

      partial void OnProjectTableColumnsGetByColumnsConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnsConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComment>> GetProjectTableColumnsGetByComments(string Comment, Query query = null)
      {
          OnProjectTableColumnsGetByCommentsDefaultParams(ref Comment);

          var items = Context.ProjectTableColumnsGetByComments.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByComment] @Comment={0}", Comment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCommentsDefaultParams(ref string Comment);

      partial void OnProjectTableColumnsGetByCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComment> items);  

      public async Task ExportProjectTableColumnsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCommission>> GetProjectTableColumnsGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectTableColumnsGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectTableColumnsGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectTableColumnsGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCommission> items);  

      public async Task ExportProjectTableColumnsGetByComponentConfigurationsToExcel(string ComponentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/excel(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/excel(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByComponentConfigurationsToCSV(string ComponentConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/csv(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/csv(ComponentConfiguration='{ComponentConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComponentConfiguration>> GetProjectTableColumnsGetByComponentConfigurations(string ComponentConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByComponentConfigurationsDefaultParams(ref ComponentConfiguration);

          var items = Context.ProjectTableColumnsGetByComponentConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByComponentConfiguration] @ComponentConfiguration={0}", ComponentConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByComponentConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByComponentConfigurationsDefaultParams(ref string ComponentConfiguration);

      partial void OnProjectTableColumnsGetByComponentConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComponentConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCurrencyId>> GetProjectTableColumnsGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectTableColumnsGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectTableColumnsGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectTableColumnsGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCurrencyId> items);  

      public async Task ExportProjectTableColumnsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCustomCode>> GetProjectTableColumnsGetByCustomCodes(string CustomCode, Query query = null)
      {
          OnProjectTableColumnsGetByCustomCodesDefaultParams(ref CustomCode);

          var items = Context.ProjectTableColumnsGetByCustomCodes.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByCustomCode] @CustomCode={0}", CustomCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByCustomCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByCustomCodesDefaultParams(ref string CustomCode);

      partial void OnProjectTableColumnsGetByCustomCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCustomCode> items);  

      public async Task ExportProjectTableColumnsGetByDatabaseCreateMigrationScriptsToExcel(string DatabaseCreateMigrationScript, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/excel(DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/excel(DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByDatabaseCreateMigrationScriptsToCSV(string DatabaseCreateMigrationScript, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/csv(DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/csv(DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDatabaseCreateMigrationScript>> GetProjectTableColumnsGetByDatabaseCreateMigrationScripts(string DatabaseCreateMigrationScript, Query query = null)
      {
          OnProjectTableColumnsGetByDatabaseCreateMigrationScriptsDefaultParams(ref DatabaseCreateMigrationScript);

          var items = Context.ProjectTableColumnsGetByDatabaseCreateMigrationScripts.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByDatabaseCreateMigrationScript] @DatabaseCreateMigrationScript={0}", DatabaseCreateMigrationScript).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByDatabaseCreateMigrationScriptsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByDatabaseCreateMigrationScriptsDefaultParams(ref string DatabaseCreateMigrationScript);

      partial void OnProjectTableColumnsGetByDatabaseCreateMigrationScriptsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDatabaseCreateMigrationScript> items);  

      public async Task ExportProjectTableColumnsGetByDataTypeMappingsToExcel(string DataTypeMapping, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatatypemappings/excel(DataTypeMapping='{DataTypeMapping}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatatypemappings/excel(DataTypeMapping='{DataTypeMapping}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByDataTypeMappingsToCSV(string DataTypeMapping, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatatypemappings/csv(DataTypeMapping='{DataTypeMapping}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatatypemappings/csv(DataTypeMapping='{DataTypeMapping}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDataTypeMapping>> GetProjectTableColumnsGetByDataTypeMappings(string DataTypeMapping, Query query = null)
      {
          OnProjectTableColumnsGetByDataTypeMappingsDefaultParams(ref DataTypeMapping);

          var items = Context.ProjectTableColumnsGetByDataTypeMappings.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByDataTypeMapping] @DataTypeMapping={0}", DataTypeMapping).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByDataTypeMappingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByDataTypeMappingsDefaultParams(ref string DataTypeMapping);

      partial void OnProjectTableColumnsGetByDataTypeMappingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDataTypeMapping> items);  

      public async Task ExportProjectTableColumnsGetByDbTypesToExcel(string DbType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydbtypes/excel(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydbtypes/excel(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByDbTypesToCSV(string DbType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydbtypes/csv(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydbtypes/csv(DbType='{DbType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDbType>> GetProjectTableColumnsGetByDbTypes(string DbType, Query query = null)
      {
          OnProjectTableColumnsGetByDbTypesDefaultParams(ref DbType);

          var items = Context.ProjectTableColumnsGetByDbTypes.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByDbType] @DbType={0}", DbType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByDbTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByDbTypesDefaultParams(ref string DbType);

      partial void OnProjectTableColumnsGetByDbTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDbType> items);  

      public async Task ExportProjectTableColumnsGetByDefaultValuesToExcel(string DefaultValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydefaultvalues/excel(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydefaultvalues/excel(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByDefaultValuesToCSV(string DefaultValue, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydefaultvalues/csv(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydefaultvalues/csv(DefaultValue='{DefaultValue}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDefaultValue>> GetProjectTableColumnsGetByDefaultValues(string DefaultValue, Query query = null)
      {
          OnProjectTableColumnsGetByDefaultValuesDefaultParams(ref DefaultValue);

          var items = Context.ProjectTableColumnsGetByDefaultValues.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByDefaultValue] @DefaultValue={0}", DefaultValue).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByDefaultValuesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByDefaultValuesDefaultParams(ref string DefaultValue);

      partial void OnProjectTableColumnsGetByDefaultValuesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDefaultValue> items);  

      public async Task ExportProjectTableColumnsGetByDependencyConfigurationsToExcel(string DependencyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/excel(DependencyConfiguration='{DependencyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/excel(DependencyConfiguration='{DependencyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByDependencyConfigurationsToCSV(string DependencyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/csv(DependencyConfiguration='{DependencyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/csv(DependencyConfiguration='{DependencyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDependencyConfiguration>> GetProjectTableColumnsGetByDependencyConfigurations(string DependencyConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByDependencyConfigurationsDefaultParams(ref DependencyConfiguration);

          var items = Context.ProjectTableColumnsGetByDependencyConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByDependencyConfiguration] @DependencyConfiguration={0}", DependencyConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByDependencyConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByDependencyConfigurationsDefaultParams(ref string DependencyConfiguration);

      partial void OnProjectTableColumnsGetByDependencyConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDependencyConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByExtrasToExcel(string Extra, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyextras/excel(Extra='{Extra}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyextras/excel(Extra='{Extra}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByExtrasToCSV(string Extra, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyextras/csv(Extra='{Extra}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyextras/csv(Extra='{Extra}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByExtra>> GetProjectTableColumnsGetByExtras(string Extra, Query query = null)
      {
          OnProjectTableColumnsGetByExtrasDefaultParams(ref Extra);

          var items = Context.ProjectTableColumnsGetByExtras.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByExtra] @Extra={0}", Extra).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByExtrasInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByExtrasDefaultParams(ref string Extra);

      partial void OnProjectTableColumnsGetByExtrasInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByExtra> items);  

      public async Task ExportProjectTableColumnsGetByFkDetailsToExcel(string FKDetails, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyfkdetails/excel(FKDetails='{FKDetails}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyfkdetails/excel(FKDetails='{FKDetails}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByFkDetailsToCSV(string FKDetails, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyfkdetails/csv(FKDetails='{FKDetails}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyfkdetails/csv(FKDetails='{FKDetails}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByFkDetail>> GetProjectTableColumnsGetByFkDetails(string FKDetails, Query query = null)
      {
          OnProjectTableColumnsGetByFkDetailsDefaultParams(ref FKDetails);

          var items = Context.ProjectTableColumnsGetByFkDetails.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByFKDetails] @FKDetails={0}", FKDetails).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByFkDetailsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByFkDetailsDefaultParams(ref string FKDetails);

      partial void OnProjectTableColumnsGetByFkDetailsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByFkDetail> items);  

      public async Task ExportProjectTableColumnsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetById>> GetProjectTableColumnsGetByIds(int? Id, Query query = null)
      {
          OnProjectTableColumnsGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectTableColumnsGetByIds.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectTableColumnsGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetById> items);  

      public async Task ExportProjectTableColumnsGetByInputTypesToExcel(int? InputType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyinputtypes/excel(InputType={InputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyinputtypes/excel(InputType={InputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByInputTypesToCSV(int? InputType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyinputtypes/csv(InputType={InputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyinputtypes/csv(InputType={InputType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByInputType>> GetProjectTableColumnsGetByInputTypes(int? InputType, Query query = null)
      {
          OnProjectTableColumnsGetByInputTypesDefaultParams(ref InputType);

          var items = Context.ProjectTableColumnsGetByInputTypes.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByInputType] @InputType={0}", InputType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByInputTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByInputTypesDefaultParams(ref int? InputType);

      partial void OnProjectTableColumnsGetByInputTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByInputType> items);  

      public async Task ExportProjectTableColumnsGetByIsNullablesToExcel(bool? IsNullable, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisnullables/excel(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisnullables/excel(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByIsNullablesToCSV(bool? IsNullable, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisnullables/csv(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisnullables/csv(IsNullable={IsNullable}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsNullable>> GetProjectTableColumnsGetByIsNullables(bool? IsNullable, Query query = null)
      {
          OnProjectTableColumnsGetByIsNullablesDefaultParams(ref IsNullable);

          var items = Context.ProjectTableColumnsGetByIsNullables.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByIsNullable] @IsNullable={0}", IsNullable).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByIsNullablesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByIsNullablesDefaultParams(ref bool? IsNullable);

      partial void OnProjectTableColumnsGetByIsNullablesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsNullable> items);  

      public async Task ExportProjectTableColumnsGetByIsPrimariesToExcel(bool? IsPrimary, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisprimaries/excel(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisprimaries/excel(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByIsPrimariesToCSV(bool? IsPrimary, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisprimaries/csv(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisprimaries/csv(IsPrimary={IsPrimary}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsPrimary>> GetProjectTableColumnsGetByIsPrimaries(bool? IsPrimary, Query query = null)
      {
          OnProjectTableColumnsGetByIsPrimariesDefaultParams(ref IsPrimary);

          var items = Context.ProjectTableColumnsGetByIsPrimaries.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByIsPrimary] @IsPrimary={0}", IsPrimary).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByIsPrimariesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByIsPrimariesDefaultParams(ref bool? IsPrimary);

      partial void OnProjectTableColumnsGetByIsPrimariesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsPrimary> items);  

      public async Task ExportProjectTableColumnsGetByKeyConfigurationsToExcel(string KeyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/excel(KeyConfiguration='{KeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/excel(KeyConfiguration='{KeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByKeyConfigurationsToCSV(string KeyConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/csv(KeyConfiguration='{KeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/csv(KeyConfiguration='{KeyConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByKeyConfiguration>> GetProjectTableColumnsGetByKeyConfigurations(string KeyConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByKeyConfigurationsDefaultParams(ref KeyConfiguration);

          var items = Context.ProjectTableColumnsGetByKeyConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByKeyConfiguration] @KeyConfiguration={0}", KeyConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByKeyConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByKeyConfigurationsDefaultParams(ref string KeyConfiguration);

      partial void OnProjectTableColumnsGetByKeyConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByKeyConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByMappingConfigurationsToExcel(string MappingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/excel(MappingConfiguration='{MappingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/excel(MappingConfiguration='{MappingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByMappingConfigurationsToCSV(string MappingConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/csv(MappingConfiguration='{MappingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/csv(MappingConfiguration='{MappingConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMappingConfiguration>> GetProjectTableColumnsGetByMappingConfigurations(string MappingConfiguration, Query query = null)
      {
          OnProjectTableColumnsGetByMappingConfigurationsDefaultParams(ref MappingConfiguration);

          var items = Context.ProjectTableColumnsGetByMappingConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByMappingConfiguration] @MappingConfiguration={0}", MappingConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByMappingConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByMappingConfigurationsDefaultParams(ref string MappingConfiguration);

      partial void OnProjectTableColumnsGetByMappingConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMappingConfiguration> items);  

      public async Task ExportProjectTableColumnsGetByMaxLengthsToExcel(string MaxLength, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymaxlengths/excel(MaxLength='{MaxLength}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymaxlengths/excel(MaxLength='{MaxLength}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByMaxLengthsToCSV(string MaxLength, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymaxlengths/csv(MaxLength='{MaxLength}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymaxlengths/csv(MaxLength='{MaxLength}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMaxLength>> GetProjectTableColumnsGetByMaxLengths(string MaxLength, Query query = null)
      {
          OnProjectTableColumnsGetByMaxLengthsDefaultParams(ref MaxLength);

          var items = Context.ProjectTableColumnsGetByMaxLengths.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByMaxLength] @MaxLength={0}", MaxLength).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByMaxLengthsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByMaxLengthsDefaultParams(ref string MaxLength);

      partial void OnProjectTableColumnsGetByMaxLengthsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMaxLength> items);  

      public async Task ExportProjectTableColumnsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrice>> GetProjectTableColumnsGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectTableColumnsGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectTableColumnsGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectTableColumnsGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrice> items);  

      public async Task ExportProjectTableColumnsGetByPrimitiveTypesToExcel(string PrimitiveType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/excel(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/excel(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByPrimitiveTypesToCSV(string PrimitiveType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/csv(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/csv(PrimitiveType='{PrimitiveType}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrimitiveType>> GetProjectTableColumnsGetByPrimitiveTypes(string PrimitiveType, Query query = null)
      {
          OnProjectTableColumnsGetByPrimitiveTypesDefaultParams(ref PrimitiveType);

          var items = Context.ProjectTableColumnsGetByPrimitiveTypes.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByPrimitiveType] @PrimitiveType={0}", PrimitiveType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByPrimitiveTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByPrimitiveTypesDefaultParams(ref string PrimitiveType);

      partial void OnProjectTableColumnsGetByPrimitiveTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrimitiveType> items);  

      public async Task ExportProjectTableColumnsGetByTableIdsToExcel(int? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytableids/excel(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByTableIdsToCSV(int? TableId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytableids/csv(TableId={TableId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableId>> GetProjectTableColumnsGetByTableIds(int? TableId, Query query = null)
      {
          OnProjectTableColumnsGetByTableIdsDefaultParams(ref TableId);

          var items = Context.ProjectTableColumnsGetByTableIds.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByTableId] @TableId={0}", TableId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByTableIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByTableIdsDefaultParams(ref int? TableId);

      partial void OnProjectTableColumnsGetByTableIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableId> items);  

      public async Task ExportProjectTableColumnsGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableName>> GetProjectTableColumnsGetByTableNames(string TableName, Query query = null)
      {
          OnProjectTableColumnsGetByTableNamesDefaultParams(ref TableName);

          var items = Context.ProjectTableColumnsGetByTableNames.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsGetByTableNamesDefaultParams(ref string TableName);

      partial void OnProjectTableColumnsGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableName> items);  

      public async Task ExportProjectTableColumnsInsertsToExcel(string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsinserts/excel(ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsinserts/excel(ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsInsertsToCSV(string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsinserts/csv(ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsinserts/csv(ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsInsert>> GetProjectTableColumnsInserts(string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null)
      {
          OnProjectTableColumnsInsertsDefaultParams(ref ColumnName, ref ColumnNameCrypto, ref DbType, ref PrimitiveType, ref DefaultValue, ref IsNullable, ref MaxLength, ref FKDetails, ref TableName, ref TableId, ref IsPrimary, ref InputType, ref KeyConfiguration, ref Extra, ref Comment, ref DataTypeMapping, ref ColumnsConfiguration, ref MappingConfiguration, ref DependencyConfiguration, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref ComponentConfiguration, ref CMSListPageConfiguration, ref CMSEditPageConfiguration, ref CMSCreatePageConfiguration, ref CMSDeletePageConfiguration, ref DatabaseCreateMigrationScript, ref ColumnNameI18);

          var items = Context.ProjectTableColumnsInserts.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsInsert] @ColumnName={0}, @ColumnNameCrypto={1}, @DbType={2}, @PrimitiveType={3}, @DefaultValue={4}, @IsNullable={5}, @MaxLength={6}, @FKDetails={7}, @TableName={8}, @TableId={9}, @IsPrimary={10}, @InputType={11}, @KeyConfiguration={12}, @Extra={13}, @Comment={14}, @DataTypeMapping={15}, @ColumnsConfiguration={16}, @MappingConfiguration={17}, @DependencyConfiguration={18}, @Price={19}, @CurrencyId={20}, @Commission={21}, @CustomCode={22}, @ComponentConfiguration={23}, @CMSListPageConfiguration={24}, @CMSEditPageConfiguration={25}, @CMSCreatePageConfiguration={26}, @CMSDeletePageConfiguration={27}, @DatabaseCreateMigrationScript={28}, @ColumnNameI18={29}", ColumnName, ColumnNameCrypto, DbType, PrimitiveType, DefaultValue, IsNullable, MaxLength, FKDetails, TableName, TableId, IsPrimary, InputType, KeyConfiguration, Extra, Comment, DataTypeMapping, ColumnsConfiguration, MappingConfiguration, DependencyConfiguration, Price, CurrencyId, Commission, CustomCode, ComponentConfiguration, CMSListPageConfiguration, CMSEditPageConfiguration, CMSCreatePageConfiguration, CMSDeletePageConfiguration, DatabaseCreateMigrationScript, ColumnNameI18).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsInsertsDefaultParams(ref string ColumnName, ref string ColumnNameCrypto, ref string DbType, ref string PrimitiveType, ref string DefaultValue, ref bool? IsNullable, ref string MaxLength, ref string FKDetails, ref string TableName, ref int? TableId, ref bool? IsPrimary, ref int? InputType, ref string KeyConfiguration, ref string Extra, ref string Comment, ref string DataTypeMapping, ref string ColumnsConfiguration, ref string MappingConfiguration, ref string DependencyConfiguration, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string ComponentConfiguration, ref string CMSListPageConfiguration, ref string CMSEditPageConfiguration, ref string CMSCreatePageConfiguration, ref string CMSDeletePageConfiguration, ref string DatabaseCreateMigrationScript, ref string ColumnNameI18);

      partial void OnProjectTableColumnsInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsInsert> items);  

      public async Task ExportProjectTableColumnsUpdatesToExcel(int? Id, string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsupdates/excel(Id={Id}, ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsupdates/excel(Id={Id}, ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTableColumnsUpdatesToCSV(int? Id, string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsupdates/csv(Id={Id}, ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsupdates/csv(Id={Id}, ColumnName='{ColumnName}', ColumnNameCrypto='{ColumnNameCrypto}', DbType='{DbType}', PrimitiveType='{PrimitiveType}', DefaultValue='{DefaultValue}', IsNullable={IsNullable}, MaxLength='{MaxLength}', FKDetails='{FKDetails}', TableName='{TableName}', TableId={TableId}, IsPrimary={IsPrimary}, InputType={InputType}, KeyConfiguration='{KeyConfiguration}', Extra='{Extra}', Comment='{Comment}', DataTypeMapping='{DataTypeMapping}', ColumnsConfiguration='{ColumnsConfiguration}', MappingConfiguration='{MappingConfiguration}', DependencyConfiguration='{DependencyConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', ComponentConfiguration='{ComponentConfiguration}', CMSListPageConfiguration='{CMSListPageConfiguration}', CMSEditPageConfiguration='{CMSEditPageConfiguration}', CMSCreatePageConfiguration='{CMSCreatePageConfiguration}', CMSDeletePageConfiguration='{CMSDeletePageConfiguration}', DatabaseCreateMigrationScript='{DatabaseCreateMigrationScript}', ColumnNameI18='{ColumnNameI18}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsUpdate>> GetProjectTableColumnsUpdates(int? Id, string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null)
      {
          OnProjectTableColumnsUpdatesDefaultParams(ref Id, ref ColumnName, ref ColumnNameCrypto, ref DbType, ref PrimitiveType, ref DefaultValue, ref IsNullable, ref MaxLength, ref FKDetails, ref TableName, ref TableId, ref IsPrimary, ref InputType, ref KeyConfiguration, ref Extra, ref Comment, ref DataTypeMapping, ref ColumnsConfiguration, ref MappingConfiguration, ref DependencyConfiguration, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref ComponentConfiguration, ref CMSListPageConfiguration, ref CMSEditPageConfiguration, ref CMSCreatePageConfiguration, ref CMSDeletePageConfiguration, ref DatabaseCreateMigrationScript, ref ColumnNameI18);

          var items = Context.ProjectTableColumnsUpdates.FromSqlRaw("EXEC [dbo].[ProjectTableColumnsUpdate] @Id={0}, @ColumnName={1}, @ColumnNameCrypto={2}, @DbType={3}, @PrimitiveType={4}, @DefaultValue={5}, @IsNullable={6}, @MaxLength={7}, @FKDetails={8}, @TableName={9}, @TableId={10}, @IsPrimary={11}, @InputType={12}, @KeyConfiguration={13}, @Extra={14}, @Comment={15}, @DataTypeMapping={16}, @ColumnsConfiguration={17}, @MappingConfiguration={18}, @DependencyConfiguration={19}, @Price={20}, @CurrencyId={21}, @Commission={22}, @CustomCode={23}, @ComponentConfiguration={24}, @CMSListPageConfiguration={25}, @CMSEditPageConfiguration={26}, @CMSCreatePageConfiguration={27}, @CMSDeletePageConfiguration={28}, @DatabaseCreateMigrationScript={29}, @ColumnNameI18={30}", Id, ColumnName, ColumnNameCrypto, DbType, PrimitiveType, DefaultValue, IsNullable, MaxLength, FKDetails, TableName, TableId, IsPrimary, InputType, KeyConfiguration, Extra, Comment, DataTypeMapping, ColumnsConfiguration, MappingConfiguration, DependencyConfiguration, Price, CurrencyId, Commission, CustomCode, ComponentConfiguration, CMSListPageConfiguration, CMSEditPageConfiguration, CMSCreatePageConfiguration, CMSDeletePageConfiguration, DatabaseCreateMigrationScript, ColumnNameI18).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTableColumnsUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTableColumnsUpdatesDefaultParams(ref int? Id, ref string ColumnName, ref string ColumnNameCrypto, ref string DbType, ref string PrimitiveType, ref string DefaultValue, ref bool? IsNullable, ref string MaxLength, ref string FKDetails, ref string TableName, ref int? TableId, ref bool? IsPrimary, ref int? InputType, ref string KeyConfiguration, ref string Extra, ref string Comment, ref string DataTypeMapping, ref string ColumnsConfiguration, ref string MappingConfiguration, ref string DependencyConfiguration, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string ComponentConfiguration, ref string CMSListPageConfiguration, ref string CMSEditPageConfiguration, ref string CMSCreatePageConfiguration, ref string CMSDeletePageConfiguration, ref string DatabaseCreateMigrationScript, ref string ColumnNameI18);

      partial void OnProjectTableColumnsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsUpdate> items);  

      public async Task ExportProjectTablesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetAll>> GetProjectTablesGetAlls(Query query = null)
      {
          OnProjectTablesGetAllsDefaultParams();

          var items = Context.ProjectTablesGetAlls.FromSqlRaw("EXEC [dbo].[ProjectTablesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetAllsDefaultParams();

      partial void OnProjectTablesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetAll> items);  

      public async Task ExportProjectTablesGetByApiConfigurationsToExcel(string ApiConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyapiconfigurations/excel(ApiConfiguration='{ApiConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyapiconfigurations/excel(ApiConfiguration='{ApiConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByApiConfigurationsToCSV(string ApiConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyapiconfigurations/csv(ApiConfiguration='{ApiConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyapiconfigurations/csv(ApiConfiguration='{ApiConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByApiConfiguration>> GetProjectTablesGetByApiConfigurations(string ApiConfiguration, Query query = null)
      {
          OnProjectTablesGetByApiConfigurationsDefaultParams(ref ApiConfiguration);

          var items = Context.ProjectTablesGetByApiConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByApiConfiguration] @ApiConfiguration={0}", ApiConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByApiConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByApiConfigurationsDefaultParams(ref string ApiConfiguration);

      partial void OnProjectTablesGetByApiConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByApiConfiguration> items);  

      public async Task ExportProjectTablesGetByAuditConfigurationsToExcel(string AuditConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyauditconfigurations/excel(AuditConfiguration='{AuditConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyauditconfigurations/excel(AuditConfiguration='{AuditConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByAuditConfigurationsToCSV(string AuditConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyauditconfigurations/csv(AuditConfiguration='{AuditConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyauditconfigurations/csv(AuditConfiguration='{AuditConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByAuditConfiguration>> GetProjectTablesGetByAuditConfigurations(string AuditConfiguration, Query query = null)
      {
          OnProjectTablesGetByAuditConfigurationsDefaultParams(ref AuditConfiguration);

          var items = Context.ProjectTablesGetByAuditConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByAuditConfiguration] @AuditConfiguration={0}", AuditConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByAuditConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByAuditConfigurationsDefaultParams(ref string AuditConfiguration);

      partial void OnProjectTablesGetByAuditConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByAuditConfiguration> items);  

      public async Task ExportProjectTablesGetByCmsCustomFilterConfigurationsToExcel(string CMSCustomFilterConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/excel(CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/excel(CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCmsCustomFilterConfigurationsToCSV(string CMSCustomFilterConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/csv(CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/csv(CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsCustomFilterConfiguration>> GetProjectTablesGetByCmsCustomFilterConfigurations(string CMSCustomFilterConfiguration, Query query = null)
      {
          OnProjectTablesGetByCmsCustomFilterConfigurationsDefaultParams(ref CMSCustomFilterConfiguration);

          var items = Context.ProjectTablesGetByCmsCustomFilterConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCMSCustomFilterConfiguration] @CMSCustomFilterConfiguration={0}", CMSCustomFilterConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCmsCustomFilterConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCmsCustomFilterConfigurationsDefaultParams(ref string CMSCustomFilterConfiguration);

      partial void OnProjectTablesGetByCmsCustomFilterConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsCustomFilterConfiguration> items);  

      public async Task ExportProjectTablesGetByCmsExportConfigurationsToExcel(string CMSExportConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsexportconfigurations/excel(CMSExportConfiguration='{CMSExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsexportconfigurations/excel(CMSExportConfiguration='{CMSExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCmsExportConfigurationsToCSV(string CMSExportConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsexportconfigurations/csv(CMSExportConfiguration='{CMSExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsexportconfigurations/csv(CMSExportConfiguration='{CMSExportConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsExportConfiguration>> GetProjectTablesGetByCmsExportConfigurations(string CMSExportConfiguration, Query query = null)
      {
          OnProjectTablesGetByCmsExportConfigurationsDefaultParams(ref CMSExportConfiguration);

          var items = Context.ProjectTablesGetByCmsExportConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCMSExportConfiguration] @CMSExportConfiguration={0}", CMSExportConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCmsExportConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCmsExportConfigurationsDefaultParams(ref string CMSExportConfiguration);

      partial void OnProjectTablesGetByCmsExportConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsExportConfiguration> items);  

      public async Task ExportProjectTablesGetByCmsMenuConfigurationsToExcel(string CMSMenuConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsmenuconfigurations/excel(CMSMenuConfiguration='{CMSMenuConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsmenuconfigurations/excel(CMSMenuConfiguration='{CMSMenuConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCmsMenuConfigurationsToCSV(string CMSMenuConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsmenuconfigurations/csv(CMSMenuConfiguration='{CMSMenuConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsmenuconfigurations/csv(CMSMenuConfiguration='{CMSMenuConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsMenuConfiguration>> GetProjectTablesGetByCmsMenuConfigurations(string CMSMenuConfiguration, Query query = null)
      {
          OnProjectTablesGetByCmsMenuConfigurationsDefaultParams(ref CMSMenuConfiguration);

          var items = Context.ProjectTablesGetByCmsMenuConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCMSMenuConfiguration] @CMSMenuConfiguration={0}", CMSMenuConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCmsMenuConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCmsMenuConfigurationsDefaultParams(ref string CMSMenuConfiguration);

      partial void OnProjectTablesGetByCmsMenuConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsMenuConfiguration> items);  

      public async Task ExportProjectTablesGetByCmsPermissionConfigurationsToExcel(string CMSPermissionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmspermissionconfigurations/excel(CMSPermissionConfiguration='{CMSPermissionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmspermissionconfigurations/excel(CMSPermissionConfiguration='{CMSPermissionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCmsPermissionConfigurationsToCSV(string CMSPermissionConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmspermissionconfigurations/csv(CMSPermissionConfiguration='{CMSPermissionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmspermissionconfigurations/csv(CMSPermissionConfiguration='{CMSPermissionConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsPermissionConfiguration>> GetProjectTablesGetByCmsPermissionConfigurations(string CMSPermissionConfiguration, Query query = null)
      {
          OnProjectTablesGetByCmsPermissionConfigurationsDefaultParams(ref CMSPermissionConfiguration);

          var items = Context.ProjectTablesGetByCmsPermissionConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCMSPermissionConfiguration] @CMSPermissionConfiguration={0}", CMSPermissionConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCmsPermissionConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCmsPermissionConfigurationsDefaultParams(ref string CMSPermissionConfiguration);

      partial void OnProjectTablesGetByCmsPermissionConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsPermissionConfiguration> items);  

      public async Task ExportProjectTablesGetByCmsRouteConfigurationsToExcel(string CMSRouteConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsrouteconfigurations/excel(CMSRouteConfiguration='{CMSRouteConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsrouteconfigurations/excel(CMSRouteConfiguration='{CMSRouteConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCmsRouteConfigurationsToCSV(string CMSRouteConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsrouteconfigurations/csv(CMSRouteConfiguration='{CMSRouteConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsrouteconfigurations/csv(CMSRouteConfiguration='{CMSRouteConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsRouteConfiguration>> GetProjectTablesGetByCmsRouteConfigurations(string CMSRouteConfiguration, Query query = null)
      {
          OnProjectTablesGetByCmsRouteConfigurationsDefaultParams(ref CMSRouteConfiguration);

          var items = Context.ProjectTablesGetByCmsRouteConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCMSRouteConfiguration] @CMSRouteConfiguration={0}", CMSRouteConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCmsRouteConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCmsRouteConfigurationsDefaultParams(ref string CMSRouteConfiguration);

      partial void OnProjectTablesGetByCmsRouteConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsRouteConfiguration> items);  

      public async Task ExportProjectTablesGetByColumnsToExcel(string Columns, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycolumns/excel(Columns='{Columns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycolumns/excel(Columns='{Columns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByColumnsToCSV(string Columns, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycolumns/csv(Columns='{Columns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycolumns/csv(Columns='{Columns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByColumn>> GetProjectTablesGetByColumns(string Columns, Query query = null)
      {
          OnProjectTablesGetByColumnsDefaultParams(ref Columns);

          var items = Context.ProjectTablesGetByColumns.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByColumns] @Columns={0}", Columns).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByColumnsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByColumnsDefaultParams(ref string Columns);

      partial void OnProjectTablesGetByColumnsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByColumn> items);  

      public async Task ExportProjectTablesGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycomments/excel(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycomments/csv(Comment='{Comment}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByComment>> GetProjectTablesGetByComments(string Comment, Query query = null)
      {
          OnProjectTablesGetByCommentsDefaultParams(ref Comment);

          var items = Context.ProjectTablesGetByComments.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByComment] @Comment={0}", Comment).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCommentsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCommentsDefaultParams(ref string Comment);

      partial void OnProjectTablesGetByCommentsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByComment> items);  

      public async Task ExportProjectTablesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCommission>> GetProjectTablesGetByCommissions(decimal? Commission, Query query = null)
      {
          OnProjectTablesGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ProjectTablesGetByCommissions.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnProjectTablesGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCommission> items);  

      public async Task ExportProjectTablesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCurrencyId>> GetProjectTablesGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnProjectTablesGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ProjectTablesGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnProjectTablesGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCurrencyId> items);  

      public async Task ExportProjectTablesGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycustomcodes/excel(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycustomcodes/csv(CustomCode='{CustomCode}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCustomCode>> GetProjectTablesGetByCustomCodes(string CustomCode, Query query = null)
      {
          OnProjectTablesGetByCustomCodesDefaultParams(ref CustomCode);

          var items = Context.ProjectTablesGetByCustomCodes.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByCustomCode] @CustomCode={0}", CustomCode).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByCustomCodesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByCustomCodesDefaultParams(ref string CustomCode);

      partial void OnProjectTablesGetByCustomCodesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCustomCode> items);  

      public async Task ExportProjectTablesGetByDataIndicesToExcel(string DataIndex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydataindices/excel(DataIndex='{DataIndex}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydataindices/excel(DataIndex='{DataIndex}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByDataIndicesToCSV(string DataIndex, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydataindices/csv(DataIndex='{DataIndex}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydataindices/csv(DataIndex='{DataIndex}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDataIndex>> GetProjectTablesGetByDataIndices(string DataIndex, Query query = null)
      {
          OnProjectTablesGetByDataIndicesDefaultParams(ref DataIndex);

          var items = Context.ProjectTablesGetByDataIndices.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByDataIndex] @DataIndex={0}", DataIndex).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByDataIndicesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByDataIndicesDefaultParams(ref string DataIndex);

      partial void OnProjectTablesGetByDataIndicesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDataIndex> items);  

      public async Task ExportProjectTablesGetByDiagramConfigurationsToExcel(string DiagramConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydiagramconfigurations/excel(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydiagramconfigurations/excel(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByDiagramConfigurationsToCSV(string DiagramConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydiagramconfigurations/csv(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydiagramconfigurations/csv(DiagramConfiguration='{DiagramConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDiagramConfiguration>> GetProjectTablesGetByDiagramConfigurations(string DiagramConfiguration, Query query = null)
      {
          OnProjectTablesGetByDiagramConfigurationsDefaultParams(ref DiagramConfiguration);

          var items = Context.ProjectTablesGetByDiagramConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByDiagramConfiguration] @DiagramConfiguration={0}", DiagramConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByDiagramConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByDiagramConfigurationsDefaultParams(ref string DiagramConfiguration);

      partial void OnProjectTablesGetByDiagramConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDiagramConfiguration> items);  

      public async Task ExportProjectTablesGetByI18ConfigurationsToExcel(string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyi18configurations/excel(I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyi18configurations/excel(I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByI18ConfigurationsToCSV(string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyi18configurations/csv(I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyi18configurations/csv(I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByI18Configuration>> GetProjectTablesGetByI18Configurations(string I18Configuration, Query query = null)
      {
          OnProjectTablesGetByI18ConfigurationsDefaultParams(ref I18Configuration);

          var items = Context.ProjectTablesGetByI18Configurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByI18Configuration] @I18Configuration={0}", I18Configuration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByI18ConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByI18ConfigurationsDefaultParams(ref string I18Configuration);

      partial void OnProjectTablesGetByI18ConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByI18Configuration> items);  

      public async Task ExportProjectTablesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetById>> GetProjectTablesGetByIds(int? Id, Query query = null)
      {
          OnProjectTablesGetByIdsDefaultParams(ref Id);

          var items = Context.ProjectTablesGetByIds.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByIdsDefaultParams(ref int? Id);

      partial void OnProjectTablesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetById> items);  

      public async Task ExportProjectTablesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByPrice>> GetProjectTablesGetByPrices(decimal? Price, Query query = null)
      {
          OnProjectTablesGetByPricesDefaultParams(ref Price);

          var items = Context.ProjectTablesGetByPrices.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByPricesDefaultParams(ref decimal? Price);

      partial void OnProjectTablesGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByPrice> items);  

      public async Task ExportProjectTablesGetByProgrammingLanguageIdsToExcel(int? ProgrammingLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprogramminglanguageids/excel(ProgrammingLanguageId={ProgrammingLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprogramminglanguageids/excel(ProgrammingLanguageId={ProgrammingLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByProgrammingLanguageIdsToCSV(int? ProgrammingLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprogramminglanguageids/csv(ProgrammingLanguageId={ProgrammingLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprogramminglanguageids/csv(ProgrammingLanguageId={ProgrammingLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProgrammingLanguageId>> GetProjectTablesGetByProgrammingLanguageIds(int? ProgrammingLanguageId, Query query = null)
      {
          OnProjectTablesGetByProgrammingLanguageIdsDefaultParams(ref ProgrammingLanguageId);

          var items = Context.ProjectTablesGetByProgrammingLanguageIds.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByProgrammingLanguageId] @ProgrammingLanguageId={0}", ProgrammingLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByProgrammingLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByProgrammingLanguageIdsDefaultParams(ref int? ProgrammingLanguageId);

      partial void OnProjectTablesGetByProgrammingLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProgrammingLanguageId> items);  

      public async Task ExportProjectTablesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojectnames/excel(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojectnames/csv(ProjectName='{ProjectName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectName>> GetProjectTablesGetByProjectNames(string ProjectName, Query query = null)
      {
          OnProjectTablesGetByProjectNamesDefaultParams(ref ProjectName);

          var items = Context.ProjectTablesGetByProjectNames.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByProjectName] @ProjectName={0}", ProjectName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByProjectNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByProjectNamesDefaultParams(ref string ProjectName);

      partial void OnProjectTablesGetByProjectNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectName> items);  

      public async Task ExportProjectTablesGetByProjectTableConfigurationsToExcel(string ProjectTableConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojecttableconfigurations/excel(ProjectTableConfiguration='{ProjectTableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojecttableconfigurations/excel(ProjectTableConfiguration='{ProjectTableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByProjectTableConfigurationsToCSV(string ProjectTableConfiguration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojecttableconfigurations/csv(ProjectTableConfiguration='{ProjectTableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojecttableconfigurations/csv(ProjectTableConfiguration='{ProjectTableConfiguration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectTableConfiguration>> GetProjectTablesGetByProjectTableConfigurations(string ProjectTableConfiguration, Query query = null)
      {
          OnProjectTablesGetByProjectTableConfigurationsDefaultParams(ref ProjectTableConfiguration);

          var items = Context.ProjectTablesGetByProjectTableConfigurations.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByProjectTableConfiguration] @ProjectTableConfiguration={0}", ProjectTableConfiguration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByProjectTableConfigurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByProjectTableConfigurationsDefaultParams(ref string ProjectTableConfiguration);

      partial void OnProjectTablesGetByProjectTableConfigurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectTableConfiguration> items);  

      public async Task ExportProjectTablesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableName>> GetProjectTablesGetByTableNames(string TableName, Query query = null)
      {
          OnProjectTablesGetByTableNamesDefaultParams(ref TableName);

          var items = Context.ProjectTablesGetByTableNames.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByTableNamesDefaultParams(ref string TableName);

      partial void OnProjectTablesGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableName> items);  

      public async Task ExportProjectTablesGetByTableNameCryptosToExcel(string TableNameCrypto, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenamecryptos/excel(TableNameCrypto='{TableNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenamecryptos/excel(TableNameCrypto='{TableNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByTableNameCryptosToCSV(string TableNameCrypto, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenamecryptos/csv(TableNameCrypto='{TableNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenamecryptos/csv(TableNameCrypto='{TableNameCrypto}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableNameCrypto>> GetProjectTablesGetByTableNameCryptos(string TableNameCrypto, Query query = null)
      {
          OnProjectTablesGetByTableNameCryptosDefaultParams(ref TableNameCrypto);

          var items = Context.ProjectTablesGetByTableNameCryptos.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByTableNameCrypto] @TableNameCrypto={0}", TableNameCrypto).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByTableNameCryptosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByTableNameCryptosDefaultParams(ref string TableNameCrypto);

      partial void OnProjectTablesGetByTableNameCryptosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableNameCrypto> items);  

      public async Task ExportProjectTablesGetByUniqueColumnsToExcel(string UniqueColumns, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuniquecolumns/excel(UniqueColumns='{UniqueColumns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuniquecolumns/excel(UniqueColumns='{UniqueColumns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByUniqueColumnsToCSV(string UniqueColumns, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuniquecolumns/csv(UniqueColumns='{UniqueColumns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuniquecolumns/csv(UniqueColumns='{UniqueColumns}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUniqueColumn>> GetProjectTablesGetByUniqueColumns(string UniqueColumns, Query query = null)
      {
          OnProjectTablesGetByUniqueColumnsDefaultParams(ref UniqueColumns);

          var items = Context.ProjectTablesGetByUniqueColumns.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByUniqueColumns] @UniqueColumns={0}", UniqueColumns).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByUniqueColumnsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByUniqueColumnsDefaultParams(ref string UniqueColumns);

      partial void OnProjectTablesGetByUniqueColumnsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUniqueColumn> items);  

      public async Task ExportProjectTablesGetByUserProjectConnectionsToExcel(string UserProjectConnections, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuserprojectconnections/excel(UserProjectConnections='{UserProjectConnections}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuserprojectconnections/excel(UserProjectConnections='{UserProjectConnections}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesGetByUserProjectConnectionsToCSV(string UserProjectConnections, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuserprojectconnections/csv(UserProjectConnections='{UserProjectConnections}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuserprojectconnections/csv(UserProjectConnections='{UserProjectConnections}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUserProjectConnection>> GetProjectTablesGetByUserProjectConnections(string UserProjectConnections, Query query = null)
      {
          OnProjectTablesGetByUserProjectConnectionsDefaultParams(ref UserProjectConnections);

          var items = Context.ProjectTablesGetByUserProjectConnections.FromSqlRaw("EXEC [dbo].[ProjectTablesGetByUserProjectConnections] @UserProjectConnections={0}", UserProjectConnections).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesGetByUserProjectConnectionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesGetByUserProjectConnectionsDefaultParams(ref string UserProjectConnections);

      partial void OnProjectTablesGetByUserProjectConnectionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUserProjectConnection> items);  

      public async Task ExportProjectTablesInsertsToExcel(string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesinserts/excel(TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesinserts/excel(TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesInsertsToCSV(string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesinserts/csv(TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesinserts/csv(TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesInsert>> GetProjectTablesInserts(string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null)
      {
          OnProjectTablesInsertsDefaultParams(ref TableName, ref TableNameCrypto, ref UniqueColumns, ref DataIndex, ref ProjectName, ref UserProjectConnections, ref Columns, ref ProjectTableConfiguration, ref DiagramConfiguration, ref AuditConfiguration, ref Comment, ref CMSMenuConfiguration, ref CMSPermissionConfiguration, ref CMSExportConfiguration, ref CMSCustomFilterConfiguration, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref CMSRouteConfiguration, ref ApiConfiguration, ref ProgrammingLanguageId, ref I18Configuration);

          var items = Context.ProjectTablesInserts.FromSqlRaw("EXEC [dbo].[ProjectTablesInsert] @TableName={0}, @TableNameCrypto={1}, @UniqueColumns={2}, @DataIndex={3}, @ProjectName={4}, @UserProjectConnections={5}, @Columns={6}, @ProjectTableConfiguration={7}, @DiagramConfiguration={8}, @AuditConfiguration={9}, @Comment={10}, @CMSMenuConfiguration={11}, @CMSPermissionConfiguration={12}, @CMSExportConfiguration={13}, @CMSCustomFilterConfiguration={14}, @Price={15}, @CurrencyId={16}, @Commission={17}, @CustomCode={18}, @CMSRouteConfiguration={19}, @ApiConfiguration={20}, @ProgrammingLanguageId={21}, @I18Configuration={22}", TableName, TableNameCrypto, UniqueColumns, DataIndex, ProjectName, UserProjectConnections, Columns, ProjectTableConfiguration, DiagramConfiguration, AuditConfiguration, Comment, CMSMenuConfiguration, CMSPermissionConfiguration, CMSExportConfiguration, CMSCustomFilterConfiguration, Price, CurrencyId, Commission, CustomCode, CMSRouteConfiguration, ApiConfiguration, ProgrammingLanguageId, I18Configuration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesInsertsDefaultParams(ref string TableName, ref string TableNameCrypto, ref string UniqueColumns, ref string DataIndex, ref string ProjectName, ref string UserProjectConnections, ref string Columns, ref string ProjectTableConfiguration, ref string DiagramConfiguration, ref string AuditConfiguration, ref string Comment, ref string CMSMenuConfiguration, ref string CMSPermissionConfiguration, ref string CMSExportConfiguration, ref string CMSCustomFilterConfiguration, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string CMSRouteConfiguration, ref string ApiConfiguration, ref int? ProgrammingLanguageId, ref string I18Configuration);

      partial void OnProjectTablesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesInsert> items);  

      public async Task ExportProjectTablesUpdatesToExcel(int? Id, string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesupdates/excel(Id={Id}, TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesupdates/excel(Id={Id}, TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportProjectTablesUpdatesToCSV(int? Id, string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesupdates/csv(Id={Id}, TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesupdates/csv(Id={Id}, TableName='{TableName}', TableNameCrypto='{TableNameCrypto}', UniqueColumns='{UniqueColumns}', DataIndex='{DataIndex}', ProjectName='{ProjectName}', UserProjectConnections='{UserProjectConnections}', Columns='{Columns}', ProjectTableConfiguration='{ProjectTableConfiguration}', DiagramConfiguration='{DiagramConfiguration}', AuditConfiguration='{AuditConfiguration}', Comment='{Comment}', CMSMenuConfiguration='{CMSMenuConfiguration}', CMSPermissionConfiguration='{CMSPermissionConfiguration}', CMSExportConfiguration='{CMSExportConfiguration}', CMSCustomFilterConfiguration='{CMSCustomFilterConfiguration}', Price={Price}, CurrencyId={CurrencyId}, Commission={Commission}, CustomCode='{CustomCode}', CMSRouteConfiguration='{CMSRouteConfiguration}', ApiConfiguration='{ApiConfiguration}', ProgrammingLanguageId={ProgrammingLanguageId}, I18Configuration='{I18Configuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesUpdate>> GetProjectTablesUpdates(int? Id, string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null)
      {
          OnProjectTablesUpdatesDefaultParams(ref Id, ref TableName, ref TableNameCrypto, ref UniqueColumns, ref DataIndex, ref ProjectName, ref UserProjectConnections, ref Columns, ref ProjectTableConfiguration, ref DiagramConfiguration, ref AuditConfiguration, ref Comment, ref CMSMenuConfiguration, ref CMSPermissionConfiguration, ref CMSExportConfiguration, ref CMSCustomFilterConfiguration, ref Price, ref CurrencyId, ref Commission, ref CustomCode, ref CMSRouteConfiguration, ref ApiConfiguration, ref ProgrammingLanguageId, ref I18Configuration);

          var items = Context.ProjectTablesUpdates.FromSqlRaw("EXEC [dbo].[ProjectTablesUpdate] @Id={0}, @TableName={1}, @TableNameCrypto={2}, @UniqueColumns={3}, @DataIndex={4}, @ProjectName={5}, @UserProjectConnections={6}, @Columns={7}, @ProjectTableConfiguration={8}, @DiagramConfiguration={9}, @AuditConfiguration={10}, @Comment={11}, @CMSMenuConfiguration={12}, @CMSPermissionConfiguration={13}, @CMSExportConfiguration={14}, @CMSCustomFilterConfiguration={15}, @Price={16}, @CurrencyId={17}, @Commission={18}, @CustomCode={19}, @CMSRouteConfiguration={20}, @ApiConfiguration={21}, @ProgrammingLanguageId={22}, @I18Configuration={23}", Id, TableName, TableNameCrypto, UniqueColumns, DataIndex, ProjectName, UserProjectConnections, Columns, ProjectTableConfiguration, DiagramConfiguration, AuditConfiguration, Comment, CMSMenuConfiguration, CMSPermissionConfiguration, CMSExportConfiguration, CMSCustomFilterConfiguration, Price, CurrencyId, Commission, CustomCode, CMSRouteConfiguration, ApiConfiguration, ProgrammingLanguageId, I18Configuration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnProjectTablesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnProjectTablesUpdatesDefaultParams(ref int? Id, ref string TableName, ref string TableNameCrypto, ref string UniqueColumns, ref string DataIndex, ref string ProjectName, ref string UserProjectConnections, ref string Columns, ref string ProjectTableConfiguration, ref string DiagramConfiguration, ref string AuditConfiguration, ref string Comment, ref string CMSMenuConfiguration, ref string CMSPermissionConfiguration, ref string CMSExportConfiguration, ref string CMSCustomFilterConfiguration, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission, ref string CustomCode, ref string CMSRouteConfiguration, ref string ApiConfiguration, ref int? ProgrammingLanguageId, ref string I18Configuration);

      partial void OnProjectTablesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectTablesUpdate> items);  

      public async Task ExportReferenceWebSitesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetAll>> GetReferenceWebSitesGetAlls(Query query = null)
      {
          OnReferenceWebSitesGetAllsDefaultParams();

          var items = Context.ReferenceWebSitesGetAlls.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetAllsDefaultParams();

      partial void OnReferenceWebSitesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetAll> items);  

      public async Task ExportReferenceWebSitesGetByAvgVisitDurationsToExcel(string AvgVisitDuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyavgvisitdurations/excel(AvgVisitDuration='{AvgVisitDuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyavgvisitdurations/excel(AvgVisitDuration='{AvgVisitDuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByAvgVisitDurationsToCSV(string AvgVisitDuration, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyavgvisitdurations/csv(AvgVisitDuration='{AvgVisitDuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyavgvisitdurations/csv(AvgVisitDuration='{AvgVisitDuration}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByAvgVisitDuration>> GetReferenceWebSitesGetByAvgVisitDurations(string AvgVisitDuration, Query query = null)
      {
          OnReferenceWebSitesGetByAvgVisitDurationsDefaultParams(ref AvgVisitDuration);

          var items = Context.ReferenceWebSitesGetByAvgVisitDurations.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByAvgVisitDuration] @AvgVisitDuration={0}", AvgVisitDuration).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByAvgVisitDurationsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByAvgVisitDurationsDefaultParams(ref string AvgVisitDuration);

      partial void OnReferenceWebSitesGetByAvgVisitDurationsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByAvgVisitDuration> items);  

      public async Task ExportReferenceWebSitesGetByBounceRatesToExcel(string BounceRate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbybouncerates/excel(BounceRate='{BounceRate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbybouncerates/excel(BounceRate='{BounceRate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByBounceRatesToCSV(string BounceRate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbybouncerates/csv(BounceRate='{BounceRate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbybouncerates/csv(BounceRate='{BounceRate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByBounceRate>> GetReferenceWebSitesGetByBounceRates(string BounceRate, Query query = null)
      {
          OnReferenceWebSitesGetByBounceRatesDefaultParams(ref BounceRate);

          var items = Context.ReferenceWebSitesGetByBounceRates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByBounceRate] @BounceRate={0}", BounceRate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByBounceRatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByBounceRatesDefaultParams(ref string BounceRate);

      partial void OnReferenceWebSitesGetByBounceRatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByBounceRate> items);  

      public async Task ExportReferenceWebSitesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycommissions/excel(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycommissions/csv(Commission={Commission}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCommission>> GetReferenceWebSitesGetByCommissions(decimal? Commission, Query query = null)
      {
          OnReferenceWebSitesGetByCommissionsDefaultParams(ref Commission);

          var items = Context.ReferenceWebSitesGetByCommissions.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByCommission] @Commission={0}", Commission).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByCommissionsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByCommissionsDefaultParams(ref decimal? Commission);

      partial void OnReferenceWebSitesGetByCommissionsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCommission> items);  

      public async Task ExportReferenceWebSitesGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycreateddates/excel(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycreateddates/csv(CreatedDate='{CreatedDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCreatedDate>> GetReferenceWebSitesGetByCreatedDates(string CreatedDate, Query query = null)
      {
          OnReferenceWebSitesGetByCreatedDatesDefaultParams(ref CreatedDate);

          var items = Context.ReferenceWebSitesGetByCreatedDates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByCreatedDate] @CreatedDate={0}", CreatedDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByCreatedDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByCreatedDatesDefaultParams(ref string CreatedDate);

      partial void OnReferenceWebSitesGetByCreatedDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCreatedDate> items);  

      public async Task ExportReferenceWebSitesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycurrencyids/excel(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycurrencyids/csv(CurrencyId={CurrencyId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCurrencyId>> GetReferenceWebSitesGetByCurrencyIds(int? CurrencyId, Query query = null)
      {
          OnReferenceWebSitesGetByCurrencyIdsDefaultParams(ref CurrencyId);

          var items = Context.ReferenceWebSitesGetByCurrencyIds.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByCurrencyId] @CurrencyId={0}", CurrencyId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByCurrencyIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByCurrencyIdsDefaultParams(ref int? CurrencyId);

      partial void OnReferenceWebSitesGetByCurrencyIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCurrencyId> items);  

      public async Task ExportReferenceWebSitesGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbydefaultlanguages/excel(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbydefaultlanguages/csv(DefaultLanguage={DefaultLanguage}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByDefaultLanguage>> GetReferenceWebSitesGetByDefaultLanguages(int? DefaultLanguage, Query query = null)
      {
          OnReferenceWebSitesGetByDefaultLanguagesDefaultParams(ref DefaultLanguage);

          var items = Context.ReferenceWebSitesGetByDefaultLanguages.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByDefaultLanguage] @DefaultLanguage={0}", DefaultLanguage).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByDefaultLanguagesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByDefaultLanguagesDefaultParams(ref int? DefaultLanguage);

      partial void OnReferenceWebSitesGetByDefaultLanguagesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByDefaultLanguage> items);  

      public async Task ExportReferenceWebSitesGetByGuidsToExcel(string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyguids/excel(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyguids/excel(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByGuidsToCSV(string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyguids/csv(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyguids/csv(Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByGuid>> GetReferenceWebSitesGetByGuids(string Guid, Query query = null)
      {
          OnReferenceWebSitesGetByGuidsDefaultParams(ref Guid);

          var items = Context.ReferenceWebSitesGetByGuids.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByGuid] @Guid={0}", Guid).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByGuidsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByGuidsDefaultParams(ref string Guid);

      partial void OnReferenceWebSitesGetByGuidsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByGuid> items);  

      public async Task ExportReferenceWebSitesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetById>> GetReferenceWebSitesGetByIds(int? Id, Query query = null)
      {
          OnReferenceWebSitesGetByIdsDefaultParams(ref Id);

          var items = Context.ReferenceWebSitesGetByIds.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByIdsDefaultParams(ref int? Id);

      partial void OnReferenceWebSitesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetById> items);  

      public async Task ExportReferenceWebSitesGetByIsLastPublishSuccessfulliesToExcel(bool? IsLastPublishSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/excel(IsLastPublishSuccessfully={IsLastPublishSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/excel(IsLastPublishSuccessfully={IsLastPublishSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByIsLastPublishSuccessfulliesToCSV(bool? IsLastPublishSuccessfully, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/csv(IsLastPublishSuccessfully={IsLastPublishSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/csv(IsLastPublishSuccessfully={IsLastPublishSuccessfully}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByIsLastPublishSuccessfully>> GetReferenceWebSitesGetByIsLastPublishSuccessfullies(bool? IsLastPublishSuccessfully, Query query = null)
      {
          OnReferenceWebSitesGetByIsLastPublishSuccessfulliesDefaultParams(ref IsLastPublishSuccessfully);

          var items = Context.ReferenceWebSitesGetByIsLastPublishSuccessfullies.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByIsLastPublishSuccessfully] @IsLastPublishSuccessfully={0}", IsLastPublishSuccessfully).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByIsLastPublishSuccessfulliesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByIsLastPublishSuccessfulliesDefaultParams(ref bool? IsLastPublishSuccessfully);

      partial void OnReferenceWebSitesGetByIsLastPublishSuccessfulliesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByIsLastPublishSuccessfully> items);  

      public async Task ExportReferenceWebSitesGetByLastCompileDatesToExcel(string LastCompileDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylastcompiledates/excel(LastCompileDate='{LastCompileDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylastcompiledates/excel(LastCompileDate='{LastCompileDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByLastCompileDatesToCSV(string LastCompileDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylastcompiledates/csv(LastCompileDate='{LastCompileDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylastcompiledates/csv(LastCompileDate='{LastCompileDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLastCompileDate>> GetReferenceWebSitesGetByLastCompileDates(string LastCompileDate, Query query = null)
      {
          OnReferenceWebSitesGetByLastCompileDatesDefaultParams(ref LastCompileDate);

          var items = Context.ReferenceWebSitesGetByLastCompileDates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByLastCompileDate] @LastCompileDate={0}", LastCompileDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByLastCompileDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByLastCompileDatesDefaultParams(ref string LastCompileDate);

      partial void OnReferenceWebSitesGetByLastCompileDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLastCompileDate> items);  

      public async Task ExportReferenceWebSitesGetByLogosToExcel(string Logo, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylogos/excel(Logo='{Logo}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylogos/excel(Logo='{Logo}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByLogosToCSV(string Logo, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylogos/csv(Logo='{Logo}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylogos/csv(Logo='{Logo}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLogo>> GetReferenceWebSitesGetByLogos(string Logo, Query query = null)
      {
          OnReferenceWebSitesGetByLogosDefaultParams(ref Logo);

          var items = Context.ReferenceWebSitesGetByLogos.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByLogo] @Logo={0}", Logo).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByLogosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByLogosDefaultParams(ref string Logo);

      partial void OnReferenceWebSitesGetByLogosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLogo> items);  

      public async Task ExportReferenceWebSitesGetByModifyDatesToExcel(string ModifyDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbymodifydates/excel(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbymodifydates/excel(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByModifyDatesToCSV(string ModifyDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbymodifydates/csv(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbymodifydates/csv(ModifyDate='{ModifyDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByModifyDate>> GetReferenceWebSitesGetByModifyDates(string ModifyDate, Query query = null)
      {
          OnReferenceWebSitesGetByModifyDatesDefaultParams(ref ModifyDate);

          var items = Context.ReferenceWebSitesGetByModifyDates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByModifyDate] @ModifyDate={0}", ModifyDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByModifyDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByModifyDatesDefaultParams(ref string ModifyDate);

      partial void OnReferenceWebSitesGetByModifyDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByModifyDate> items);  

      public async Task ExportReferenceWebSitesGetByPageVisitsToExcel(string PageVisit, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbypagevisits/excel(PageVisit='{PageVisit}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbypagevisits/excel(PageVisit='{PageVisit}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByPageVisitsToCSV(string PageVisit, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbypagevisits/csv(PageVisit='{PageVisit}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbypagevisits/csv(PageVisit='{PageVisit}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPageVisit>> GetReferenceWebSitesGetByPageVisits(string PageVisit, Query query = null)
      {
          OnReferenceWebSitesGetByPageVisitsDefaultParams(ref PageVisit);

          var items = Context.ReferenceWebSitesGetByPageVisits.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByPageVisit] @PageVisit={0}", PageVisit).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByPageVisitsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByPageVisitsDefaultParams(ref string PageVisit);

      partial void OnReferenceWebSitesGetByPageVisitsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPageVisit> items);  

      public async Task ExportReferenceWebSitesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprices/excel(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprices/csv(Price={Price}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPrice>> GetReferenceWebSitesGetByPrices(decimal? Price, Query query = null)
      {
          OnReferenceWebSitesGetByPricesDefaultParams(ref Price);

          var items = Context.ReferenceWebSitesGetByPrices.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByPrice] @Price={0}", Price).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByPricesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByPricesDefaultParams(ref decimal? Price);

      partial void OnReferenceWebSitesGetByPricesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPrice> items);  

      public async Task ExportReferenceWebSitesGetByProjectCategoryIdsToExcel(int? ProjectCategoryId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprojectcategoryids/excel(ProjectCategoryId={ProjectCategoryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprojectcategoryids/excel(ProjectCategoryId={ProjectCategoryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByProjectCategoryIdsToCSV(int? ProjectCategoryId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprojectcategoryids/csv(ProjectCategoryId={ProjectCategoryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprojectcategoryids/csv(ProjectCategoryId={ProjectCategoryId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByProjectCategoryId>> GetReferenceWebSitesGetByProjectCategoryIds(int? ProjectCategoryId, Query query = null)
      {
          OnReferenceWebSitesGetByProjectCategoryIdsDefaultParams(ref ProjectCategoryId);

          var items = Context.ReferenceWebSitesGetByProjectCategoryIds.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByProjectCategoryId] @ProjectCategoryId={0}", ProjectCategoryId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByProjectCategoryIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByProjectCategoryIdsDefaultParams(ref int? ProjectCategoryId);

      partial void OnReferenceWebSitesGetByProjectCategoryIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByProjectCategoryId> items);  

      public async Task ExportReferenceWebSitesGetByRankingsToExcel(int? Ranking, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyrankings/excel(Ranking={Ranking}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyrankings/excel(Ranking={Ranking}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByRankingsToCSV(int? Ranking, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyrankings/csv(Ranking={Ranking}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyrankings/csv(Ranking={Ranking}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByRanking>> GetReferenceWebSitesGetByRankings(int? Ranking, Query query = null)
      {
          OnReferenceWebSitesGetByRankingsDefaultParams(ref Ranking);

          var items = Context.ReferenceWebSitesGetByRankings.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByRanking] @Ranking={0}", Ranking).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByRankingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByRankingsDefaultParams(ref int? Ranking);

      partial void OnReferenceWebSitesGetByRankingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByRanking> items);  

      public async Task ExportReferenceWebSitesGetBySiteNamesToExcel(string SiteName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysitenames/excel(SiteName='{SiteName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysitenames/excel(SiteName='{SiteName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetBySiteNamesToCSV(string SiteName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysitenames/csv(SiteName='{SiteName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysitenames/csv(SiteName='{SiteName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySiteName>> GetReferenceWebSitesGetBySiteNames(string SiteName, Query query = null)
      {
          OnReferenceWebSitesGetBySiteNamesDefaultParams(ref SiteName);

          var items = Context.ReferenceWebSitesGetBySiteNames.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetBySiteName] @SiteName={0}", SiteName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetBySiteNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetBySiteNamesDefaultParams(ref string SiteName);

      partial void OnReferenceWebSitesGetBySiteNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySiteName> items);  

      public async Task ExportReferenceWebSitesGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/excel(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/csv(SoftwareLanguageId={SoftwareLanguageId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySoftwareLanguageId>> GetReferenceWebSitesGetBySoftwareLanguageIds(int? SoftwareLanguageId, Query query = null)
      {
          OnReferenceWebSitesGetBySoftwareLanguageIdsDefaultParams(ref SoftwareLanguageId);

          var items = Context.ReferenceWebSitesGetBySoftwareLanguageIds.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetBySoftwareLanguageId] @SoftwareLanguageId={0}", SoftwareLanguageId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetBySoftwareLanguageIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetBySoftwareLanguageIdsDefaultParams(ref int? SoftwareLanguageId);

      partial void OnReferenceWebSitesGetBySoftwareLanguageIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySoftwareLanguageId> items);  

      public async Task ExportReferenceWebSitesGetByUrlsToExcel(string Url, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyurls/excel(Url='{Url}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyurls/excel(Url='{Url}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByUrlsToCSV(string Url, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyurls/csv(Url='{Url}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyurls/csv(Url='{Url}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUrl>> GetReferenceWebSitesGetByUrls(string Url, Query query = null)
      {
          OnReferenceWebSitesGetByUrlsDefaultParams(ref Url);

          var items = Context.ReferenceWebSitesGetByUrls.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByUrl] @Url={0}", Url).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByUrlsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByUrlsDefaultParams(ref string Url);

      partial void OnReferenceWebSitesGetByUrlsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUrl> items);  

      public async Task ExportReferenceWebSitesGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyuserids/excel(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyuserids/csv(UserId={UserId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUserId>> GetReferenceWebSitesGetByUserIds(int? UserId, Query query = null)
      {
          OnReferenceWebSitesGetByUserIdsDefaultParams(ref UserId);

          var items = Context.ReferenceWebSitesGetByUserIds.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByUserId] @UserId={0}", UserId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByUserIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByUserIdsDefaultParams(ref int? UserId);

      partial void OnReferenceWebSitesGetByUserIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUserId> items);  

      public async Task ExportReferenceWebSitesGetByValidDatesToExcel(string ValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyvaliddates/excel(ValidDate='{ValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyvaliddates/excel(ValidDate='{ValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetByValidDatesToCSV(string ValidDate, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyvaliddates/csv(ValidDate='{ValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyvaliddates/csv(ValidDate='{ValidDate}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByValidDate>> GetReferenceWebSitesGetByValidDates(string ValidDate, Query query = null)
      {
          OnReferenceWebSitesGetByValidDatesDefaultParams(ref ValidDate);

          var items = Context.ReferenceWebSitesGetByValidDates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetByValidDate] @ValidDate={0}", ValidDate).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetByValidDatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetByValidDatesDefaultParams(ref string ValidDate);

      partial void OnReferenceWebSitesGetByValidDatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByValidDate> items);  

      public async Task ExportReferenceWebSitesGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetcreateddatebetweens/excel(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetcreateddatebetweens/csv(CreatedDateStart='{CreatedDateStart}', CreatedDateEnd='{CreatedDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetCreatedDateBetween>> GetReferenceWebSitesGetCreatedDateBetweens(string CreatedDateStart, string CreatedDateEnd, Query query = null)
      {
          OnReferenceWebSitesGetCreatedDateBetweensDefaultParams(ref CreatedDateStart, ref CreatedDateEnd);

          var items = Context.ReferenceWebSitesGetCreatedDateBetweens.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetCreatedDateBetween] @CreatedDateStart={0}, @CreatedDateEnd={1}", CreatedDateStart, CreatedDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetCreatedDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetCreatedDateBetweensDefaultParams(ref string CreatedDateStart, ref string CreatedDateEnd);

      partial void OnReferenceWebSitesGetCreatedDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetCreatedDateBetween> items);  

      public async Task ExportReferenceWebSitesGetLastCompileDateBetweensToExcel(string LastCompileDateStart, string LastCompileDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/excel(LastCompileDateStart='{LastCompileDateStart}', LastCompileDateEnd='{LastCompileDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/excel(LastCompileDateStart='{LastCompileDateStart}', LastCompileDateEnd='{LastCompileDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetLastCompileDateBetweensToCSV(string LastCompileDateStart, string LastCompileDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/csv(LastCompileDateStart='{LastCompileDateStart}', LastCompileDateEnd='{LastCompileDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/csv(LastCompileDateStart='{LastCompileDateStart}', LastCompileDateEnd='{LastCompileDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetLastCompileDateBetween>> GetReferenceWebSitesGetLastCompileDateBetweens(string LastCompileDateStart, string LastCompileDateEnd, Query query = null)
      {
          OnReferenceWebSitesGetLastCompileDateBetweensDefaultParams(ref LastCompileDateStart, ref LastCompileDateEnd);

          var items = Context.ReferenceWebSitesGetLastCompileDateBetweens.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetLastCompileDateBetween] @LastCompileDateStart={0}, @LastCompileDateEnd={1}", LastCompileDateStart, LastCompileDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetLastCompileDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetLastCompileDateBetweensDefaultParams(ref string LastCompileDateStart, ref string LastCompileDateEnd);

      partial void OnReferenceWebSitesGetLastCompileDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetLastCompileDateBetween> items);  

      public async Task ExportReferenceWebSitesGetModifyDateBetweensToExcel(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetmodifydatebetweens/excel(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetmodifydatebetweens/excel(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetModifyDateBetweensToCSV(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetmodifydatebetweens/csv(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetmodifydatebetweens/csv(ModifyDateStart='{ModifyDateStart}', ModifyDateEnd='{ModifyDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetModifyDateBetween>> GetReferenceWebSitesGetModifyDateBetweens(string ModifyDateStart, string ModifyDateEnd, Query query = null)
      {
          OnReferenceWebSitesGetModifyDateBetweensDefaultParams(ref ModifyDateStart, ref ModifyDateEnd);

          var items = Context.ReferenceWebSitesGetModifyDateBetweens.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetModifyDateBetween] @ModifyDateStart={0}, @ModifyDateEnd={1}", ModifyDateStart, ModifyDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetModifyDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetModifyDateBetweensDefaultParams(ref string ModifyDateStart, ref string ModifyDateEnd);

      partial void OnReferenceWebSitesGetModifyDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetModifyDateBetween> items);  

      public async Task ExportReferenceWebSitesGetValidDateBetweensToExcel(string ValidDateStart, string ValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetvaliddatebetweens/excel(ValidDateStart='{ValidDateStart}', ValidDateEnd='{ValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetvaliddatebetweens/excel(ValidDateStart='{ValidDateStart}', ValidDateEnd='{ValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesGetValidDateBetweensToCSV(string ValidDateStart, string ValidDateEnd, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetvaliddatebetweens/csv(ValidDateStart='{ValidDateStart}', ValidDateEnd='{ValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetvaliddatebetweens/csv(ValidDateStart='{ValidDateStart}', ValidDateEnd='{ValidDateEnd}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetValidDateBetween>> GetReferenceWebSitesGetValidDateBetweens(string ValidDateStart, string ValidDateEnd, Query query = null)
      {
          OnReferenceWebSitesGetValidDateBetweensDefaultParams(ref ValidDateStart, ref ValidDateEnd);

          var items = Context.ReferenceWebSitesGetValidDateBetweens.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesGetValidDateBetween] @ValidDateStart={0}, @ValidDateEnd={1}", ValidDateStart, ValidDateEnd).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesGetValidDateBetweensInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesGetValidDateBetweensDefaultParams(ref string ValidDateStart, ref string ValidDateEnd);

      partial void OnReferenceWebSitesGetValidDateBetweensInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetValidDateBetween> items);  

      public async Task ExportReferenceWebSitesInsertsToExcel(string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesinserts/excel(SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesinserts/excel(SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesInsertsToCSV(string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesinserts/csv(SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesinserts/csv(SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesInsert>> GetReferenceWebSitesInserts(string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null)
      {
          OnReferenceWebSitesInsertsDefaultParams(ref SiteName, ref Url, ref ProjectCategoryId, ref Ranking, ref AvgVisitDuration, ref PageVisit, ref BounceRate, ref Logo, ref Price, ref Commission, ref CurrencyId, ref CreatedDate, ref ValidDate, ref ModifyDate, ref LastCompileDate, ref SoftwareLanguageId, ref IsLastPublishSuccessfully, ref DefaultLanguage, ref UserId, ref Guid);

          var items = Context.ReferenceWebSitesInserts.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesInsert] @SiteName={0}, @Url={1}, @ProjectCategoryId={2}, @Ranking={3}, @AvgVisitDuration={4}, @PageVisit={5}, @BounceRate={6}, @Logo={7}, @Price={8}, @Commission={9}, @CurrencyId={10}, @CreatedDate={11}, @ValidDate={12}, @ModifyDate={13}, @LastCompileDate={14}, @SoftwareLanguageId={15}, @IsLastPublishSuccessfully={16}, @DefaultLanguage={17}, @UserId={18}, @Guid={19}", SiteName, Url, ProjectCategoryId, Ranking, AvgVisitDuration, PageVisit, BounceRate, Logo, Price, Commission, CurrencyId, CreatedDate, ValidDate, ModifyDate, LastCompileDate, SoftwareLanguageId, IsLastPublishSuccessfully, DefaultLanguage, UserId, Guid).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesInsertsDefaultParams(ref string SiteName, ref string Url, ref int? ProjectCategoryId, ref int? Ranking, ref string AvgVisitDuration, ref string PageVisit, ref string BounceRate, ref string Logo, ref decimal? Price, ref decimal? Commission, ref int? CurrencyId, ref string CreatedDate, ref string ValidDate, ref string ModifyDate, ref string LastCompileDate, ref int? SoftwareLanguageId, ref bool? IsLastPublishSuccessfully, ref int? DefaultLanguage, ref int? UserId, ref string Guid);

      partial void OnReferenceWebSitesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesInsert> items);  

      public async Task ExportReferenceWebSitesUpdatesToExcel(int? Id, string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesupdates/excel(Id={Id}, SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesupdates/excel(Id={Id}, SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportReferenceWebSitesUpdatesToCSV(int? Id, string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesupdates/csv(Id={Id}, SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesupdates/csv(Id={Id}, SiteName='{SiteName}', Url='{Url}', ProjectCategoryId={ProjectCategoryId}, Ranking={Ranking}, AvgVisitDuration='{AvgVisitDuration}', PageVisit='{PageVisit}', BounceRate='{BounceRate}', Logo='{Logo}', Price={Price}, Commission={Commission}, CurrencyId={CurrencyId}, CreatedDate='{CreatedDate}', ValidDate='{ValidDate}', ModifyDate='{ModifyDate}', LastCompileDate='{LastCompileDate}', SoftwareLanguageId={SoftwareLanguageId}, IsLastPublishSuccessfully={IsLastPublishSuccessfully}, DefaultLanguage={DefaultLanguage}, UserId={UserId}, Guid='{Guid}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesUpdate>> GetReferenceWebSitesUpdates(int? Id, string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null)
      {
          OnReferenceWebSitesUpdatesDefaultParams(ref Id, ref SiteName, ref Url, ref ProjectCategoryId, ref Ranking, ref AvgVisitDuration, ref PageVisit, ref BounceRate, ref Logo, ref Price, ref Commission, ref CurrencyId, ref CreatedDate, ref ValidDate, ref ModifyDate, ref LastCompileDate, ref SoftwareLanguageId, ref IsLastPublishSuccessfully, ref DefaultLanguage, ref UserId, ref Guid);

          var items = Context.ReferenceWebSitesUpdates.FromSqlRaw("EXEC [dbo].[ReferenceWebSitesUpdate] @Id={0}, @SiteName={1}, @Url={2}, @ProjectCategoryId={3}, @Ranking={4}, @AvgVisitDuration={5}, @PageVisit={6}, @BounceRate={7}, @Logo={8}, @Price={9}, @Commission={10}, @CurrencyId={11}, @CreatedDate={12}, @ValidDate={13}, @ModifyDate={14}, @LastCompileDate={15}, @SoftwareLanguageId={16}, @IsLastPublishSuccessfully={17}, @DefaultLanguage={18}, @UserId={19}, @Guid={20}", Id, SiteName, Url, ProjectCategoryId, Ranking, AvgVisitDuration, PageVisit, BounceRate, Logo, Price, Commission, CurrencyId, CreatedDate, ValidDate, ModifyDate, LastCompileDate, SoftwareLanguageId, IsLastPublishSuccessfully, DefaultLanguage, UserId, Guid).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnReferenceWebSitesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnReferenceWebSitesUpdatesDefaultParams(ref int? Id, ref string SiteName, ref string Url, ref int? ProjectCategoryId, ref int? Ranking, ref string AvgVisitDuration, ref string PageVisit, ref string BounceRate, ref string Logo, ref decimal? Price, ref decimal? Commission, ref int? CurrencyId, ref string CreatedDate, ref string ValidDate, ref string ModifyDate, ref string LastCompileDate, ref int? SoftwareLanguageId, ref bool? IsLastPublishSuccessfully, ref int? DefaultLanguage, ref int? UserId, ref string Guid);

      partial void OnReferenceWebSitesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesUpdate> items);  

      public async Task ExportSchemesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetAll>> GetSchemesGetAlls(Query query = null)
      {
          OnSchemesGetAllsDefaultParams();

          var items = Context.SchemesGetAlls.FromSqlRaw("EXEC [dbo].[SchemesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesGetAllsDefaultParams();

      partial void OnSchemesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetAll> items);  

      public async Task ExportSchemesGetByDatabaseTypesToExcel(int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbydatabasetypes/excel(DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbydatabasetypes/excel(DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesGetByDatabaseTypesToCSV(int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbydatabasetypes/csv(DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbydatabasetypes/csv(DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetByDatabaseType>> GetSchemesGetByDatabaseTypes(int? DatabaseType, Query query = null)
      {
          OnSchemesGetByDatabaseTypesDefaultParams(ref DatabaseType);

          var items = Context.SchemesGetByDatabaseTypes.FromSqlRaw("EXEC [dbo].[SchemesGetByDatabaseType] @DatabaseType={0}", DatabaseType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesGetByDatabaseTypesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesGetByDatabaseTypesDefaultParams(ref int? DatabaseType);

      partial void OnSchemesGetByDatabaseTypesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetByDatabaseType> items);  

      public async Task ExportSchemesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetById>> GetSchemesGetByIds(long? Id, Query query = null)
      {
          OnSchemesGetByIdsDefaultParams(ref Id);

          var items = Context.SchemesGetByIds.FromSqlRaw("EXEC [dbo].[SchemesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesGetByIdsDefaultParams(ref long? Id);

      partial void OnSchemesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetById> items);  

      public async Task ExportSchemesGetByNamesToExcel(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbynames/excel(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesGetByNamesToCSV(string Name, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbynames/csv(Name='{Name}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetByName>> GetSchemesGetByNames(string Name, Query query = null)
      {
          OnSchemesGetByNamesDefaultParams(ref Name);

          var items = Context.SchemesGetByNames.FromSqlRaw("EXEC [dbo].[SchemesGetByName] @Name={0}", Name).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesGetByNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesGetByNamesDefaultParams(ref string Name);

      partial void OnSchemesGetByNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesGetByName> items);  

      public async Task ExportSchemesInsertsToExcel(string Name, int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesinserts/excel(Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesinserts/excel(Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesInsertsToCSV(string Name, int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesinserts/csv(Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesinserts/csv(Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesInsert>> GetSchemesInserts(string Name, int? DatabaseType, Query query = null)
      {
          OnSchemesInsertsDefaultParams(ref Name, ref DatabaseType);

          var items = Context.SchemesInserts.FromSqlRaw("EXEC [dbo].[SchemesInsert] @Name={0}, @DatabaseType={1}", Name, DatabaseType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesInsertsDefaultParams(ref string Name, ref int? DatabaseType);

      partial void OnSchemesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesInsert> items);  

      public async Task ExportSchemesUpdatesToExcel(long? Id, string Name, int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesupdates/excel(Id={Id}, Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesupdates/excel(Id={Id}, Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSchemesUpdatesToCSV(long? Id, string Name, int? DatabaseType, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesupdates/csv(Id={Id}, Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesupdates/csv(Id={Id}, Name='{Name}', DatabaseType={DatabaseType}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SchemesUpdate>> GetSchemesUpdates(long? Id, string Name, int? DatabaseType, Query query = null)
      {
          OnSchemesUpdatesDefaultParams(ref Id, ref Name, ref DatabaseType);

          var items = Context.SchemesUpdates.FromSqlRaw("EXEC [dbo].[SchemesUpdate] @Id={0}, @Name={1}, @DatabaseType={2}", Id, Name, DatabaseType).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSchemesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSchemesUpdatesDefaultParams(ref long? Id, ref string Name, ref int? DatabaseType);

      partial void OnSchemesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SchemesUpdate> items);  

      public async Task ExportSpColumnsToExcel(string table_name, string table_owner, string table_qualifier, string column_name, int? ODBCVer, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spcolumns/excel(table_name='{table_name}', table_owner='{table_owner}', table_qualifier='{table_qualifier}', column_name='{column_name}', ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spcolumns/excel(table_name='{table_name}', table_owner='{table_owner}', table_qualifier='{table_qualifier}', column_name='{column_name}', ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSpColumnsToCSV(string table_name, string table_owner, string table_qualifier, string column_name, int? ODBCVer, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spcolumns/csv(table_name='{table_name}', table_owner='{table_owner}', table_qualifier='{table_qualifier}', column_name='{column_name}', ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spcolumns/csv(table_name='{table_name}', table_owner='{table_owner}', table_qualifier='{table_qualifier}', column_name='{column_name}', ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SpColumn>> GetSpColumns(string table_name, string table_owner, string table_qualifier, string column_name, int? ODBCVer, Query query = null)
      {
          OnSpColumnsDefaultParams(ref table_name, ref table_owner, ref table_qualifier, ref column_name, ref ODBCVer);

          var items = Context.SpColumns.FromSqlRaw("EXEC [dbo].[sp_columns] @table_name={0}, @table_owner={1}, @table_qualifier={2}, @column_name={3}, @ODBCVer={4}", table_name, table_owner, table_qualifier, column_name, ODBCVer).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSpColumnsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSpColumnsDefaultParams(ref string table_name, ref string table_owner, ref string table_qualifier, ref string column_name, ref int? ODBCVer);

      partial void OnSpColumnsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SpColumn> items);  

      public async Task ExportSpDatatypeInfosToExcel(int? data_type, byte? ODBCVer, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdatatypeinfos/excel(data_type={data_type}, ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdatatypeinfos/excel(data_type={data_type}, ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSpDatatypeInfosToCSV(int? data_type, byte? ODBCVer, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdatatypeinfos/csv(data_type={data_type}, ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdatatypeinfos/csv(data_type={data_type}, ODBCVer={ODBCVer}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SpDatatypeInfo>> GetSpDatatypeInfos(int? data_type, byte? ODBCVer, Query query = null)
      {
          OnSpDatatypeInfosDefaultParams(ref data_type, ref ODBCVer);

          var items = Context.SpDatatypeInfos.FromSqlRaw("EXEC [dbo].[sp_datatype_info] @data_type={0}, @ODBCVer={1}", data_type, ODBCVer).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSpDatatypeInfosInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSpDatatypeInfosDefaultParams(ref int? data_type, ref byte? ODBCVer);

      partial void OnSpDatatypeInfosInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SpDatatypeInfo> items);  

      public async Task ExportSpDbmmonitorhelpalertsToExcel(string database_name, int? alert_id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdbmmonitorhelpalerts/excel(database_name='{database_name}', alert_id={alert_id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdbmmonitorhelpalerts/excel(database_name='{database_name}', alert_id={alert_id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSpDbmmonitorhelpalertsToCSV(string database_name, int? alert_id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdbmmonitorhelpalerts/csv(database_name='{database_name}', alert_id={alert_id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdbmmonitorhelpalerts/csv(database_name='{database_name}', alert_id={alert_id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SpDbmmonitorhelpalert>> GetSpDbmmonitorhelpalerts(string database_name, int? alert_id, Query query = null)
      {
          OnSpDbmmonitorhelpalertsDefaultParams(ref database_name, ref alert_id);

          var items = Context.SpDbmmonitorhelpalerts.FromSqlRaw("EXEC [dbo].[sp_dbmmonitorhelpalert] @database_name={0}, @alert_id={1}", database_name, alert_id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSpDbmmonitorhelpalertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSpDbmmonitorhelpalertsDefaultParams(ref string database_name, ref int? alert_id);

      partial void OnSpDbmmonitorhelpalertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SpDbmmonitorhelpalert> items);  

      public async Task ExportSpHelpDatatypeMappingsToExcel(string dbms_name, string dbms_version, string sql_type, int? source_prec, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/sphelpdatatypemappings/excel(dbms_name='{dbms_name}', dbms_version='{dbms_version}', sql_type='{sql_type}', source_prec={source_prec}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/sphelpdatatypemappings/excel(dbms_name='{dbms_name}', dbms_version='{dbms_version}', sql_type='{sql_type}', source_prec={source_prec}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSpHelpDatatypeMappingsToCSV(string dbms_name, string dbms_version, string sql_type, int? source_prec, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/sphelpdatatypemappings/csv(dbms_name='{dbms_name}', dbms_version='{dbms_version}', sql_type='{sql_type}', source_prec={source_prec}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/sphelpdatatypemappings/csv(dbms_name='{dbms_name}', dbms_version='{dbms_version}', sql_type='{sql_type}', source_prec={source_prec}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SpHelpDatatypeMapping>> GetSpHelpDatatypeMappings(string dbms_name, string dbms_version, string sql_type, int? source_prec, Query query = null)
      {
          OnSpHelpDatatypeMappingsDefaultParams(ref dbms_name, ref dbms_version, ref sql_type, ref source_prec);

          var items = Context.SpHelpDatatypeMappings.FromSqlRaw("EXEC [dbo].[sp_help_datatype_mapping] @dbms_name={0}, @dbms_version={1}, @sql_type={2}, @source_prec={3}", dbms_name, dbms_version, sql_type, source_prec).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSpHelpDatatypeMappingsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSpHelpDatatypeMappingsDefaultParams(ref string dbms_name, ref string dbms_version, ref string sql_type, ref int? source_prec);

      partial void OnSpHelpDatatypeMappingsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SpHelpDatatypeMapping> items);  

      public async Task ExportSpMonitorsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spmonitors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spmonitors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportSpMonitorsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spmonitors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spmonitors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.SpMonitor>> GetSpMonitors(Query query = null)
      {
          OnSpMonitorsDefaultParams();

          var items = Context.SpMonitors.FromSqlRaw("EXEC [dbo].[sp_monitor] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnSpMonitorsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnSpMonitorsDefaultParams();

      partial void OnSpMonitorsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.SpMonitor> items);  

      public async Task ExportTablesGetAllsToExcel(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesGetAllsToCSV(Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetAll>> GetTablesGetAlls(Query query = null)
      {
          OnTablesGetAllsDefaultParams();

          var items = Context.TablesGetAlls.FromSqlRaw("EXEC [dbo].[TablesGetAll] ").ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesGetAllsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesGetAllsDefaultParams();

      partial void OnTablesGetAllsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetAll> items);  

      public async Task ExportTablesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyids/excel(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyids/csv(Id={Id}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetById>> GetTablesGetByIds(long? Id, Query query = null)
      {
          OnTablesGetByIdsDefaultParams(ref Id);

          var items = Context.TablesGetByIds.FromSqlRaw("EXEC [dbo].[TablesGetByID] @Id={0}", Id).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesGetByIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesGetByIdsDefaultParams(ref long? Id);

      partial void OnTablesGetByIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetById> items);  

      public async Task ExportTablesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyprojectids/excel(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyprojectids/csv(ProjectId={ProjectId}, fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetByProjectId>> GetTablesGetByProjectIds(long? ProjectId, Query query = null)
      {
          OnTablesGetByProjectIdsDefaultParams(ref ProjectId);

          var items = Context.TablesGetByProjectIds.FromSqlRaw("EXEC [dbo].[TablesGetByProjectId] @ProjectId={0}", ProjectId).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesGetByProjectIdsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesGetByProjectIdsDefaultParams(ref long? ProjectId);

      partial void OnTablesGetByProjectIdsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetByProjectId> items);  

      public async Task ExportTablesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbytablenames/excel(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbytablenames/csv(TableName='{TableName}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetByTableName>> GetTablesGetByTableNames(string TableName, Query query = null)
      {
          OnTablesGetByTableNamesDefaultParams(ref TableName);

          var items = Context.TablesGetByTableNames.FromSqlRaw("EXEC [dbo].[TablesGetByTableName] @TableName={0}", TableName).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesGetByTableNamesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesGetByTableNamesDefaultParams(ref string TableName);

      partial void OnTablesGetByTableNamesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesGetByTableName> items);  

      public async Task ExportTablesInsertsToExcel(long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesinserts/excel(ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesinserts/excel(ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesInsertsToCSV(long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesinserts/csv(ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesinserts/csv(ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesInsert>> GetTablesInserts(long? ProjectId, string TableName, string Config, Query query = null)
      {
          OnTablesInsertsDefaultParams(ref ProjectId, ref TableName, ref Config);

          var items = Context.TablesInserts.FromSqlRaw("EXEC [dbo].[TablesInsert] @ProjectId={0}, @TableName={1}, @Config={2}", ProjectId, TableName, Config).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesInsertsInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesInsertsDefaultParams(ref long? ProjectId, ref string TableName, ref string Config);

      partial void OnTablesInsertsInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesInsert> items);  

      public async Task ExportTablesUpdatesToExcel(long? Id, long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesupdates/excel(Id={Id}, ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesupdates/excel(Id={Id}, ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task ExportTablesUpdatesToCSV(long? Id, long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
      {
          navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesupdates/csv(Id={Id}, ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesupdates/csv(Id={Id}, ProjectId={ProjectId}, TableName='{TableName}', Config='{Config}', fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
      }

      public async Task<IQueryable<ZarenUI.Server.Models.JSONServer.TablesUpdate>> GetTablesUpdates(long? Id, long? ProjectId, string TableName, string Config, Query query = null)
      {
          OnTablesUpdatesDefaultParams(ref Id, ref ProjectId, ref TableName, ref Config);

          var items = Context.TablesUpdates.FromSqlRaw("EXEC [dbo].[TablesUpdate] @Id={0}, @ProjectId={1}, @TableName={2}, @Config={3}", Id, ProjectId, TableName, Config).ToList().AsQueryable();

          if (query != null)
          {
              if (!string.IsNullOrEmpty(query.Expand))
              {
                  var propertiesToExpand = query.Expand.Split(',');
                  foreach(var p in propertiesToExpand)
                  {
                      items = items.Include(p.Trim());
                  }
              }

              if (!string.IsNullOrEmpty(query.Filter))
              {
                  if (query.FilterParameters != null)
                  {
                      items = items.Where(query.Filter, query.FilterParameters);
                  }
                  else
                  {
                      items = items.Where(query.Filter);
                  }
              }

              if (!string.IsNullOrEmpty(query.OrderBy))
              {
                  items = items.OrderBy(query.OrderBy);
              }

              if (query.Skip.HasValue)
              {
                  items = items.Skip(query.Skip.Value);
              }

              if (query.Top.HasValue)
              {
                  items = items.Take(query.Top.Value);
              }
          }
          
          OnTablesUpdatesInvoke(ref items);

          return await Task.FromResult(items);
      }

      partial void OnTablesUpdatesDefaultParams(ref long? Id, ref long? ProjectId, ref string TableName, ref string Config);

      partial void OnTablesUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.TablesUpdate> items);  
      public async Task<int> ColorGroupsDeletes(int? Id)
      {
          OnColorGroupsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ColorGroupsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnColorGroupsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnColorGroupsDeletesDefaultParams(ref int? Id);
      partial void OnColorGroupsDeletesInvoke(ref int result);
      public async Task<int> ConstraintRulesDeletes(long? Id)
      {
          OnConstraintRulesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.BigInt) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ConstraintRulesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnConstraintRulesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnConstraintRulesDeletesDefaultParams(ref long? Id);
      partial void OnConstraintRulesDeletesInvoke(ref int result);
      public async Task<int> CountryDeletes(int? Id)
      {
          OnCountryDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[CountryDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnCountryDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnCountryDeletesDefaultParams(ref int? Id);
      partial void OnCountryDeletesInvoke(ref int result);
      public async Task<int> CountryLanguagesDeletes(int? Id)
      {
          OnCountryLanguagesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[CountryLanguagesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnCountryLanguagesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnCountryLanguagesDeletesDefaultParams(ref int? Id);
      partial void OnCountryLanguagesDeletesInvoke(ref int result);
      public async Task<int> DesignSchemesDeletes(string colors_body_background)
      {
          OnDesignSchemesDeletesDefaultParams(ref colors_body_background);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@colors_body_background", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = colors_body_background},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DesignSchemesDelete] @colors_body_background", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDesignSchemesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDesignSchemesDeletesDefaultParams(ref string colors_body_background);
      partial void OnDesignSchemesDeletesInvoke(ref int result);
      public async Task<int> DeviceGroupsDeletes(int? Id)
      {
          OnDeviceGroupsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DeviceGroupsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDeviceGroupsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDeviceGroupsDeletesDefaultParams(ref int? Id);
      partial void OnDeviceGroupsDeletesInvoke(ref int result);
      public async Task<int> DevicesDeletes(int? Id)
      {
          OnDevicesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DevicesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDevicesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDevicesDeletesDefaultParams(ref int? Id);
      partial void OnDevicesDeletesInvoke(ref int result);
      public async Task<int> DynamicJsons(string json)
      {
          OnDynamicJsonsDefaultParams(ref json);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@json", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = json},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicJson] @json", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicJsonsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicJsonsDefaultParams(ref string json);
      partial void OnDynamicJsonsInvoke(ref int result);
      public async Task<int> DynamicQueries(string Query)
      {
          OnDynamicQueriesDefaultParams(ref Query);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Query", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = Query},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicQuery] @Query", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicQueriesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicQueriesDefaultParams(ref string Query);
      partial void OnDynamicQueriesInvoke(ref int result);
      public async Task<int> Dynamicstatistics()
      {
          OnDynamicstatisticsDefaultParams();

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[Dynamicstatistics] ", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicstatisticsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicstatisticsDefaultParams();
      partial void OnDynamicstatisticsInvoke(ref int result);
      public async Task<int> DynamicTables(bool? AllColumns, bool? SelectTop, bool? GetCount, bool? HasWhere, bool? HasOrder, bool? HasGroupBy, bool? HasHaving, bool? HasDirect, bool? LeftJoin, string LeftJoinTable, string LeftJoinTableSelectColumn, bool? RightJoin, string RightJoinTable, string RightJoinTableSelectColumn, bool? InnerJoin, string InnerJoinTable, string InnerJoinTableSelectColumn, string Table, string ColumnNames, string PrimaryKey, int? SelectTopCount, string OrderColumn, string GroupByColumn, string JoinTable, string WhereClause, string HavingClause, string DirectQuery)
      {
          OnDynamicTablesDefaultParams(ref AllColumns, ref SelectTop, ref GetCount, ref HasWhere, ref HasOrder, ref HasGroupBy, ref HasHaving, ref HasDirect, ref LeftJoin, ref LeftJoinTable, ref LeftJoinTableSelectColumn, ref RightJoin, ref RightJoinTable, ref RightJoinTableSelectColumn, ref InnerJoin, ref InnerJoinTable, ref InnerJoinTableSelectColumn, ref Table, ref ColumnNames, ref PrimaryKey, ref SelectTopCount, ref OrderColumn, ref GroupByColumn, ref JoinTable, ref WhereClause, ref HavingClause, ref DirectQuery);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@AllColumns", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = AllColumns},
              new SqlParameter("@SelectTop", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = SelectTop},
              new SqlParameter("@GetCount", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = GetCount},
              new SqlParameter("@HasWhere", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = HasWhere},
              new SqlParameter("@HasOrder", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = HasOrder},
              new SqlParameter("@HasGroupBy", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = HasGroupBy},
              new SqlParameter("@HasHaving", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = HasHaving},
              new SqlParameter("@HasDirect", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = HasDirect},
              new SqlParameter("@LeftJoin", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = LeftJoin},
              new SqlParameter("@LeftJoinTable", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = LeftJoinTable},
              new SqlParameter("@LeftJoinTableSelectColumn", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = LeftJoinTableSelectColumn},
              new SqlParameter("@RightJoin", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = RightJoin},
              new SqlParameter("@RightJoinTable", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = RightJoinTable},
              new SqlParameter("@RightJoinTableSelectColumn", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = RightJoinTableSelectColumn},
              new SqlParameter("@InnerJoin", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = InnerJoin},
              new SqlParameter("@InnerJoinTable", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = InnerJoinTable},
              new SqlParameter("@InnerJoinTableSelectColumn", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = InnerJoinTableSelectColumn},
              new SqlParameter("@Table", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = Table},
              new SqlParameter("@ColumnNames", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = ColumnNames},
              new SqlParameter("@PrimaryKey", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = PrimaryKey},
              new SqlParameter("@SelectTopCount", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = SelectTopCount},
              new SqlParameter("@OrderColumn", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = OrderColumn},
              new SqlParameter("@GroupByColumn", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = GroupByColumn},
              new SqlParameter("@JoinTable", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = JoinTable},
              new SqlParameter("@WhereClause", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = WhereClause},
              new SqlParameter("@HavingClause", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = HavingClause},
              new SqlParameter("@DirectQuery", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = DirectQuery},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicTable] @AllColumns, @SelectTop, @GetCount, @HasWhere, @HasOrder, @HasGroupBy, @HasHaving, @HasDirect, @LeftJoin, @LeftJoinTable, @LeftJoinTableSelectColumn, @RightJoin, @RightJoinTable, @RightJoinTableSelectColumn, @InnerJoin, @InnerJoinTable, @InnerJoinTableSelectColumn, @Table, @ColumnNames, @PrimaryKey, @SelectTopCount, @OrderColumn, @GroupByColumn, @JoinTable, @WhereClause, @HavingClause, @DirectQuery", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicTablesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicTablesDefaultParams(ref bool? AllColumns, ref bool? SelectTop, ref bool? GetCount, ref bool? HasWhere, ref bool? HasOrder, ref bool? HasGroupBy, ref bool? HasHaving, ref bool? HasDirect, ref bool? LeftJoin, ref string LeftJoinTable, ref string LeftJoinTableSelectColumn, ref bool? RightJoin, ref string RightJoinTable, ref string RightJoinTableSelectColumn, ref bool? InnerJoin, ref string InnerJoinTable, ref string InnerJoinTableSelectColumn, ref string Table, ref string ColumnNames, ref string PrimaryKey, ref int? SelectTopCount, ref string OrderColumn, ref string GroupByColumn, ref string JoinTable, ref string WhereClause, ref string HavingClause, ref string DirectQuery);
      partial void OnDynamicTablesInvoke(ref int result);
      public async Task<int> DynamicTablePagers(int? PageSize, int? PageNum, string TableName, string where, string orderBy, string orderWithAsc)
      {
          OnDynamicTablePagersDefaultParams(ref PageSize, ref PageNum, ref TableName, ref where, ref orderBy, ref orderWithAsc);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@PageSize", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = PageSize},
              new SqlParameter("@PageNum", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = PageNum},
              new SqlParameter("@TableName", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = TableName},
              new SqlParameter("@where", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = where},
              new SqlParameter("@orderBy", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = orderBy},
              new SqlParameter("@orderWithAsc", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = orderWithAsc},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicTablePager] @PageSize, @PageNum, @TableName, @where, @orderBy, @orderWithAsc", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicTablePagersInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicTablePagersDefaultParams(ref int? PageSize, ref int? PageNum, ref string TableName, ref string where, ref string orderBy, ref string orderWithAsc);
      partial void OnDynamicTablePagersInvoke(ref int result);
      public async Task<int> DynamicTableRows(string table)
      {
          OnDynamicTableRowsDefaultParams(ref table);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@table", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = table},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicTableRow] @table", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicTableRowsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicTableRowsDefaultParams(ref string table);
      partial void OnDynamicTableRowsInvoke(ref int result);
      public async Task<int> DynamicTableSearches(string Table, int? TableID, string ColumnName, string Query)
      {
          OnDynamicTableSearchesDefaultParams(ref Table, ref TableID, ref ColumnName, ref Query);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Table", SqlDbType.VarChar) {Direction = ParameterDirection.Input, Value = Table},
              new SqlParameter("@TableID", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = TableID},
              new SqlParameter("@ColumnName", SqlDbType.VarChar) {Direction = ParameterDirection.Input, Value = ColumnName},
              new SqlParameter("@Query", SqlDbType.VarChar) {Direction = ParameterDirection.Input, Value = Query},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicTableSearch] @Table, @TableID, @ColumnName, @Query", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicTableSearchesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicTableSearchesDefaultParams(ref string Table, ref int? TableID, ref string ColumnName, ref string Query);
      partial void OnDynamicTableSearchesInvoke(ref int result);
      public async Task<int> DynamicUpserts(string tablename, string tableschema)
      {
          OnDynamicUpsertsDefaultParams(ref tablename, ref tableschema);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@tablename", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = tablename},
              new SqlParameter("@tableschema", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = tableschema},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[DynamicUpsert] @tablename, @tableschema", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnDynamicUpsertsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnDynamicUpsertsDefaultParams(ref string tablename, ref string tableschema);
      partial void OnDynamicUpsertsInvoke(ref int result);
      public async Task<int> FieldsDeletes(long? Id)
      {
          OnFieldsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.BigInt) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[FieldsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnFieldsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnFieldsDeletesDefaultParams(ref long? Id);
      partial void OnFieldsDeletesInvoke(ref int result);
      public async Task<int> ForeignKeyRulesDeletes(long? Id)
      {
          OnForeignKeyRulesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.BigInt) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ForeignKeyRulesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnForeignKeyRulesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnForeignKeyRulesDeletesDefaultParams(ref long? Id);
      partial void OnForeignKeyRulesDeletesInvoke(ref int result);
      public async Task<int> GetAnies(string columnList, string where, string orderBy, bool? orderWithAsc, int? take, string tableName)
      {
          OnGetAniesDefaultParams(ref columnList, ref where, ref orderBy, ref orderWithAsc, ref take, ref tableName);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@columnList", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = columnList},
              new SqlParameter("@where", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = where},
              new SqlParameter("@orderBy", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = orderBy},
              new SqlParameter("@orderWithAsc", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = orderWithAsc},
              new SqlParameter("@take", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = take},
              new SqlParameter("@tableName", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = tableName},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetAny] @columnList, @where, @orderBy, @orderWithAsc, @take, @tableName", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetAniesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetAniesDefaultParams(ref string columnList, ref string where, ref string orderBy, ref bool? orderWithAsc, ref int? take, ref string tableName);
      partial void OnGetAniesInvoke(ref int result);
      public async Task<int> GetExtendedInserts(string pname, string pvalue, string plevel1name, string plevel2name)
      {
          OnGetExtendedInsertsDefaultParams(ref pname, ref pvalue, ref plevel1name, ref plevel2name);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@pname", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = pname},
              new SqlParameter("@pvalue", SqlDbType.VarChar) {Direction = ParameterDirection.Input, Value = pvalue},
              new SqlParameter("@plevel1name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = plevel1name},
              new SqlParameter("@plevel2name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = plevel2name},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetExtendedInsert] @pname, @pvalue, @plevel1name, @plevel2name", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetExtendedInsertsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetExtendedInsertsDefaultParams(ref string pname, ref string pvalue, ref string plevel1name, ref string plevel2name);
      partial void OnGetExtendedInsertsInvoke(ref int result);
      public async Task<int> GetExtendedRemoves(string pname, string plevel1name, string plevel2name)
      {
          OnGetExtendedRemovesDefaultParams(ref pname, ref plevel1name, ref plevel2name);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@pname", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = pname},
              new SqlParameter("@plevel1name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = plevel1name},
              new SqlParameter("@plevel2name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = plevel2name},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetExtendedRemove] @pname, @plevel1name, @plevel2name", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetExtendedRemovesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetExtendedRemovesDefaultParams(ref string pname, ref string plevel1name, ref string plevel2name);
      partial void OnGetExtendedRemovesInvoke(ref int result);
      public async Task<int> GetGroupBies(string column, string where, string groupBy, string havingClause, string tableName)
      {
          OnGetGroupBiesDefaultParams(ref column, ref where, ref groupBy, ref havingClause, ref tableName);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@column", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = column},
              new SqlParameter("@where", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = where},
              new SqlParameter("@groupBy", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = groupBy},
              new SqlParameter("@havingClause", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = havingClause},
              new SqlParameter("@tableName", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = tableName},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetGroupBy] @column, @where, @groupBy, @havingClause, @tableName", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetGroupBiesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetGroupBiesDefaultParams(ref string column, ref string where, ref string groupBy, ref string havingClause, ref string tableName);
      partial void OnGetGroupBiesInvoke(ref int result);
      public async Task<int> GetPagers(int? pageSize, int? pageNum, string tableName, string where, string orderBy, string orderWithAsc, string columnList, int? take)
      {
          OnGetPagersDefaultParams(ref pageSize, ref pageNum, ref tableName, ref where, ref orderBy, ref orderWithAsc, ref columnList, ref take);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@pageSize", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = pageSize},
              new SqlParameter("@pageNum", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = pageNum},
              new SqlParameter("@tableName", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = tableName},
              new SqlParameter("@where", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = where},
              new SqlParameter("@orderBy", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = orderBy},
              new SqlParameter("@orderWithAsc", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = orderWithAsc},
              new SqlParameter("@columnList", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = columnList},
              new SqlParameter("@take", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = take},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetPager] @pageSize, @pageNum, @tableName, @where, @orderBy, @orderWithAsc, @columnList, @take", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetPagersInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetPagersDefaultParams(ref int? pageSize, ref int? pageNum, ref string tableName, ref string where, ref string orderBy, ref string orderWithAsc, ref string columnList, ref int? take);
      partial void OnGetPagersInvoke(ref int result);
      public async Task<int> GetSearchWithLists()
      {
          OnGetSearchWithListsDefaultParams();

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetSearchWithList] ", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetSearchWithListsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetSearchWithListsDefaultParams();
      partial void OnGetSearchWithListsInvoke(ref int result);
      public async Task<int> GetTableFks()
      {
          OnGetTableFksDefaultParams();

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[GetTableFK] ", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnGetTableFksInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnGetTableFksDefaultParams();
      partial void OnGetTableFksInvoke(ref int result);
      public async Task<int> ProgrammingCategoryDeletes(int? Id)
      {
          OnProgrammingCategoryDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProgrammingCategoryDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProgrammingCategoryDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProgrammingCategoryDeletesDefaultParams(ref int? Id);
      partial void OnProgrammingCategoryDeletesInvoke(ref int result);
      public async Task<int> ProgrammingCodesDeletes(int? Id)
      {
          OnProgrammingCodesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProgrammingCodesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProgrammingCodesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProgrammingCodesDeletesDefaultParams(ref int? Id);
      partial void OnProgrammingCodesDeletesInvoke(ref int result);
      public async Task<int> ProgrammingCodeTemplatesDeletes(int? Id)
      {
          OnProgrammingCodeTemplatesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProgrammingCodeTemplatesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProgrammingCodeTemplatesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProgrammingCodeTemplatesDeletesDefaultParams(ref int? Id);
      partial void OnProgrammingCodeTemplatesDeletesInvoke(ref int result);
      public async Task<int> ProgrammingTechnologyDeletes(int? Id)
      {
          OnProgrammingTechnologyDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProgrammingTechnologyDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProgrammingTechnologyDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProgrammingTechnologyDeletesDefaultParams(ref int? Id);
      partial void OnProgrammingTechnologyDeletesInvoke(ref int result);
      public async Task<int> ProjectCategoryDeletes(int? Id)
      {
          OnProjectCategoryDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectCategoryDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectCategoryDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectCategoryDeletesDefaultParams(ref int? Id);
      partial void OnProjectCategoryDeletesInvoke(ref int result);
      public async Task<int> ProjectConfigurationKeyAndValueDeletes(int? Id)
      {
          OnProjectConfigurationKeyAndValueDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectConfigurationKeyAndValueDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectConfigurationKeyAndValueDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectConfigurationKeyAndValueDeletesDefaultParams(ref int? Id);
      partial void OnProjectConfigurationKeyAndValueDeletesInvoke(ref int result);
      public async Task<int> ProjectConfigurationsDeletes(int? Id)
      {
          OnProjectConfigurationsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectConfigurationsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectConfigurationsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectConfigurationsDeletesDefaultParams(ref int? Id);
      partial void OnProjectConfigurationsDeletesInvoke(ref int result);
      public async Task<int> ProjectFunctionGroupsDeletes(int? Id)
      {
          OnProjectFunctionGroupsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectFunctionGroupsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectFunctionGroupsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectFunctionGroupsDeletesDefaultParams(ref int? Id);
      partial void OnProjectFunctionGroupsDeletesInvoke(ref int result);
      public async Task<int> ProjectFunctionsDeletes(int? Id)
      {
          OnProjectFunctionsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectFunctionsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectFunctionsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectFunctionsDeletesDefaultParams(ref int? Id);
      partial void OnProjectFunctionsDeletesInvoke(ref int result);
      public async Task<int> ProjectPageComponentElementsDeletes(int? Id)
      {
          OnProjectPageComponentElementsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectPageComponentElementsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectPageComponentElementsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectPageComponentElementsDeletesDefaultParams(ref int? Id);
      partial void OnProjectPageComponentElementsDeletesInvoke(ref int result);
      public async Task<int> ProjectPageComponentsDeletes(int? Id)
      {
          OnProjectPageComponentsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectPageComponentsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectPageComponentsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectPageComponentsDeletesDefaultParams(ref int? Id);
      partial void OnProjectPageComponentsDeletesInvoke(ref int result);
      public async Task<int> ProjectPagesDeletes(int? Id)
      {
          OnProjectPagesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectPagesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectPagesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectPagesDeletesDefaultParams(ref int? Id);
      partial void OnProjectPagesDeletesInvoke(ref int result);
      public async Task<int> ProjectsDeletes(int? Id)
      {
          OnProjectsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectsDeletesDefaultParams(ref int? Id);
      partial void OnProjectsDeletesInvoke(ref int result);
      public async Task<int> ProjectTableColumnsDeletes(int? Id)
      {
          OnProjectTableColumnsDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectTableColumnsDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectTableColumnsDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectTableColumnsDeletesDefaultParams(ref int? Id);
      partial void OnProjectTableColumnsDeletesInvoke(ref int result);
      public async Task<int> ProjectTablesDeletes(int? Id)
      {
          OnProjectTablesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ProjectTablesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnProjectTablesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnProjectTablesDeletesDefaultParams(ref int? Id);
      partial void OnProjectTablesDeletesInvoke(ref int result);
      public async Task<int> ReferenceWebSitesDeletes(int? Id)
      {
          OnReferenceWebSitesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[ReferenceWebSitesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnReferenceWebSitesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnReferenceWebSitesDeletesDefaultParams(ref int? Id);
      partial void OnReferenceWebSitesDeletesInvoke(ref int result);
      public async Task<int> SchemesDeletes(long? Id)
      {
          OnSchemesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.BigInt) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[SchemesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSchemesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSchemesDeletesDefaultParams(ref long? Id);
      partial void OnSchemesDeletesInvoke(ref int result);
      public async Task<int> SpDbmmonitoraddmonitorings(int? update_period)
      {
          OnSpDbmmonitoraddmonitoringsDefaultParams(ref update_period);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@update_period", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = update_period},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_dbmmonitoraddmonitoring] @update_period", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSpDbmmonitoraddmonitoringsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpDbmmonitoraddmonitoringsDefaultParams(ref int? update_period);
      partial void OnSpDbmmonitoraddmonitoringsInvoke(ref int result);
      public async Task<int> SpDbmmonitorresults(string database_name, int? mode, int? update_table)
      {
          OnSpDbmmonitorresultsDefaultParams(ref database_name, ref mode, ref update_table);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@database_name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = database_name},
              new SqlParameter("@mode", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = mode},
              new SqlParameter("@update_table", SqlDbType.Int) {Direction = ParameterDirection.Input, Value = update_table},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_dbmmonitorresults] @database_name, @mode, @update_table", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSpDbmmonitorresultsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpDbmmonitorresultsDefaultParams(ref string database_name, ref int? mode, ref int? update_table);
      partial void OnSpDbmmonitorresultsInvoke(ref int result);
      public async Task<int> SpDbmmonitorupdates(string database_name)
      {
          OnSpDbmmonitorupdatesDefaultParams(ref database_name);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@database_name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = database_name},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_dbmmonitorupdate] @database_name", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSpDbmmonitorupdatesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpDbmmonitorupdatesDefaultParams(ref string database_name);
      partial void OnSpDbmmonitorupdatesInvoke(ref int result);
      public async Task<int> SpDroplogins(string loginame)
      {
          OnSpDroploginsDefaultParams(ref loginame);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@loginame", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = loginame},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_droplogin] @loginame", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSpDroploginsInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpDroploginsDefaultParams(ref string loginame);
      partial void OnSpDroploginsInvoke(ref int result);
      public async Task<ZarenUI.Server.Models.JSONServer.SpKillOldestTransactionOnSecondaryResult> SpKillOldestTransactionOnSecondaries(string database_name, bool? kill_all, long? killed_xdests)
      {
          OnSpKillOldestTransactionOnSecondariesDefaultParams(ref database_name, ref kill_all, ref killed_xdests);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@database_name", SqlDbType.NVarChar) {Direction = ParameterDirection.Input, Value = database_name},
              new SqlParameter("@kill_all", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = kill_all},
              new SqlParameter("@killed_xdests", SqlDbType.BigInt) {Direction = ParameterDirection.InputOutput}, 

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_kill_oldest_transaction_on_secondary] @database_name, @kill_all, @killed_xdests out", @params);

          var result = new ZarenUI.Server.Models.JSONServer.SpKillOldestTransactionOnSecondaryResult();

          foreach(var _p in @params)
          {
            if(_p.Direction == ParameterDirection.Output && _p.Value == DBNull.Value)
            {
                _p.Value = null;
            }
          }
            
          result.returnValue = Convert.ToInt32(@params[0].Value);
          result.killed_xdests = Convert.ToInt64(@params[3].Value);


          OnSpKillOldestTransactionOnSecondariesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpKillOldestTransactionOnSecondariesDefaultParams(ref string database_name, ref bool? kill_all, ref long? killed_xdests);
      partial void OnSpKillOldestTransactionOnSecondariesInvoke(ref ZarenUI.Server.Models.JSONServer.SpKillOldestTransactionOnSecondaryResult result);
      public async Task<int> SpMsgetalertinfos(bool? includeaddresses)
      {
          OnSpMsgetalertinfosDefaultParams(ref includeaddresses);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@includeaddresses", SqlDbType.Bit) {Direction = ParameterDirection.Input, Value = includeaddresses},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[sp_MSgetalertinfo] @includeaddresses", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnSpMsgetalertinfosInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnSpMsgetalertinfosDefaultParams(ref bool? includeaddresses);
      partial void OnSpMsgetalertinfosInvoke(ref int result);
      public async Task<int> TablesDeletes(long? Id)
      {
          OnTablesDeletesDefaultParams(ref Id);

          SqlParameter[] @params =
          {
              new SqlParameter("@returnVal", SqlDbType.Int) {Direction = ParameterDirection.Output},
              new SqlParameter("@Id", SqlDbType.BigInt) {Direction = ParameterDirection.Input, Value = Id},

          };

          foreach(var _p in @params)
          {
              if(_p.Direction == ParameterDirection.Input && _p.Value == null)
              {
                  _p.Value = DBNull.Value;
              }
          }

          Context.Database.ExecuteSqlRaw("EXEC @returnVal=[dbo].[TablesDelete] @Id", @params);

          int result = Convert.ToInt32(@params[0].Value);


          OnTablesDeletesInvoke(ref result);

          return await Task.FromResult(result);
      }

      partial void OnTablesDeletesDefaultParams(ref long? Id);
      partial void OnTablesDeletesInvoke(ref int result);
    }
}