@page "/booking-travellers"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenService ZarenService
@inject Microsoft.Extensions.Localization.IStringLocalizer<BookingTravellers> L

<PageTitle>BookingTravellers</PageTitle>
<RadzenStack>
<RadzenRow AlignItems="AlignItems.Center">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenText Text="BookingTravellers" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                <RadzenSplitButtonItem Text="CSV" Value="csv" />
            </RadzenSplitButton>
            <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
<RadzenRow>
    <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"  AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@bookingTravellers"    TItem="ZarenBO2.Models.Zaren.BookingTraveller" RowSelect="@EditRow" >
            <Columns>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="ReservationNumber" Title="Reservation Number">                    </RadzenDataGridColumn>                    <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="TransactionId" Title="TransactionId">                        </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="FirstName" Title="First Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="LastName" Title="Last Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Email" Title="Email">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="GovernmentId" Title="Government Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="CreatedDate" Title="Created Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Gender" Title="Gender">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="BirthDate" Title="Birth Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="MobileNumber" Title="Mobile Number">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="IsFirstContact" Title="Is First Contact">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassportInfoSerial" Title="Passport Info Serial">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassportInfoNumber" Title="Passport Info Number">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassportExpireDate" Title="Passport Expire Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassportIssueDate" Title="Passport Issue Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassportCountryCode" Title="Passport Country Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="PassengerType" Title="Passenger Type">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Type" Title="Type">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Title" Title="Title">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="NationalityTwoLetter" Title="Nationality Two Letter">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Property="Note" Title="Note">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.BookingTraveller" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="bookingTraveller">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, bookingTraveller)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<ZarenBO2.Models.Zaren.BookingTraveller> bookingTravellers;

    protected RadzenDataGrid<ZarenBO2.Models.Zaren.BookingTraveller> grid0;

    protected string search = "";

    [Inject]
    protected SecurityService Security { get; set; }

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        bookingTravellers = await ZarenService.GetBookingTravellers(new Query { Filter = $@"i => i.ReservationNumber.Contains(@0) || i.TransactionId.Contains(@0) || i.FirstName.Contains(@0) || i.LastName.Contains(@0) || i.Email.Contains(@0) || i.GovernmentId.Contains(@0) || i.MobileNumber.Contains(@0) || i.PassportInfoSerial.Contains(@0) || i.PassportInfoNumber.Contains(@0) || i.PassportCountryCode.Contains(@0) || i.NationalityTwoLetter.Contains(@0) || i.Note.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        bookingTravellers = await ZarenService.GetBookingTravellers(new Query { Filter = $@"i => i.ReservationNumber.Contains(@0) ||i.TransactionId.Contains(@0) || i.FirstName.Contains(@0) || i.LastName.Contains(@0) || i.Email.Contains(@0) || i.GovernmentId.Contains(@0) || i.MobileNumber.Contains(@0) || i.PassportInfoSerial.Contains(@0) || i.PassportInfoNumber.Contains(@0) || i.PassportCountryCode.Contains(@0) || i.NationalityTwoLetter.Contains(@0) || i.Note.Contains(@0)", FilterParameters = new object[] { search } });
        bookingTravellers = bookingTravellers.OrderByDescending(a => a.Id).ToList();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddBookingTraveller>("Add BookingTraveller", null);
        await grid0.Reload();
    }

    protected async Task EditRow(ZarenBO2.Models.Zaren.BookingTraveller args)
    {
        await DialogService.OpenAsync<EditBookingTraveller>("Edit BookingTraveller", new Dictionary<string, object> { {"Id", args.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenBO2.Models.Zaren.BookingTraveller bookingTraveller)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenService.DeleteBookingTraveller(bookingTraveller.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete BookingTraveller" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenService.ExportBookingTravellersToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "BookingTravellers");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenService.ExportBookingTravellersToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "BookingTravellers");
        }
    }
}
