@page "/add-airport"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Add Airport</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Airport</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.Airport" Data="@airport" Visible="@(airport != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Airport Code" Component="AirportCode" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@airport.AirportCode" Name="AirportCode" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Airport Name" Component="AirportName" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@airport.AirportName" Name="AirportName" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="City Id" Component="CityId" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@airport.CityId" Name="CityId" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Airport Timestamp" Component="AirportTimestamp" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@airport.AirportTimestamp" Name="AirportTimestamp" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Airport Active" Component="AirportActive" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenCheckBox @bind-Value="@airport.AirportActive" Name="AirportActive" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Country" Component="Country" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@countriesForCountryId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasCountryIdValue) Placeholder="Choose Country" style="display: block; width: 100%" @bind-Value="@airport.CountryId" Name="CountryId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    protected override async Task OnInitializedAsync()
    {

        countriesForCountryId = await ZarenSoftService.GetCountries();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.Airport airport;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Country> countriesForCountryId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.CreateAirport(airport);
            DialogService.Close(airport);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasCountryIdValue;

    [Parameter]
    public int? CountryId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        airport = new ZarenTravel.Models.ZarenSoft.Airport();

        hasCountryIdValue = parameters.TryGetValue<int?>("CountryId", out var hasCountryIdResult);

        if (hasCountryIdValue)
        {
            airport.CountryId = hasCountryIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
