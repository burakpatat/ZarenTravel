@page "/brokers"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Brokers</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Brokers" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@brokers"    TItem="ZarenTravel.Models.ZarenSoft.Broker" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Property="BrokerCode" Title="Broker Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Property="BrokerName" Title="Broker Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Property="BrokerTimestamp" Title="Broker Timestamp">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Property="BrokerActive" Title="Broker Active">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Broker" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="broker">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, broker)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(broker != null)" Size="H1" Text="Airs" />
                    <RadzenButton Visible="@(broker != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => AirAddButtonClick(args,broker)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(broker != null)" @ref=AirDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@broker?.Airs" TItem="ZarenTravel.Models.ZarenSoft.Air"  RowSelect="@(args => AirRowSelect(args, broker))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirRecordAirline" Title="Air Record Airline">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirTicket" Title="Air Ticket">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirBookedDate" Title="Air Booked Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirIssueddate" Title="Air Issueddate">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirReIssued" Title="Air Re Issued">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirOriginalTicket" Title="Air Original Ticket">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirFare" Title="Air Fare">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirTax" Title="Air Tax">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirLowestFare" Title="Air Lowest Fare">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirHighestFare" Title="Air Highest Fare">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirFareBases" Title="Air Fare Bases">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirIncludeBags" Title="Air Include Bags">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirTimestamp" Title="Air Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="AirActive" Title="Air Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="Airline.AirlineCode" Title="Airline">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="Broker.BrokerCode" Title="Broker">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="Currency1.CurrencyCode" Title="Currency1">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Property="Pnr.PNRRecord" Title="Pnr">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Air" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="airChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => AirDeleteButtonClick(args, airChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Broker> brokers;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Broker> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        brokers = await ZarenSoftService.GetBrokers(new Query { Filter = $@"i => i.BrokerCode.Contains(@0) || i.BrokerName.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        brokers = await ZarenSoftService.GetBrokers(new Query { Filter = $@"i => i.BrokerCode.Contains(@0) || i.BrokerName.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddBroker>("Add Broker", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.Broker> args)
    {
        await DialogService.OpenAsync<EditBroker>("Edit Broker", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Broker broker)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteBroker(broker.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Broker" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportBrokersToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Brokers");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportBrokersToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Brokers");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.Broker broker;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.Broker args)
    {
        broker = args;
        var AirResult = await ZarenSoftService.GetAirs(new Query { Filter = $"i => i.BrokerId == {args.Id}", Expand = "Airline,Broker,Currency1,Pnr" });
        if (AirResult != null)
        {
            args.Airs = AirResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Air> AirDataGrid;

    protected async Task AirAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Broker data)
    {
        var dialogResult = await DialogService.OpenAsync<AddAir>("Add Air", new Dictionary<string, object> { {"BrokerId" , data.Id} });
        await GetChildData(data);
        await AirDataGrid.Reload();
    }

    protected async Task AirRowSelect(ZarenTravel.Models.ZarenSoft.Air args, ZarenTravel.Models.ZarenSoft.Broker data)
    {
        var dialogResult = await DialogService.OpenAsync<EditAir>("Edit Air", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await AirDataGrid.Reload();
    }

    protected async Task AirDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Air air)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteAir(air.Id);

                if (deleteResult != null)
                {
                    await AirDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Air" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.Broker> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            broker = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(broker);
        }

        lastFilter = grid0.Query.Filter;
    }
}
