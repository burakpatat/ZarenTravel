@page "/add-pn-r"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Add PnR</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save PnR</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.PnR" Data="@pnR" Visible="@(pnR != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="P C C Id" Component="PCCId" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@pnR.PCCId" Name="PCCId" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="P N R Record" Component="PNRRecord" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@pnR.PNRRecord" Name="PNRRecord" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="P N R Timestamp" Component="PNRTimestamp" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@pnR.PNRTimestamp" Name="PNRTimestamp" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="P N R Active" Component="PNRActive" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenCheckBox @bind-Value="@pnR.PNRActive" Name="PNRActive" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Agency" Component="Agency" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@agenciesForAgencyId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasAgencyIdValue) Placeholder="Choose Agency" style="display: block; width: 100%" @bind-Value="@pnR.AgencyId" Name="AgencyId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Company" Component="Company" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@companiesForCompanyId" TextProperty="CompanyCode" ValueProperty="Id"
                        Disabled=@(hasCompanyIdValue) Placeholder="Choose Company" style="display: block; width: 100%" @bind-Value="@pnR.CompanyId" Name="CompanyId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Passenger" Component="Passenger" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@passengersForPassengerId" TextProperty="PassengerFullName" ValueProperty="Id"
                        Disabled=@(hasPassengerIdValue) Placeholder="Choose Passenger" style="display: block; width: 100%" @bind-Value="@pnR.PassengerId" Name="PassengerId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    protected override async Task OnInitializedAsync()
    {

        agenciesForAgencyId = await ZarenSoftService.GetAgencies();

        companiesForCompanyId = await ZarenSoftService.GetCompanies();

        passengersForPassengerId = await ZarenSoftService.GetPassengers();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.PnR pnR;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Agency> agenciesForAgencyId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Company> companiesForCompanyId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Passenger> passengersForPassengerId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.CreatePnR(pnR);
            DialogService.Close(pnR);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasAgencyIdValue;

    [Parameter]
    public int? AgencyId { get; set; }

    bool hasCompanyIdValue;

    [Parameter]
    public int? CompanyId { get; set; }

    bool hasPassengerIdValue;

    [Parameter]
    public int? PassengerId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        pnR = new ZarenTravel.Models.ZarenSoft.PnR();

        hasAgencyIdValue = parameters.TryGetValue<int?>("AgencyId", out var hasAgencyIdResult);

        if (hasAgencyIdValue)
        {
            pnR.AgencyId = hasAgencyIdResult;
        }

        hasCompanyIdValue = parameters.TryGetValue<int?>("CompanyId", out var hasCompanyIdResult);

        if (hasCompanyIdValue)
        {
            pnR.CompanyId = hasCompanyIdResult;
        }

        hasPassengerIdValue = parameters.TryGetValue<int?>("PassengerId", out var hasPassengerIdResult);

        if (hasPassengerIdValue)
        {
            pnR.PassengerId = hasPassengerIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
