@page "/countries"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject zaren_prodService zaren_prodService

<PageTitle>Countries</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Countries" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"  AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@countries"    TItem="ZarenTravelBO.Models.zaren_prod.Country" RowDoubleClick="@EditRow" >
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="ShortName" Title="Short Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Temperature" Title="Temperature">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Area" Title="Area">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Religion" Title="Religion">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Location" Title="Location">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Population" Title="Population">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Density" Title="Density">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Symbol" Title="Symbol">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Abbreviation" Title="Abbreviation">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="FlagBase64" Title="Flag Base64">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Expectancy" Title="Expectancy">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Dish" Title="Dish">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="LanguagesJson" Title="Languages Json">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Landlocked" Title="Landlocked">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Iso" Title="Iso">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Independence" Title="Independence">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Government" Title="Government">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="North" Title="North">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="South" Title="South">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="West" Title="West">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="East" Title="East">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Elevation" Title="Elevation">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="DomainTld" Title="Domain Tld">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="CurrencyName" Title="Currency Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="CurrencyCode" Title="Currency Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="CostLine" Title="Cost Line">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Continent" Title="Continent">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="City" Title="City">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="CallingCode" Title="Calling Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Barcode" Title="Barcode">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Height" Title="Height">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="DefaultLanguageId" Title="Default Language Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="HasFraudRisk" Title="Has Fraud Risk">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="HasManuelRegistration" Title="Has Manuel Registration">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Property="Logo" Title="Logo">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravelBO.Models.zaren_prod.Country" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="country">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, country)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {

    protected IEnumerable<ZarenTravelBO.Models.zaren_prod.Country> countries;

    protected RadzenDataGrid<ZarenTravelBO.Models.zaren_prod.Country> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        countries = await zaren_prodService.GetCountries(new Query { Filter = $@"i => i.Name.Contains(@0) || i.ShortName.Contains(@0) || i.Temperature.Contains(@0) || i.Area.Contains(@0) || i.Religion.Contains(@0) || i.Location.Contains(@0) || i.Density.Contains(@0) || i.Symbol.Contains(@0) || i.Abbreviation.Contains(@0) || i.FlagBase64.Contains(@0) || i.Expectancy.Contains(@0) || i.Dish.Contains(@0) || i.LanguagesJson.Contains(@0) || i.Landlocked.Contains(@0) || i.Iso.Contains(@0) || i.Independence.Contains(@0) || i.Government.Contains(@0) || i.North.Contains(@0) || i.South.Contains(@0) || i.West.Contains(@0) || i.East.Contains(@0) || i.Elevation.Contains(@0) || i.DomainTld.Contains(@0) || i.CurrencyName.Contains(@0) || i.CurrencyCode.Contains(@0) || i.CostLine.Contains(@0) || i.Continent.Contains(@0) || i.City.Contains(@0) || i.CallingCode.Contains(@0) || i.Barcode.Contains(@0) || i.Height.Contains(@0) || i.Logo.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        countries = await zaren_prodService.GetCountries(new Query { Filter = $@"i => i.Name.Contains(@0) || i.ShortName.Contains(@0) || i.Temperature.Contains(@0) || i.Area.Contains(@0) || i.Religion.Contains(@0) || i.Location.Contains(@0) || i.Density.Contains(@0) || i.Symbol.Contains(@0) || i.Abbreviation.Contains(@0) || i.FlagBase64.Contains(@0) || i.Expectancy.Contains(@0) || i.Dish.Contains(@0) || i.LanguagesJson.Contains(@0) || i.Landlocked.Contains(@0) || i.Iso.Contains(@0) || i.Independence.Contains(@0) || i.Government.Contains(@0) || i.North.Contains(@0) || i.South.Contains(@0) || i.West.Contains(@0) || i.East.Contains(@0) || i.Elevation.Contains(@0) || i.DomainTld.Contains(@0) || i.CurrencyName.Contains(@0) || i.CurrencyCode.Contains(@0) || i.CostLine.Contains(@0) || i.Continent.Contains(@0) || i.City.Contains(@0) || i.CallingCode.Contains(@0) || i.Barcode.Contains(@0) || i.Height.Contains(@0) || i.Logo.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddCountry>("Add Country", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravelBO.Models.zaren_prod.Country> args)
    {
        await DialogService.OpenAsync<EditCountry>("Edit Country", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravelBO.Models.zaren_prod.Country country)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await zaren_prodService.DeleteCountry(country.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Country" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await zaren_prodService.ExportCountriesToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Countries");
        }

        if (args == null || args.Value == "xlsx")
        {
            await zaren_prodService.ExportCountriesToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Countries");
        }
    }
}
