/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace aaa {

export class bbb {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    city(): Promise<CityModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/city";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCity(_response);
        });
    }

    protected processCity(response: Response): Promise<CityModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CityModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    country(): Promise<CountryModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/country";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCountry(_response);
        });
    }

    protected processCountry(response: Response): Promise<CountryModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CountryModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    country2(id: number): Promise<CountryModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/country/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCountry2(_response);
        });
    }

    protected processCountry2(response: Response): Promise<CountryModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CountryModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    name(name: string): Promise<CountryModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/country/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName(_response);
        });
    }

    protected processName(response: Response): Promise<CountryModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CountryModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CountryModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    city2(id: number): Promise<CityModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/city/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCity2(_response);
        });
    }

    protected processCity2(response: Response): Promise<CityModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CityModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    name2(name: string): Promise<CityModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/city/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName2(_response);
        });
    }

    protected processName2(response: Response): Promise<CityModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CityModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    countryId(id: number): Promise<CityModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/city/countryId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCountryId(_response);
        });
    }

    protected processCountryId(response: Response): Promise<CityModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CityModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    cityId(id: number): Promise<DistrictModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/district/cityId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCityId(_response);
        });
    }

    protected processCityId(response: Response): Promise<DistrictModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DistrictModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DistrictModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    name3(id: number, name: string): Promise<CityModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Address/city/countryId/{id}/name/{name}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName3(_response);
        });
    }

    protected processName3(response: Response): Promise<CityModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CityModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CityModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    test(): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTest(_response);
        });
    }

    protected processTest(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequestModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    brand(): Promise<BrandModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrand(_response);
        });
    }

    protected processBrand(response: Response): Promise<BrandModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brand2(body: BrandModel | undefined): Promise<BrandModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrand2(_response);
        });
    }

    protected processBrand2(response: Response): Promise<BrandModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brand3(body: BrandModel | undefined): Promise<BrandModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrand3(_response);
        });
    }

    protected processBrand3(response: Response): Promise<BrandModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brand4(id: number): Promise<BrandModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrand4(_response);
        });
    }

    protected processBrand4(response: Response): Promise<BrandModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brand5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Brand/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrand5(_response);
        });
    }

    protected processBrand5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    typeId(id: number): Promise<BrandModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand/typeId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTypeId(_response);
        });
    }

    protected processTypeId(response: Response): Promise<BrandModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brandImageUpload(body: Blob | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Brand/BrandImageUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandImageUpload(_response);
        });
    }

    protected processBrandImageUpload(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    name4(name: string): Promise<BrandModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brand/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName4(_response);
        });
    }

    protected processName4(response: Response): Promise<BrandModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brandV2(body: Brand | undefined): Promise<BrandServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandV2(_response);
        });
    }

    protected processBrandV2(response: Response): Promise<BrandServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brandV22(body: Brand | undefined): Promise<BrandServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandV22(_response);
        });
    }

    protected processBrandV22(response: Response): Promise<BrandServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brandV23(): Promise<BrandInfoListServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandV23(_response);
        });
    }

    protected processBrandV23(response: Response): Promise<BrandInfoListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandInfoListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandInfoListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brandDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BrandV2/BrandDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandDelete(_response);
        });
    }

    protected processBrandDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    brandV24(id: number): Promise<BrandServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandV24(_response);
        });
    }

    protected processBrandV24(response: Response): Promise<BrandServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brandgetbyidByCache(id: number): Promise<BrandServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2/BrandgetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandgetbyidByCache(_response);
        });
    }

    protected processBrandgetbyidByCache(response: Response): Promise<BrandServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brandgetallByCache(): Promise<BrandListServiceResponse> {
        let url_ = this.baseUrl + "/api/BrandV2/BrandgetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandgetallByCache(_response);
        });
    }

    protected processBrandgetallByCache(response: Response): Promise<BrandListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brief(): Promise<BriefModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrief(_response);
        });
    }

    protected processBrief(response: Response): Promise<BriefModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brief2(body: BriefModel | undefined): Promise<BriefModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrief2(_response);
        });
    }

    protected processBrief2(response: Response): Promise<BriefModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brief3(body: BriefModel | undefined): Promise<BriefModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrief3(_response);
        });
    }

    protected processBrief3(response: Response): Promise<BriefModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brief4(id: number): Promise<BriefModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrief4(_response);
        });
    }

    protected processBrief4(response: Response): Promise<BriefModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    brief5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Brief/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrief5(_response);
        });
    }

    protected processBrief5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    name5(name: string): Promise<BriefModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName5(_response);
        });
    }

    protected processName5(response: Response): Promise<BriefModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    scope(body: ScopeItem | undefined): Promise<ScopeItemServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/Scope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope(_response);
        });
    }

    protected processScope(response: Response): Promise<ScopeItemServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScopeItemServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScopeItemServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    scope2(body: ScopeItem | undefined): Promise<ScopeItemListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/Scope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope2(_response);
        });
    }

    protected processScope2(response: Response): Promise<ScopeItemListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScopeItemListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScopeItemListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    scope3(brief: number, socialmedia: number): Promise<BooleanServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/Scope/{brief}/{socialmedia}";
        if (brief === undefined || brief === null)
            throw new Error("The parameter 'brief' must be defined.");
        url_ = url_.replace("{brief}", encodeURIComponent("" + brief)); 
        if (socialmedia === undefined || socialmedia === null)
            throw new Error("The parameter 'socialmedia' must be defined.");
        url_ = url_.replace("{socialmedia}", encodeURIComponent("" + socialmedia)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope3(_response);
        });
    }

    protected processScope3(response: Response): Promise<BooleanServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    offerUpsert(body: BriefOfferModel | undefined): Promise<BriefOfferModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/OfferUpsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOfferUpsert(_response);
        });
    }

    protected processOfferUpsert(response: Response): Promise<BriefOfferModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefOfferModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefOfferModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    offer(id: number): Promise<BriefOfferViewModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/{id}/offer";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOffer(_response);
        });
    }

    protected processOffer(response: Response): Promise<BriefOfferViewModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefOfferViewModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefOfferViewModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    offer2(id: number): Promise<BriefOfferViewModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/offer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOffer2(_response);
        });
    }

    protected processOffer2(response: Response): Promise<BriefOfferViewModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BriefOfferViewModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BriefOfferViewModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    offer3(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Brief/offer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOffer3(_response);
        });
    }

    protected processOffer3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    offerApprove(id: number): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/Brief/OfferApprove/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOfferApprove(_response);
        });
    }

    protected processOfferApprove(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaign(body: CampaignDTO | undefined): Promise<CampaignDTOServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaign(_response);
        });
    }

    protected processCampaign(response: Response): Promise<CampaignDTOServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDTOServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDTOServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaign2(body: CampaignDTO | undefined): Promise<CampaignDTOServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaign2(_response);
        });
    }

    protected processCampaign2(response: Response): Promise<CampaignDTOServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDTOServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDTOServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaign3(): Promise<CampaignDTOListServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaign3(_response);
        });
    }

    protected processCampaign3(response: Response): Promise<CampaignDTOListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDTOListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDTOListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    scope4(body: ScopeItem | undefined): Promise<ScopeItemServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/Scope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope4(_response);
        });
    }

    protected processScope4(response: Response): Promise<ScopeItemServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScopeItemServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScopeItemServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    scope5(body: ScopeItem | undefined): Promise<ScopeItemListServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/Scope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope5(_response);
        });
    }

    protected processScope5(response: Response): Promise<ScopeItemListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScopeItemListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ScopeItemListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    scope6(campaign: number, socialmedia: number): Promise<BooleanServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/Scope/{campaign}/{socialmedia}";
        if (campaign === undefined || campaign === null)
            throw new Error("The parameter 'campaign' must be defined.");
        url_ = url_.replace("{campaign}", encodeURIComponent("" + campaign)); 
        if (socialmedia === undefined || socialmedia === null)
            throw new Error("The parameter 'socialmedia' must be defined.");
        url_ = url_.replace("{socialmedia}", encodeURIComponent("" + socialmedia)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processScope6(_response);
        });
    }

    protected processScope6(response: Response): Promise<BooleanServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Campaign/CampaignDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignDelete(_response);
        });
    }

    protected processCampaignDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    statuUpdate(body: CampaignDTO | undefined): Promise<CampaignDTOServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/StatuUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStatuUpdate(_response);
        });
    }

    protected processStatuUpdate(response: Response): Promise<CampaignDTOServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDTOServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDTOServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaign4(id: number): Promise<CampaignDTOServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaign4(_response);
        });
    }

    protected processCampaign4(response: Response): Promise<CampaignDTOServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDTOServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDTOServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    uploadMedia(body: Blob | undefined): Promise<StringServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/UploadMedia";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadMedia(_response);
        });
    }

    protected processUploadMedia(response: Response): Promise<StringServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    uploadFile(body: Blob | undefined): Promise<StringServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: Response): Promise<StringServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    costCalculationBulkInsert(body: CostCalculations[] | undefined): Promise<CostCalculationsListServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/CostCalculationBulkInsert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationBulkInsert(_response);
        });
    }

    protected processCostCalculationBulkInsert(response: Response): Promise<CostCalculationsListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    costCalculationBulkUpdate(body: CostCalculations[] | undefined): Promise<CostCalculationsListServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/CostCalculationBulkUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationBulkUpdate(_response);
        });
    }

    protected processCostCalculationBulkUpdate(response: Response): Promise<CostCalculationsListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypes(): Promise<CompanyTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/Campaign/CompanyTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypes(_response);
        });
    }

    protected processCompanyTypes(response: Response): Promise<CompanyTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignCategoryV2(body: CampaignCategory | undefined): Promise<CampaignCategoryServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategoryV2(_response);
        });
    }

    protected processCampaignCategoryV2(response: Response): Promise<CampaignCategoryServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignCategoryV22(body: CampaignCategory | undefined): Promise<CampaignCategoryServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategoryV22(_response);
        });
    }

    protected processCampaignCategoryV22(response: Response): Promise<CampaignCategoryServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignCategoryV23(): Promise<CampaignCategoryListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategoryV23(_response);
        });
    }

    protected processCampaignCategoryV23(response: Response): Promise<CampaignCategoryListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignCategoryDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2/CampaignCategoryDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategoryDelete(_response);
        });
    }

    protected processCampaignCategoryDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    campaignCategoryV24(id: number): Promise<CampaignCategoryServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategoryV24(_response);
        });
    }

    protected processCampaignCategoryV24(response: Response): Promise<CampaignCategoryServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignCategorygetbyidByCache(id: number): Promise<CampaignCategoryServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2/CampaignCategorygetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategorygetbyidByCache(_response);
        });
    }

    protected processCampaignCategorygetbyidByCache(response: Response): Promise<CampaignCategoryServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignCategorygetallByCache(): Promise<CampaignCategoryListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignCategoryV2/CampaignCategorygetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignCategorygetallByCache(_response);
        });
    }

    protected processCampaignCategorygetallByCache(response: Response): Promise<CampaignCategoryListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignCategoryListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignCategoryListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignReportTypeV2(body: CampaignReportType | undefined): Promise<CampaignReportTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypeV2(_response);
        });
    }

    protected processCampaignReportTypeV2(response: Response): Promise<CampaignReportTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignReportTypeV22(body: CampaignReportType | undefined): Promise<CampaignReportTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypeV22(_response);
        });
    }

    protected processCampaignReportTypeV22(response: Response): Promise<CampaignReportTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignReportTypeV23(): Promise<CampaignReportTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypeV23(_response);
        });
    }

    protected processCampaignReportTypeV23(response: Response): Promise<CampaignReportTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignReportTypeDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2/CampaignReportTypeDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypeDelete(_response);
        });
    }

    protected processCampaignReportTypeDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    campaignReportTypeV24(id: number): Promise<CampaignReportTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypeV24(_response);
        });
    }

    protected processCampaignReportTypeV24(response: Response): Promise<CampaignReportTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignReportTypegetbyidByCache(id: number): Promise<CampaignReportTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2/CampaignReportTypegetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypegetbyidByCache(_response);
        });
    }

    protected processCampaignReportTypegetbyidByCache(response: Response): Promise<CampaignReportTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignReportTypegetallByCache(): Promise<CampaignReportTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignReportTypeV2/CampaignReportTypegetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignReportTypegetallByCache(_response);
        });
    }

    protected processCampaignReportTypegetallByCache(response: Response): Promise<CampaignReportTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignReportTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignReportTypeListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignSelectedSharingV2(body: CampaignSelectedSharing | undefined): Promise<CampaignSelectedSharingServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharingV2(_response);
        });
    }

    protected processCampaignSelectedSharingV2(response: Response): Promise<CampaignSelectedSharingServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignSelectedSharingV22(body: CampaignSelectedSharing | undefined): Promise<CampaignSelectedSharingServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharingV22(_response);
        });
    }

    protected processCampaignSelectedSharingV22(response: Response): Promise<CampaignSelectedSharingServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignSelectedSharingV23(): Promise<CampaignSelectedSharingListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharingV23(_response);
        });
    }

    protected processCampaignSelectedSharingV23(response: Response): Promise<CampaignSelectedSharingListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignSelectedSharingDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2/CampaignSelectedSharingDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharingDelete(_response);
        });
    }

    protected processCampaignSelectedSharingDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    campaignSelectedSharingV24(id: number): Promise<CampaignSelectedSharingServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharingV24(_response);
        });
    }

    protected processCampaignSelectedSharingV24(response: Response): Promise<CampaignSelectedSharingServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignSelectedSharinggetbyidByCache(id: number): Promise<CampaignSelectedSharingServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2/CampaignSelectedSharinggetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharinggetbyidByCache(_response);
        });
    }

    protected processCampaignSelectedSharinggetbyidByCache(response: Response): Promise<CampaignSelectedSharingServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignSelectedSharinggetallByCache(): Promise<CampaignSelectedSharingListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignSelectedSharingV2/CampaignSelectedSharinggetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignSelectedSharinggetallByCache(_response);
        });
    }

    protected processCampaignSelectedSharinggetallByCache(response: Response): Promise<CampaignSelectedSharingListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignSelectedSharingListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignSelectedSharingListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignStatusV2(body: CampaignStatus | undefined): Promise<CampaignStatusServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusV2(_response);
        });
    }

    protected processCampaignStatusV2(response: Response): Promise<CampaignStatusServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    campaignStatusV22(body: CampaignStatus | undefined): Promise<CampaignStatusServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusV22(_response);
        });
    }

    protected processCampaignStatusV22(response: Response): Promise<CampaignStatusServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignStatusV23(): Promise<CampaignStatusListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusV23(_response);
        });
    }

    protected processCampaignStatusV23(response: Response): Promise<CampaignStatusListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignStatusDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2/CampaignStatusDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusDelete(_response);
        });
    }

    protected processCampaignStatusDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    campaignStatusV24(id: number): Promise<CampaignStatusServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusV24(_response);
        });
    }

    protected processCampaignStatusV24(response: Response): Promise<CampaignStatusServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignStatusgetbyidByCache(id: number): Promise<CampaignStatusServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2/CampaignStatusgetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusgetbyidByCache(_response);
        });
    }

    protected processCampaignStatusgetbyidByCache(response: Response): Promise<CampaignStatusServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    campaignStatusgetallByCache(): Promise<CampaignStatusListServiceResponse> {
        let url_ = this.baseUrl + "/api/CampaignStatusV2/CampaignStatusgetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCampaignStatusgetallByCache(_response);
        });
    }

    protected processCampaignStatusgetallByCache(response: Response): Promise<CampaignStatusListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignStatusListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignStatusListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    companyTypeV2(body: CompanyType | undefined): Promise<CompanyTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypeV2(_response);
        });
    }

    protected processCompanyTypeV2(response: Response): Promise<CompanyTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    companyTypeV22(body: CompanyType | undefined): Promise<CompanyTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypeV22(_response);
        });
    }

    protected processCompanyTypeV22(response: Response): Promise<CompanyTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypeV23(): Promise<CompanyTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypeV23(_response);
        });
    }

    protected processCompanyTypeV23(response: Response): Promise<CompanyTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypeDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2/CompanyTypeDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypeDelete(_response);
        });
    }

    protected processCompanyTypeDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypeV24(id: number): Promise<CompanyTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypeV24(_response);
        });
    }

    protected processCompanyTypeV24(response: Response): Promise<CompanyTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypegetallByCache(): Promise<CompanyTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2/CompanyTypegetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypegetallByCache(_response);
        });
    }

    protected processCompanyTypegetallByCache(response: Response): Promise<CompanyTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    companyTypegetbyidByCache(id: number): Promise<CompanyTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/CompanyTypeV2/CompanyTypegetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCompanyTypegetbyidByCache(_response);
        });
    }

    protected processCompanyTypegetbyidByCache(response: Response): Promise<CompanyTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyTypeServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    costCalculationsV2(body: CostCalculations | undefined): Promise<CostCalculationsServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsV2(_response);
        });
    }

    protected processCostCalculationsV2(response: Response): Promise<CostCalculationsServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    costCalculationsV22(body: CostCalculations | undefined): Promise<CostCalculationsServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsV22(_response);
        });
    }

    protected processCostCalculationsV22(response: Response): Promise<CostCalculationsServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    costCalculationsV23(): Promise<CostCalculationsListServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsV23(_response);
        });
    }

    protected processCostCalculationsV23(response: Response): Promise<CostCalculationsListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    costCalculationsDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2/CostCalculationsDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsDelete(_response);
        });
    }

    protected processCostCalculationsDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    costCalculationsV24(id: number): Promise<CostCalculationsServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsV24(_response);
        });
    }

    protected processCostCalculationsV24(response: Response): Promise<CostCalculationsServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    costCalculationsgetallByCache(): Promise<CostCalculationsListServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2/CostCalculationsgetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsgetallByCache(_response);
        });
    }

    protected processCostCalculationsgetallByCache(response: Response): Promise<CostCalculationsListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    costCalculationsgetbyidByCache(id: number): Promise<CostCalculationsServiceResponse> {
        let url_ = this.baseUrl + "/api/CostCalculationsV2/CostCalculationsgetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCostCalculationsgetbyidByCache(_response);
        });
    }

    protected processCostCalculationsgetbyidByCache(response: Response): Promise<CostCalculationsServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CostCalculationsServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CostCalculationsServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    dataHistory(datatype: string, id: number): Promise<DataHistoryModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/DataHistory/{datatype}/{id}";
        if (datatype === undefined || datatype === null)
            throw new Error("The parameter 'datatype' must be defined.");
        url_ = url_.replace("{datatype}", encodeURIComponent("" + datatype)); 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDataHistory(_response);
        });
    }

    protected processDataHistory(response: Response): Promise<DataHistoryModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DataHistoryModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DataHistoryModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    brandImageUpload2(body: Blob | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/File/BrandImageUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrandImageUpload2(_response);
        });
    }

    protected processBrandImageUpload2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    influencer(): Promise<InfluencerInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Influencer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencer(_response);
        });
    }

    protected processInfluencer(response: Response): Promise<InfluencerInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfluencerInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfluencerInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    influencer2(body: InfluencerModel | undefined): Promise<InfluencerInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Influencer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencer2(_response);
        });
    }

    protected processInfluencer2(response: Response): Promise<InfluencerInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfluencerInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfluencerInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    influencer3(body: Influencer | undefined): Promise<Influencer> {
        let url_ = this.baseUrl + "/api/Influencer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencer3(_response);
        });
    }

    protected processInfluencer3(response: Response): Promise<Influencer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Influencer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Influencer>(<any>null);
    }

    /**
     * @return Success
     */
    influencer4(id: number): Promise<InfluencerServiceResponse> {
        let url_ = this.baseUrl + "/api/Influencer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencer4(_response);
        });
    }

    protected processInfluencer4(response: Response): Promise<InfluencerServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfluencerServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfluencerServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    influencer5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Influencer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencer5(_response);
        });
    }

    protected processInfluencer5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccounts(id: number): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Influencer/SocialMediaAccounts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccounts(_response);
        });
    }

    protected processSocialMediaAccounts(response: Response): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    influencerName(name: string): Promise<InfluencerInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Influencer/InfluencerName/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfluencerName(_response);
        });
    }

    protected processInfluencerName(response: Response): Promise<InfluencerInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InfluencerInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InfluencerInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    manager(): Promise<ManagerModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Manager";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager(_response);
        });
    }

    protected processManager(response: Response): Promise<ManagerModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    manager2(body: ManagerModel | undefined): Promise<ManagerModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Manager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager2(_response);
        });
    }

    protected processManager2(response: Response): Promise<ManagerModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    manager3(body: ManagerModel | undefined): Promise<ManagerModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Manager";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager3(_response);
        });
    }

    protected processManager3(response: Response): Promise<ManagerModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    manager4(id: number): Promise<ManagerModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Manager/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager4(_response);
        });
    }

    protected processManager4(response: Response): Promise<ManagerModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    manager5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Manager/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager5(_response);
        });
    }

    protected processManager5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    name6(name: string): Promise<ManagerModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Manager/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName6(_response);
        });
    }

    protected processName6(response: Response): Promise<ManagerModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    managerUser(): Promise<ManagerUserModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManagerUser(_response);
        });
    }

    protected processManagerUser(response: Response): Promise<ManagerUserModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    managerUser2(body: ManagerUserModel | undefined): Promise<ManagerUserModelServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManagerUser2(_response);
        });
    }

    protected processManagerUser2(response: Response): Promise<ManagerUserModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    managerUser3(body: ManagerUserModel | undefined): Promise<ManagerUserModelServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManagerUser3(_response);
        });
    }

    protected processManagerUser3(response: Response): Promise<ManagerUserModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    managerUser4(id: number): Promise<ManagerUserModelServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManagerUser4(_response);
        });
    }

    protected processManagerUser4(response: Response): Promise<ManagerUserModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    managerUser5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/ManagerUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManagerUser5(_response);
        });
    }

    protected processManagerUser5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    manager(id: number): Promise<ManagerUserModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser/manager/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManager(_response);
        });
    }

    protected processManager(response: Response): Promise<ManagerUserModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    name7(name: string): Promise<ManagerUserModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/ManagerUser/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName7(_response);
        });
    }

    protected processName7(response: Response): Promise<ManagerUserModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManagerUserModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManagerUserModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    search(body: MyListSearchRequestModel | undefined): Promise<MyListInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: Response): Promise<MyListInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getSMAList(id: number | undefined): Promise<MyListSocialMediaAccountInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetSMAList?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSMAList(_response);
        });
    }

    protected processGetSMAList(response: Response): Promise<MyListSocialMediaAccountInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListSocialMediaAccountInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListSocialMediaAccountInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getSharedSMAList(id: string | undefined): Promise<MyListSocialMediaAccountInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetSharedSMAList?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSharedSMAList(_response);
        });
    }

    protected processGetSharedSMAList(response: Response): Promise<MyListSocialMediaAccountInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListSocialMediaAccountInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListSocialMediaAccountInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getMyList(id: number | undefined): Promise<MyListInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetMyList?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyList(_response);
        });
    }

    protected processGetMyList(response: Response): Promise<MyListInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertMyList(body: MyListModel | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/InsertMyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMyList(_response);
        });
    }

    protected processInsertMyList(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateMyList(body: MyListModel | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/UpdateMyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMyList(_response);
        });
    }

    protected processUpdateMyList(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteMyList(id: number | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/DeleteMyList?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMyList(_response);
        });
    }

    protected processDeleteMyList(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    imageUpload(body: Blob | undefined): Promise<StringServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/ImageUpload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = body;

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "multipart/form-data",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImageUpload(_response);
        });
    }

    protected processImageUpload(response: Response): Promise<StringServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StringServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<StringServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getMyListCategory(): Promise<MyListInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetMyListCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyListCategory(_response);
        });
    }

    protected processGetMyListCategory(response: Response): Promise<MyListInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertMyListCategory(body: MyListCategoryRequestModel | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/InsertMyListCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMyListCategory(_response);
        });
    }

    protected processInsertMyListCategory(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateMyListCategory(body: MyListCategoryRequestModel | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/UpdateMyListCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateMyListCategory(_response);
        });
    }

    protected processUpdateMyListCategory(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteMyListCategory(id: number | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/DeleteMyListCategory?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMyListCategory(_response);
        });
    }

    protected processDeleteMyListCategory(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getMyListSMADashboard(id: number | undefined): Promise<MyListSocialMediaAccountDashboardModelServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetMyListSMADashboard?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyListSMADashboard(_response);
        });
    }

    protected processGetMyListSMADashboard(response: Response): Promise<MyListSocialMediaAccountDashboardModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyListSocialMediaAccountDashboardModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyListSocialMediaAccountDashboardModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    insertMyListSMA(body: MyListSocialMediaAccountRequestModel | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/InsertMyListSMA";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInsertMyListSMA(_response);
        });
    }

    protected processInsertMyListSMA(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param myListId (optional) 
     * @return Success
     */
    createSharedList(myListId: number | undefined): Promise<GuidServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/CreateSharedList?";
        if (myListId === null)
            throw new Error("The parameter 'myListId' cannot be null.");
        else if (myListId !== undefined)
            url_ += "myListId=" + encodeURIComponent("" + myListId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSharedList(_response);
        });
    }

    protected processCreateSharedList(response: Response): Promise<GuidServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GuidServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GuidServiceResponse>(<any>null);
    }

    /**
     * @param myListId (optional) 
     * @param smaId (optional) 
     * @return Success
     */
    deleteMyListSMA(myListId: number | undefined, smaId: number | undefined): Promise<ServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/DeleteMyListSMA?";
        if (myListId === null)
            throw new Error("The parameter 'myListId' cannot be null.");
        else if (myListId !== undefined)
            url_ += "myListId=" + encodeURIComponent("" + myListId) + "&"; 
        if (smaId === null)
            throw new Error("The parameter 'smaId' cannot be null.");
        else if (smaId !== undefined)
            url_ += "smaId=" + encodeURIComponent("" + smaId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteMyListSMA(_response);
        });
    }

    protected processDeleteMyListSMA(response: Response): Promise<ServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ServiceResponse>(<any>null);
    }

    /**
     * @param searchText (optional) 
     * @return Success
     */
    getMyListTag(searchText: string | undefined): Promise<TagModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/MyList/GetMyListTag?";
        if (searchText === null)
            throw new Error("The parameter 'searchText' cannot be null.");
        else if (searchText !== undefined)
            url_ += "searchText=" + encodeURIComponent("" + searchText) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyListTag(_response);
        });
    }

    protected processGetMyListTag(response: Response): Promise<TagModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TagModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TagModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    parameter(): Promise<ParameterModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Parameter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParameter(_response);
        });
    }

    protected processParameter(response: Response): Promise<ParameterModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    parameter2(body: ParameterModel | undefined): Promise<ParameterModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Parameter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParameter2(_response);
        });
    }

    protected processParameter2(response: Response): Promise<ParameterModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    parameter3(id: number): Promise<ParameterModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Parameter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParameter3(_response);
        });
    }

    protected processParameter3(response: Response): Promise<ParameterModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    parameter4(id: number, body: ParameterModel | undefined): Promise<ParameterModel> {
        let url_ = this.baseUrl + "/api/Parameter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParameter4(_response);
        });
    }

    protected processParameter4(response: Response): Promise<ParameterModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModel>(<any>null);
    }

    /**
     * @return Success
     */
    parameter5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Parameter/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processParameter5(_response);
        });
    }

    protected processParameter5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    code(code: string): Promise<ParameterModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Parameter/code/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCode(_response);
        });
    }

    protected processCode(response: Response): Promise<ParameterModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    name8(code: string, name: string): Promise<ParameterModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Parameter/code/{code}/name/{name}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName8(_response);
        });
    }

    protected processName8(response: Response): Promise<ParameterModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ParameterModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ParameterModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    paymentInfo(): Promise<PaymentInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/PaymentInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPaymentInfo(_response);
        });
    }

    protected processPaymentInfo(response: Response): Promise<PaymentInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    paymentInfo2(body: PaymentInfo | undefined): Promise<PaymentInfoServiceResponse> {
        let url_ = this.baseUrl + "/api/PaymentInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPaymentInfo2(_response);
        });
    }

    protected processPaymentInfo2(response: Response): Promise<PaymentInfoServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentInfoServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentInfoServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    paymentInfo3(body: PaymentInfo | undefined): Promise<PaymentInfoServiceResponse> {
        let url_ = this.baseUrl + "/api/PaymentInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPaymentInfo3(_response);
        });
    }

    protected processPaymentInfo3(response: Response): Promise<PaymentInfoServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentInfoServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentInfoServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    paymentInfo4(id: number): Promise<PaymentInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/PaymentInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPaymentInfo4(_response);
        });
    }

    protected processPaymentInfo4(response: Response): Promise<PaymentInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentInfoModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    paymentInfo5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/PaymentInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPaymentInfo5(_response);
        });
    }

    protected processPaymentInfo5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    type(id: number, type: number): Promise<PaymentInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/PaymentInfo/PersonId/{id}/Type/{type}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processType(_response);
        });
    }

    protected processType(response: Response): Promise<PaymentInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaymentInfoModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    profile(): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfile(_response);
        });
    }

    protected processProfile(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    profile2(body: PasswordChangeModel | undefined): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfile2(_response);
        });
    }

    protected processProfile2(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    profile3(body: UserModel | undefined): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfile3(_response);
        });
    }

    protected processProfile3(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateAllReport(body: ReportData[] | undefined): Promise<ReportDataListServiceResponse> {
        let url_ = this.baseUrl + "/api/Report/UpdateAllReport";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAllReport(_response);
        });
    }

    protected processUpdateAllReport(response: Response): Promise<ReportDataListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReportDataListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ReportDataListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    report(body: CampaingSelectedSharingReport | undefined): Promise<CampaingSelectedSharingReportServiceResponse> {
        let url_ = this.baseUrl + "/api/Report";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReport(_response);
        });
    }

    protected processReport(response: Response): Promise<CampaingSelectedSharingReportServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaingSelectedSharingReportServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaingSelectedSharingReportServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    report2(): Promise<CampaingSelectedSharingReportListServiceResponse> {
        let url_ = this.baseUrl + "/api/Report";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReport2(_response);
        });
    }

    protected processReport2(response: Response): Promise<CampaingSelectedSharingReportListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaingSelectedSharingReportListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaingSelectedSharingReportListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    report3(id: number): Promise<CampaingSelectedSharingReportServiceResponse> {
        let url_ = this.baseUrl + "/api/Report/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReport3(_response);
        });
    }

    protected processReport3(response: Response): Promise<CampaingSelectedSharingReportServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaingSelectedSharingReportServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaingSelectedSharingReportServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    role(): Promise<RoleModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Role";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole(_response);
        });
    }

    protected processRole(response: Response): Promise<RoleModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    role2(body: RoleModel | undefined): Promise<RoleModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Role";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole2(_response);
        });
    }

    protected processRole2(response: Response): Promise<RoleModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    role3(id: number): Promise<RoleModelServiceResponse> {
        let url_ = this.baseUrl + "/api/Role/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole3(_response);
        });
    }

    protected processRole3(response: Response): Promise<RoleModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    role4(id: number, body: RoleModel | undefined): Promise<RoleModel> {
        let url_ = this.baseUrl + "/api/Role/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole4(_response);
        });
    }

    protected processRole4(response: Response): Promise<RoleModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleModel>(<any>null);
    }

    /**
     * @return Success
     */
    role5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Role/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRole5(_response);
        });
    }

    protected processRole5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    categoryId(id: number): Promise<RoleModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/Role/categoryId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCategoryId(_response);
        });
    }

    protected processCategoryId(response: Response): Promise<RoleModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    search2(body: SocialMediaAccountRequestModel | undefined): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch2(_response);
        });
    }

    protected processSearch2(response: Response): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccount(): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccount(_response);
        });
    }

    protected processSocialMediaAccount(response: Response): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaAccount2(body: SocialMediaAccountModel | undefined): Promise<SocialMediaAccountInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccount2(_response);
        });
    }

    protected processSocialMediaAccount2(response: Response): Promise<SocialMediaAccountInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaAccount3(body: SocialMediaAccountModel | undefined): Promise<SocialMediaAccountInfoModel> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccount3(_response);
        });
    }

    protected processSocialMediaAccount3(response: Response): Promise<SocialMediaAccountInfoModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModel>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccount4(id: number): Promise<SocialMediaAccountInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccount4(_response);
        });
    }

    protected processSocialMediaAccount4(response: Response): Promise<SocialMediaAccountInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccount5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccount5(_response);
        });
    }

    protected processSocialMediaAccount5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    infoFromSB(body: SocialMediaAccountModelResponse | undefined): Promise<SocialMediaAccountModelResponseServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/InfoFromSB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfoFromSB(_response);
        });
    }

    protected processInfoFromSB(response: Response): Promise<SocialMediaAccountModelResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountModelResponseServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountModelResponseServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountName(name: string): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/SocialMediaAccountName/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountName(_response);
        });
    }

    protected processSocialMediaAccountName(response: Response): Promise<SocialMediaAccountInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    updateAllSocialMedia(id: number): Promise<SocialMediaAccountInfoModel> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/UpdateAllSocialMedia/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateAllSocialMedia(_response);
        });
    }

    protected processUpdateAllSocialMedia(response: Response): Promise<SocialMediaAccountInfoModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModel>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountUpdate(id: number): Promise<SocialMediaAccountInfoModel> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/SocialMediaAccountUpdate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountUpdate(_response);
        });
    }

    protected processSocialMediaAccountUpdate(response: Response): Promise<SocialMediaAccountInfoModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountInfoModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountInfoModel>(<any>null);
    }

    /**
     * @return Success
     */
    searchOnPlatform(platformId: number, name: string): Promise<SocialMediaAccountModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/searchOnPlatform/{platformId}/{name}";
        if (platformId === undefined || platformId === null)
            throw new Error("The parameter 'platformId' must be defined.");
        url_ = url_.replace("{platformId}", encodeURIComponent("" + platformId)); 
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchOnPlatform(_response);
        });
    }

    protected processSearchOnPlatform(response: Response): Promise<SocialMediaAccountModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    getDetailOnPlatform(platformId: number, name: string): Promise<SocialMediaAccountModelServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccount/getDetailOnPlatform/{platformId}/{name}";
        if (platformId === undefined || platformId === null)
            throw new Error("The parameter 'platformId' must be defined.");
        url_ = url_.replace("{platformId}", encodeURIComponent("" + platformId)); 
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetailOnPlatform(_response);
        });
    }

    protected processGetDetailOnPlatform(response: Response): Promise<SocialMediaAccountModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountDemographic(): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountDemographic(_response);
        });
    }

    protected processSocialMediaAccountDemographic(response: Response): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountDemographicModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountDemographicModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaAccountDemographic2(body: SocialMediaAccountDemographicModel[] | undefined): Promise<SocialMediaAccountDemographicModelServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountDemographic2(_response);
        });
    }

    protected processSocialMediaAccountDemographic2(response: Response): Promise<SocialMediaAccountDemographicModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountDemographicModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountDemographicModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountDemographic3(id: number): Promise<SocialMediaAccountDemographicModelServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountDemographic3(_response);
        });
    }

    protected processSocialMediaAccountDemographic3(response: Response): Promise<SocialMediaAccountDemographicModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountDemographicModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountDemographicModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountDemographic4(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountDemographic4(_response);
        });
    }

    protected processSocialMediaAccountDemographic4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountIdShared(id: number, code: string): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic/socialMediaAccountIdShared/{id}/{code}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountIdShared(_response);
        });
    }

    protected processSocialMediaAccountIdShared(response: Response): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountDemographicModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountDemographicModelListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountId(id: number): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountDemographic/socialMediaAccountId/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountId(_response);
        });
    }

    protected processSocialMediaAccountId(response: Response): Promise<SocialMediaAccountDemographicModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountDemographicModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountDemographicModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaAccountV2(body: SocialMediaAccount | undefined): Promise<SocialMediaAccountServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountV2(_response);
        });
    }

    protected processSocialMediaAccountV2(response: Response): Promise<SocialMediaAccountServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaAccountV22(body: SocialMediaAccount | undefined): Promise<SocialMediaAccountServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountV22(_response);
        });
    }

    protected processSocialMediaAccountV22(response: Response): Promise<SocialMediaAccountServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountV23(): Promise<SocialMediaAccountListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountV23(_response);
        });
    }

    protected processSocialMediaAccountV23(response: Response): Promise<SocialMediaAccountListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2/SocialMediaAccountDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountDelete(_response);
        });
    }

    protected processSocialMediaAccountDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountV24(id: number): Promise<SocialMediaAccountServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountV24(_response);
        });
    }

    protected processSocialMediaAccountV24(response: Response): Promise<SocialMediaAccountServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountgetbyidByCache(id: number): Promise<SocialMediaAccountServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2/SocialMediaAccountgetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountgetbyidByCache(_response);
        });
    }

    protected processSocialMediaAccountgetbyidByCache(response: Response): Promise<SocialMediaAccountServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaAccountgetallByCache(): Promise<SocialMediaAccountListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaAccountV2/SocialMediaAccountgetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaAccountgetallByCache(_response);
        });
    }

    protected processSocialMediaAccountgetallByCache(response: Response): Promise<SocialMediaAccountListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaAccountListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaAccountListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaShareTypegetbyidByCache(id: number): Promise<SocialMediaShareTypeServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaShareTypeV2/SocialMediaShareTypegetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaShareTypegetbyidByCache(_response);
        });
    }

    protected processSocialMediaShareTypegetbyidByCache(response: Response): Promise<SocialMediaShareTypeServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaShareTypeServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaShareTypeServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaShareTypegetallByCache(): Promise<SocialMediaShareTypeListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaShareTypeV2/SocialMediaShareTypegetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaShareTypegetallByCache(_response);
        });
    }

    protected processSocialMediaShareTypegetallByCache(response: Response): Promise<SocialMediaShareTypeListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaShareTypeListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaShareTypeListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaV2(body: SocialMedia | undefined): Promise<SocialMediaServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaV2(_response);
        });
    }

    protected processSocialMediaV2(response: Response): Promise<SocialMediaServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    socialMediaV22(body: SocialMedia | undefined): Promise<SocialMediaServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaV22(_response);
        });
    }

    protected processSocialMediaV22(response: Response): Promise<SocialMediaServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaV23(): Promise<SocialMediaListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaV23(_response);
        });
    }

    protected processSocialMediaV23(response: Response): Promise<SocialMediaListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaDelete(iD: number): Promise<void> {
        let url_ = this.baseUrl + "/api/SocialMediaV2/SocialMediaDelete/{ID}";
        if (iD === undefined || iD === null)
            throw new Error("The parameter 'iD' must be defined.");
        url_ = url_.replace("{ID}", encodeURIComponent("" + iD)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaDelete(_response);
        });
    }

    protected processSocialMediaDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediaV24(id: number): Promise<SocialMediaServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediaV24(_response);
        });
    }

    protected processSocialMediaV24(response: Response): Promise<SocialMediaServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediagetbyidByCache(id: number): Promise<SocialMediaServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2/SocialMediagetbyidByCache/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediagetbyidByCache(_response);
        });
    }

    protected processSocialMediagetbyidByCache(response: Response): Promise<SocialMediaServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    socialMediagetallByCache(): Promise<SocialMediaListServiceResponse> {
        let url_ = this.baseUrl + "/api/SocialMediaV2/SocialMediagetallByCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSocialMediagetallByCache(_response);
        });
    }

    protected processSocialMediagetallByCache(response: Response): Promise<SocialMediaListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SocialMediaListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SocialMediaListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    suggetion(body: SuggetionRequest | undefined): Promise<SuggetionResponseServiceResponse> {
        let url_ = this.baseUrl + "/api/Suggetion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSuggetion(_response);
        });
    }

    protected processSuggetion(response: Response): Promise<SuggetionResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuggetionResponseServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SuggetionResponseServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    suggetion2(): Promise<SuggetionResponseListServiceResponse> {
        let url_ = this.baseUrl + "/api/Suggetion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSuggetion2(_response);
        });
    }

    protected processSuggetion2(response: Response): Promise<SuggetionResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SuggetionResponseListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SuggetionResponseListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    user(): Promise<UserInfoModelListServiceResponse> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<UserInfoModelListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelListServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    user2(body: UserModel | undefined): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser2(_response);
        });
    }

    protected processUser2(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    user3(body: UserModel | undefined): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser3(_response);
        });
    }

    protected processUser3(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    user4(id: number): Promise<UserInfoModelServiceResponse> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser4(_response);
        });
    }

    protected processUser4(response: Response): Promise<UserInfoModelServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoModelServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoModelServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    user5(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser5(_response);
        });
    }

    protected processUser5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    userV2(body: User | undefined): Promise<UserServiceResponse> {
        let url_ = this.baseUrl + "/api/UserV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserV2(_response);
        });
    }

    protected processUserV2(response: Response): Promise<UserServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserServiceResponse>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    userV22(body: User | undefined): Promise<UserServiceResponse> {
        let url_ = this.baseUrl + "/api/UserV2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserV22(_response);
        });
    }

    protected processUserV22(response: Response): Promise<UserServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    userV23(): Promise<UserListServiceResponse> {
        let url_ = this.baseUrl + "/api/UserV2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserV23(_response);
        });
    }

    protected processUserV23(response: Response): Promise<UserListServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserListServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserListServiceResponse>(<any>null);
    }

    /**
     * @return Success
     */
    userV24(id: number): Promise<UserServiceResponse> {
        let url_ = this.baseUrl + "/api/UserV2/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserV24(_response);
        });
    }

    protected processUserV24(response: Response): Promise<UserServiceResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserServiceResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserServiceResponse>(<any>null);
    }
}

export class ServiceResult implements IServiceResult {
    resultCode?: number;
    resultMessage?: string | undefined;

    constructor(data?: IServiceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.resultCode = data["resultCode"];
            this.resultMessage = data["resultMessage"];
        }
    }

    static fromJS(data: any): ServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultCode"] = this.resultCode;
        data["resultMessage"] = this.resultMessage;
        return data; 
    }
}

export interface IServiceResult {
    resultCode?: number;
    resultMessage?: string | undefined;
}

export class CityModel implements ICityModel {
    id?: number;
    name?: string | undefined;
    countryId?: number;

    constructor(data?: ICityModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.countryId = data["countryId"];
        }
    }

    static fromJS(data: any): CityModel {
        data = typeof data === 'object' ? data : {};
        let result = new CityModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["countryId"] = this.countryId;
        return data; 
    }
}

export interface ICityModel {
    id?: number;
    name?: string | undefined;
    countryId?: number;
}

export class CityModelListServiceResponse implements ICityModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CityModel[] | undefined;

    constructor(data?: ICityModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CityModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CityModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CityModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICityModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CityModel[] | undefined;
}

export class CountryModel implements ICountryModel {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    phoneCode?: string | undefined;

    constructor(data?: ICountryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.code = data["code"];
            this.phoneCode = data["phoneCode"];
        }
    }

    static fromJS(data: any): CountryModel {
        data = typeof data === 'object' ? data : {};
        let result = new CountryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["phoneCode"] = this.phoneCode;
        return data; 
    }
}

export interface ICountryModel {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    phoneCode?: string | undefined;
}

export class CountryModelListServiceResponse implements ICountryModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CountryModel[] | undefined;

    constructor(data?: ICountryModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CountryModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CountryModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CountryModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICountryModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CountryModel[] | undefined;
}

export class CountryModelServiceResponse implements ICountryModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CountryModel | undefined;

    constructor(data?: ICountryModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CountryModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CountryModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CountryModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICountryModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CountryModel | undefined;
}

export class CityModelServiceResponse implements ICityModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CityModel | undefined;

    constructor(data?: ICityModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CityModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CityModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CityModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICityModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CityModel | undefined;
}

export class DistrictModel implements IDistrictModel {
    id?: number;
    name?: string | undefined;
    cityId?: number;

    constructor(data?: IDistrictModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.cityId = data["cityId"];
        }
    }

    static fromJS(data: any): DistrictModel {
        data = typeof data === 'object' ? data : {};
        let result = new DistrictModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cityId"] = this.cityId;
        return data; 
    }
}

export interface IDistrictModel {
    id?: number;
    name?: string | undefined;
    cityId?: number;
}

export class DistrictModelListServiceResponse implements IDistrictModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: DistrictModel[] | undefined;

    constructor(data?: IDistrictModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(DistrictModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DistrictModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DistrictModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDistrictModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: DistrictModel[] | undefined;
}

export class LoginRequestModel implements ILoginRequestModel {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): LoginRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ILoginRequestModel {
    email?: string | undefined;
    password?: string | undefined;
}

export class CustomerRepresentetiveModel implements ICustomerRepresentetiveModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    brandId?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;

    constructor(data?: ICustomerRepresentetiveModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.brandId = data["brandId"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): CustomerRepresentetiveModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerRepresentetiveModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["brandId"] = this.brandId;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface ICustomerRepresentetiveModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    brandId?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
}

export class BrandModel implements IBrandModel {
    id?: number;
    name?: string | undefined;
    sectorId?: number | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    userId?: number | undefined;
    parentBrandId?: number | undefined;
    parentBrandName?: string | undefined;
    type?: number;
    customerRepresentetive?: CustomerRepresentetiveModel[] | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: number | undefined;
    brandLogo?: string | undefined;
    owner?: boolean | undefined;
    hasPriority?: boolean | undefined;

    constructor(data?: IBrandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.sectorId = data["sectorId"];
            this.companyTitle = data["companyTitle"];
            this.companyName = data["companyName"];
            this.userId = data["userId"];
            this.parentBrandId = data["parentBrandId"];
            this.parentBrandName = data["parentBrandName"];
            this.type = data["type"];
            if (Array.isArray(data["customerRepresentetive"])) {
                this.customerRepresentetive = [] as any;
                for (let item of data["customerRepresentetive"])
                    this.customerRepresentetive!.push(CustomerRepresentetiveModel.fromJS(item));
            }
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.status = data["status"];
            this.brandLogo = data["brandLogo"];
            this.owner = data["owner"];
            this.hasPriority = data["hasPriority"];
        }
    }

    static fromJS(data: any): BrandModel {
        data = typeof data === 'object' ? data : {};
        let result = new BrandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sectorId"] = this.sectorId;
        data["companyTitle"] = this.companyTitle;
        data["companyName"] = this.companyName;
        data["userId"] = this.userId;
        data["parentBrandId"] = this.parentBrandId;
        data["parentBrandName"] = this.parentBrandName;
        data["type"] = this.type;
        if (Array.isArray(this.customerRepresentetive)) {
            data["customerRepresentetive"] = [];
            for (let item of this.customerRepresentetive)
                data["customerRepresentetive"].push(item.toJSON());
        }
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["status"] = this.status;
        data["brandLogo"] = this.brandLogo;
        data["owner"] = this.owner;
        data["hasPriority"] = this.hasPriority;
        return data; 
    }
}

export interface IBrandModel {
    id?: number;
    name?: string | undefined;
    sectorId?: number | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    userId?: number | undefined;
    parentBrandId?: number | undefined;
    parentBrandName?: string | undefined;
    type?: number;
    customerRepresentetive?: CustomerRepresentetiveModel[] | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: number | undefined;
    brandLogo?: string | undefined;
    owner?: boolean | undefined;
    hasPriority?: boolean | undefined;
}

export class BrandModelListServiceResponse implements IBrandModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandModel[] | undefined;

    constructor(data?: IBrandModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(BrandModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BrandModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandModel[] | undefined;
}

export class BrandModelServiceResponse implements IBrandModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandModel | undefined;

    constructor(data?: IBrandModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? BrandModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BrandModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BrandModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBrandModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandModel | undefined;
}

export class Brand implements IBrand {
    id?: number;
    name?: string | undefined;
    sectorId?: number | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    userId?: number | undefined;
    parentBrandId?: number | undefined;
    type?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: number | undefined;
    owner?: boolean | undefined;
    hasPriority?: boolean | undefined;
    tableOrder?: number | undefined;

    constructor(data?: IBrand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.sectorId = data["sectorId"];
            this.companyTitle = data["companyTitle"];
            this.companyName = data["companyName"];
            this.userId = data["userId"];
            this.parentBrandId = data["parentBrandId"];
            this.type = data["type"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.status = data["status"];
            this.owner = data["owner"];
            this.hasPriority = data["hasPriority"];
            this.tableOrder = data["tableOrder"];
        }
    }

    static fromJS(data: any): Brand {
        data = typeof data === 'object' ? data : {};
        let result = new Brand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sectorId"] = this.sectorId;
        data["companyTitle"] = this.companyTitle;
        data["companyName"] = this.companyName;
        data["userId"] = this.userId;
        data["parentBrandId"] = this.parentBrandId;
        data["type"] = this.type;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["status"] = this.status;
        data["owner"] = this.owner;
        data["hasPriority"] = this.hasPriority;
        data["tableOrder"] = this.tableOrder;
        return data; 
    }
}

export interface IBrand {
    id?: number;
    name?: string | undefined;
    sectorId?: number | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    userId?: number | undefined;
    parentBrandId?: number | undefined;
    type?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: number | undefined;
    owner?: boolean | undefined;
    hasPriority?: boolean | undefined;
    tableOrder?: number | undefined;
}

export class BrandServiceResponse implements IBrandServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Brand | undefined;

    constructor(data?: IBrandServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? Brand.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BrandServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BrandServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBrandServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Brand | undefined;
}

export class BrandTypeData implements IBrandTypeData {
    code?: string | undefined;
    value?: string | undefined;

    constructor(data?: IBrandTypeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): BrandTypeData {
        data = typeof data === 'object' ? data : {};
        let result = new BrandTypeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["value"] = this.value;
        return data; 
    }
}

export interface IBrandTypeData {
    code?: string | undefined;
    value?: string | undefined;
}

export class BrandInfo implements IBrandInfo {
    id?: number;
    name?: string | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    type?: number | undefined;
    parentBrandId?: number | undefined;
    parentBrandName?: string | undefined;
    hasPriority?: boolean | undefined;
    brandType?: BrandTypeData | undefined;

    constructor(data?: IBrandInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.companyTitle = data["companyTitle"];
            this.companyName = data["companyName"];
            this.type = data["type"];
            this.parentBrandId = data["parentBrandId"];
            this.parentBrandName = data["parentBrandName"];
            this.hasPriority = data["hasPriority"];
            this.brandType = data["brandType"] ? BrandTypeData.fromJS(data["brandType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BrandInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BrandInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["companyTitle"] = this.companyTitle;
        data["companyName"] = this.companyName;
        data["type"] = this.type;
        data["parentBrandId"] = this.parentBrandId;
        data["parentBrandName"] = this.parentBrandName;
        data["hasPriority"] = this.hasPriority;
        data["brandType"] = this.brandType ? this.brandType.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBrandInfo {
    id?: number;
    name?: string | undefined;
    companyTitle?: string | undefined;
    companyName?: string | undefined;
    type?: number | undefined;
    parentBrandId?: number | undefined;
    parentBrandName?: string | undefined;
    hasPriority?: boolean | undefined;
    brandType?: BrandTypeData | undefined;
}

export class BrandInfoListServiceResponse implements IBrandInfoListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandInfo[] | undefined;

    constructor(data?: IBrandInfoListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(BrandInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandInfoListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BrandInfoListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandInfoListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BrandInfo[] | undefined;
}

export class BrandListServiceResponse implements IBrandListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Brand[] | undefined;

    constructor(data?: IBrandListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(Brand.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BrandListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBrandListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Brand[] | undefined;
}

export class BriefTargetGroupModel implements IBriefTargetGroupModel {
    id?: number;
    briefId?: number | undefined;
    typeName?: string | undefined;
    codeName?: string | undefined;
    codeValue?: string | undefined;
    description?: string | undefined;

    constructor(data?: IBriefTargetGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.briefId = data["briefId"];
            this.typeName = data["typeName"];
            this.codeName = data["codeName"];
            this.codeValue = data["codeValue"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): BriefTargetGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefTargetGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["briefId"] = this.briefId;
        data["typeName"] = this.typeName;
        data["codeName"] = this.codeName;
        data["codeValue"] = this.codeValue;
        data["description"] = this.description;
        return data; 
    }
}

export interface IBriefTargetGroupModel {
    id?: number;
    briefId?: number | undefined;
    typeName?: string | undefined;
    codeName?: string | undefined;
    codeValue?: string | undefined;
    description?: string | undefined;
}

export class ParameterModel implements IParameterModel {
    id?: number;
    codeName?: string | undefined;
    codeValue?: string | undefined;
    languageCode?: string | undefined;
    description?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;

    constructor(data?: IParameterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.codeName = data["codeName"];
            this.codeValue = data["codeValue"];
            this.languageCode = data["languageCode"];
            this.description = data["description"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): ParameterModel {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["codeName"] = this.codeName;
        data["codeValue"] = this.codeValue;
        data["languageCode"] = this.languageCode;
        data["description"] = this.description;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface IParameterModel {
    id?: number;
    codeName?: string | undefined;
    codeValue?: string | undefined;
    languageCode?: string | undefined;
    description?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
}

export class BriefModel implements IBriefModel {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    brandId?: number | undefined;
    city?: number | undefined;
    country?: number | undefined;
    budget?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    categoryList?: BriefTargetGroupModel[] | undefined;
    infAgeList?: BriefTargetGroupModel[] | undefined;
    followerAgeList?: BriefTargetGroupModel[] | undefined;
    followeGenderList?: BriefTargetGroupModel[] | undefined;
    brand?: BrandModel | undefined;
    platforms?: ParameterModel[] | undefined;
    genders?: ParameterModel[] | undefined;
    incomeLevels?: ParameterModel[] | undefined;
    brandType?: string | undefined;
    infCount?: number | undefined;
    repost?: boolean | undefined;
    promote?: boolean | undefined;
    promoteDuration?: number | undefined;
    exclusivity?: boolean | undefined;
    exculusivityDuration?: number | undefined;
    thirdPartiShare?: boolean | undefined;
    thirdPartiInf?: string | undefined;
    thirdPartiPromote?: boolean | undefined;
    thirdPartiPromoteDuration?: number | undefined;

    constructor(data?: IBriefModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.brandId = data["brandId"];
            this.city = data["city"];
            this.country = data["country"];
            this.budget = data["budget"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.status = data["status"];
            if (Array.isArray(data["categoryList"])) {
                this.categoryList = [] as any;
                for (let item of data["categoryList"])
                    this.categoryList!.push(BriefTargetGroupModel.fromJS(item));
            }
            if (Array.isArray(data["infAgeList"])) {
                this.infAgeList = [] as any;
                for (let item of data["infAgeList"])
                    this.infAgeList!.push(BriefTargetGroupModel.fromJS(item));
            }
            if (Array.isArray(data["followerAgeList"])) {
                this.followerAgeList = [] as any;
                for (let item of data["followerAgeList"])
                    this.followerAgeList!.push(BriefTargetGroupModel.fromJS(item));
            }
            if (Array.isArray(data["followeGenderList"])) {
                this.followeGenderList = [] as any;
                for (let item of data["followeGenderList"])
                    this.followeGenderList!.push(BriefTargetGroupModel.fromJS(item));
            }
            this.brand = data["brand"] ? BrandModel.fromJS(data["brand"]) : <any>undefined;
            if (Array.isArray(data["platforms"])) {
                this.platforms = [] as any;
                for (let item of data["platforms"])
                    this.platforms!.push(ParameterModel.fromJS(item));
            }
            if (Array.isArray(data["genders"])) {
                this.genders = [] as any;
                for (let item of data["genders"])
                    this.genders!.push(ParameterModel.fromJS(item));
            }
            if (Array.isArray(data["incomeLevels"])) {
                this.incomeLevels = [] as any;
                for (let item of data["incomeLevels"])
                    this.incomeLevels!.push(ParameterModel.fromJS(item));
            }
            this.brandType = data["brandType"];
            this.infCount = data["infCount"];
            this.repost = data["repost"];
            this.promote = data["promote"];
            this.promoteDuration = data["promoteDuration"];
            this.exclusivity = data["exclusivity"];
            this.exculusivityDuration = data["exculusivityDuration"];
            this.thirdPartiShare = data["thirdPartiShare"];
            this.thirdPartiInf = data["thirdPartiInf"];
            this.thirdPartiPromote = data["thirdPartiPromote"];
            this.thirdPartiPromoteDuration = data["thirdPartiPromoteDuration"];
        }
    }

    static fromJS(data: any): BriefModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["brandId"] = this.brandId;
        data["city"] = this.city;
        data["country"] = this.country;
        data["budget"] = this.budget;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["status"] = this.status;
        if (Array.isArray(this.categoryList)) {
            data["categoryList"] = [];
            for (let item of this.categoryList)
                data["categoryList"].push(item.toJSON());
        }
        if (Array.isArray(this.infAgeList)) {
            data["infAgeList"] = [];
            for (let item of this.infAgeList)
                data["infAgeList"].push(item.toJSON());
        }
        if (Array.isArray(this.followerAgeList)) {
            data["followerAgeList"] = [];
            for (let item of this.followerAgeList)
                data["followerAgeList"].push(item.toJSON());
        }
        if (Array.isArray(this.followeGenderList)) {
            data["followeGenderList"] = [];
            for (let item of this.followeGenderList)
                data["followeGenderList"].push(item.toJSON());
        }
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        if (Array.isArray(this.platforms)) {
            data["platforms"] = [];
            for (let item of this.platforms)
                data["platforms"].push(item.toJSON());
        }
        if (Array.isArray(this.genders)) {
            data["genders"] = [];
            for (let item of this.genders)
                data["genders"].push(item.toJSON());
        }
        if (Array.isArray(this.incomeLevels)) {
            data["incomeLevels"] = [];
            for (let item of this.incomeLevels)
                data["incomeLevels"].push(item.toJSON());
        }
        data["brandType"] = this.brandType;
        data["infCount"] = this.infCount;
        data["repost"] = this.repost;
        data["promote"] = this.promote;
        data["promoteDuration"] = this.promoteDuration;
        data["exclusivity"] = this.exclusivity;
        data["exculusivityDuration"] = this.exculusivityDuration;
        data["thirdPartiShare"] = this.thirdPartiShare;
        data["thirdPartiInf"] = this.thirdPartiInf;
        data["thirdPartiPromote"] = this.thirdPartiPromote;
        data["thirdPartiPromoteDuration"] = this.thirdPartiPromoteDuration;
        return data; 
    }
}

export interface IBriefModel {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    brandId?: number | undefined;
    city?: number | undefined;
    country?: number | undefined;
    budget?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    categoryList?: BriefTargetGroupModel[] | undefined;
    infAgeList?: BriefTargetGroupModel[] | undefined;
    followerAgeList?: BriefTargetGroupModel[] | undefined;
    followeGenderList?: BriefTargetGroupModel[] | undefined;
    brand?: BrandModel | undefined;
    platforms?: ParameterModel[] | undefined;
    genders?: ParameterModel[] | undefined;
    incomeLevels?: ParameterModel[] | undefined;
    brandType?: string | undefined;
    infCount?: number | undefined;
    repost?: boolean | undefined;
    promote?: boolean | undefined;
    promoteDuration?: number | undefined;
    exclusivity?: boolean | undefined;
    exculusivityDuration?: number | undefined;
    thirdPartiShare?: boolean | undefined;
    thirdPartiInf?: string | undefined;
    thirdPartiPromote?: boolean | undefined;
    thirdPartiPromoteDuration?: number | undefined;
}

export class BriefModelListServiceResponse implements IBriefModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefModel[] | undefined;

    constructor(data?: IBriefModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(BriefModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BriefModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BriefModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBriefModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefModel[] | undefined;
}

export class BriefModelServiceResponse implements IBriefModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefModel | undefined;

    constructor(data?: IBriefModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? BriefModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BriefModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BriefModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBriefModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefModel | undefined;
}

export class SocialMediaAccountId implements ISocialMediaAccountId {
    id?: number;
    socialMediaAccountName?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    influencerId?: number | undefined;
    influencerName?: string | undefined;
    follower?: number;

    constructor(data?: ISocialMediaAccountId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.networkName = data["networkName"];
            this.networkId = data["networkId"];
            this.influencerId = data["influencerId"];
            this.influencerName = data["influencerName"];
            this.follower = data["follower"];
        }
    }

    static fromJS(data: any): SocialMediaAccountId {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["networkName"] = this.networkName;
        data["networkId"] = this.networkId;
        data["influencerId"] = this.influencerId;
        data["influencerName"] = this.influencerName;
        data["follower"] = this.follower;
        return data; 
    }
}

export interface ISocialMediaAccountId {
    id?: number;
    socialMediaAccountName?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    influencerId?: number | undefined;
    influencerName?: string | undefined;
    follower?: number;
}

export class SocialMediaShareType implements ISocialMediaShareType {
    id?: number;
    socialMedia?: number;
    value?: string | undefined;
    tableOrder?: number;

    constructor(data?: ISocialMediaShareType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMedia = data["socialMedia"];
            this.value = data["value"];
            this.tableOrder = data["tableOrder"];
        }
    }

    static fromJS(data: any): SocialMediaShareType {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaShareType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMedia"] = this.socialMedia;
        data["value"] = this.value;
        data["tableOrder"] = this.tableOrder;
        return data; 
    }
}

export interface ISocialMediaShareType {
    id?: number;
    socialMedia?: number;
    value?: string | undefined;
    tableOrder?: number;
}

export class CostCalculations implements ICostCalculations {
    id?: number;
    hasIncludeCommission?: boolean | undefined;
    hasStoppageSeperated?: boolean | undefined;
    currentKDVExceptional?: boolean | undefined;
    campaignId?: number | undefined;
    realCost?: number | undefined;
    stoppageToGovernment?: number | undefined;
    kdvToGovernment?: number | undefined;
    toInfluencer?: number | undefined;
    withHolding?: number | undefined;
    kdv?: number | undefined;
    managerCommission?: number | undefined;
    stoppage?: number | undefined;
    netCost?: number | undefined;
    sharingCount?: number | undefined;
    socialMedia?: number | undefined;
    socialMediaShareTypeId?: number | undefined;
    isCampaign?: boolean | undefined;
    socialMediaAccountId?: number | undefined;
    influencerId?: number | undefined;
    totalCost?: number | undefined;
    campaignSelectedSharingId?: number | undefined;

    constructor(data?: ICostCalculations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.hasIncludeCommission = data["hasIncludeCommission"];
            this.hasStoppageSeperated = data["hasStoppageSeperated"];
            this.currentKDVExceptional = data["currentKDVExceptional"];
            this.campaignId = data["campaignId"];
            this.realCost = data["realCost"];
            this.stoppageToGovernment = data["stoppageToGovernment"];
            this.kdvToGovernment = data["kdvToGovernment"];
            this.toInfluencer = data["toInfluencer"];
            this.withHolding = data["withHolding"];
            this.kdv = data["kdv"];
            this.managerCommission = data["managerCommission"];
            this.stoppage = data["stoppage"];
            this.netCost = data["netCost"];
            this.sharingCount = data["sharingCount"];
            this.socialMedia = data["socialMedia"];
            this.socialMediaShareTypeId = data["socialMediaShareTypeId"];
            this.isCampaign = data["isCampaign"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.influencerId = data["influencerId"];
            this.totalCost = data["totalCost"];
            this.campaignSelectedSharingId = data["campaignSelectedSharingId"];
        }
    }

    static fromJS(data: any): CostCalculations {
        data = typeof data === 'object' ? data : {};
        let result = new CostCalculations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hasIncludeCommission"] = this.hasIncludeCommission;
        data["hasStoppageSeperated"] = this.hasStoppageSeperated;
        data["currentKDVExceptional"] = this.currentKDVExceptional;
        data["campaignId"] = this.campaignId;
        data["realCost"] = this.realCost;
        data["stoppageToGovernment"] = this.stoppageToGovernment;
        data["kdvToGovernment"] = this.kdvToGovernment;
        data["toInfluencer"] = this.toInfluencer;
        data["withHolding"] = this.withHolding;
        data["kdv"] = this.kdv;
        data["managerCommission"] = this.managerCommission;
        data["stoppage"] = this.stoppage;
        data["netCost"] = this.netCost;
        data["sharingCount"] = this.sharingCount;
        data["socialMedia"] = this.socialMedia;
        data["socialMediaShareTypeId"] = this.socialMediaShareTypeId;
        data["isCampaign"] = this.isCampaign;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["influencerId"] = this.influencerId;
        data["totalCost"] = this.totalCost;
        data["campaignSelectedSharingId"] = this.campaignSelectedSharingId;
        return data; 
    }
}

export interface ICostCalculations {
    id?: number;
    hasIncludeCommission?: boolean | undefined;
    hasStoppageSeperated?: boolean | undefined;
    currentKDVExceptional?: boolean | undefined;
    campaignId?: number | undefined;
    realCost?: number | undefined;
    stoppageToGovernment?: number | undefined;
    kdvToGovernment?: number | undefined;
    toInfluencer?: number | undefined;
    withHolding?: number | undefined;
    kdv?: number | undefined;
    managerCommission?: number | undefined;
    stoppage?: number | undefined;
    netCost?: number | undefined;
    sharingCount?: number | undefined;
    socialMedia?: number | undefined;
    socialMediaShareTypeId?: number | undefined;
    isCampaign?: boolean | undefined;
    socialMediaAccountId?: number | undefined;
    influencerId?: number | undefined;
    totalCost?: number | undefined;
    campaignSelectedSharingId?: number | undefined;
}

export class CampaignReportType implements ICampaignReportType {
    id?: number;
    name?: string | undefined;
    socialMediaId?: number | undefined;
    isReadOnly?: boolean | undefined;
    formula?: string | undefined;
    hasPercentIcon?: boolean | undefined;
    isImage?: boolean | undefined;
    tableOrder?: number | undefined;
    sameSharingTypeGroup?: string | undefined;
    extraProperty?: string | undefined;
    gridSize?: string | undefined;
    styleOrClassName?: string | undefined;

    constructor(data?: ICampaignReportType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.socialMediaId = data["socialMediaId"];
            this.isReadOnly = data["isReadOnly"];
            this.formula = data["formula"];
            this.hasPercentIcon = data["hasPercentIcon"];
            this.isImage = data["isImage"];
            this.tableOrder = data["tableOrder"];
            this.sameSharingTypeGroup = data["sameSharingTypeGroup"];
            this.extraProperty = data["extraProperty"];
            this.gridSize = data["gridSize"];
            this.styleOrClassName = data["styleOrClassName"];
        }
    }

    static fromJS(data: any): CampaignReportType {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignReportType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["socialMediaId"] = this.socialMediaId;
        data["isReadOnly"] = this.isReadOnly;
        data["formula"] = this.formula;
        data["hasPercentIcon"] = this.hasPercentIcon;
        data["isImage"] = this.isImage;
        data["tableOrder"] = this.tableOrder;
        data["sameSharingTypeGroup"] = this.sameSharingTypeGroup;
        data["extraProperty"] = this.extraProperty;
        data["gridSize"] = this.gridSize;
        data["styleOrClassName"] = this.styleOrClassName;
        return data; 
    }
}

export interface ICampaignReportType {
    id?: number;
    name?: string | undefined;
    socialMediaId?: number | undefined;
    isReadOnly?: boolean | undefined;
    formula?: string | undefined;
    hasPercentIcon?: boolean | undefined;
    isImage?: boolean | undefined;
    tableOrder?: number | undefined;
    sameSharingTypeGroup?: string | undefined;
    extraProperty?: string | undefined;
    gridSize?: string | undefined;
    styleOrClassName?: string | undefined;
}

export class SelectedSharingReport implements ISelectedSharingReport {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;
    socialMediaShareTypeId?: number | undefined;
    sameSocialMediaShareTypeGroup?: string | undefined;
    socialMediaId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    influencerId?: number | undefined;
    campaignId?: number | undefined;
    campaignReportTypeId?: number | undefined;
    campaignReportTypeModel?: CampaignReportType | undefined;
    campaignSelectedSharingId?: number | undefined;
    reportCreatedDate?: Date | undefined;
    reportUpdatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    isReadOnly?: boolean | undefined;
    isImage?: boolean | undefined;
    tableOrder?: number | undefined;
    gridSize?: string | undefined;
    extraProperty?: string | undefined;
    styleOrClassName?: string | undefined;
    followerCount?: number | undefined;
    showOnReport?: boolean | undefined;

    constructor(data?: ISelectedSharingReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.value = data["value"];
            this.socialMediaShareTypeId = data["socialMediaShareTypeId"];
            this.sameSocialMediaShareTypeGroup = data["sameSocialMediaShareTypeGroup"];
            this.socialMediaId = data["socialMediaId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.influencerId = data["influencerId"];
            this.campaignId = data["campaignId"];
            this.campaignReportTypeId = data["campaignReportTypeId"];
            this.campaignReportTypeModel = data["campaignReportTypeModel"] ? CampaignReportType.fromJS(data["campaignReportTypeModel"]) : <any>undefined;
            this.campaignSelectedSharingId = data["campaignSelectedSharingId"];
            this.reportCreatedDate = data["reportCreatedDate"] ? new Date(data["reportCreatedDate"].toString()) : <any>undefined;
            this.reportUpdatedDate = data["reportUpdatedDate"] ? new Date(data["reportUpdatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.isReadOnly = data["isReadOnly"];
            this.isImage = data["isImage"];
            this.tableOrder = data["tableOrder"];
            this.gridSize = data["gridSize"];
            this.extraProperty = data["extraProperty"];
            this.styleOrClassName = data["styleOrClassName"];
            this.followerCount = data["followerCount"];
            this.showOnReport = data["showOnReport"];
        }
    }

    static fromJS(data: any): SelectedSharingReport {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedSharingReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["socialMediaShareTypeId"] = this.socialMediaShareTypeId;
        data["sameSocialMediaShareTypeGroup"] = this.sameSocialMediaShareTypeGroup;
        data["socialMediaId"] = this.socialMediaId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["influencerId"] = this.influencerId;
        data["campaignId"] = this.campaignId;
        data["campaignReportTypeId"] = this.campaignReportTypeId;
        data["campaignReportTypeModel"] = this.campaignReportTypeModel ? this.campaignReportTypeModel.toJSON() : <any>undefined;
        data["campaignSelectedSharingId"] = this.campaignSelectedSharingId;
        data["reportCreatedDate"] = this.reportCreatedDate ? this.reportCreatedDate.toISOString() : <any>undefined;
        data["reportUpdatedDate"] = this.reportUpdatedDate ? this.reportUpdatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["isReadOnly"] = this.isReadOnly;
        data["isImage"] = this.isImage;
        data["tableOrder"] = this.tableOrder;
        data["gridSize"] = this.gridSize;
        data["extraProperty"] = this.extraProperty;
        data["styleOrClassName"] = this.styleOrClassName;
        data["followerCount"] = this.followerCount;
        data["showOnReport"] = this.showOnReport;
        return data; 
    }
}

export interface ISelectedSharingReport {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;
    socialMediaShareTypeId?: number | undefined;
    sameSocialMediaShareTypeGroup?: string | undefined;
    socialMediaId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    influencerId?: number | undefined;
    campaignId?: number | undefined;
    campaignReportTypeId?: number | undefined;
    campaignReportTypeModel?: CampaignReportType | undefined;
    campaignSelectedSharingId?: number | undefined;
    reportCreatedDate?: Date | undefined;
    reportUpdatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    isReadOnly?: boolean | undefined;
    isImage?: boolean | undefined;
    tableOrder?: number | undefined;
    gridSize?: string | undefined;
    extraProperty?: string | undefined;
    styleOrClassName?: string | undefined;
    followerCount?: number | undefined;
    showOnReport?: boolean | undefined;
}

export class SelectedSharing implements ISelectedSharing {
    rowId?: number | undefined;
    campaignId?: number | undefined;
    socialMediaId?: number | undefined;
    influencerId?: number | undefined;
    socialMediaAccountId?: number;
    socialMediaSharingType?: number;
    socialMediaSharingTypeModel?: SocialMediaShareType | undefined;
    netCost?: number | undefined;
    cost?: number | undefined;
    budget?: number | undefined;
    profitRate?: string | undefined;
    eventDate?: Date | undefined;
    hasShared?: boolean | undefined;
    quantity?: number;
    isLocked?: boolean | undefined;
    calculation?: CostCalculations | undefined;
    data?: SelectedSharingReport[] | undefined;

    constructor(data?: ISelectedSharing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rowId = data["rowId"];
            this.campaignId = data["campaignId"];
            this.socialMediaId = data["socialMediaId"];
            this.influencerId = data["influencerId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.socialMediaSharingType = data["socialMediaSharingType"];
            this.socialMediaSharingTypeModel = data["socialMediaSharingTypeModel"] ? SocialMediaShareType.fromJS(data["socialMediaSharingTypeModel"]) : <any>undefined;
            this.netCost = data["netCost"];
            this.cost = data["cost"];
            this.budget = data["budget"];
            this.profitRate = data["profitRate"];
            this.eventDate = data["eventDate"] ? new Date(data["eventDate"].toString()) : <any>undefined;
            this.hasShared = data["hasShared"];
            this.quantity = data["quantity"];
            this.isLocked = data["isLocked"];
            this.calculation = data["calculation"] ? CostCalculations.fromJS(data["calculation"]) : <any>undefined;
            if (Array.isArray(data["data"])) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(SelectedSharingReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SelectedSharing {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedSharing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowId"] = this.rowId;
        data["campaignId"] = this.campaignId;
        data["socialMediaId"] = this.socialMediaId;
        data["influencerId"] = this.influencerId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["socialMediaSharingType"] = this.socialMediaSharingType;
        data["socialMediaSharingTypeModel"] = this.socialMediaSharingTypeModel ? this.socialMediaSharingTypeModel.toJSON() : <any>undefined;
        data["netCost"] = this.netCost;
        data["cost"] = this.cost;
        data["budget"] = this.budget;
        data["profitRate"] = this.profitRate;
        data["eventDate"] = this.eventDate ? this.eventDate.toISOString() : <any>undefined;
        data["hasShared"] = this.hasShared;
        data["quantity"] = this.quantity;
        data["isLocked"] = this.isLocked;
        data["calculation"] = this.calculation ? this.calculation.toJSON() : <any>undefined;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISelectedSharing {
    rowId?: number | undefined;
    campaignId?: number | undefined;
    socialMediaId?: number | undefined;
    influencerId?: number | undefined;
    socialMediaAccountId?: number;
    socialMediaSharingType?: number;
    socialMediaSharingTypeModel?: SocialMediaShareType | undefined;
    netCost?: number | undefined;
    cost?: number | undefined;
    budget?: number | undefined;
    profitRate?: string | undefined;
    eventDate?: Date | undefined;
    hasShared?: boolean | undefined;
    quantity?: number;
    isLocked?: boolean | undefined;
    calculation?: CostCalculations | undefined;
    data?: SelectedSharingReport[] | undefined;
}

export class ScopeItem implements IScopeItem {
    campaignId?: number | undefined;
    briefId?: number | undefined;
    influencerNameId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaAccount?: SocialMediaAccountId | undefined;
    hasIncludeCommission?: boolean | undefined;
    hasStoppageSeperated?: boolean | undefined;
    currentKDVExceptional?: boolean | undefined;
    campaignTypes?: SelectedSharing[] | undefined;

    constructor(data?: IScopeItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.campaignId = data["campaignId"];
            this.briefId = data["briefId"];
            this.influencerNameId = data["influencerNameId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.socialMediaAccount = data["socialMediaAccount"] ? SocialMediaAccountId.fromJS(data["socialMediaAccount"]) : <any>undefined;
            this.hasIncludeCommission = data["hasIncludeCommission"];
            this.hasStoppageSeperated = data["hasStoppageSeperated"];
            this.currentKDVExceptional = data["currentKDVExceptional"];
            if (Array.isArray(data["campaignTypes"])) {
                this.campaignTypes = [] as any;
                for (let item of data["campaignTypes"])
                    this.campaignTypes!.push(SelectedSharing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ScopeItem {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        data["briefId"] = this.briefId;
        data["influencerNameId"] = this.influencerNameId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["socialMediaAccount"] = this.socialMediaAccount ? this.socialMediaAccount.toJSON() : <any>undefined;
        data["hasIncludeCommission"] = this.hasIncludeCommission;
        data["hasStoppageSeperated"] = this.hasStoppageSeperated;
        data["currentKDVExceptional"] = this.currentKDVExceptional;
        if (Array.isArray(this.campaignTypes)) {
            data["campaignTypes"] = [];
            for (let item of this.campaignTypes)
                data["campaignTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IScopeItem {
    campaignId?: number | undefined;
    briefId?: number | undefined;
    influencerNameId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaAccount?: SocialMediaAccountId | undefined;
    hasIncludeCommission?: boolean | undefined;
    hasStoppageSeperated?: boolean | undefined;
    currentKDVExceptional?: boolean | undefined;
    campaignTypes?: SelectedSharing[] | undefined;
}

export class ScopeItemServiceResponse implements IScopeItemServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ScopeItem | undefined;

    constructor(data?: IScopeItemServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? ScopeItem.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ScopeItemServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeItemServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IScopeItemServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ScopeItem | undefined;
}

export class ScopeItemListServiceResponse implements IScopeItemListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ScopeItem[] | undefined;

    constructor(data?: IScopeItemListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(ScopeItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ScopeItemListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ScopeItemListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IScopeItemListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ScopeItem[] | undefined;
}

export class BooleanServiceResponse implements IBooleanServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: boolean;

    constructor(data?: IBooleanServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"];
        }
    }

    static fromJS(data: any): BooleanServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject;
        return data; 
    }
}

export interface IBooleanServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: boolean;
}

export class SocialMediaAccountCategoryModel implements ISocialMediaAccountCategoryModel {
    id?: number | undefined;
    socialMediaAccountId?: number | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;

    constructor(data?: ISocialMediaAccountCategoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
        }
    }

    static fromJS(data: any): SocialMediaAccountCategoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountCategoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        return data; 
    }
}

export interface ISocialMediaAccountCategoryModel {
    id?: number | undefined;
    socialMediaAccountId?: number | undefined;
    categoryId?: number | undefined;
    categoryName?: string | undefined;
}

export class SocialMediaAccountDemographicModel implements ISocialMediaAccountDemographicModel {
    id?: number;
    socialMediaAccountId?: number;
    category?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    updateDate?: Date | undefined;
    socialMediaAccountName?: string | undefined;
    versionCode?: string | undefined;

    constructor(data?: ISocialMediaAccountDemographicModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.category = data["category"];
            this.key = data["key"];
            this.value = data["value"];
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.versionCode = data["versionCode"];
        }
    }

    static fromJS(data: any): SocialMediaAccountDemographicModel {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountDemographicModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["category"] = this.category;
        data["key"] = this.key;
        data["value"] = this.value;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["versionCode"] = this.versionCode;
        return data; 
    }
}

export interface ISocialMediaAccountDemographicModel {
    id?: number;
    socialMediaAccountId?: number;
    category?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    updateDate?: Date | undefined;
    socialMediaAccountName?: string | undefined;
    versionCode?: string | undefined;
}

export class Instagram implements IInstagram {
    mediaUpload?: string | undefined;
    followers?: string | undefined;
    following?: string | undefined;
    engagementRate?: string | undefined;
    avgLikes?: string | undefined;
    avgComments?: string | undefined;

    constructor(data?: IInstagram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mediaUpload = data["mediaUpload"];
            this.followers = data["followers"];
            this.following = data["following"];
            this.engagementRate = data["engagementRate"];
            this.avgLikes = data["avgLikes"];
            this.avgComments = data["avgComments"];
        }
    }

    static fromJS(data: any): Instagram {
        data = typeof data === 'object' ? data : {};
        let result = new Instagram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mediaUpload"] = this.mediaUpload;
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["engagementRate"] = this.engagementRate;
        data["avgLikes"] = this.avgLikes;
        data["avgComments"] = this.avgComments;
        return data; 
    }
}

export interface IInstagram {
    mediaUpload?: string | undefined;
    followers?: string | undefined;
    following?: string | undefined;
    engagementRate?: string | undefined;
    avgLikes?: string | undefined;
    avgComments?: string | undefined;
}

export class Facebook implements IFacebook {
    likes?: string | undefined;
    talkingAbout?: string | undefined;

    constructor(data?: IFacebook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.likes = data["likes"];
            this.talkingAbout = data["talkingAbout"];
        }
    }

    static fromJS(data: any): Facebook {
        data = typeof data === 'object' ? data : {};
        let result = new Facebook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["likes"] = this.likes;
        data["talkingAbout"] = this.talkingAbout;
        return data; 
    }
}

export interface IFacebook {
    likes?: string | undefined;
    talkingAbout?: string | undefined;
}

export class Youtube implements IYoutube {
    uploads?: string | undefined;
    subscribers?: string | undefined;
    videoViews?: string | undefined;

    constructor(data?: IYoutube) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.uploads = data["uploads"];
            this.subscribers = data["subscribers"];
            this.videoViews = data["videoViews"];
        }
    }

    static fromJS(data: any): Youtube {
        data = typeof data === 'object' ? data : {};
        let result = new Youtube();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploads"] = this.uploads;
        data["subscribers"] = this.subscribers;
        data["videoViews"] = this.videoViews;
        return data; 
    }
}

export interface IYoutube {
    uploads?: string | undefined;
    subscribers?: string | undefined;
    videoViews?: string | undefined;
}

export class Twitter implements ITwitter {
    followers?: string | undefined;
    following?: string | undefined;
    likes?: string | undefined;
    tweets?: string | undefined;

    constructor(data?: ITwitter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.followers = data["followers"];
            this.following = data["following"];
            this.likes = data["likes"];
            this.tweets = data["tweets"];
        }
    }

    static fromJS(data: any): Twitter {
        data = typeof data === 'object' ? data : {};
        let result = new Twitter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["followers"] = this.followers;
        data["following"] = this.following;
        data["likes"] = this.likes;
        data["tweets"] = this.tweets;
        return data; 
    }
}

export interface ITwitter {
    followers?: string | undefined;
    following?: string | undefined;
    likes?: string | undefined;
    tweets?: string | undefined;
}

export class Tiktok implements ITiktok {
    uploads?: string | undefined;
    fans?: string | undefined;
    following?: string | undefined;
    likes?: string | undefined;

    constructor(data?: ITiktok) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.uploads = data["uploads"];
            this.fans = data["fans"];
            this.following = data["following"];
            this.likes = data["likes"];
        }
    }

    static fromJS(data: any): Tiktok {
        data = typeof data === 'object' ? data : {};
        let result = new Tiktok();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploads"] = this.uploads;
        data["fans"] = this.fans;
        data["following"] = this.following;
        data["likes"] = this.likes;
        return data; 
    }
}

export interface ITiktok {
    uploads?: string | undefined;
    fans?: string | undefined;
    following?: string | undefined;
    likes?: string | undefined;
}

export class SocialMediaAccountInfoModel implements ISocialMediaAccountInfoModel {
    id?: number | undefined;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    follower?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    cityName?: string | undefined;
    countryName?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: boolean | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    influencerId?: number | undefined;
    categories?: SocialMediaAccountCategoryModel[] | undefined;
    influencerDemographics?: SocialMediaAccountDemographicModel[] | undefined;
    status?: number | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;

    constructor(data?: ISocialMediaAccountInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.link = data["link"];
            this.networkName = data["networkName"];
            this.networkId = data["networkId"];
            this.follower = data["follower"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.fullName = data["fullName"];
            this.age = data["age"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.gender = data["gender"];
            this.genderId = data["genderId"];
            this.cityId = data["cityId"];
            this.cityName = data["cityName"];
            this.countryName = data["countryName"];
            this.countryId = data["countryId"];
            this.accountType = data["accountType"];
            this.accountTypeId = data["accountTypeId"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.managerNotes = data["managerNotes"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatus = data["martialStatus"];
            this.childStatus = data["childStatus"];
            this.pregnantStatus = data["pregnantStatus"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.children = data["children"];
            this.profilePicturePath = data["profilePicturePath"];
            this.isVerified = data["isVerified"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.influencerId = data["influencerId"];
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(SocialMediaAccountCategoryModel.fromJS(item));
            }
            if (Array.isArray(data["influencerDemographics"])) {
                this.influencerDemographics = [] as any;
                for (let item of data["influencerDemographics"])
                    this.influencerDemographics!.push(SocialMediaAccountDemographicModel.fromJS(item));
            }
            this.status = data["status"];
            this.isPaymentGoingToManager = data["isPaymentGoingToManager"];
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
            this.instagram = data["instagram"] ? Instagram.fromJS(data["instagram"]) : <any>undefined;
            this.facebook = data["facebook"] ? Facebook.fromJS(data["facebook"]) : <any>undefined;
            this.youtube = data["youtube"] ? Youtube.fromJS(data["youtube"]) : <any>undefined;
            this.twitter = data["twitter"] ? Twitter.fromJS(data["twitter"]) : <any>undefined;
            this.tiktok = data["tiktok"] ? Tiktok.fromJS(data["tiktok"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["link"] = this.link;
        data["networkName"] = this.networkName;
        data["networkId"] = this.networkId;
        data["follower"] = this.follower;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["genderId"] = this.genderId;
        data["cityId"] = this.cityId;
        data["cityName"] = this.cityName;
        data["countryName"] = this.countryName;
        data["countryId"] = this.countryId;
        data["accountType"] = this.accountType;
        data["accountTypeId"] = this.accountTypeId;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["managerNotes"] = this.managerNotes;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatus"] = this.martialStatus;
        data["childStatus"] = this.childStatus;
        data["pregnantStatus"] = this.pregnantStatus;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["children"] = this.children;
        data["profilePicturePath"] = this.profilePicturePath;
        data["isVerified"] = this.isVerified;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["influencerId"] = this.influencerId;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.influencerDemographics)) {
            data["influencerDemographics"] = [];
            for (let item of this.influencerDemographics)
                data["influencerDemographics"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["isPaymentGoingToManager"] = this.isPaymentGoingToManager;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        data["instagram"] = this.instagram ? this.instagram.toJSON() : <any>undefined;
        data["facebook"] = this.facebook ? this.facebook.toJSON() : <any>undefined;
        data["youtube"] = this.youtube ? this.youtube.toJSON() : <any>undefined;
        data["twitter"] = this.twitter ? this.twitter.toJSON() : <any>undefined;
        data["tiktok"] = this.tiktok ? this.tiktok.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountInfoModel {
    id?: number | undefined;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    follower?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    cityName?: string | undefined;
    countryName?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: boolean | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    influencerId?: number | undefined;
    categories?: SocialMediaAccountCategoryModel[] | undefined;
    influencerDemographics?: SocialMediaAccountDemographicModel[] | undefined;
    status?: number | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;
}

export class BriefOfferSmaCampaignTypeModel implements IBriefOfferSmaCampaignTypeModel {
    id?: number | undefined;
    briefId?: number | undefined;
    briefOfferId?: number | undefined;
    briefOfferSmaId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    quantity?: number;
    cost?: number;
    budget?: number;
    campaignType?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;

    constructor(data?: IBriefOfferSmaCampaignTypeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.briefId = data["briefId"];
            this.briefOfferId = data["briefOfferId"];
            this.briefOfferSmaId = data["briefOfferSmaId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.quantity = data["quantity"];
            this.cost = data["cost"];
            this.budget = data["budget"];
            this.campaignType = data["campaignType"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): BriefOfferSmaCampaignTypeModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferSmaCampaignTypeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["briefId"] = this.briefId;
        data["briefOfferId"] = this.briefOfferId;
        data["briefOfferSmaId"] = this.briefOfferSmaId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["quantity"] = this.quantity;
        data["cost"] = this.cost;
        data["budget"] = this.budget;
        data["campaignType"] = this.campaignType;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface IBriefOfferSmaCampaignTypeModel {
    id?: number | undefined;
    briefId?: number | undefined;
    briefOfferId?: number | undefined;
    briefOfferSmaId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    quantity?: number;
    cost?: number;
    budget?: number;
    campaignType?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
}

export class BriefOfferSmaModel implements IBriefOfferSmaModel {
    id?: number | undefined;
    briefId?: number | undefined;
    briefOfferId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaAccount?: SocialMediaAccountInfoModel | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    briefOfferSmaCampaignTypeList?: BriefOfferSmaCampaignTypeModel[] | undefined;

    constructor(data?: IBriefOfferSmaModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.briefId = data["briefId"];
            this.briefOfferId = data["briefOfferId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.socialMediaAccount = data["socialMediaAccount"] ? SocialMediaAccountInfoModel.fromJS(data["socialMediaAccount"]) : <any>undefined;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            if (Array.isArray(data["briefOfferSmaCampaignTypeList"])) {
                this.briefOfferSmaCampaignTypeList = [] as any;
                for (let item of data["briefOfferSmaCampaignTypeList"])
                    this.briefOfferSmaCampaignTypeList!.push(BriefOfferSmaCampaignTypeModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BriefOfferSmaModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferSmaModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["briefId"] = this.briefId;
        data["briefOfferId"] = this.briefOfferId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["socialMediaAccount"] = this.socialMediaAccount ? this.socialMediaAccount.toJSON() : <any>undefined;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        if (Array.isArray(this.briefOfferSmaCampaignTypeList)) {
            data["briefOfferSmaCampaignTypeList"] = [];
            for (let item of this.briefOfferSmaCampaignTypeList)
                data["briefOfferSmaCampaignTypeList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBriefOfferSmaModel {
    id?: number | undefined;
    briefId?: number | undefined;
    briefOfferId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaAccount?: SocialMediaAccountInfoModel | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    briefOfferSmaCampaignTypeList?: BriefOfferSmaCampaignTypeModel[] | undefined;
}

export class BriefOfferModel implements IBriefOfferModel {
    id?: number | undefined;
    briefId?: number | undefined;
    validDay?: number;
    budget?: number;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    briefOfferSmaList?: BriefOfferSmaModel[] | undefined;

    constructor(data?: IBriefOfferModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.briefId = data["briefId"];
            this.validDay = data["validDay"];
            this.budget = data["budget"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.status = data["status"];
            if (Array.isArray(data["briefOfferSmaList"])) {
                this.briefOfferSmaList = [] as any;
                for (let item of data["briefOfferSmaList"])
                    this.briefOfferSmaList!.push(BriefOfferSmaModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BriefOfferModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["briefId"] = this.briefId;
        data["validDay"] = this.validDay;
        data["budget"] = this.budget;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["status"] = this.status;
        if (Array.isArray(this.briefOfferSmaList)) {
            data["briefOfferSmaList"] = [];
            for (let item of this.briefOfferSmaList)
                data["briefOfferSmaList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBriefOfferModel {
    id?: number | undefined;
    briefId?: number | undefined;
    validDay?: number;
    budget?: number;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    briefOfferSmaList?: BriefOfferSmaModel[] | undefined;
}

export class BriefOfferModelServiceResponse implements IBriefOfferModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferModel | undefined;

    constructor(data?: IBriefOfferModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? BriefOfferModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BriefOfferModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBriefOfferModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferModel | undefined;
}

export class BriefOfferViewModel implements IBriefOfferViewModel {
    id?: number;
    briefId?: number | undefined;
    validDay?: number;
    budget?: number;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    statusName?: string | undefined;
    briefOfferSmaList?: BriefOfferSmaModel[] | undefined;

    constructor(data?: IBriefOfferViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.briefId = data["briefId"];
            this.validDay = data["validDay"];
            this.budget = data["budget"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.status = data["status"];
            this.statusName = data["statusName"];
            if (Array.isArray(data["briefOfferSmaList"])) {
                this.briefOfferSmaList = [] as any;
                for (let item of data["briefOfferSmaList"])
                    this.briefOfferSmaList!.push(BriefOfferSmaModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BriefOfferViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["briefId"] = this.briefId;
        data["validDay"] = this.validDay;
        data["budget"] = this.budget;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["status"] = this.status;
        data["statusName"] = this.statusName;
        if (Array.isArray(this.briefOfferSmaList)) {
            data["briefOfferSmaList"] = [];
            for (let item of this.briefOfferSmaList)
                data["briefOfferSmaList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBriefOfferViewModel {
    id?: number;
    briefId?: number | undefined;
    validDay?: number;
    budget?: number;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    status?: string | undefined;
    statusName?: string | undefined;
    briefOfferSmaList?: BriefOfferSmaModel[] | undefined;
}

export class BriefOfferViewModelListServiceResponse implements IBriefOfferViewModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferViewModel[] | undefined;

    constructor(data?: IBriefOfferViewModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(BriefOfferViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BriefOfferViewModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferViewModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBriefOfferViewModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferViewModel[] | undefined;
}

export class BriefOfferViewModelServiceResponse implements IBriefOfferViewModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferViewModel | undefined;

    constructor(data?: IBriefOfferViewModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? BriefOfferViewModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BriefOfferViewModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BriefOfferViewModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IBriefOfferViewModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: BriefOfferViewModel | undefined;
}

export class ServiceResponse implements IServiceResponse {
    result?: ServiceResult | undefined;

    constructor(data?: IServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IServiceResponse {
    result?: ServiceResult | undefined;
}

export class CampaignStatuData implements ICampaignStatuData {
    id?: number;
    name?: string | undefined;

    constructor(data?: ICampaignStatuData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CampaignStatuData {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignStatuData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICampaignStatuData {
    id?: number;
    name?: string | undefined;
}

export class CampaignCategory implements ICampaignCategory {
    id?: number;
    value?: string | undefined;
    parentId?: number;
    tableOrder?: number;

    constructor(data?: ICampaignCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.parentId = data["parentId"];
            this.tableOrder = data["tableOrder"];
        }
    }

    static fromJS(data: any): CampaignCategory {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["parentId"] = this.parentId;
        data["tableOrder"] = this.tableOrder;
        return data; 
    }
}

export interface ICampaignCategory {
    id?: number;
    value?: string | undefined;
    parentId?: number;
    tableOrder?: number;
}

export class SelectedCategory implements ISelectedCategory {
    id?: number;
    campaignCategory?: CampaignCategory | undefined;

    constructor(data?: ISelectedCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.campaignCategory = data["campaignCategory"] ? CampaignCategory.fromJS(data["campaignCategory"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SelectedCategory {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["campaignCategory"] = this.campaignCategory ? this.campaignCategory.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISelectedCategory {
    id?: number;
    campaignCategory?: CampaignCategory | undefined;
}

export class CampaignFiles implements ICampaignFiles {
    campaignId?: number | undefined;
    filePath?: string | undefined;
    fileName?: string | undefined;
    id?: number;
    isCampaign?: boolean | undefined;

    constructor(data?: ICampaignFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.campaignId = data["campaignId"];
            this.filePath = data["filePath"];
            this.fileName = data["fileName"];
            this.id = data["id"];
            this.isCampaign = data["isCampaign"];
        }
    }

    static fromJS(data: any): CampaignFiles {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        data["filePath"] = this.filePath;
        data["fileName"] = this.fileName;
        data["id"] = this.id;
        data["isCampaign"] = this.isCampaign;
        return data; 
    }
}

export interface ICampaignFiles {
    campaignId?: number | undefined;
    filePath?: string | undefined;
    fileName?: string | undefined;
    id?: number;
    isCampaign?: boolean | undefined;
}

export class CampaignDTO implements ICampaignDTO {
    id?: number;
    name?: string | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    description?: string | undefined;
    brandId?: number | undefined;
    brandType?: number | undefined;
    brand?: BrandInfo | undefined;
    campaignStatus?: number | undefined;
    campaignStatuModel?: CampaignStatuData | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    hasCompleted?: boolean | undefined;
    risturn?: number | undefined;
    agvg?: number | undefined;
    billingBrandId?: number | undefined;
    campaingCategories?: SelectedCategory[] | undefined;
    scopes?: ScopeItem[] | undefined;
    files?: CampaignFiles[] | undefined;

    constructor(data?: ICampaignDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.brandId = data["brandId"];
            this.brandType = data["brandType"];
            this.brand = data["brand"] ? BrandInfo.fromJS(data["brand"]) : <any>undefined;
            this.campaignStatus = data["campaignStatus"];
            this.campaignStatuModel = data["campaignStatuModel"] ? CampaignStatuData.fromJS(data["campaignStatuModel"]) : <any>undefined;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
            this.hasCompleted = data["hasCompleted"];
            this.risturn = data["risturn"];
            this.agvg = data["agvg"];
            this.billingBrandId = data["billingBrandId"];
            if (Array.isArray(data["campaingCategories"])) {
                this.campaingCategories = [] as any;
                for (let item of data["campaingCategories"])
                    this.campaingCategories!.push(SelectedCategory.fromJS(item));
            }
            if (Array.isArray(data["scopes"])) {
                this.scopes = [] as any;
                for (let item of data["scopes"])
                    this.scopes!.push(ScopeItem.fromJS(item));
            }
            if (Array.isArray(data["files"])) {
                this.files = [] as any;
                for (let item of data["files"])
                    this.files!.push(CampaignFiles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["brandId"] = this.brandId;
        data["brandType"] = this.brandType;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["campaignStatus"] = this.campaignStatus;
        data["campaignStatuModel"] = this.campaignStatuModel ? this.campaignStatuModel.toJSON() : <any>undefined;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["hasCompleted"] = this.hasCompleted;
        data["risturn"] = this.risturn;
        data["agvg"] = this.agvg;
        data["billingBrandId"] = this.billingBrandId;
        if (Array.isArray(this.campaingCategories)) {
            data["campaingCategories"] = [];
            for (let item of this.campaingCategories)
                data["campaingCategories"].push(item.toJSON());
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignDTO {
    id?: number;
    name?: string | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    description?: string | undefined;
    brandId?: number | undefined;
    brandType?: number | undefined;
    brand?: BrandInfo | undefined;
    campaignStatus?: number | undefined;
    campaignStatuModel?: CampaignStatuData | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    hasCompleted?: boolean | undefined;
    risturn?: number | undefined;
    agvg?: number | undefined;
    billingBrandId?: number | undefined;
    campaingCategories?: SelectedCategory[] | undefined;
    scopes?: ScopeItem[] | undefined;
    files?: CampaignFiles[] | undefined;
}

export class CampaignDTOServiceResponse implements ICampaignDTOServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignDTO | undefined;

    constructor(data?: ICampaignDTOServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaignDTO.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignDTOServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignDTOServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaignDTOServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignDTO | undefined;
}

export class CampaignDTOListServiceResponse implements ICampaignDTOListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignDTO[] | undefined;

    constructor(data?: ICampaignDTOListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaignDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignDTOListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignDTOListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignDTOListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignDTO[] | undefined;
}

export class StringServiceResponse implements IStringServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: string | undefined;

    constructor(data?: IStringServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"];
        }
    }

    static fromJS(data: any): StringServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StringServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject;
        return data; 
    }
}

export interface IStringServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: string | undefined;
}

export class CostCalculationsListServiceResponse implements ICostCalculationsListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CostCalculations[] | undefined;

    constructor(data?: ICostCalculationsListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CostCalculations.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostCalculationsListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CostCalculationsListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICostCalculationsListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CostCalculations[] | undefined;
}

export class CompanyType implements ICompanyType {
    id?: number;
    tableOrder?: number;
    labelName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
    formula?: string | undefined;
    hasFormula?: boolean;
    askKDVQuestion?: boolean;
    showOnUI?: boolean;
    name?: string | undefined;

    constructor(data?: ICompanyType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.tableOrder = data["tableOrder"];
            this.labelName = data["labelName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
            this.formula = data["formula"];
            this.hasFormula = data["hasFormula"];
            this.askKDVQuestion = data["askKDVQuestion"];
            this.showOnUI = data["showOnUI"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CompanyType {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tableOrder"] = this.tableOrder;
        data["labelName"] = this.labelName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        data["formula"] = this.formula;
        data["hasFormula"] = this.hasFormula;
        data["askKDVQuestion"] = this.askKDVQuestion;
        data["showOnUI"] = this.showOnUI;
        data["name"] = this.name;
        return data; 
    }
}

export interface ICompanyType {
    id?: number;
    tableOrder?: number;
    labelName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
    formula?: string | undefined;
    hasFormula?: boolean;
    askKDVQuestion?: boolean;
    showOnUI?: boolean;
    name?: string | undefined;
}

export class CompanyTypeListServiceResponse implements ICompanyTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CompanyType[] | undefined;

    constructor(data?: ICompanyTypeListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CompanyType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompanyTypeListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyTypeListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICompanyTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CompanyType[] | undefined;
}

export class CampaignCategoryServiceResponse implements ICampaignCategoryServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignCategory | undefined;

    constructor(data?: ICampaignCategoryServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaignCategory.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignCategoryServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignCategoryServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaignCategoryServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignCategory | undefined;
}

export class CampaignCategoryListServiceResponse implements ICampaignCategoryListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignCategory[] | undefined;

    constructor(data?: ICampaignCategoryListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaignCategory.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignCategoryListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignCategoryListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignCategoryListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignCategory[] | undefined;
}

export class CampaignReportTypeServiceResponse implements ICampaignReportTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignReportType | undefined;

    constructor(data?: ICampaignReportTypeServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaignReportType.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignReportTypeServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignReportTypeServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaignReportTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignReportType | undefined;
}

export class CampaignReportTypeListServiceResponse implements ICampaignReportTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignReportType[] | undefined;

    constructor(data?: ICampaignReportTypeListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaignReportType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignReportTypeListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignReportTypeListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignReportTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignReportType[] | undefined;
}

export class CampaignSelectedSharing implements ICampaignSelectedSharing {
    rowId?: number;
    campaignId?: number | undefined;
    socialMediaAccountId?: number;
    socialMediaSharingType?: number;
    cost?: number;
    netCost?: number | undefined;
    budget?: number | undefined;
    profitRate?: string | undefined;
    eventDate?: Date | undefined;
    hasShared?: boolean | undefined;
    quantity?: number;
    isCampaign?: boolean | undefined;

    constructor(data?: ICampaignSelectedSharing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.rowId = data["rowId"];
            this.campaignId = data["campaignId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.socialMediaSharingType = data["socialMediaSharingType"];
            this.cost = data["cost"];
            this.netCost = data["netCost"];
            this.budget = data["budget"];
            this.profitRate = data["profitRate"];
            this.eventDate = data["eventDate"] ? new Date(data["eventDate"].toString()) : <any>undefined;
            this.hasShared = data["hasShared"];
            this.quantity = data["quantity"];
            this.isCampaign = data["isCampaign"];
        }
    }

    static fromJS(data: any): CampaignSelectedSharing {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignSelectedSharing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowId"] = this.rowId;
        data["campaignId"] = this.campaignId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["socialMediaSharingType"] = this.socialMediaSharingType;
        data["cost"] = this.cost;
        data["netCost"] = this.netCost;
        data["budget"] = this.budget;
        data["profitRate"] = this.profitRate;
        data["eventDate"] = this.eventDate ? this.eventDate.toISOString() : <any>undefined;
        data["hasShared"] = this.hasShared;
        data["quantity"] = this.quantity;
        data["isCampaign"] = this.isCampaign;
        return data; 
    }
}

export interface ICampaignSelectedSharing {
    rowId?: number;
    campaignId?: number | undefined;
    socialMediaAccountId?: number;
    socialMediaSharingType?: number;
    cost?: number;
    netCost?: number | undefined;
    budget?: number | undefined;
    profitRate?: string | undefined;
    eventDate?: Date | undefined;
    hasShared?: boolean | undefined;
    quantity?: number;
    isCampaign?: boolean | undefined;
}

export class CampaignSelectedSharingServiceResponse implements ICampaignSelectedSharingServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignSelectedSharing | undefined;

    constructor(data?: ICampaignSelectedSharingServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaignSelectedSharing.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignSelectedSharingServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignSelectedSharingServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaignSelectedSharingServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignSelectedSharing | undefined;
}

export class CampaignSelectedSharingListServiceResponse implements ICampaignSelectedSharingListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignSelectedSharing[] | undefined;

    constructor(data?: ICampaignSelectedSharingListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaignSelectedSharing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignSelectedSharingListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignSelectedSharingListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignSelectedSharingListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignSelectedSharing[] | undefined;
}

export class CampaignStatus implements ICampaignStatus {
    id?: number;
    label?: string | undefined;

    constructor(data?: ICampaignStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.label = data["label"];
        }
    }

    static fromJS(data: any): CampaignStatus {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        return data; 
    }
}

export interface ICampaignStatus {
    id?: number;
    label?: string | undefined;
}

export class CampaignStatusServiceResponse implements ICampaignStatusServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignStatus | undefined;

    constructor(data?: ICampaignStatusServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaignStatus.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignStatusServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignStatusServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaignStatusServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignStatus | undefined;
}

export class CampaignStatusListServiceResponse implements ICampaignStatusListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignStatus[] | undefined;

    constructor(data?: ICampaignStatusListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaignStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignStatusListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignStatusListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaignStatusListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaignStatus[] | undefined;
}

export class CompanyTypeServiceResponse implements ICompanyTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CompanyType | undefined;

    constructor(data?: ICompanyTypeServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CompanyType.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CompanyTypeServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyTypeServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICompanyTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CompanyType | undefined;
}

export class CostCalculationsServiceResponse implements ICostCalculationsServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CostCalculations | undefined;

    constructor(data?: ICostCalculationsServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CostCalculations.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CostCalculationsServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CostCalculationsServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICostCalculationsServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CostCalculations | undefined;
}

export class DataHistoryModel implements IDataHistoryModel {
    id?: string;
    dataType?: string | undefined;
    dataId?: number | undefined;
    email?: string | undefined;
    userFullName?: string | undefined;
    oldData?: string | undefined;
    newData?: string | undefined;
    createDate?: Date | undefined;
    createdBy?: number | undefined;
    operationType?: string | undefined;

    constructor(data?: IDataHistoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dataType = data["dataType"];
            this.dataId = data["dataId"];
            this.email = data["email"];
            this.userFullName = data["userFullName"];
            this.oldData = data["oldData"];
            this.newData = data["newData"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.operationType = data["operationType"];
        }
    }

    static fromJS(data: any): DataHistoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new DataHistoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dataType"] = this.dataType;
        data["dataId"] = this.dataId;
        data["email"] = this.email;
        data["userFullName"] = this.userFullName;
        data["oldData"] = this.oldData;
        data["newData"] = this.newData;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["operationType"] = this.operationType;
        return data; 
    }
}

export interface IDataHistoryModel {
    id?: string;
    dataType?: string | undefined;
    dataId?: number | undefined;
    email?: string | undefined;
    userFullName?: string | undefined;
    oldData?: string | undefined;
    newData?: string | undefined;
    createDate?: Date | undefined;
    createdBy?: number | undefined;
    operationType?: string | undefined;
}

export class DataHistoryModelListServiceResponse implements IDataHistoryModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: DataHistoryModel[] | undefined;

    constructor(data?: IDataHistoryModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(DataHistoryModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataHistoryModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DataHistoryModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDataHistoryModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: DataHistoryModel[] | undefined;
}

export class InfluencerInfoModel implements IInfluencerInfoModel {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    cityName?: string | undefined;
    countryName?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    managerNotes?: string | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerCompanyName?: string | undefined;
    managerCompanyTitle?: string | undefined;
    managerUserFullname?: string | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    managerUserPhone?: string | undefined;
    managerUserEmail?: string | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IInfluencerInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.fullName = data["fullName"];
            this.age = data["age"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.gender = data["gender"];
            this.genderId = data["genderId"];
            this.cityId = data["cityId"];
            this.cityName = data["cityName"];
            this.countryName = data["countryName"];
            this.countryId = data["countryId"];
            this.accountType = data["accountType"];
            this.accountTypeId = data["accountTypeId"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatus = data["martialStatus"];
            this.childStatus = data["childStatus"];
            this.pregnantStatus = data["pregnantStatus"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.managerNotes = data["managerNotes"];
            this.children = data["children"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.managerCompanyName = data["managerCompanyName"];
            this.managerCompanyTitle = data["managerCompanyTitle"];
            this.managerUserFullname = data["managerUserFullname"];
            this.managerId = data["managerId"];
            this.managerUserId = data["managerUserId"];
            this.managerUserPhone = data["managerUserPhone"];
            this.managerUserEmail = data["managerUserEmail"];
            this.isPaymentGoingToManager = data["isPaymentGoingToManager"];
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): InfluencerInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new InfluencerInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["fullName"] = this.fullName;
        data["age"] = this.age;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["genderId"] = this.genderId;
        data["cityId"] = this.cityId;
        data["cityName"] = this.cityName;
        data["countryName"] = this.countryName;
        data["countryId"] = this.countryId;
        data["accountType"] = this.accountType;
        data["accountTypeId"] = this.accountTypeId;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatus"] = this.martialStatus;
        data["childStatus"] = this.childStatus;
        data["pregnantStatus"] = this.pregnantStatus;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["managerNotes"] = this.managerNotes;
        data["children"] = this.children;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["managerCompanyName"] = this.managerCompanyName;
        data["managerCompanyTitle"] = this.managerCompanyTitle;
        data["managerUserFullname"] = this.managerUserFullname;
        data["managerId"] = this.managerId;
        data["managerUserId"] = this.managerUserId;
        data["managerUserPhone"] = this.managerUserPhone;
        data["managerUserEmail"] = this.managerUserEmail;
        data["isPaymentGoingToManager"] = this.isPaymentGoingToManager;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IInfluencerInfoModel {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    fullName?: string | undefined;
    age?: number | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    cityName?: string | undefined;
    countryName?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    managerNotes?: string | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerCompanyName?: string | undefined;
    managerCompanyTitle?: string | undefined;
    managerUserFullname?: string | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    managerUserPhone?: string | undefined;
    managerUserEmail?: string | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class InfluencerInfoModelListServiceResponse implements IInfluencerInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: InfluencerInfoModel[] | undefined;

    constructor(data?: IInfluencerInfoModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(InfluencerInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InfluencerInfoModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InfluencerInfoModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInfluencerInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: InfluencerInfoModel[] | undefined;
}

export class InfluencerModel implements IInfluencerModel {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    countryId?: number | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IInfluencerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.age = data["age"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.genderId = data["genderId"];
            this.cityId = data["cityId"];
            this.countryId = data["countryId"];
            this.accountTypeId = data["accountTypeId"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.managerNotes = data["managerNotes"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.children = data["children"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.managerId = data["managerId"];
            this.managerUserId = data["managerUserId"];
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.isPaymentGoingToManager = data["isPaymentGoingToManager"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): InfluencerModel {
        data = typeof data === 'object' ? data : {};
        let result = new InfluencerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["age"] = this.age;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["genderId"] = this.genderId;
        data["cityId"] = this.cityId;
        data["countryId"] = this.countryId;
        data["accountTypeId"] = this.accountTypeId;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["managerNotes"] = this.managerNotes;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["children"] = this.children;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["managerId"] = this.managerId;
        data["managerUserId"] = this.managerUserId;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["isPaymentGoingToManager"] = this.isPaymentGoingToManager;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IInfluencerModel {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    countryId?: number | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class InfluencerInfoModelServiceResponse implements IInfluencerInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: InfluencerInfoModel | undefined;

    constructor(data?: IInfluencerInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? InfluencerInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InfluencerInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InfluencerInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInfluencerInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: InfluencerInfoModel | undefined;
}

export class Influencer implements IInfluencer {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    birthdate?: Date | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    countryId?: number | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    managerNotes?: string | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    logStatus?: number | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IInfluencer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.age = data["age"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.genderId = data["genderId"];
            this.cityId = data["cityId"];
            this.countryId = data["countryId"];
            this.accountTypeId = data["accountTypeId"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.managerNotes = data["managerNotes"];
            this.children = data["children"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.status = data["status"];
            this.managerId = data["managerId"];
            this.managerUserId = data["managerUserId"];
            this.logStatus = data["logStatus"];
            this.isPaymentGoingToManager = data["isPaymentGoingToManager"];
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): Influencer {
        data = typeof data === 'object' ? data : {};
        let result = new Influencer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["age"] = this.age;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["genderId"] = this.genderId;
        data["cityId"] = this.cityId;
        data["countryId"] = this.countryId;
        data["accountTypeId"] = this.accountTypeId;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["managerNotes"] = this.managerNotes;
        data["children"] = this.children;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["managerId"] = this.managerId;
        data["managerUserId"] = this.managerUserId;
        data["logStatus"] = this.logStatus;
        data["isPaymentGoingToManager"] = this.isPaymentGoingToManager;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IInfluencer {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    birthdate?: Date | undefined;
    genderId?: number | undefined;
    cityId?: number | undefined;
    countryId?: number | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    managerNotes?: string | undefined;
    children?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    status?: number | undefined;
    managerId?: number | undefined;
    managerUserId?: number | undefined;
    logStatus?: number | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class InfluencerServiceResponse implements IInfluencerServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Influencer | undefined;

    constructor(data?: IInfluencerServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? Influencer.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InfluencerServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InfluencerServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInfluencerServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: Influencer | undefined;
}

export class SocialMediaAccountInfoModelListServiceResponse implements ISocialMediaAccountInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountInfoModel[] | undefined;

    constructor(data?: ISocialMediaAccountInfoModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMediaAccountInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaAccountInfoModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountInfoModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaAccountInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountInfoModel[] | undefined;
}

export class ManagerModel implements IManagerModel {
    id?: number;
    companyName?: string | undefined;
    companyTitle?: string | undefined;
    address?: string | undefined;
    countryId?: number | undefined;
    cityId?: number | undefined;
    districtId?: number | undefined;
    postCode?: string | undefined;
    taxAdministrator?: string | undefined;
    taxNumber?: string | undefined;
    ebillEmail?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    mobileNumber?: string | undefined;
    bankName?: string | undefined;
    bankAccountName?: string | undefined;
    iban?: string | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IManagerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyName = data["companyName"];
            this.companyTitle = data["companyTitle"];
            this.address = data["address"];
            this.countryId = data["countryId"];
            this.cityId = data["cityId"];
            this.districtId = data["districtId"];
            this.postCode = data["postCode"];
            this.taxAdministrator = data["taxAdministrator"];
            this.taxNumber = data["taxNumber"];
            this.ebillEmail = data["ebillEmail"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.mobileNumber = data["mobileNumber"];
            this.bankName = data["bankName"];
            this.bankAccountName = data["bankAccountName"];
            this.iban = data["iban"];
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): ManagerModel {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["companyTitle"] = this.companyTitle;
        data["address"] = this.address;
        data["countryId"] = this.countryId;
        data["cityId"] = this.cityId;
        data["districtId"] = this.districtId;
        data["postCode"] = this.postCode;
        data["taxAdministrator"] = this.taxAdministrator;
        data["taxNumber"] = this.taxNumber;
        data["ebillEmail"] = this.ebillEmail;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["mobileNumber"] = this.mobileNumber;
        data["bankName"] = this.bankName;
        data["bankAccountName"] = this.bankAccountName;
        data["iban"] = this.iban;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IManagerModel {
    id?: number;
    companyName?: string | undefined;
    companyTitle?: string | undefined;
    address?: string | undefined;
    countryId?: number | undefined;
    cityId?: number | undefined;
    districtId?: number | undefined;
    postCode?: string | undefined;
    taxAdministrator?: string | undefined;
    taxNumber?: string | undefined;
    ebillEmail?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    mobileNumber?: string | undefined;
    bankName?: string | undefined;
    bankAccountName?: string | undefined;
    iban?: string | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class ManagerModelListServiceResponse implements IManagerModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerModel[] | undefined;

    constructor(data?: IManagerModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(ManagerModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ManagerModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IManagerModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerModel[] | undefined;
}

export class ManagerModelServiceResponse implements IManagerModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerModel | undefined;

    constructor(data?: IManagerModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? ManagerModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ManagerModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IManagerModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerModel | undefined;
}

export class ManagerUserModel implements IManagerUserModel {
    id?: number;
    managerId?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    mobileNumber?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;

    constructor(data?: IManagerUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.managerId = data["managerId"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.mobileNumber = data["mobileNumber"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): ManagerUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["managerId"] = this.managerId;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["mobileNumber"] = this.mobileNumber;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface IManagerUserModel {
    id?: number;
    managerId?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    mobileNumber?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
}

export class ManagerUserModelListServiceResponse implements IManagerUserModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerUserModel[] | undefined;

    constructor(data?: IManagerUserModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(ManagerUserModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ManagerUserModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerUserModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IManagerUserModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerUserModel[] | undefined;
}

export class ManagerUserModelServiceResponse implements IManagerUserModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerUserModel | undefined;

    constructor(data?: IManagerUserModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? ManagerUserModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ManagerUserModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerUserModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IManagerUserModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ManagerUserModel | undefined;
}

export class MyListSearchRequestModel implements IMyListSearchRequestModel {
    searchText?: string | undefined;
    categoryId?: number | undefined;
    tagIdList?: number[] | undefined;

    constructor(data?: IMyListSearchRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchText = data["searchText"];
            this.categoryId = data["categoryId"];
            if (Array.isArray(data["tagIdList"])) {
                this.tagIdList = [] as any;
                for (let item of data["tagIdList"])
                    this.tagIdList!.push(item);
            }
        }
    }

    static fromJS(data: any): MyListSearchRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSearchRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchText"] = this.searchText;
        data["categoryId"] = this.categoryId;
        if (Array.isArray(this.tagIdList)) {
            data["tagIdList"] = [];
            for (let item of this.tagIdList)
                data["tagIdList"].push(item);
        }
        return data; 
    }
}

export interface IMyListSearchRequestModel {
    searchText?: string | undefined;
    categoryId?: number | undefined;
    tagIdList?: number[] | undefined;
}

export class TagModel implements ITagModel {
    id?: number | undefined;
    name?: string | undefined;

    constructor(data?: ITagModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): TagModel {
        data = typeof data === 'object' ? data : {};
        let result = new TagModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface ITagModel {
    id?: number | undefined;
    name?: string | undefined;
}

export class MyListInfoModel implements IMyListInfoModel {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    listName?: string | undefined;
    tags?: TagModel[] | undefined;
    logoPath?: string | undefined;
    createdDate?: Date;
    createdBy?: number;
    updateDate?: Date | undefined;
    updateBy?: number | undefined;
    logStatus?: number;

    constructor(data?: IMyListInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.listName = data["listName"];
            if (Array.isArray(data["tags"])) {
                this.tags = [] as any;
                for (let item of data["tags"])
                    this.tags!.push(TagModel.fromJS(item));
            }
            this.logoPath = data["logoPath"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.updateBy = data["updateBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): MyListInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["listName"] = this.listName;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["logoPath"] = this.logoPath;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["updateBy"] = this.updateBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface IMyListInfoModel {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    listName?: string | undefined;
    tags?: TagModel[] | undefined;
    logoPath?: string | undefined;
    createdDate?: Date;
    createdBy?: number;
    updateDate?: Date | undefined;
    updateBy?: number | undefined;
    logStatus?: number;
}

export class MyListInfoModelListServiceResponse implements IMyListInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListInfoModel[] | undefined;

    constructor(data?: IMyListInfoModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(MyListInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MyListInfoModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MyListInfoModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMyListInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListInfoModel[] | undefined;
}

export class MyListSocialMediaAccountDashboardModel implements IMyListSocialMediaAccountDashboardModel {
    myListId?: number;
    instagramAccountCount?: number | undefined;
    tiktokAccountCount?: number | undefined;
    twitterAccountCount?: number | undefined;
    youtubeAccountCount?: number | undefined;
    otherAccountCount?: number | undefined;
    instagramFollowerCount?: number | undefined;
    tiktokFollowerCount?: number | undefined;
    twitterFollowerCount?: number | undefined;
    youtubeFollowerCount?: number | undefined;
    otherFollowerCount?: number | undefined;

    constructor(data?: IMyListSocialMediaAccountDashboardModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.myListId = data["myListId"];
            this.instagramAccountCount = data["instagramAccountCount"];
            this.tiktokAccountCount = data["tiktokAccountCount"];
            this.twitterAccountCount = data["twitterAccountCount"];
            this.youtubeAccountCount = data["youtubeAccountCount"];
            this.otherAccountCount = data["otherAccountCount"];
            this.instagramFollowerCount = data["instagramFollowerCount"];
            this.tiktokFollowerCount = data["tiktokFollowerCount"];
            this.twitterFollowerCount = data["twitterFollowerCount"];
            this.youtubeFollowerCount = data["youtubeFollowerCount"];
            this.otherFollowerCount = data["otherFollowerCount"];
        }
    }

    static fromJS(data: any): MyListSocialMediaAccountDashboardModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSocialMediaAccountDashboardModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["myListId"] = this.myListId;
        data["instagramAccountCount"] = this.instagramAccountCount;
        data["tiktokAccountCount"] = this.tiktokAccountCount;
        data["twitterAccountCount"] = this.twitterAccountCount;
        data["youtubeAccountCount"] = this.youtubeAccountCount;
        data["otherAccountCount"] = this.otherAccountCount;
        data["instagramFollowerCount"] = this.instagramFollowerCount;
        data["tiktokFollowerCount"] = this.tiktokFollowerCount;
        data["twitterFollowerCount"] = this.twitterFollowerCount;
        data["youtubeFollowerCount"] = this.youtubeFollowerCount;
        data["otherFollowerCount"] = this.otherFollowerCount;
        return data; 
    }
}

export interface IMyListSocialMediaAccountDashboardModel {
    myListId?: number;
    instagramAccountCount?: number | undefined;
    tiktokAccountCount?: number | undefined;
    twitterAccountCount?: number | undefined;
    youtubeAccountCount?: number | undefined;
    otherAccountCount?: number | undefined;
    instagramFollowerCount?: number | undefined;
    tiktokFollowerCount?: number | undefined;
    twitterFollowerCount?: number | undefined;
    youtubeFollowerCount?: number | undefined;
    otherFollowerCount?: number | undefined;
}

export class MyListSocialMediaAccountInfoModel implements IMyListSocialMediaAccountInfoModel {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    listName?: string | undefined;
    tagModels?: TagModel[] | undefined;
    logoPath?: string | undefined;
    createdDate?: Date;
    createdBy?: number;
    updateDate?: Date | undefined;
    updateBy?: number | undefined;
    logStatus?: number;
    socialMediaAccountInfo?: SocialMediaAccountInfoModel[] | undefined;
    dashboardInfo?: MyListSocialMediaAccountDashboardModel | undefined;

    constructor(data?: IMyListSocialMediaAccountInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.categoryId = data["categoryId"];
            this.categoryName = data["categoryName"];
            this.listName = data["listName"];
            if (Array.isArray(data["tagModels"])) {
                this.tagModels = [] as any;
                for (let item of data["tagModels"])
                    this.tagModels!.push(TagModel.fromJS(item));
            }
            this.logoPath = data["logoPath"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.updateBy = data["updateBy"];
            this.logStatus = data["logStatus"];
            if (Array.isArray(data["socialMediaAccountInfo"])) {
                this.socialMediaAccountInfo = [] as any;
                for (let item of data["socialMediaAccountInfo"])
                    this.socialMediaAccountInfo!.push(SocialMediaAccountInfoModel.fromJS(item));
            }
            this.dashboardInfo = data["dashboardInfo"] ? MyListSocialMediaAccountDashboardModel.fromJS(data["dashboardInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MyListSocialMediaAccountInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSocialMediaAccountInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["listName"] = this.listName;
        if (Array.isArray(this.tagModels)) {
            data["tagModels"] = [];
            for (let item of this.tagModels)
                data["tagModels"].push(item.toJSON());
        }
        data["logoPath"] = this.logoPath;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["updateBy"] = this.updateBy;
        data["logStatus"] = this.logStatus;
        if (Array.isArray(this.socialMediaAccountInfo)) {
            data["socialMediaAccountInfo"] = [];
            for (let item of this.socialMediaAccountInfo)
                data["socialMediaAccountInfo"].push(item.toJSON());
        }
        data["dashboardInfo"] = this.dashboardInfo ? this.dashboardInfo.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMyListSocialMediaAccountInfoModel {
    id?: number;
    categoryId?: number;
    categoryName?: string | undefined;
    listName?: string | undefined;
    tagModels?: TagModel[] | undefined;
    logoPath?: string | undefined;
    createdDate?: Date;
    createdBy?: number;
    updateDate?: Date | undefined;
    updateBy?: number | undefined;
    logStatus?: number;
    socialMediaAccountInfo?: SocialMediaAccountInfoModel[] | undefined;
    dashboardInfo?: MyListSocialMediaAccountDashboardModel | undefined;
}

export class MyListSocialMediaAccountInfoModelServiceResponse implements IMyListSocialMediaAccountInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListSocialMediaAccountInfoModel | undefined;

    constructor(data?: IMyListSocialMediaAccountInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? MyListSocialMediaAccountInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MyListSocialMediaAccountInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSocialMediaAccountInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMyListSocialMediaAccountInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListSocialMediaAccountInfoModel | undefined;
}

export class MyListInfoModelServiceResponse implements IMyListInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListInfoModel | undefined;

    constructor(data?: IMyListInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? MyListInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MyListInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MyListInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMyListInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListInfoModel | undefined;
}

export class MyListModel implements IMyListModel {
    id?: number | undefined;
    categoryId?: number;
    listName?: string | undefined;
    tags?: TagModel[] | undefined;
    logoPath?: string | undefined;
    socialMediaAccountId?: number | undefined;

    constructor(data?: IMyListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.categoryId = data["categoryId"];
            this.listName = data["listName"];
            if (Array.isArray(data["tags"])) {
                this.tags = [] as any;
                for (let item of data["tags"])
                    this.tags!.push(TagModel.fromJS(item));
            }
            this.logoPath = data["logoPath"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
        }
    }

    static fromJS(data: any): MyListModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryId"] = this.categoryId;
        data["listName"] = this.listName;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["logoPath"] = this.logoPath;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        return data; 
    }
}

export interface IMyListModel {
    id?: number | undefined;
    categoryId?: number;
    listName?: string | undefined;
    tags?: TagModel[] | undefined;
    logoPath?: string | undefined;
    socialMediaAccountId?: number | undefined;
}

export class MyListCategoryRequestModel implements IMyListCategoryRequestModel {
    id?: number | undefined;
    categoryName?: string | undefined;

    constructor(data?: IMyListCategoryRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.categoryName = data["categoryName"];
        }
    }

    static fromJS(data: any): MyListCategoryRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListCategoryRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryName"] = this.categoryName;
        return data; 
    }
}

export interface IMyListCategoryRequestModel {
    id?: number | undefined;
    categoryName?: string | undefined;
}

export class MyListSocialMediaAccountDashboardModelServiceResponse implements IMyListSocialMediaAccountDashboardModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListSocialMediaAccountDashboardModel | undefined;

    constructor(data?: IMyListSocialMediaAccountDashboardModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? MyListSocialMediaAccountDashboardModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MyListSocialMediaAccountDashboardModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSocialMediaAccountDashboardModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IMyListSocialMediaAccountDashboardModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: MyListSocialMediaAccountDashboardModel | undefined;
}

export class MyListSocialMediaAccountRequestModel implements IMyListSocialMediaAccountRequestModel {
    myListsId?: number[] | undefined;
    socialMediaAccountId?: number;

    constructor(data?: IMyListSocialMediaAccountRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["myListsId"])) {
                this.myListsId = [] as any;
                for (let item of data["myListsId"])
                    this.myListsId!.push(item);
            }
            this.socialMediaAccountId = data["socialMediaAccountId"];
        }
    }

    static fromJS(data: any): MyListSocialMediaAccountRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new MyListSocialMediaAccountRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.myListsId)) {
            data["myListsId"] = [];
            for (let item of this.myListsId)
                data["myListsId"].push(item);
        }
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        return data; 
    }
}

export interface IMyListSocialMediaAccountRequestModel {
    myListsId?: number[] | undefined;
    socialMediaAccountId?: number;
}

export class GuidServiceResponse implements IGuidServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: string;

    constructor(data?: IGuidServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"];
        }
    }

    static fromJS(data: any): GuidServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GuidServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject;
        return data; 
    }
}

export interface IGuidServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: string;
}

export class TagModelListServiceResponse implements ITagModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: TagModel[] | undefined;

    constructor(data?: ITagModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(TagModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TagModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TagModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITagModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: TagModel[] | undefined;
}

export class ParameterModelListServiceResponse implements IParameterModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ParameterModel[] | undefined;

    constructor(data?: IParameterModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(ParameterModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ParameterModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IParameterModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ParameterModel[] | undefined;
}

export class ParameterModelServiceResponse implements IParameterModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ParameterModel | undefined;

    constructor(data?: IParameterModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? ParameterModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ParameterModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IParameterModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ParameterModel | undefined;
}

export class PaymentInfoModel implements IPaymentInfoModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    identityNumber?: string | undefined;
    iban?: string | undefined;
    companyTitle?: string | undefined;
    companyOfficialAddress?: string | undefined;
    taxAdministration?: string | undefined;
    taxNumber?: string | undefined;
    invoiceMail?: string | undefined;
    personType?: number | undefined;
    personId?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IPaymentInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.identityNumber = data["identityNumber"];
            this.iban = data["iban"];
            this.companyTitle = data["companyTitle"];
            this.companyOfficialAddress = data["companyOfficialAddress"];
            this.taxAdministration = data["taxAdministration"];
            this.taxNumber = data["taxNumber"];
            this.invoiceMail = data["invoiceMail"];
            this.personType = data["personType"];
            this.personId = data["personId"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.status = data["status"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.companyType = data["companyType"];
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.isPaymentManager = data["isPaymentManager"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): PaymentInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["identityNumber"] = this.identityNumber;
        data["iban"] = this.iban;
        data["companyTitle"] = this.companyTitle;
        data["companyOfficialAddress"] = this.companyOfficialAddress;
        data["taxAdministration"] = this.taxAdministration;
        data["taxNumber"] = this.taxNumber;
        data["invoiceMail"] = this.invoiceMail;
        data["personType"] = this.personType;
        data["personId"] = this.personId;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["status"] = this.status;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["companyType"] = this.companyType;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["isPaymentManager"] = this.isPaymentManager;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IPaymentInfoModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    identityNumber?: string | undefined;
    iban?: string | undefined;
    companyTitle?: string | undefined;
    companyOfficialAddress?: string | undefined;
    taxAdministration?: string | undefined;
    taxNumber?: string | undefined;
    invoiceMail?: string | undefined;
    personType?: number | undefined;
    personId?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    companyType?: number | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class PaymentInfoModelListServiceResponse implements IPaymentInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfoModel[] | undefined;

    constructor(data?: IPaymentInfoModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(PaymentInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaymentInfoModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfoModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPaymentInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfoModel[] | undefined;
}

export class PaymentInfo implements IPaymentInfo {
    id?: number;
    companyType?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    identityNumber?: string | undefined;
    iban?: string | undefined;
    companyTitle?: string | undefined;
    companyOfficialAddress?: string | undefined;
    taxAdministration?: string | undefined;
    taxNumber?: string | undefined;
    invoiceMail?: string | undefined;
    personType?: number | undefined;
    personId?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;

    constructor(data?: IPaymentInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.companyType = data["companyType"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.identityNumber = data["identityNumber"];
            this.iban = data["iban"];
            this.companyTitle = data["companyTitle"];
            this.companyOfficialAddress = data["companyOfficialAddress"];
            this.taxAdministration = data["taxAdministration"];
            this.taxNumber = data["taxNumber"];
            this.invoiceMail = data["invoiceMail"];
            this.personType = data["personType"];
            this.personId = data["personId"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.status = data["status"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.hasKdvPrivilige = data["hasKdvPrivilige"];
            this.isPaymentGoingToManager = data["isPaymentGoingToManager"];
            this.kdvPriviliegeFile = data["kdvPriviliegeFile"];
            this.kdvPriviliegeFileName = data["kdvPriviliegeFileName"];
            this.withHolding = data["withHolding"];
            this.stoppage = data["stoppage"];
        }
    }

    static fromJS(data: any): PaymentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyType"] = this.companyType;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["identityNumber"] = this.identityNumber;
        data["iban"] = this.iban;
        data["companyTitle"] = this.companyTitle;
        data["companyOfficialAddress"] = this.companyOfficialAddress;
        data["taxAdministration"] = this.taxAdministration;
        data["taxNumber"] = this.taxNumber;
        data["invoiceMail"] = this.invoiceMail;
        data["personType"] = this.personType;
        data["personId"] = this.personId;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["status"] = this.status;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["hasKdvPrivilige"] = this.hasKdvPrivilige;
        data["isPaymentGoingToManager"] = this.isPaymentGoingToManager;
        data["kdvPriviliegeFile"] = this.kdvPriviliegeFile;
        data["kdvPriviliegeFileName"] = this.kdvPriviliegeFileName;
        data["withHolding"] = this.withHolding;
        data["stoppage"] = this.stoppage;
        return data; 
    }
}

export interface IPaymentInfo {
    id?: number;
    companyType?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    identityNumber?: string | undefined;
    iban?: string | undefined;
    companyTitle?: string | undefined;
    companyOfficialAddress?: string | undefined;
    taxAdministration?: string | undefined;
    taxNumber?: string | undefined;
    invoiceMail?: string | undefined;
    personType?: number | undefined;
    personId?: number | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    hasKdvPrivilige?: boolean | undefined;
    isPaymentGoingToManager?: boolean | undefined;
    kdvPriviliegeFile?: string | undefined;
    kdvPriviliegeFileName?: string | undefined;
    withHolding?: number | undefined;
    stoppage?: number | undefined;
}

export class PaymentInfoServiceResponse implements IPaymentInfoServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfo | undefined;

    constructor(data?: IPaymentInfoServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? PaymentInfo.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentInfoServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfoServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPaymentInfoServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfo | undefined;
}

export class PaymentInfoModelServiceResponse implements IPaymentInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfoModel | undefined;

    constructor(data?: IPaymentInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? PaymentInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPaymentInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: PaymentInfoModel | undefined;
}

export class UserInfoModel implements IUserInfoModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phone?: string | undefined;
    status?: number;
    categoryId?: number;
    category?: string | undefined;
    roleCode?: number;
    roleName?: string | undefined;
    createdBy?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    brandId?: number | undefined;
    brandName?: string | undefined;
    owner?: boolean | undefined;

    constructor(data?: IUserInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.password = data["password"];
            this.phone = data["phone"];
            this.status = data["status"];
            this.categoryId = data["categoryId"];
            this.category = data["category"];
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            this.createdBy = data["createdBy"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.brandId = data["brandId"];
            this.brandName = data["brandName"];
            this.owner = data["owner"];
        }
    }

    static fromJS(data: any): UserInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phone"] = this.phone;
        data["status"] = this.status;
        data["categoryId"] = this.categoryId;
        data["category"] = this.category;
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        data["createdBy"] = this.createdBy;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["brandId"] = this.brandId;
        data["brandName"] = this.brandName;
        data["owner"] = this.owner;
        return data; 
    }
}

export interface IUserInfoModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phone?: string | undefined;
    status?: number;
    categoryId?: number;
    category?: string | undefined;
    roleCode?: number;
    roleName?: string | undefined;
    createdBy?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    brandId?: number | undefined;
    brandName?: string | undefined;
    owner?: boolean | undefined;
}

export class UserInfoModelServiceResponse implements IUserInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: UserInfoModel | undefined;

    constructor(data?: IUserInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? UserInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: UserInfoModel | undefined;
}

export class UserModel implements IUserModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    status?: number | undefined;
    categoryId?: number | undefined;
    roleCode?: number | undefined;
    createdBy?: number | undefined;
    phone?: string | undefined;
    brandId?: number | undefined;
    profilePicturePath?: string | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    userType?: number | undefined;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.password = data["password"];
            this.status = data["status"];
            this.categoryId = data["categoryId"];
            this.roleCode = data["roleCode"];
            this.createdBy = data["createdBy"];
            this.phone = data["phone"];
            this.brandId = data["brandId"];
            this.profilePicturePath = data["profilePicturePath"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.userType = data["userType"];
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["password"] = this.password;
        data["status"] = this.status;
        data["categoryId"] = this.categoryId;
        data["roleCode"] = this.roleCode;
        data["createdBy"] = this.createdBy;
        data["phone"] = this.phone;
        data["brandId"] = this.brandId;
        data["profilePicturePath"] = this.profilePicturePath;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["userType"] = this.userType;
        return data; 
    }
}

export interface IUserModel {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    status?: number | undefined;
    categoryId?: number | undefined;
    roleCode?: number | undefined;
    createdBy?: number | undefined;
    phone?: string | undefined;
    brandId?: number | undefined;
    profilePicturePath?: string | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    userType?: number | undefined;
}

export class PasswordChangeModel implements IPasswordChangeModel {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordControl?: string | undefined;
    user?: UserModel | undefined;

    constructor(data?: IPasswordChangeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.oldPassword = data["oldPassword"];
            this.newPassword = data["newPassword"];
            this.newPasswordControl = data["newPasswordControl"];
            this.user = data["user"] ? UserModel.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PasswordChangeModel {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordChangeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        data["newPasswordControl"] = this.newPasswordControl;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPasswordChangeModel {
    oldPassword?: string | undefined;
    newPassword?: string | undefined;
    newPasswordControl?: string | undefined;
    user?: UserModel | undefined;
}

export class ReportData implements IReportData {
    id?: number | undefined;
    value?: string | undefined;
    showOnReport?: boolean | undefined;
    campaignId?: string | undefined;
    resultDescription?: string | undefined;
    isSuccess?: number | undefined;
    hasSystemError?: boolean | undefined;

    constructor(data?: IReportData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.showOnReport = data["showOnReport"];
            this.campaignId = data["campaignId"];
            this.resultDescription = data["resultDescription"];
            this.isSuccess = data["isSuccess"];
            this.hasSystemError = data["hasSystemError"];
        }
    }

    static fromJS(data: any): ReportData {
        data = typeof data === 'object' ? data : {};
        let result = new ReportData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["showOnReport"] = this.showOnReport;
        data["campaignId"] = this.campaignId;
        data["resultDescription"] = this.resultDescription;
        data["isSuccess"] = this.isSuccess;
        data["hasSystemError"] = this.hasSystemError;
        return data; 
    }
}

export interface IReportData {
    id?: number | undefined;
    value?: string | undefined;
    showOnReport?: boolean | undefined;
    campaignId?: string | undefined;
    resultDescription?: string | undefined;
    isSuccess?: number | undefined;
    hasSystemError?: boolean | undefined;
}

export class ReportDataListServiceResponse implements IReportDataListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ReportData[] | undefined;

    constructor(data?: IReportDataListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(ReportData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReportDataListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReportDataListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReportDataListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: ReportData[] | undefined;
}

export class CampaingSelectedSharingReport implements ICampaingSelectedSharingReport {
    id?: number;
    value?: string | undefined;
    followerCount?: number | undefined;
    socialMediaShareTypeId?: number | undefined;
    campaignReportTypeId?: number | undefined;
    campaignSelectedSharingId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaId?: number | undefined;
    influencerId?: number | undefined;
    campaignId?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    showOnReport?: boolean | undefined;

    constructor(data?: ICampaingSelectedSharingReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.followerCount = data["followerCount"];
            this.socialMediaShareTypeId = data["socialMediaShareTypeId"];
            this.campaignReportTypeId = data["campaignReportTypeId"];
            this.campaignSelectedSharingId = data["campaignSelectedSharingId"];
            this.socialMediaAccountId = data["socialMediaAccountId"];
            this.socialMediaId = data["socialMediaId"];
            this.influencerId = data["influencerId"];
            this.campaignId = data["campaignId"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.showOnReport = data["showOnReport"];
        }
    }

    static fromJS(data: any): CampaingSelectedSharingReport {
        data = typeof data === 'object' ? data : {};
        let result = new CampaingSelectedSharingReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["followerCount"] = this.followerCount;
        data["socialMediaShareTypeId"] = this.socialMediaShareTypeId;
        data["campaignReportTypeId"] = this.campaignReportTypeId;
        data["campaignSelectedSharingId"] = this.campaignSelectedSharingId;
        data["socialMediaAccountId"] = this.socialMediaAccountId;
        data["socialMediaId"] = this.socialMediaId;
        data["influencerId"] = this.influencerId;
        data["campaignId"] = this.campaignId;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["showOnReport"] = this.showOnReport;
        return data; 
    }
}

export interface ICampaingSelectedSharingReport {
    id?: number;
    value?: string | undefined;
    followerCount?: number | undefined;
    socialMediaShareTypeId?: number | undefined;
    campaignReportTypeId?: number | undefined;
    campaignSelectedSharingId?: number | undefined;
    socialMediaAccountId?: number | undefined;
    socialMediaId?: number | undefined;
    influencerId?: number | undefined;
    campaignId?: number | undefined;
    createdDate?: Date | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    showOnReport?: boolean | undefined;
}

export class CampaingSelectedSharingReportServiceResponse implements ICampaingSelectedSharingReportServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaingSelectedSharingReport | undefined;

    constructor(data?: ICampaingSelectedSharingReportServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? CampaingSelectedSharingReport.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaingSelectedSharingReportServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaingSelectedSharingReportServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICampaingSelectedSharingReportServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaingSelectedSharingReport | undefined;
}

export class CampaingSelectedSharingReportListServiceResponse implements ICampaingSelectedSharingReportListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaingSelectedSharingReport[] | undefined;

    constructor(data?: ICampaingSelectedSharingReportListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(CampaingSelectedSharingReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaingSelectedSharingReportListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CampaingSelectedSharingReportListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICampaingSelectedSharingReportListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: CampaingSelectedSharingReport[] | undefined;
}

export class RoleModel implements IRoleModel {
    id?: number;
    roleName?: string | undefined;
    roleCategoryId?: number;
    roleCategoryName?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;

    constructor(data?: IRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.roleName = data["roleName"];
            this.roleCategoryId = data["roleCategoryId"];
            this.roleCategoryName = data["roleCategoryName"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
        }
    }

    static fromJS(data: any): RoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roleName"] = this.roleName;
        data["roleCategoryId"] = this.roleCategoryId;
        data["roleCategoryName"] = this.roleCategoryName;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        return data; 
    }
}

export interface IRoleModel {
    id?: number;
    roleName?: string | undefined;
    roleCategoryId?: number;
    roleCategoryName?: string | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
}

export class RoleModelListServiceResponse implements IRoleModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: RoleModel[] | undefined;

    constructor(data?: IRoleModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(RoleModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoleModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: RoleModel[] | undefined;
}

export class RoleModelServiceResponse implements IRoleModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: RoleModel | undefined;

    constructor(data?: IRoleModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? RoleModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoleModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRoleModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: RoleModel | undefined;
}

export class CategoryRate implements ICategoryRate {
    category?: string | undefined;
    rate?: number | undefined;

    constructor(data?: ICategoryRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.category = data["category"];
            this.rate = data["rate"];
        }
    }

    static fromJS(data: any): CategoryRate {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        data["rate"] = this.rate;
        return data; 
    }
}

export interface ICategoryRate {
    category?: string | undefined;
    rate?: number | undefined;
}

export class SocialMediaAccountRequestModel implements ISocialMediaAccountRequestModel {
    searchText?: string | undefined;
    genderRate?: CategoryRate | undefined;
    ageRate?: CategoryRate | undefined;
    countryRate?: CategoryRate | undefined;
    followerRate?: number | undefined;
    categories?: number[] | undefined;
    engagementRate?: number | undefined;

    constructor(data?: ISocialMediaAccountRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.searchText = data["searchText"];
            this.genderRate = data["genderRate"] ? CategoryRate.fromJS(data["genderRate"]) : <any>undefined;
            this.ageRate = data["ageRate"] ? CategoryRate.fromJS(data["ageRate"]) : <any>undefined;
            this.countryRate = data["countryRate"] ? CategoryRate.fromJS(data["countryRate"]) : <any>undefined;
            this.followerRate = data["followerRate"];
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(item);
            }
            this.engagementRate = data["engagementRate"];
        }
    }

    static fromJS(data: any): SocialMediaAccountRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchText"] = this.searchText;
        data["genderRate"] = this.genderRate ? this.genderRate.toJSON() : <any>undefined;
        data["ageRate"] = this.ageRate ? this.ageRate.toJSON() : <any>undefined;
        data["countryRate"] = this.countryRate ? this.countryRate.toJSON() : <any>undefined;
        data["followerRate"] = this.followerRate;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["engagementRate"] = this.engagementRate;
        return data; 
    }
}

export interface ISocialMediaAccountRequestModel {
    searchText?: string | undefined;
    genderRate?: CategoryRate | undefined;
    ageRate?: CategoryRate | undefined;
    countryRate?: CategoryRate | undefined;
    followerRate?: number | undefined;
    categories?: number[] | undefined;
    engagementRate?: number | undefined;
}

export class SocialMediaAccountModel implements ISocialMediaAccountModel {
    id?: number | undefined;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    follower?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    cityId?: number | undefined;
    city?: string | undefined;
    country?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    category1?: string | undefined;
    category2?: string | undefined;
    category3?: string | undefined;
    category4?: string | undefined;
    category5?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: boolean | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    influencerId?: number | undefined;
    categories?: SocialMediaAccountCategoryModel[] | undefined;
    influencerDemografigs?: SocialMediaAccountDemographicModel[] | undefined;
    versionCode?: string | undefined;
    status?: number | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;

    constructor(data?: ISocialMediaAccountModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.link = data["link"];
            this.networkName = data["networkName"];
            this.networkId = data["networkId"];
            this.follower = data["follower"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.age = data["age"];
            this.birthdate = data["birthdate"] ? new Date(data["birthdate"].toString()) : <any>undefined;
            this.gender = data["gender"];
            this.cityId = data["cityId"];
            this.city = data["city"];
            this.country = data["country"];
            this.countryId = data["countryId"];
            this.accountType = data["accountType"];
            this.accountTypeId = data["accountTypeId"];
            this.phone = data["phone"];
            this.category1 = data["category1"];
            this.category2 = data["category2"];
            this.category3 = data["category3"];
            this.category4 = data["category4"];
            this.category5 = data["category5"];
            this.email = data["email"];
            this.managerNotes = data["managerNotes"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatus = data["martialStatus"];
            this.childStatus = data["childStatus"];
            this.pregnantStatus = data["pregnantStatus"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.children = data["children"];
            this.profilePicturePath = data["profilePicturePath"];
            this.isVerified = data["isVerified"];
            this.createdBy = data["createdBy"];
            this.updatedBy = data["updatedBy"];
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : <any>undefined;
            this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : <any>undefined;
            this.influencerId = data["influencerId"];
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(SocialMediaAccountCategoryModel.fromJS(item));
            }
            if (Array.isArray(data["influencerDemografigs"])) {
                this.influencerDemografigs = [] as any;
                for (let item of data["influencerDemografigs"])
                    this.influencerDemografigs!.push(SocialMediaAccountDemographicModel.fromJS(item));
            }
            this.versionCode = data["versionCode"];
            this.status = data["status"];
            this.instagram = data["instagram"] ? Instagram.fromJS(data["instagram"]) : <any>undefined;
            this.facebook = data["facebook"] ? Facebook.fromJS(data["facebook"]) : <any>undefined;
            this.youtube = data["youtube"] ? Youtube.fromJS(data["youtube"]) : <any>undefined;
            this.twitter = data["twitter"] ? Twitter.fromJS(data["twitter"]) : <any>undefined;
            this.tiktok = data["tiktok"] ? Tiktok.fromJS(data["tiktok"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountModel {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["link"] = this.link;
        data["networkName"] = this.networkName;
        data["networkId"] = this.networkId;
        data["follower"] = this.follower;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["age"] = this.age;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["cityId"] = this.cityId;
        data["city"] = this.city;
        data["country"] = this.country;
        data["countryId"] = this.countryId;
        data["accountType"] = this.accountType;
        data["accountTypeId"] = this.accountTypeId;
        data["phone"] = this.phone;
        data["category1"] = this.category1;
        data["category2"] = this.category2;
        data["category3"] = this.category3;
        data["category4"] = this.category4;
        data["category5"] = this.category5;
        data["email"] = this.email;
        data["managerNotes"] = this.managerNotes;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatus"] = this.martialStatus;
        data["childStatus"] = this.childStatus;
        data["pregnantStatus"] = this.pregnantStatus;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["children"] = this.children;
        data["profilePicturePath"] = this.profilePicturePath;
        data["isVerified"] = this.isVerified;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["influencerId"] = this.influencerId;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.influencerDemografigs)) {
            data["influencerDemografigs"] = [];
            for (let item of this.influencerDemografigs)
                data["influencerDemografigs"].push(item.toJSON());
        }
        data["versionCode"] = this.versionCode;
        data["status"] = this.status;
        data["instagram"] = this.instagram ? this.instagram.toJSON() : <any>undefined;
        data["facebook"] = this.facebook ? this.facebook.toJSON() : <any>undefined;
        data["youtube"] = this.youtube ? this.youtube.toJSON() : <any>undefined;
        data["twitter"] = this.twitter ? this.twitter.toJSON() : <any>undefined;
        data["tiktok"] = this.tiktok ? this.tiktok.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountModel {
    id?: number | undefined;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    follower?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    age?: number | undefined;
    birthdate?: Date | undefined;
    gender?: string | undefined;
    cityId?: number | undefined;
    city?: string | undefined;
    country?: string | undefined;
    countryId?: number | undefined;
    accountType?: string | undefined;
    accountTypeId?: number | undefined;
    phone?: string | undefined;
    category1?: string | undefined;
    category2?: string | undefined;
    category3?: string | undefined;
    category4?: string | undefined;
    category5?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: number | undefined;
    budgetMax?: number | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    childStatus?: string | undefined;
    pregnantStatus?: string | undefined;
    martialStatusId?: number | undefined;
    childStatusId?: number | undefined;
    pregnantStatusId?: number | undefined;
    hasManagerStatusId?: number | undefined;
    children?: number | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: boolean | undefined;
    createdBy?: number | undefined;
    updatedBy?: number | undefined;
    createDate?: Date | undefined;
    updateDate?: Date | undefined;
    influencerId?: number | undefined;
    categories?: SocialMediaAccountCategoryModel[] | undefined;
    influencerDemografigs?: SocialMediaAccountDemographicModel[] | undefined;
    versionCode?: string | undefined;
    status?: number | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;
}

export class SocialMediaAccountInfoModelServiceResponse implements ISocialMediaAccountInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountInfoModel | undefined;

    constructor(data?: ISocialMediaAccountInfoModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaAccountInfoModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountInfoModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountInfoModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountInfoModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountInfoModel | undefined;
}

export class SocialMediaAccountModelResponse implements ISocialMediaAccountModelResponse {
    socialMediaAccountName?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    link?: string | undefined;
    profilePicturePath?: string | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;

    constructor(data?: ISocialMediaAccountModelResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.networkName = data["networkName"];
            this.networkId = data["networkId"];
            this.link = data["link"];
            this.profilePicturePath = data["profilePicturePath"];
            this.instagram = data["instagram"] ? Instagram.fromJS(data["instagram"]) : <any>undefined;
            this.facebook = data["facebook"] ? Facebook.fromJS(data["facebook"]) : <any>undefined;
            this.youtube = data["youtube"] ? Youtube.fromJS(data["youtube"]) : <any>undefined;
            this.twitter = data["twitter"] ? Twitter.fromJS(data["twitter"]) : <any>undefined;
            this.tiktok = data["tiktok"] ? Tiktok.fromJS(data["tiktok"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountModelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountModelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["networkName"] = this.networkName;
        data["networkId"] = this.networkId;
        data["link"] = this.link;
        data["profilePicturePath"] = this.profilePicturePath;
        data["instagram"] = this.instagram ? this.instagram.toJSON() : <any>undefined;
        data["facebook"] = this.facebook ? this.facebook.toJSON() : <any>undefined;
        data["youtube"] = this.youtube ? this.youtube.toJSON() : <any>undefined;
        data["twitter"] = this.twitter ? this.twitter.toJSON() : <any>undefined;
        data["tiktok"] = this.tiktok ? this.tiktok.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountModelResponse {
    socialMediaAccountName?: string | undefined;
    networkName?: string | undefined;
    networkId?: number | undefined;
    link?: string | undefined;
    profilePicturePath?: string | undefined;
    instagram?: Instagram | undefined;
    facebook?: Facebook | undefined;
    youtube?: Youtube | undefined;
    twitter?: Twitter | undefined;
    tiktok?: Tiktok | undefined;
}

export class SocialMediaAccountModelResponseServiceResponse implements ISocialMediaAccountModelResponseServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModelResponse | undefined;

    constructor(data?: ISocialMediaAccountModelResponseServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaAccountModelResponse.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountModelResponseServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountModelResponseServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountModelResponseServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModelResponse | undefined;
}

export class SocialMediaAccountModelListServiceResponse implements ISocialMediaAccountModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModel[] | undefined;

    constructor(data?: ISocialMediaAccountModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMediaAccountModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaAccountModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaAccountModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModel[] | undefined;
}

export class SocialMediaAccountModelServiceResponse implements ISocialMediaAccountModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModel | undefined;

    constructor(data?: ISocialMediaAccountModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaAccountModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountModel | undefined;
}

export class SocialMediaAccountDemographicModelListServiceResponse implements ISocialMediaAccountDemographicModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountDemographicModel[] | undefined;

    constructor(data?: ISocialMediaAccountDemographicModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMediaAccountDemographicModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaAccountDemographicModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountDemographicModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaAccountDemographicModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountDemographicModel[] | undefined;
}

export class SocialMediaAccountDemographicModelServiceResponse implements ISocialMediaAccountDemographicModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountDemographicModel | undefined;

    constructor(data?: ISocialMediaAccountDemographicModelServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaAccountDemographicModel.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountDemographicModelServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountDemographicModelServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountDemographicModelServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccountDemographicModel | undefined;
}

export class SocialMediaAccount implements ISocialMediaAccount {
    id?: number;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number;
    follower?: number;
    name?: string | undefined;
    surname?: string | undefined;
    age?: string | undefined;
    birthdate?: string | undefined;
    gender?: string | undefined;
    city?: string | undefined;
    cityId?: number;
    country?: string | undefined;
    countryId?: number;
    accountType?: string | undefined;
    accountTypeId?: number;
    category1?: string | undefined;
    category2?: string | undefined;
    category3?: string | undefined;
    category4?: string | undefined;
    category5?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: string | undefined;
    budgetMax?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    martialStatusId?: number;
    childStatus?: string | undefined;
    childStatusId?: number;
    pregnantStatus?: string | undefined;
    pregnantStatusId?: number;
    hasManagerStatus?: string | undefined;
    hasManagerStatusId?: number;
    children?: string | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: string | undefined;
    createdBy?: string | undefined;
    createDate?: string | undefined;
    updatedBy?: string | undefined;
    updateDate?: string | undefined;
    influencerId?: number | undefined;
    versionCode?: string | undefined;
    status?: string | undefined;
    logStatus?: string | undefined;
    instagram_MediaUpload?: string | undefined;
    instagram_Followers?: string | undefined;
    instagram_Following?: string | undefined;
    instagram_EngagementRate?: string | undefined;
    instagram_AvgLikes?: string | undefined;
    instagram_AvgComments?: string | undefined;
    youtube_Upload?: string | undefined;
    youtube_Subscribers?: string | undefined;
    youtube_VideoViews?: string | undefined;
    facebook_Likes?: string | undefined;
    facebook_TalkingAbout?: string | undefined;
    twitter_Followers?: string | undefined;
    twitter_Following?: string | undefined;
    twitter_Likes?: string | undefined;
    twitter_Tweets?: string | undefined;

    constructor(data?: ISocialMediaAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.socialMediaAccountName = data["socialMediaAccountName"];
            this.link = data["link"];
            this.networkName = data["networkName"];
            this.networkId = data["networkId"];
            this.follower = data["follower"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.age = data["age"];
            this.birthdate = data["birthdate"];
            this.gender = data["gender"];
            this.city = data["city"];
            this.cityId = data["cityId"];
            this.country = data["country"];
            this.countryId = data["countryId"];
            this.accountType = data["accountType"];
            this.accountTypeId = data["accountTypeId"];
            this.category1 = data["category1"];
            this.category2 = data["category2"];
            this.category3 = data["category3"];
            this.category4 = data["category4"];
            this.category5 = data["category5"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.managerNotes = data["managerNotes"];
            this.budgetMin = data["budgetMin"];
            this.budgetMax = data["budgetMax"];
            this.notes = data["notes"];
            this.identityNumber = data["identityNumber"];
            this.martialStatus = data["martialStatus"];
            this.martialStatusId = data["martialStatusId"];
            this.childStatus = data["childStatus"];
            this.childStatusId = data["childStatusId"];
            this.pregnantStatus = data["pregnantStatus"];
            this.pregnantStatusId = data["pregnantStatusId"];
            this.hasManagerStatus = data["hasManagerStatus"];
            this.hasManagerStatusId = data["hasManagerStatusId"];
            this.children = data["children"];
            this.profilePicturePath = data["profilePicturePath"];
            this.isVerified = data["isVerified"];
            this.createdBy = data["createdBy"];
            this.createDate = data["createDate"];
            this.updatedBy = data["updatedBy"];
            this.updateDate = data["updateDate"];
            this.influencerId = data["influencerId"];
            this.versionCode = data["versionCode"];
            this.status = data["status"];
            this.logStatus = data["logStatus"];
            this.instagram_MediaUpload = data["instagram_MediaUpload"];
            this.instagram_Followers = data["instagram_Followers"];
            this.instagram_Following = data["instagram_Following"];
            this.instagram_EngagementRate = data["instagram_EngagementRate"];
            this.instagram_AvgLikes = data["instagram_AvgLikes"];
            this.instagram_AvgComments = data["instagram_AvgComments"];
            this.youtube_Upload = data["youtube_Upload"];
            this.youtube_Subscribers = data["youtube_Subscribers"];
            this.youtube_VideoViews = data["youtube_VideoViews"];
            this.facebook_Likes = data["facebook_Likes"];
            this.facebook_TalkingAbout = data["facebook_TalkingAbout"];
            this.twitter_Followers = data["twitter_Followers"];
            this.twitter_Following = data["twitter_Following"];
            this.twitter_Likes = data["twitter_Likes"];
            this.twitter_Tweets = data["twitter_Tweets"];
        }
    }

    static fromJS(data: any): SocialMediaAccount {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["socialMediaAccountName"] = this.socialMediaAccountName;
        data["link"] = this.link;
        data["networkName"] = this.networkName;
        data["networkId"] = this.networkId;
        data["follower"] = this.follower;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["age"] = this.age;
        data["birthdate"] = this.birthdate;
        data["gender"] = this.gender;
        data["city"] = this.city;
        data["cityId"] = this.cityId;
        data["country"] = this.country;
        data["countryId"] = this.countryId;
        data["accountType"] = this.accountType;
        data["accountTypeId"] = this.accountTypeId;
        data["category1"] = this.category1;
        data["category2"] = this.category2;
        data["category3"] = this.category3;
        data["category4"] = this.category4;
        data["category5"] = this.category5;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["managerNotes"] = this.managerNotes;
        data["budgetMin"] = this.budgetMin;
        data["budgetMax"] = this.budgetMax;
        data["notes"] = this.notes;
        data["identityNumber"] = this.identityNumber;
        data["martialStatus"] = this.martialStatus;
        data["martialStatusId"] = this.martialStatusId;
        data["childStatus"] = this.childStatus;
        data["childStatusId"] = this.childStatusId;
        data["pregnantStatus"] = this.pregnantStatus;
        data["pregnantStatusId"] = this.pregnantStatusId;
        data["hasManagerStatus"] = this.hasManagerStatus;
        data["hasManagerStatusId"] = this.hasManagerStatusId;
        data["children"] = this.children;
        data["profilePicturePath"] = this.profilePicturePath;
        data["isVerified"] = this.isVerified;
        data["createdBy"] = this.createdBy;
        data["createDate"] = this.createDate;
        data["updatedBy"] = this.updatedBy;
        data["updateDate"] = this.updateDate;
        data["influencerId"] = this.influencerId;
        data["versionCode"] = this.versionCode;
        data["status"] = this.status;
        data["logStatus"] = this.logStatus;
        data["instagram_MediaUpload"] = this.instagram_MediaUpload;
        data["instagram_Followers"] = this.instagram_Followers;
        data["instagram_Following"] = this.instagram_Following;
        data["instagram_EngagementRate"] = this.instagram_EngagementRate;
        data["instagram_AvgLikes"] = this.instagram_AvgLikes;
        data["instagram_AvgComments"] = this.instagram_AvgComments;
        data["youtube_Upload"] = this.youtube_Upload;
        data["youtube_Subscribers"] = this.youtube_Subscribers;
        data["youtube_VideoViews"] = this.youtube_VideoViews;
        data["facebook_Likes"] = this.facebook_Likes;
        data["facebook_TalkingAbout"] = this.facebook_TalkingAbout;
        data["twitter_Followers"] = this.twitter_Followers;
        data["twitter_Following"] = this.twitter_Following;
        data["twitter_Likes"] = this.twitter_Likes;
        data["twitter_Tweets"] = this.twitter_Tweets;
        return data; 
    }
}

export interface ISocialMediaAccount {
    id?: number;
    socialMediaAccountName?: string | undefined;
    link?: string | undefined;
    networkName?: string | undefined;
    networkId?: number;
    follower?: number;
    name?: string | undefined;
    surname?: string | undefined;
    age?: string | undefined;
    birthdate?: string | undefined;
    gender?: string | undefined;
    city?: string | undefined;
    cityId?: number;
    country?: string | undefined;
    countryId?: number;
    accountType?: string | undefined;
    accountTypeId?: number;
    category1?: string | undefined;
    category2?: string | undefined;
    category3?: string | undefined;
    category4?: string | undefined;
    category5?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    managerNotes?: string | undefined;
    budgetMin?: string | undefined;
    budgetMax?: string | undefined;
    notes?: string | undefined;
    identityNumber?: string | undefined;
    martialStatus?: string | undefined;
    martialStatusId?: number;
    childStatus?: string | undefined;
    childStatusId?: number;
    pregnantStatus?: string | undefined;
    pregnantStatusId?: number;
    hasManagerStatus?: string | undefined;
    hasManagerStatusId?: number;
    children?: string | undefined;
    profilePicturePath?: string | undefined;
    isVerified?: string | undefined;
    createdBy?: string | undefined;
    createDate?: string | undefined;
    updatedBy?: string | undefined;
    updateDate?: string | undefined;
    influencerId?: number | undefined;
    versionCode?: string | undefined;
    status?: string | undefined;
    logStatus?: string | undefined;
    instagram_MediaUpload?: string | undefined;
    instagram_Followers?: string | undefined;
    instagram_Following?: string | undefined;
    instagram_EngagementRate?: string | undefined;
    instagram_AvgLikes?: string | undefined;
    instagram_AvgComments?: string | undefined;
    youtube_Upload?: string | undefined;
    youtube_Subscribers?: string | undefined;
    youtube_VideoViews?: string | undefined;
    facebook_Likes?: string | undefined;
    facebook_TalkingAbout?: string | undefined;
    twitter_Followers?: string | undefined;
    twitter_Following?: string | undefined;
    twitter_Likes?: string | undefined;
    twitter_Tweets?: string | undefined;
}

export class SocialMediaAccountServiceResponse implements ISocialMediaAccountServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccount | undefined;

    constructor(data?: ISocialMediaAccountServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaAccount.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaAccountServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaAccountServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccount | undefined;
}

export class SocialMediaAccountListServiceResponse implements ISocialMediaAccountListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccount[] | undefined;

    constructor(data?: ISocialMediaAccountListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMediaAccount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaAccountListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaAccountListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaAccountListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaAccount[] | undefined;
}

export class SocialMediaShareTypeServiceResponse implements ISocialMediaShareTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaShareType | undefined;

    constructor(data?: ISocialMediaShareTypeServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMediaShareType.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaShareTypeServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaShareTypeServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaShareTypeServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaShareType | undefined;
}

export class SocialMediaShareTypeListServiceResponse implements ISocialMediaShareTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaShareType[] | undefined;

    constructor(data?: ISocialMediaShareTypeListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMediaShareType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaShareTypeListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaShareTypeListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaShareTypeListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMediaShareType[] | undefined;
}

export class SocialMedia implements ISocialMedia {
    id?: number;
    value?: string | undefined;
    tableOrder?: number;
    code?: number;

    constructor(data?: ISocialMedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.tableOrder = data["tableOrder"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): SocialMedia {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMedia();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["tableOrder"] = this.tableOrder;
        data["code"] = this.code;
        return data; 
    }
}

export interface ISocialMedia {
    id?: number;
    value?: string | undefined;
    tableOrder?: number;
    code?: number;
}

export class SocialMediaServiceResponse implements ISocialMediaServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMedia | undefined;

    constructor(data?: ISocialMediaServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SocialMedia.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SocialMediaServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISocialMediaServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMedia | undefined;
}

export class SocialMediaListServiceResponse implements ISocialMediaListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMedia[] | undefined;

    constructor(data?: ISocialMediaListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SocialMedia.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SocialMediaListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SocialMediaListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISocialMediaListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SocialMedia[] | undefined;
}

export class FilesInsert implements IFilesInsert {
    fileName?: string | undefined;
    filePath?: string | undefined;

    constructor(data?: IFilesInsert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.filePath = data["filePath"];
        }
    }

    static fromJS(data: any): FilesInsert {
        data = typeof data === 'object' ? data : {};
        let result = new FilesInsert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["filePath"] = this.filePath;
        return data; 
    }
}

export interface IFilesInsert {
    fileName?: string | undefined;
    filePath?: string | undefined;
}

export class SuggetionRequest implements ISuggetionRequest {
    email?: string | undefined;
    descriptions?: string | undefined;
    pathName?: string | undefined;
    files?: FilesInsert[] | undefined;

    constructor(data?: ISuggetionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.descriptions = data["descriptions"];
            this.pathName = data["pathName"];
            if (Array.isArray(data["files"])) {
                this.files = [] as any;
                for (let item of data["files"])
                    this.files!.push(FilesInsert.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SuggetionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SuggetionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["descriptions"] = this.descriptions;
        data["pathName"] = this.pathName;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISuggetionRequest {
    email?: string | undefined;
    descriptions?: string | undefined;
    pathName?: string | undefined;
    files?: FilesInsert[] | undefined;
}

export class SuggetionUser implements ISuggetionUser {
    name?: string | undefined;
    surname?: string | undefined;
    brandName?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: ISuggetionUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.brandName = data["brandName"];
            this.fullName = data["fullName"];
        }
    }

    static fromJS(data: any): SuggetionUser {
        data = typeof data === 'object' ? data : {};
        let result = new SuggetionUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["brandName"] = this.brandName;
        data["fullName"] = this.fullName;
        return data; 
    }
}

export interface ISuggetionUser {
    name?: string | undefined;
    surname?: string | undefined;
    brandName?: string | undefined;
    fullName?: string | undefined;
}

export class SuggetionResponse implements ISuggetionResponse {
    id?: number;
    email?: string | undefined;
    descriptions?: string | undefined;
    pathName?: string | undefined;
    createdDate?: Date | undefined;
    files?: FilesInsert[] | undefined;
    user?: SuggetionUser | undefined;

    constructor(data?: ISuggetionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.email = data["email"];
            this.descriptions = data["descriptions"];
            this.pathName = data["pathName"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            if (Array.isArray(data["files"])) {
                this.files = [] as any;
                for (let item of data["files"])
                    this.files!.push(FilesInsert.fromJS(item));
            }
            this.user = data["user"] ? SuggetionUser.fromJS(data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SuggetionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuggetionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["descriptions"] = this.descriptions;
        data["pathName"] = this.pathName;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISuggetionResponse {
    id?: number;
    email?: string | undefined;
    descriptions?: string | undefined;
    pathName?: string | undefined;
    createdDate?: Date | undefined;
    files?: FilesInsert[] | undefined;
    user?: SuggetionUser | undefined;
}

export class SuggetionResponseServiceResponse implements ISuggetionResponseServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SuggetionResponse | undefined;

    constructor(data?: ISuggetionResponseServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? SuggetionResponse.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SuggetionResponseServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuggetionResponseServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ISuggetionResponseServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SuggetionResponse | undefined;
}

export class SuggetionResponseListServiceResponse implements ISuggetionResponseListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SuggetionResponse[] | undefined;

    constructor(data?: ISuggetionResponseListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(SuggetionResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SuggetionResponseListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SuggetionResponseListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISuggetionResponseListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: SuggetionResponse[] | undefined;
}

export class UserInfoModelListServiceResponse implements IUserInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: UserInfoModel[] | undefined;

    constructor(data?: IUserInfoModelListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(UserInfoModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserInfoModelListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoModelListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserInfoModelListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: UserInfoModel[] | undefined;
}

export class UserBrandAssignmentsViewModel implements IUserBrandAssignmentsViewModel {
    id?: number;
    userId?: number | undefined;
    brandId?: number | undefined;
    brandName?: string | undefined;
    brandType?: number | undefined;
    brandTypeName?: string | undefined;
    brandTypeCode?: string | undefined;
    parentBrandName?: string | undefined;
    subParentBrandName?: string | undefined;

    constructor(data?: IUserBrandAssignmentsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userId = data["userId"];
            this.brandId = data["brandId"];
            this.brandName = data["brandName"];
            this.brandType = data["brandType"];
            this.brandTypeName = data["brandTypeName"];
            this.brandTypeCode = data["brandTypeCode"];
            this.parentBrandName = data["parentBrandName"];
            this.subParentBrandName = data["subParentBrandName"];
        }
    }

    static fromJS(data: any): UserBrandAssignmentsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserBrandAssignmentsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["brandId"] = this.brandId;
        data["brandName"] = this.brandName;
        data["brandType"] = this.brandType;
        data["brandTypeName"] = this.brandTypeName;
        data["brandTypeCode"] = this.brandTypeCode;
        data["parentBrandName"] = this.parentBrandName;
        data["subParentBrandName"] = this.subParentBrandName;
        return data; 
    }
}

export interface IUserBrandAssignmentsViewModel {
    id?: number;
    userId?: number | undefined;
    brandId?: number | undefined;
    brandName?: string | undefined;
    brandType?: number | undefined;
    brandTypeName?: string | undefined;
    brandTypeCode?: string | undefined;
    parentBrandName?: string | undefined;
    subParentBrandName?: string | undefined;
}

export class User implements IUser {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phone?: string | undefined;
    categoryId?: number | undefined;
    roleCode?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    brandId?: number | undefined;
    profilePicturePath?: string | undefined;
    brands?: UserBrandAssignmentsViewModel[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.email = data["email"];
            this.password = data["password"];
            this.phone = data["phone"];
            this.categoryId = data["categoryId"];
            this.roleCode = data["roleCode"];
            this.status = data["status"];
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>undefined;
            this.createdBy = data["createdBy"];
            this.updatedDate = data["updatedDate"] ? new Date(data["updatedDate"].toString()) : <any>undefined;
            this.updatedBy = data["updatedBy"];
            this.logStatus = data["logStatus"];
            this.brandId = data["brandId"];
            this.profilePicturePath = data["profilePicturePath"];
            if (Array.isArray(data["brands"])) {
                this.brands = [] as any;
                for (let item of data["brands"])
                    this.brands!.push(UserBrandAssignmentsViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phone"] = this.phone;
        data["categoryId"] = this.categoryId;
        data["roleCode"] = this.roleCode;
        data["status"] = this.status;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["updatedDate"] = this.updatedDate ? this.updatedDate.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["logStatus"] = this.logStatus;
        data["brandId"] = this.brandId;
        data["profilePicturePath"] = this.profilePicturePath;
        if (Array.isArray(this.brands)) {
            data["brands"] = [];
            for (let item of this.brands)
                data["brands"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUser {
    id?: number;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    phone?: string | undefined;
    categoryId?: number | undefined;
    roleCode?: number | undefined;
    status?: number | undefined;
    createdDate?: Date | undefined;
    createdBy?: number | undefined;
    updatedDate?: Date | undefined;
    updatedBy?: number | undefined;
    logStatus?: number | undefined;
    brandId?: number | undefined;
    profilePicturePath?: string | undefined;
    brands?: UserBrandAssignmentsViewModel[] | undefined;
}

export class UserServiceResponse implements IUserServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: User | undefined;

    constructor(data?: IUserServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            this.returnObject = data["returnObject"] ? User.fromJS(data["returnObject"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["returnObject"] = this.returnObject ? this.returnObject.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: User | undefined;
}

export class UserListServiceResponse implements IUserListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: User[] | undefined;

    constructor(data?: IUserListServiceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.result = data["result"] ? ServiceResult.fromJS(data["result"]) : <any>undefined;
            if (Array.isArray(data["returnObject"])) {
                this.returnObject = [] as any;
                for (let item of data["returnObject"])
                    this.returnObject!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserListServiceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserListServiceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        if (Array.isArray(this.returnObject)) {
            data["returnObject"] = [];
            for (let item of this.returnObject)
                data["returnObject"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserListServiceResponse {
    result?: ServiceResult | undefined;
    returnObject?: User[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

}