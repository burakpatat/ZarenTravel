@page "/add-zones-city"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Add ZonesCity</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save ZonesCity</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.ZonesCity" Data="@zonesCity" Visible="@(zonesCity != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Main Zone" Component="MainZone" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@zonesCity.MainZone" Name="MainZone" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="City" Component="City" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@citiesForCityId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasCityIdValue) Placeholder="Choose City" style="display: block; width: 100%" @bind-Value="@zonesCity.CityId" Name="CityId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Zone" Component="Zone" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@zonesForZoneId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasZoneIdValue) Placeholder="Choose Zone" style="display: block; width: 100%" @bind-Value="@zonesCity.ZoneId" Name="ZoneId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    protected override async Task OnInitializedAsync()
    {

        citiesForCityId = await ZarenSoftService.GetCities();

        zonesForZoneId = await ZarenSoftService.GetZones();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.ZonesCity zonesCity;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.City> citiesForCityId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Zone> zonesForZoneId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.CreateZonesCity(zonesCity);
            DialogService.Close(zonesCity);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasCityIdValue;

    [Parameter]
    public int? CityId { get; set; }

    bool hasZoneIdValue;

    [Parameter]
    public int? ZoneId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        zonesCity = new ZarenTravel.Models.ZarenSoft.ZonesCity();

        hasCityIdValue = parameters.TryGetValue<int?>("CityId", out var hasCityIdResult);

        if (hasCityIdValue)
        {
            zonesCity.CityId = hasCityIdResult;
        }

        hasZoneIdValue = parameters.TryGetValue<int?>("ZoneId", out var hasZoneIdResult);

        if (hasZoneIdValue)
        {
            zonesCity.ZoneId = hasZoneIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
