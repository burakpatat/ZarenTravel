@page "/agencies"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Agencies</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Agencies" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@agencies"    TItem="ZarenTravel.Models.ZarenSoft.Agency" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="Address" Title="Address">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="PaymentPolitics" Title="Payment Politics">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="MarkUp" Title="Mark Up">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="Contact.Name" Title="Contact">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="Contact1.Name" Title="Contact1">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="AgencyGroup.Name" Title="Agency Group">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Property="Contact2.Name" Title="Contact2">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Agency" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="agency">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, agency)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(agency != null)" Size="H1" Text="Bookings" />
                    <RadzenButton Visible="@(agency != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => BookingAddButtonClick(args,agency)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(agency != null)" @ref=BookingDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@agency?.Bookings" TItem="ZarenTravel.Models.ZarenSoft.Booking"  RowSelect="@(args => BookingRowSelect(args, agency))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Reference" Title="Reference">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="FromDate" Title="From Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ToDate" Title="To Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="DateBooked" Title="Date Booked">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Nights" Title="Nights">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="NumRooms" Title="Num Rooms">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="TotalCost" Title="Total Cost">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="TotalPrice" Title="Total Price">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Status" Title="Status">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="PaidStatus" Title="Paid Status">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientTitle" Title="Client Title">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientName" Title="Client Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientSurname" Title="Client Surname">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientEmail" Title="Client Email">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientNotes" Title="Client Notes">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientAddress" Title="Client Address">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientContact" Title="Client Contact">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Adults" Title="Adults">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Children" Title="Children">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Infants" Title="Infants">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ChildrenAges" Title="Children Ages">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Provider.Name" Title="Provider">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="bookingChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => BookingDeleteButtonClick(args, bookingChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(agency != null)" Size="H1" Text="Companies" />
                    <RadzenButton Visible="@(agency != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => CompanyAddButtonClick(args,agency)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(agency != null)" @ref=CompanyDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@agency?.Companies" TItem="ZarenTravel.Models.ZarenSoft.Company"  RowSelect="@(args => CompanyRowSelect(args, agency))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyCode" Title="Company Code">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyRepresentative" Title="Company Representative">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CoGrId" Title="Co Gr Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CoDiId" Title="Co Di Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="InSeId" Title="In Se Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyTimestamp" Title="Company Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyActive" Title="Company Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Country.Name" Title="Country">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Currency1.CurrencyCode" Title="Currency1">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Language.Name" Title="Language">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="companyChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => CompanyDeleteButtonClick(args, companyChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(agency != null)" Size="H1" Text="HotelAgencyMarkups" />
                    <RadzenButton Visible="@(agency != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelAgencyMarkupAddButtonClick(args,agency)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(agency != null)" @ref=HotelAgencyMarkupDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@agency?.HotelAgencyMarkups" TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup"  RowSelect="@(args => HotelAgencyMarkupRowSelect(args, agency))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="MarkUp" Title="Mark Up">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="StartDate" Title="Start Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="EndDate" Title="End Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelAgencyMarkupChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelAgencyMarkupDeleteButtonClick(args, hotelAgencyMarkupChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(agency != null)" Size="H1" Text="PnRs" />
                    <RadzenButton Visible="@(agency != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => PnRAddButtonClick(args,agency)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(agency != null)" @ref=PnRDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@agency?.PnRs" TItem="ZarenTravel.Models.ZarenSoft.PnR"  RowSelect="@(args => PnRRowSelect(args, agency))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PCCId" Title="P C C Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRRecord" Title="P N R Record">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRTimestamp" Title="P N R Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRActive" Title="P N R Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Company.CompanyCode" Title="Company">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Passenger.PassengerFullName" Title="Passenger">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="pnRChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => PnRDeleteButtonClick(args, pnRChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Agency> agencies;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Agency> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        agencies = await ZarenSoftService.GetAgencies(new Query { Filter = $@"i => i.Name.Contains(@0) || i.Address.Contains(@0) || i.PaymentPolitics.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Contact,Contact1,AgencyGroup,Contact2" });
    }
    protected override async Task OnInitializedAsync()
    {
        agencies = await ZarenSoftService.GetAgencies(new Query { Filter = $@"i => i.Name.Contains(@0) || i.Address.Contains(@0) || i.PaymentPolitics.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Contact,Contact1,AgencyGroup,Contact2" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddAgency>("Add Agency", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.Agency> args)
    {
        await DialogService.OpenAsync<EditAgency>("Edit Agency", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Agency agency)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteAgency(agency.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Agency" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportAgenciesToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Contact,Contact1,AgencyGroup,Contact2", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Agencies");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportAgenciesToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Contact,Contact1,AgencyGroup,Contact2", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Agencies");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.Agency agency;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.Agency args)
    {
        agency = args;
        var BookingResult = await ZarenSoftService.GetBookings(new Query { Filter = $"i => i.AgencyId == {args.Id}", Expand = "Agency,Hotel,Provider" });
        if (BookingResult != null)
        {
            args.Bookings = BookingResult.ToList();
        }
        var CompanyResult = await ZarenSoftService.GetCompanies(new Query { Filter = $"i => i.AgencyId == {args.Id}", Expand = "Agency,Country,Currency1,Language" });
        if (CompanyResult != null)
        {
            args.Companies = CompanyResult.ToList();
        }
        var HotelAgencyMarkupResult = await ZarenSoftService.GetHotelAgencyMarkups(new Query { Filter = $"i => i.AgencyId == {args.Id}", Expand = "Agency,Hotel" });
        if (HotelAgencyMarkupResult != null)
        {
            args.HotelAgencyMarkups = HotelAgencyMarkupResult.ToList();
        }
        var PnRResult = await ZarenSoftService.GetPnRs(new Query { Filter = $"i => i.AgencyId == {args.Id}", Expand = "Agency,Company,Passenger" });
        if (PnRResult != null)
        {
            args.PnRs = PnRResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Booking> BookingDataGrid;

    protected async Task BookingAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<AddBooking>("Add Booking", new Dictionary<string, object> { {"AgencyId" , data.Id} });
        await GetChildData(data);
        await BookingDataGrid.Reload();
    }

    protected async Task BookingRowSelect(ZarenTravel.Models.ZarenSoft.Booking args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<EditBooking>("Edit Booking", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await BookingDataGrid.Reload();
    }

    protected async Task BookingDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Booking booking)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteBooking(booking.Id);

                if (deleteResult != null)
                {
                    await BookingDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Booking" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Company> CompanyDataGrid;

    protected async Task CompanyAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<AddCompany>("Add Company", new Dictionary<string, object> { {"AgencyId" , data.Id} });
        await GetChildData(data);
        await CompanyDataGrid.Reload();
    }

    protected async Task CompanyRowSelect(ZarenTravel.Models.ZarenSoft.Company args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<EditCompany>("Edit Company", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await CompanyDataGrid.Reload();
    }

    protected async Task CompanyDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Company company)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteCompany(company.Id);

                if (deleteResult != null)
                {
                    await CompanyDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Company" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup> HotelAgencyMarkupDataGrid;

    protected async Task HotelAgencyMarkupAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelAgencyMarkup>("Add HotelAgencyMarkup", new Dictionary<string, object> { {"AgencyId" , data.Id} });
        await GetChildData(data);
        await HotelAgencyMarkupDataGrid.Reload();
    }

    protected async Task HotelAgencyMarkupRowSelect(ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelAgencyMarkup>("Edit HotelAgencyMarkup", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelAgencyMarkupDataGrid.Reload();
    }

    protected async Task HotelAgencyMarkupDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup hotelAgencyMarkup)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelAgencyMarkup(hotelAgencyMarkup.Id);

                if (deleteResult != null)
                {
                    await HotelAgencyMarkupDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelAgencyMarkup" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.PnR> PnRDataGrid;

    protected async Task PnRAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<AddPnR>("Add PnR", new Dictionary<string, object> { {"AgencyId" , data.Id} });
        await GetChildData(data);
        await PnRDataGrid.Reload();
    }

    protected async Task PnRRowSelect(ZarenTravel.Models.ZarenSoft.PnR args, ZarenTravel.Models.ZarenSoft.Agency data)
    {
        var dialogResult = await DialogService.OpenAsync<EditPnR>("Edit PnR", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await PnRDataGrid.Reload();
    }

    protected async Task PnRDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.PnR pnR)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeletePnR(pnR.Id);

                if (deleteResult != null)
                {
                    await PnRDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete PnR" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.Agency> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            agency = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(agency);
        }

        lastFilter = grid0.Query.Filter;
    }
}
