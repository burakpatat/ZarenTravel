@page "/database-tables"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>DatabaseTables</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="DatabaseTables" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@databaseTables"    TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="ID" Title="I D">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="TableName" Title="Table Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="DisplayName" Title="Display Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="IsRouting" Title="Is Routing">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="HasMultiLanguage" Title="Has Multi Language">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="FrontPageName" Title="Front Page Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="ForUser" Title="For User">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="CMSGridSize" Title="C M S Grid Size">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="CMSLinkedTables" Title="C M S Linked Tables">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="TableOrder" Title="Table Order">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="ParentTable" Title="Parent Table">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="CMSIcon" Title="C M S Icon">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="CanGenerate" Title="Can Generate">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Property="CreateDate" Title="Create Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseTable" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="databaseTable">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, databaseTable)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(databaseTable != null)" Size="H1" Text="DatabaseColumns" />
                    <RadzenButton Visible="@(databaseTable != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => DatabaseColumnAddButtonClick(args,databaseTable)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(databaseTable != null)" @ref=DatabaseColumnDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@databaseTable?.DatabaseColumns" TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn"  RowSelect="@(args => DatabaseColumnRowSelect(args, databaseTable))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="ID" Title="I D">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="ColumnName" Title="Column Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsRoutingField" Title="Is Routing Field">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="CMSColumnTitle" Title="C M S Column Title">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="TableOrder" Title="Table Order">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="SelectedValue" Title="Selected Value">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="SelectedText" Title="Selected Text">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="HasShowedOnList" Title="Has Showed On List">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsFilter" Title="Is Filter">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="Resize" Title="Resize">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsLanguageField" Title="Is Language Field">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsPrimary" Title="Is Primary">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsSecondry" Title="Is Secondry">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="SelectedDataSourceTable" Title="Selected Data Source Table">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="JsonName" Title="Json Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="Tooltip" Title="Tooltip">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsNullable" Title="Is Nullable">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="MaxLength" Title="Max Length">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsRequired" Title="Is Required">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="HasDefaultValue" Title="Has Default Value">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="IsPublic" Title="Is Public">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="ReturnColumnNameFromCMSTitle" Title="Return Column Name From C M S Title">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="ErrorDescription" Title="Error Description">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="ParameterDescription" Title="Parameter Description">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="DatatableCmsinputType.Name" Title="Datatable Cmsinput Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="DatabaseValueType.FrontEndName" Title="Database Value Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Property="DatabaseTable.TableName" Title="Database Table">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.DatabaseColumn" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="databaseColumnChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => DatabaseColumnDeleteButtonClick(args, databaseColumnChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.DatabaseTable> databaseTables;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.DatabaseTable> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        databaseTables = await ZarenSoftService.GetDatabaseTables(new Query { Filter = $@"i => i.TableName.Contains(@0) || i.DisplayName.Contains(@0) || i.FrontPageName.Contains(@0) || i.CMSLinkedTables.Contains(@0) || i.CMSIcon.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        databaseTables = await ZarenSoftService.GetDatabaseTables(new Query { Filter = $@"i => i.TableName.Contains(@0) || i.DisplayName.Contains(@0) || i.FrontPageName.Contains(@0) || i.CMSLinkedTables.Contains(@0) || i.CMSIcon.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddDatabaseTable>("Add DatabaseTable", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.DatabaseTable> args)
    {
        await DialogService.OpenAsync<EditDatabaseTable>("Edit DatabaseTable", new Dictionary<string, object> { {"ID", args.Data.ID} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.DatabaseTable databaseTable)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteDatabaseTable(databaseTable.ID);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete DatabaseTable" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportDatabaseTablesToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "DatabaseTables");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportDatabaseTablesToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "DatabaseTables");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.DatabaseTable databaseTable;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.DatabaseTable args)
    {
        databaseTable = args;
        var DatabaseColumnResult = await ZarenSoftService.GetDatabaseColumns(new Query { Filter = $"i => i.TableID == {args.ID}", Expand = "DatatableCmsinputType,DatabaseValueType,DatabaseTable" });
        if (DatabaseColumnResult != null)
        {
            args.DatabaseColumns = DatabaseColumnResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.DatabaseColumn> DatabaseColumnDataGrid;

    protected async Task DatabaseColumnAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.DatabaseTable data)
    {
        var dialogResult = await DialogService.OpenAsync<AddDatabaseColumn>("Add DatabaseColumn", new Dictionary<string, object> { {"TableID" , data.ID} });
        await GetChildData(data);
        await DatabaseColumnDataGrid.Reload();
    }

    protected async Task DatabaseColumnRowSelect(ZarenTravel.Models.ZarenSoft.DatabaseColumn args, ZarenTravel.Models.ZarenSoft.DatabaseTable data)
    {
        var dialogResult = await DialogService.OpenAsync<EditDatabaseColumn>("Edit DatabaseColumn", new Dictionary<string, object> { {"ID", args.ID} });
        await GetChildData(data);
        await DatabaseColumnDataGrid.Reload();
    }

    protected async Task DatabaseColumnDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.DatabaseColumn databaseColumn)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteDatabaseColumn(databaseColumn.ID);

                if (deleteResult != null)
                {
                    await DatabaseColumnDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete DatabaseColumn" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.DatabaseTable> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            databaseTable = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(databaseTable);
        }

        lastFilter = grid0.Query.Filter;
    }
}
