@page "/edit-hotel-photo"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Edit HotelPhoto</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save HotelPhoto</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Data="@hotelPhoto" Visible="@(hotelPhoto != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Path" Component="Path" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@hotelPhoto.Path" Name="Path" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Order" Component="Order" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@hotelPhoto.Order" Name="Order" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Hotel" Component="Hotel" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@hotelsForHotelId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasHotelIdValue) Placeholder="Choose Hotel" style="display: block; width: 100%" @bind-Value="@hotelPhoto.HotelId" Name="HotelId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Hotel Room" Component="HotelRoom" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@hotelRoomsForHotelRoomId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasHotelRoomIdValue) Placeholder="Choose HotelRoom" style="display: block; width: 100%" @bind-Value="@hotelPhoto.HotelRoomId" Name="HotelRoomId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hotelPhoto = await ZarenSoftService.GetHotelPhotoById(Id);

        hotelsForHotelId = await ZarenSoftService.GetHotels();

        hotelRoomsForHotelRoomId = await ZarenSoftService.GetHotelRooms();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.HotelPhoto hotelPhoto;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Hotel> hotelsForHotelId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.HotelRoom> hotelRoomsForHotelRoomId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.UpdateHotelPhoto(Id, hotelPhoto);
            DialogService.Close(hotelPhoto);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasHotelIdValue;

    [Parameter]
    public int? HotelId { get; set; }

    bool hasHotelRoomIdValue;

    [Parameter]
    public int? HotelRoomId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        hotelPhoto = new ZarenTravel.Models.ZarenSoft.HotelPhoto();

        hasHotelIdValue = parameters.TryGetValue<int?>("HotelId", out var hasHotelIdResult);

        if (hasHotelIdValue)
        {
            hotelPhoto.HotelId = hasHotelIdResult;
        }

        hasHotelRoomIdValue = parameters.TryGetValue<int?>("HotelRoomId", out var hasHotelRoomIdResult);

        if (hasHotelRoomIdValue)
        {
            hotelPhoto.HotelRoomId = hasHotelRoomIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
