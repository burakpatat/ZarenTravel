@page "/hotel-buy-rooms"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>HotelBuyRooms</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="HotelBuyRooms" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@hotelBuyRooms"    TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="BuyRoom.Name" Title="Buy Room">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="Hotel.Name" Title="Hotel">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="hotelBuyRoom">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, hotelBuyRoom)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(hotelBuyRoom != null)" Size="H1" Text="HotelBuyRoomAllotments" />
                    <RadzenButton Visible="@(hotelBuyRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelBuyRoomAllotmentAddButtonClick(args,hotelBuyRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelBuyRoom != null)" @ref=HotelBuyRoomAllotmentDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelBuyRoom?.HotelBuyRoomAllotments" TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment"  RowSelect="@(args => HotelBuyRoomAllotmentRowSelect(args, hotelBuyRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="Day" Title="Day">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="Allotment" Title="Allotment">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="Release" Title="Release">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="StopSales" Title="Stop Sales">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Property="HotelBuyRoom" Title="Hotel Buy Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelBuyRoomAllotmentChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelBuyRoomAllotmentDeleteButtonClick(args, hotelBuyRoomAllotmentChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.HotelBuyRoom> hotelBuyRooms;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelBuyRoom> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        hotelBuyRooms = await ZarenSoftService.GetHotelBuyRooms(new Query { Expand = "BuyRoom,Hotel" });
    }
    protected override async Task OnInitializedAsync()
    {
        hotelBuyRooms = await ZarenSoftService.GetHotelBuyRooms(new Query { Expand = "BuyRoom,Hotel" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddHotelBuyRoom>("Add HotelBuyRoom", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.HotelBuyRoom> args)
    {
        await DialogService.OpenAsync<EditHotelBuyRoom>("Edit HotelBuyRoom", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelBuyRoom hotelBuyRoom)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelBuyRoom(hotelBuyRoom.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelBuyRoom" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportHotelBuyRoomsToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "BuyRoom,Hotel", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "HotelBuyRooms");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportHotelBuyRoomsToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "BuyRoom,Hotel", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "HotelBuyRooms");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.HotelBuyRoom hotelBuyRoom;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.HotelBuyRoom args)
    {
        hotelBuyRoom = args;
        var HotelBuyRoomAllotmentResult = await ZarenSoftService.GetHotelBuyRoomAllotments(new Query { Filter = $"i => i.HotelBuyRoomId == {args.Id}", Expand = "HotelBuyRoom" });
        if (HotelBuyRoomAllotmentResult != null)
        {
            args.HotelBuyRoomAllotments = HotelBuyRoomAllotmentResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment> HotelBuyRoomAllotmentDataGrid;

    protected async Task HotelBuyRoomAllotmentAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelBuyRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelBuyRoomAllotment>("Add HotelBuyRoomAllotment", new Dictionary<string, object> { {"HotelBuyRoomId" , data.Id} });
        await GetChildData(data);
        await HotelBuyRoomAllotmentDataGrid.Reload();
    }

    protected async Task HotelBuyRoomAllotmentRowSelect(ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment args, ZarenTravel.Models.ZarenSoft.HotelBuyRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelBuyRoomAllotment>("Edit HotelBuyRoomAllotment", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelBuyRoomAllotmentDataGrid.Reload();
    }

    protected async Task HotelBuyRoomAllotmentDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelBuyRoomAllotment hotelBuyRoomAllotment)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelBuyRoomAllotment(hotelBuyRoomAllotment.Id);

                if (deleteResult != null)
                {
                    await HotelBuyRoomAllotmentDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelBuyRoomAllotment" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.HotelBuyRoom> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            hotelBuyRoom = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(hotelBuyRoom);
        }

        lastFilter = grid0.Query.Filter;
    }
}
