@page "/add-hotel-room"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Add HotelRoom</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save HotelRoom</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Data="@hotelRoom" Visible="@(hotelRoom != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Hotel Buy Room Id" Component="HotelBuyRoomId" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@hotelRoom.HotelBuyRoomId" Name="HotelBuyRoomId" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@hotelRoom.Name" Name="Name" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Adults" Component="Adults" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@hotelRoom.Adults" Name="Adults" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Children" Component="Children" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@hotelRoom.Children" Name="Children" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Infants" Component="Infants" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@hotelRoom.Infants" Name="Infants" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Room" Component="Room" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@roomsForRoomId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasRoomIdValue) Placeholder="Choose Room" style="display: block; width: 100%" @bind-Value="@hotelRoom.RoomId" Name="RoomId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    protected override async Task OnInitializedAsync()
    {

        roomsForRoomId = await ZarenSoftService.GetRooms();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.HotelRoom hotelRoom;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Room> roomsForRoomId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.CreateHotelRoom(hotelRoom);
            DialogService.Close(hotelRoom);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasRoomIdValue;

    [Parameter]
    public int? RoomId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        hotelRoom = new ZarenTravel.Models.ZarenSoft.HotelRoom();

        hasRoomIdValue = parameters.TryGetValue<int?>("RoomId", out var hasRoomIdResult);

        if (hasRoomIdValue)
        {
            hotelRoom.RoomId = hasRoomIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
