@page "/edit-asp-net-user-login"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenService ZarenService
@inject Microsoft.Extensions.Localization.IStringLocalizer<EditAspNetUserLogin> L

<PageTitle>Edit AspNetUserLogin</PageTitle>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Item no longer available." Visible="@(!canEdit)" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" style="margin-bottom: 20px" Text="Close" Visible="@(!canEdit)" Click="@CancelButtonClick" />
    </RadzenColumn>
</RadzenRow>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Another user has made conflicting changes to one or more of the fields you have modified. Please reload." Visible="@hasChanges" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="autorenew" style="margin-bottom: 20px" Text="Reload" Visible="@hasChanges" Click="@ReloadButtonClick" />
    </RadzenColumn>
</RadzenRow>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save AspNetUserLogin</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenBO2.Models.Zaren.AspNetUserLogin" Data="@aspNetUserLogin" Visible="@(aspNetUserLogin != null && canEdit)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Login Provider" Component="LoginProvider" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@aspNetUserLogin.LoginProvider" Name="LoginProvider" />
                    <RadzenRequiredValidator Component="LoginProvider" Text="LoginProvider is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Provider Key" Component="ProviderKey" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@aspNetUserLogin.ProviderKey" Name="ProviderKey" />
                    <RadzenRequiredValidator Component="ProviderKey" Text="ProviderKey is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Provider Display Name" Component="ProviderDisplayName" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@aspNetUserLogin.ProviderDisplayName" Name="ProviderDisplayName" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Asp Net User" Component="AspNetUser" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenDropDownDataGrid Data="@aspNetUsersForUserId" TextProperty="Id" ValueProperty="Id"
                         Placeholder="Choose AspNetUser" style="display: block; width: 100%" @bind-Value="@aspNetUserLogin.UserId" Name="UserId"
                           />
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    [Parameter]
    public string LoginProvider { get; set; }

    [Parameter]
    public string ProviderKey { get; set; }

    protected override async Task OnInitializedAsync()
    {
        aspNetUserLogin = await ZarenService.GetAspNetUserLoginByLoginProviderAndProviderKey(LoginProvider, ProviderKey);

        aspNetUsersForUserId = await ZarenService.GetAspNetUsers();
    }
    protected bool errorVisible;
    protected ZarenBO2.Models.Zaren.AspNetUserLogin aspNetUserLogin;

    protected IEnumerable<ZarenBO2.Models.Zaren.AspNetUser> aspNetUsersForUserId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenService.UpdateAspNetUserLogin(LoginProvider, ProviderKey, aspNetUserLogin);
            DialogService.Close(aspNetUserLogin);
        }
        catch (Exception ex)
        {
            hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            canEdit = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }


    protected bool hasChanges = false;
    protected bool canEdit = true;

    [Inject]
    protected SecurityService Security { get; set; }


    protected async Task ReloadButtonClick(MouseEventArgs args)
    {
       ZarenService.Reset();
        hasChanges = false;
        canEdit = true;

        aspNetUserLogin = await ZarenService.GetAspNetUserLoginByLoginProviderAndProviderKey(LoginProvider, ProviderKey);
    }
}
