@page "/transactions"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenService ZarenService
@inject Microsoft.Extensions.Localization.IStringLocalizer<Transactions> L

<PageTitle>Transactions</PageTitle>
<RadzenStack>
<RadzenRow AlignItems="AlignItems.Center">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenText Text="Transactions" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                <RadzenSplitButtonItem Text="CSV" Value="csv" />
            </RadzenSplitButton>
            <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
<RadzenRow>
    <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"  AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@transactions"    TItem="ZarenBO2.Models.Zaren.Transaction" RowSelect="@EditRow" >
            <Columns>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="IdGuid" Title="Id Guid">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="CreatedDate" Title="Created Date">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="TotalAmount" Title="Total Amount">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="UserId" Title="User Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="IsSuccess" Title="Is Success">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="NameSurname" Title="Name Surname">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Is3D" Title="Is3 D">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Email" Title="Email">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Phone" Title="Phone">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Address" Title="Address">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="BillingAddress" Title="Billing Address">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="City" Title="City">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Provience" Title="Provience">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="CompanyName" Title="Company Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="HasKvkkPermission" Title="Has Kvkk Permission">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="HasPrivacy" Title="Has Privacy">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="PaymentUrl" Title="Payment Url">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="ReservationId" Title="Reservation Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Currency1.Country" Title="Currency1">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="Language1.LanguageName" Title="Language1">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Property="PaymentConfiguration.PaymentCompany" Title="Payment Configuration">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.Transaction" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="transaction">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, transaction)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<ZarenBO2.Models.Zaren.Transaction> transactions;

    protected RadzenDataGrid<ZarenBO2.Models.Zaren.Transaction> grid0;

    protected string search = "";

    [Inject]
    protected SecurityService Security { get; set; }

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        transactions = await ZarenService.GetTransactions(new Query { Filter = $@"i => i.IdGuid.Contains(@0) || i.UserId.Contains(@0) || i.NameSurname.Contains(@0) || i.Email.Contains(@0) || i.Phone.Contains(@0) || i.Address.Contains(@0) || i.BillingAddress.Contains(@0) || i.City.Contains(@0) || i.Provience.Contains(@0) || i.CompanyName.Contains(@0) || i.PaymentUrl.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Currency1,Language1,PaymentConfiguration" });
    }
    protected override async Task OnInitializedAsync()
    {
        transactions = await ZarenService.GetTransactions(new Query { Filter = $@"i => i.IdGuid.Contains(@0) || i.UserId.Contains(@0) || i.NameSurname.Contains(@0) || i.Email.Contains(@0) || i.Phone.Contains(@0) || i.Address.Contains(@0) || i.BillingAddress.Contains(@0) || i.City.Contains(@0) || i.Provience.Contains(@0) || i.CompanyName.Contains(@0) || i.PaymentUrl.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Currency1,Language1,PaymentConfiguration" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddTransaction>("Add Transaction", null);
        await grid0.Reload();
    }

    protected async Task EditRow(ZarenBO2.Models.Zaren.Transaction args)
    {
        await DialogService.OpenAsync<EditTransaction>("Edit Transaction", new Dictionary<string, object> { {"Id", args.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenBO2.Models.Zaren.Transaction transaction)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenService.DeleteTransaction(transaction.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Transaction" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenService.ExportTransactionsToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Currency1,Language1,PaymentConfiguration", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "Transactions");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenService.ExportTransactionsToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Currency1,Language1,PaymentConfiguration", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "Transactions");
        }
    }
}
