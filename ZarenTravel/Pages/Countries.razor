@page "/countries"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Countries</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Countries" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@countries"    TItem="ZarenTravel.Models.ZarenSoft.Country" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="ShortName" Title="Short Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Temperature" Title="Temperature">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Area" Title="Area">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Religion" Title="Religion">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Location" Title="Location">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Population" Title="Population">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Density" Title="Density">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Symbol" Title="Symbol">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Abbreviation" Title="Abbreviation">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="FlagBase64" Title="Flag Base64">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Expectancy" Title="Expectancy">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Dish" Title="Dish">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="LanguagesJSON" Title="Languages J S O N">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Landlocked" Title="Landlocked">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Iso" Title="Iso">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Independence" Title="Independence">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Government" Title="Government">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="North" Title="North">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="South" Title="South">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="West" Title="West">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="East" Title="East">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Elevation" Title="Elevation">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="DomainTld" Title="Domain Tld">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="CurrencyName" Title="Currency Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="CurrencyCode" Title="Currency Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="CostLine" Title="Cost Line">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Continent" Title="Continent">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="City" Title="City">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="CallingCode" Title="Calling Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Barcode" Title="Barcode">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Height" Title="Height">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="DefaultLanguageId" Title="Default Language Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="HasFraudRisk" Title="Has Fraud Risk">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="HasManuelRegistration" Title="Has Manuel Registration">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Property="Logo" Title="Logo">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Country" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="country">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, country)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(country != null)" Size="H1" Text="Airports" />
                    <RadzenButton Visible="@(country != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => AirportAddButtonClick(args,country)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(country != null)" @ref=AirportDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@country?.Airports" TItem="ZarenTravel.Models.ZarenSoft.Airport"  RowSelect="@(args => AirportRowSelect(args, country))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="AirportCode" Title="Airport Code">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="AirportName" Title="Airport Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="CityId" Title="City Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="AirportTimestamp" Title="Airport Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="AirportActive" Title="Airport Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Property="Country.Name" Title="Country">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Airport" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="airportChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => AirportDeleteButtonClick(args, airportChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(country != null)" Size="H1" Text="Companies" />
                    <RadzenButton Visible="@(country != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => CompanyAddButtonClick(args,country)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(country != null)" @ref=CompanyDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@country?.Companies" TItem="ZarenTravel.Models.ZarenSoft.Company"  RowSelect="@(args => CompanyRowSelect(args, country))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyCode" Title="Company Code">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyRepresentative" Title="Company Representative">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CoGrId" Title="Co Gr Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CoDiId" Title="Co Di Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="InSeId" Title="In Se Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyTimestamp" Title="Company Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="CompanyActive" Title="Company Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Country.Name" Title="Country">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Currency1.CurrencyCode" Title="Currency1">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Property="Language.Name" Title="Language">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Company" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="companyChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => CompanyDeleteButtonClick(args, companyChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(country != null)" Size="H1" Text="Hotels" />
                    <RadzenButton Visible="@(country != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelAddButtonClick(args,country)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(country != null)" @ref=HotelDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@country?.Hotels" TItem="ZarenTravel.Models.ZarenSoft.Hotel"  RowSelect="@(args => HotelRowSelect(args, country))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Name" Title="Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Address" Title="Address">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="ZipCode" Title="Zip Code">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Latitude" Title="Latitude">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Longitude" Title="Longitude">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Release" Title="Release">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="NumberRooms" Title="Number Rooms">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="City.Name" Title="City">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact.Name" Title="Contact">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Country.Name" Title="Country">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact1.Name" Title="Contact1">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="HotelChain.Name" Title="Hotel Chain">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="HotelType.Name" Title="Hotel Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Region.Name" Title="Region">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact2.Name" Title="Contact2">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Zone.Name" Title="Zone">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelDeleteButtonClick(args, hotelChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(country != null)" Size="H1" Text="Hotel1S" />
                    <RadzenButton Visible="@(country != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => Hotel1AddButtonClick(args,country)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(country != null)" @ref=Hotel1DataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@country?.Hotel1S" TItem="ZarenTravel.Models.ZarenSoft.Hotel1"  RowSelect="@(args => Hotel1RowSelect(args, country))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Name" Title="Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="ApiId" Title="Api Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="SystemId" Title="System Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="GiataId" Title="Giata Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="FaxNumber" Title="Fax Number">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="PhoneNumber" Title="Phone Number">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="HomePage" Title="Home Page">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="StopSaleGuaranteed" Title="Stop Sale Guaranteed">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="StopSaleStandart" Title="Stop Sale Standart">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Stars" Title="Stars">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Rating" Title="Rating">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Provider" Title="Provider">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Thumbnail" Title="Thumbnail">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="ThumbnailFull" Title="Thumbnail Full">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="CreatedDate" Title="Created Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="UpdatedDate" Title="Updated Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="CreatedBy" Title="Created By">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="UpdatedBy" Title="Updated By">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Statu" Title="Statu">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="City.Name" Title="City">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Contact.Name" Title="Contact">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Country.Name" Title="Country">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Contact1.Name" Title="Contact1">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="HotelChain.Name" Title="Hotel Chain">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="HotelType.Name" Title="Hotel Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Region.Name" Title="Region">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Contact2.Name" Title="Contact2">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Property="Zone.Name" Title="Zone">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel1" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotel1Child">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => Hotel1DeleteButtonClick(args, hotel1Child)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Country> countries;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Country> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        countries = await ZarenSoftService.GetCountries(new Query { Filter = $@"i => i.Name.Contains(@0) || i.ShortName.Contains(@0) || i.Temperature.Contains(@0) || i.Area.Contains(@0) || i.Religion.Contains(@0) || i.Location.Contains(@0) || i.Density.Contains(@0) || i.Symbol.Contains(@0) || i.Abbreviation.Contains(@0) || i.FlagBase64.Contains(@0) || i.Expectancy.Contains(@0) || i.Dish.Contains(@0) || i.LanguagesJSON.Contains(@0) || i.Landlocked.Contains(@0) || i.Iso.Contains(@0) || i.Independence.Contains(@0) || i.Government.Contains(@0) || i.North.Contains(@0) || i.South.Contains(@0) || i.West.Contains(@0) || i.East.Contains(@0) || i.Elevation.Contains(@0) || i.DomainTld.Contains(@0) || i.CurrencyName.Contains(@0) || i.CurrencyCode.Contains(@0) || i.CostLine.Contains(@0) || i.Continent.Contains(@0) || i.City.Contains(@0) || i.CallingCode.Contains(@0) || i.Barcode.Contains(@0) || i.Height.Contains(@0) || i.Logo.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        countries = await ZarenSoftService.GetCountries(new Query { Filter = $@"i => i.Name.Contains(@0) || i.ShortName.Contains(@0) || i.Temperature.Contains(@0) || i.Area.Contains(@0) || i.Religion.Contains(@0) || i.Location.Contains(@0) || i.Density.Contains(@0) || i.Symbol.Contains(@0) || i.Abbreviation.Contains(@0) || i.FlagBase64.Contains(@0) || i.Expectancy.Contains(@0) || i.Dish.Contains(@0) || i.LanguagesJSON.Contains(@0) || i.Landlocked.Contains(@0) || i.Iso.Contains(@0) || i.Independence.Contains(@0) || i.Government.Contains(@0) || i.North.Contains(@0) || i.South.Contains(@0) || i.West.Contains(@0) || i.East.Contains(@0) || i.Elevation.Contains(@0) || i.DomainTld.Contains(@0) || i.CurrencyName.Contains(@0) || i.CurrencyCode.Contains(@0) || i.CostLine.Contains(@0) || i.Continent.Contains(@0) || i.City.Contains(@0) || i.CallingCode.Contains(@0) || i.Barcode.Contains(@0) || i.Height.Contains(@0) || i.Logo.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddCountry>("Add Country", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.Country> args)
    {
        await DialogService.OpenAsync<EditCountry>("Edit Country", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Country country)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteCountry(country.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Country" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportCountriesToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Countries");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportCountriesToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Countries");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.Country country;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.Country args)
    {
        country = args;
        var AirportResult = await ZarenSoftService.GetAirports(new Query { Filter = $"i => i.CountryId == {args.Id}", Expand = "Country" });
        if (AirportResult != null)
        {
            args.Airports = AirportResult.ToList();
        }
        var CompanyResult = await ZarenSoftService.GetCompanies(new Query { Filter = $"i => i.CountryId == {args.Id}", Expand = "Agency,Country,Currency1,Language" });
        if (CompanyResult != null)
        {
            args.Companies = CompanyResult.ToList();
        }
        var HotelResult = await ZarenSoftService.GetHotels(new Query { Filter = $"i => i.CountryId == {args.Id}", Expand = "City,Contact,Country,Contact1,HotelChain,HotelType,Region,Contact2,Zone" });
        if (HotelResult != null)
        {
            args.Hotels = HotelResult.ToList();
        }
        var Hotel1Result = await ZarenSoftService.GetHotel1S();
        if (Hotel1Result != null)
        {
            args.Hotel1S = Hotel1Result.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Airport> AirportDataGrid;

    protected async Task AirportAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<AddAirport>("Add Airport", new Dictionary<string, object> { {"CountryId" , data.Id} });
        await GetChildData(data);
        await AirportDataGrid.Reload();
    }

    protected async Task AirportRowSelect(ZarenTravel.Models.ZarenSoft.Airport args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<EditAirport>("Edit Airport", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await AirportDataGrid.Reload();
    }

    protected async Task AirportDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Airport airport)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteAirport(airport.Id);

                if (deleteResult != null)
                {
                    await AirportDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Airport" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Company> CompanyDataGrid;

    protected async Task CompanyAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<AddCompany>("Add Company", new Dictionary<string, object> { {"CountryId" , data.Id} });
        await GetChildData(data);
        await CompanyDataGrid.Reload();
    }

    protected async Task CompanyRowSelect(ZarenTravel.Models.ZarenSoft.Company args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<EditCompany>("Edit Company", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await CompanyDataGrid.Reload();
    }

    protected async Task CompanyDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Company company)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteCompany(company.Id);

                if (deleteResult != null)
                {
                    await CompanyDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Company" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Hotel> HotelDataGrid;

    protected async Task HotelAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotel>("Add Hotel", new Dictionary<string, object> { {"CountryId" , data.Id} });
        await GetChildData(data);
        await HotelDataGrid.Reload();
    }

    protected async Task HotelRowSelect(ZarenTravel.Models.ZarenSoft.Hotel args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotel>("Edit Hotel", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelDataGrid.Reload();
    }

    protected async Task HotelDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel hotel)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotel(hotel.Id);

                if (deleteResult != null)
                {
                    await HotelDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Hotel" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Hotel1> Hotel1DataGrid;

    protected async Task Hotel1AddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotel1>("Add Hotel1", new Dictionary<string, object> {  });
        await GetChildData(data);
        await Hotel1DataGrid.Reload();
    }

    protected async Task Hotel1RowSelect(ZarenTravel.Models.ZarenSoft.Hotel1 args, ZarenTravel.Models.ZarenSoft.Country data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotel1>("Edit Hotel1", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await Hotel1DataGrid.Reload();
    }

    protected async Task Hotel1DeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel1 hotel1)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotel1(hotel1.Id);

                if (deleteResult != null)
                {
                    await Hotel1DataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Hotel1" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.Country> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            country = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(country);
        }

        lastFilter = grid0.Query.Filter;
    }
}
