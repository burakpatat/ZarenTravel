@page "/edit-account-like"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenService ZarenService
@inject Microsoft.Extensions.Localization.IStringLocalizer<EditAccountLike> L

<PageTitle>Edit AccountLike</PageTitle>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Item no longer available." Visible="@(!canEdit)" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" style="margin-bottom: 20px" Text="Close" Visible="@(!canEdit)" Click="@CancelButtonClick" />
    </RadzenColumn>
</RadzenRow>
<RadzenRow>
    <RadzenColumn SizeMD="9">
    <RadzenLabel style="font-weight: bold" Text="Another user has made conflicting changes to one or more of the fields you have modified. Please reload." Visible="@hasChanges" />
    </RadzenColumn>
    <RadzenColumn SizeMD="3">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="autorenew" style="margin-bottom: 20px" Text="Reload" Visible="@hasChanges" Click="@ReloadButtonClick" />
    </RadzenColumn>
</RadzenRow>

    <RadzenColumn SizeMD=12>
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save AccountLike</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenBO2.Models.Zaren.AccountLike" Data="@accountLike" Visible="@(accountLike != null && canEdit)" Submit="@FormSubmit">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Created Date" Component="CreatedDate" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenDatePicker DateFormat="dd/MM/yyyy" style="display: block; width: 100%" @bind-Value="@accountLike.CreatedDate" Name="CreatedDate" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="User Id" Component="UserId" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@accountLike.UserId" Name="UserId" />
                    <RadzenRequiredValidator Component="UserId" Text="UserId is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Product Id" Component="ProductId" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@accountLike.ProductId" Name="ProductId" />
                    <RadzenRequiredValidator Component="ProductId" Text="ProductId is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Product Type" Component="ProductType" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenNumeric style="display: block; width: 100%" @bind-Value="@accountLike.ProductType" Name="ProductType" />
                    <RadzenRequiredValidator Component="ProductType" Text="ProductType is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Is Active" Component="IsActive" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenCheckBox @bind-Value="@accountLike.IsActive" Name="IsActive" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Text="Cookie Id" Component="CookieId" style="width: 100%" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@accountLike.CookieId" Name="CookieId" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>

@code {

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        accountLike = await ZarenService.GetAccountLikeById(Id);
    }
    protected bool errorVisible;
    protected ZarenBO2.Models.Zaren.AccountLike accountLike;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenService.UpdateAccountLike(Id, accountLike);
            DialogService.Close(accountLike);
        }
        catch (Exception ex)
        {
            hasChanges = ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException;
            canEdit = !(ex is Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException);
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }


    protected bool hasChanges = false;
    protected bool canEdit = true;

    [Inject]
    protected SecurityService Security { get; set; }


    protected async Task ReloadButtonClick(MouseEventArgs args)
    {
       ZarenService.Reset();
        hasChanges = false;
        canEdit = true;

        accountLike = await ZarenService.GetAccountLikeById(Id);
    }
}
