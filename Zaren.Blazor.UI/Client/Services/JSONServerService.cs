
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Web;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.Encodings.Web;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;
using Radzen;

namespace ZarenUI.Client
{
    public partial class JSONServerService
    {
        private readonly HttpClient httpClient;
        private readonly Uri baseUri;
        private readonly NavigationManager navigationManager;

        public JSONServerService(NavigationManager navigationManager, HttpClient httpClient, IConfiguration configuration)
        {
            this.httpClient = httpClient;

            this.navigationManager = navigationManager;
            this.baseUri = new Uri($"{navigationManager.BaseUri}odata/JSONServer/");
        }


        public async System.Threading.Tasks.Task ExportAuditColorGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcolorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcolorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditColorGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcolorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcolorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditColorGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditColorGroup>> GetAuditColorGroups(Query query)
        {
            return await GetAuditColorGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditColorGroup>> GetAuditColorGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditColorGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditColorGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditColorGroup>>(response);
        }

        partial void OnCreateAuditColorGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> CreateAuditColorGroup(ZarenUI.Server.Models.JSONServer.AuditColorGroup auditColorGroup = default(ZarenUI.Server.Models.JSONServer.AuditColorGroup))
        {
            var uri = new Uri(baseUri, $"AuditColorGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditColorGroup), Encoding.UTF8, "application/json");

            OnCreateAuditColorGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditColorGroup>(response);
        }

        partial void OnDeleteAuditColorGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditColorGroup(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditColorGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditColorGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditColorGroupByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditColorGroup> GetAuditColorGroupByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditColorGroups({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditColorGroupByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditColorGroup>(response);
        }

        partial void OnUpdateAuditColorGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditColorGroup(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditColorGroup auditColorGroup = default(ZarenUI.Server.Models.JSONServer.AuditColorGroup))
        {
            var uri = new Uri(baseUri, $"AuditColorGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditColorGroup), Encoding.UTF8, "application/json");

            OnUpdateAuditColorGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditConstraintRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditConstraintRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditConstraintRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>> GetAuditConstraintRules(Query query)
        {
            return await GetAuditConstraintRules(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>> GetAuditConstraintRules(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditConstraintRules");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditConstraintRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>>(response);
        }

        partial void OnCreateAuditConstraintRule(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> CreateAuditConstraintRule(ZarenUI.Server.Models.JSONServer.AuditConstraintRule auditConstraintRule = default(ZarenUI.Server.Models.JSONServer.AuditConstraintRule))
        {
            var uri = new Uri(baseUri, $"AuditConstraintRules");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditConstraintRule), Encoding.UTF8, "application/json");

            OnCreateAuditConstraintRule(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>(response);
        }

        partial void OnDeleteAuditConstraintRule(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditConstraintRule(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditConstraintRules({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditConstraintRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditConstraintRuleByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditConstraintRule> GetAuditConstraintRuleByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditConstraintRules({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditConstraintRuleByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditConstraintRule>(response);
        }

        partial void OnUpdateAuditConstraintRule(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditConstraintRule(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditConstraintRule auditConstraintRule = default(ZarenUI.Server.Models.JSONServer.AuditConstraintRule))
        {
            var uri = new Uri(baseUri, $"AuditConstraintRules({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditConstraintRule), Encoding.UTF8, "application/json");

            OnUpdateAuditConstraintRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditCountriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditCountriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditCountries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountry>> GetAuditCountries(Query query)
        {
            return await GetAuditCountries(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountry>> GetAuditCountries(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditCountries");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditCountries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountry>>(response);
        }

        partial void OnCreateAuditCountry(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> CreateAuditCountry(ZarenUI.Server.Models.JSONServer.AuditCountry auditCountry = default(ZarenUI.Server.Models.JSONServer.AuditCountry))
        {
            var uri = new Uri(baseUri, $"AuditCountries");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditCountry), Encoding.UTF8, "application/json");

            OnCreateAuditCountry(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditCountry>(response);
        }

        partial void OnDeleteAuditCountry(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditCountry(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditCountries({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditCountry(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditCountryByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountry> GetAuditCountryByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditCountries({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditCountryByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditCountry>(response);
        }

        partial void OnUpdateAuditCountry(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditCountry(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditCountry auditCountry = default(ZarenUI.Server.Models.JSONServer.AuditCountry))
        {
            var uri = new Uri(baseUri, $"AuditCountries({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditCountry), Encoding.UTF8, "application/json");

            OnUpdateAuditCountry(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditCountryLanguagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditCountryLanguagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditcountrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditcountrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditCountryLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>> GetAuditCountryLanguages(Query query)
        {
            return await GetAuditCountryLanguages(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>> GetAuditCountryLanguages(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditCountryLanguages");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditCountryLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>>(response);
        }

        partial void OnCreateAuditCountryLanguage(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> CreateAuditCountryLanguage(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage auditCountryLanguage = default(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage))
        {
            var uri = new Uri(baseUri, $"AuditCountryLanguages");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditCountryLanguage), Encoding.UTF8, "application/json");

            OnCreateAuditCountryLanguage(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>(response);
        }

        partial void OnDeleteAuditCountryLanguage(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditCountryLanguage(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditCountryLanguages({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditCountryLanguage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditCountryLanguageByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage> GetAuditCountryLanguageByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditCountryLanguages({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditCountryLanguageByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditCountryLanguage>(response);
        }

        partial void OnUpdateAuditCountryLanguage(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditCountryLanguage(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditCountryLanguage auditCountryLanguage = default(ZarenUI.Server.Models.JSONServer.AuditCountryLanguage))
        {
            var uri = new Uri(baseUri, $"AuditCountryLanguages({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditCountryLanguage), Encoding.UTF8, "application/json");

            OnUpdateAuditCountryLanguage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditDesignSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdesignschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdesignschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditDesignSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdesignschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdesignschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditDesignSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>> GetAuditDesignSchemes(Query query)
        {
            return await GetAuditDesignSchemes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>> GetAuditDesignSchemes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditDesignSchemes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDesignSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>>(response);
        }

        partial void OnCreateAuditDesignScheme(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> CreateAuditDesignScheme(ZarenUI.Server.Models.JSONServer.AuditDesignScheme auditDesignScheme = default(ZarenUI.Server.Models.JSONServer.AuditDesignScheme))
        {
            var uri = new Uri(baseUri, $"AuditDesignSchemes");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDesignScheme), Encoding.UTF8, "application/json");

            OnCreateAuditDesignScheme(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>(response);
        }

        partial void OnDeleteAuditDesignScheme(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditDesignScheme(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDesignSchemes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditDesignScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditDesignSchemeByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDesignScheme> GetAuditDesignSchemeByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDesignSchemes({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDesignSchemeByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDesignScheme>(response);
        }

        partial void OnUpdateAuditDesignScheme(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditDesignScheme(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditDesignScheme auditDesignScheme = default(ZarenUI.Server.Models.JSONServer.AuditDesignScheme))
        {
            var uri = new Uri(baseUri, $"AuditDesignSchemes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDesignScheme), Encoding.UTF8, "application/json");

            OnUpdateAuditDesignScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditDeviceGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditDeviceGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditDeviceGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>> GetAuditDeviceGroups(Query query)
        {
            return await GetAuditDeviceGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>> GetAuditDeviceGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditDeviceGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDeviceGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>>(response);
        }

        partial void OnCreateAuditDeviceGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> CreateAuditDeviceGroup(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup auditDeviceGroup = default(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup))
        {
            var uri = new Uri(baseUri, $"AuditDeviceGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDeviceGroup), Encoding.UTF8, "application/json");

            OnCreateAuditDeviceGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>(response);
        }

        partial void OnDeleteAuditDeviceGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditDeviceGroup(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDeviceGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditDeviceGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditDeviceGroupByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup> GetAuditDeviceGroupByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDeviceGroups({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDeviceGroupByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDeviceGroup>(response);
        }

        partial void OnUpdateAuditDeviceGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditDeviceGroup(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditDeviceGroup auditDeviceGroup = default(ZarenUI.Server.Models.JSONServer.AuditDeviceGroup))
        {
            var uri = new Uri(baseUri, $"AuditDeviceGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDeviceGroup), Encoding.UTF8, "application/json");

            OnUpdateAuditDeviceGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditDevicesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditDevicesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditdevices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditdevices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditDevices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDevice>> GetAuditDevices(Query query)
        {
            return await GetAuditDevices(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDevice>> GetAuditDevices(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditDevices");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDevices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditDevice>>(response);
        }

        partial void OnCreateAuditDevice(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> CreateAuditDevice(ZarenUI.Server.Models.JSONServer.AuditDevice auditDevice = default(ZarenUI.Server.Models.JSONServer.AuditDevice))
        {
            var uri = new Uri(baseUri, $"AuditDevices");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDevice), Encoding.UTF8, "application/json");

            OnCreateAuditDevice(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDevice>(response);
        }

        partial void OnDeleteAuditDevice(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditDevice(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDevices({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditDevice(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditDeviceByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditDevice> GetAuditDeviceByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditDevices({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditDeviceByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditDevice>(response);
        }

        partial void OnUpdateAuditDevice(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditDevice(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditDevice auditDevice = default(ZarenUI.Server.Models.JSONServer.AuditDevice))
        {
            var uri = new Uri(baseUri, $"AuditDevices({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditDevice), Encoding.UTF8, "application/json");

            OnUpdateAuditDevice(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditFieldsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditFieldsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditFields(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditField>> GetAuditFields(Query query)
        {
            return await GetAuditFields(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditField>> GetAuditFields(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditFields");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditFields(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditField>>(response);
        }

        partial void OnCreateAuditField(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> CreateAuditField(ZarenUI.Server.Models.JSONServer.AuditField auditField = default(ZarenUI.Server.Models.JSONServer.AuditField))
        {
            var uri = new Uri(baseUri, $"AuditFields");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditField), Encoding.UTF8, "application/json");

            OnCreateAuditField(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditField>(response);
        }

        partial void OnDeleteAuditField(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditField(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditFields({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditField(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditFieldByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditField> GetAuditFieldByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditFields({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditFieldByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditField>(response);
        }

        partial void OnUpdateAuditField(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditField(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditField auditField = default(ZarenUI.Server.Models.JSONServer.AuditField))
        {
            var uri = new Uri(baseUri, $"AuditFields({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditField), Encoding.UTF8, "application/json");

            OnUpdateAuditField(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditForeignKeyRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditforeignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditforeignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditForeignKeyRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditforeignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditforeignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditForeignKeyRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>> GetAuditForeignKeyRules(Query query)
        {
            return await GetAuditForeignKeyRules(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>> GetAuditForeignKeyRules(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditForeignKeyRules");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditForeignKeyRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>>(response);
        }

        partial void OnCreateAuditForeignKeyRule(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> CreateAuditForeignKeyRule(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule auditForeignKeyRule = default(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule))
        {
            var uri = new Uri(baseUri, $"AuditForeignKeyRules");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditForeignKeyRule), Encoding.UTF8, "application/json");

            OnCreateAuditForeignKeyRule(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>(response);
        }

        partial void OnDeleteAuditForeignKeyRule(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditForeignKeyRule(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditForeignKeyRules({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditForeignKeyRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditForeignKeyRuleByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule> GetAuditForeignKeyRuleByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditForeignKeyRules({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditForeignKeyRuleByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule>(response);
        }

        partial void OnUpdateAuditForeignKeyRule(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditForeignKeyRule(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule auditForeignKeyRule = default(ZarenUI.Server.Models.JSONServer.AuditForeignKeyRule))
        {
            var uri = new Uri(baseUri, $"AuditForeignKeyRules({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditForeignKeyRule), Encoding.UTF8, "application/json");

            OnUpdateAuditForeignKeyRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProgrammingCategories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>> GetAuditProgrammingCategories(Query query)
        {
            return await GetAuditProgrammingCategories(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>> GetAuditProgrammingCategories(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCategories");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCategories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>>(response);
        }

        partial void OnCreateAuditProgrammingCategory(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> CreateAuditProgrammingCategory(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory auditProgrammingCategory = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCategories");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCategory), Encoding.UTF8, "application/json");

            OnCreateAuditProgrammingCategory(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>(response);
        }

        partial void OnDeleteAuditProgrammingCategory(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProgrammingCategory(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCategories({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProgrammingCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProgrammingCategoryByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory> GetAuditProgrammingCategoryByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCategories({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCategoryByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory>(response);
        }

        partial void OnUpdateAuditProgrammingCategory(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProgrammingCategory(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory auditProgrammingCategory = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCategory))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCategories({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCategory), Encoding.UTF8, "application/json");

            OnUpdateAuditProgrammingCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProgrammingCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>> GetAuditProgrammingCodes(Query query)
        {
            return await GetAuditProgrammingCodes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>> GetAuditProgrammingCodes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>>(response);
        }

        partial void OnCreateAuditProgrammingCode(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> CreateAuditProgrammingCode(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode auditProgrammingCode = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodes");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCode), Encoding.UTF8, "application/json");

            OnCreateAuditProgrammingCode(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>(response);
        }

        partial void OnDeleteAuditProgrammingCode(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProgrammingCode(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProgrammingCode(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProgrammingCodeByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode> GetAuditProgrammingCodeByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodes({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCodeByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCode>(response);
        }

        partial void OnUpdateAuditProgrammingCode(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProgrammingCode(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProgrammingCode auditProgrammingCode = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCode))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCode), Encoding.UTF8, "application/json");

            OnUpdateAuditProgrammingCode(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCodeTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingCodeTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProgrammingCodeTemplates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>> GetAuditProgrammingCodeTemplates(Query query)
        {
            return await GetAuditProgrammingCodeTemplates(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>> GetAuditProgrammingCodeTemplates(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodeTemplates");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCodeTemplates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>>(response);
        }

        partial void OnCreateAuditProgrammingCodeTemplate(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> CreateAuditProgrammingCodeTemplate(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate auditProgrammingCodeTemplate = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodeTemplates");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCodeTemplate), Encoding.UTF8, "application/json");

            OnCreateAuditProgrammingCodeTemplate(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>(response);
        }

        partial void OnDeleteAuditProgrammingCodeTemplate(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProgrammingCodeTemplate(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodeTemplates({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProgrammingCodeTemplate(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProgrammingCodeTemplateByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate> GetAuditProgrammingCodeTemplateByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodeTemplates({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingCodeTemplateByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate>(response);
        }

        partial void OnUpdateAuditProgrammingCodeTemplate(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProgrammingCodeTemplate(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate auditProgrammingCodeTemplate = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingCodeTemplate))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingCodeTemplates({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingCodeTemplate), Encoding.UTF8, "application/json");

            OnUpdateAuditProgrammingCodeTemplate(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingTechnologiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProgrammingTechnologiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprogrammingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprogrammingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProgrammingTechnologies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>> GetAuditProgrammingTechnologies(Query query)
        {
            return await GetAuditProgrammingTechnologies(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>> GetAuditProgrammingTechnologies(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingTechnologies");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingTechnologies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>>(response);
        }

        partial void OnCreateAuditProgrammingTechnology(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> CreateAuditProgrammingTechnology(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology auditProgrammingTechnology = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingTechnologies");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingTechnology), Encoding.UTF8, "application/json");

            OnCreateAuditProgrammingTechnology(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>(response);
        }

        partial void OnDeleteAuditProgrammingTechnology(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProgrammingTechnology(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingTechnologies({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProgrammingTechnology(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProgrammingTechnologyByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology> GetAuditProgrammingTechnologyByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingTechnologies({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProgrammingTechnologyByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology>(response);
        }

        partial void OnUpdateAuditProgrammingTechnology(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProgrammingTechnology(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology auditProgrammingTechnology = default(ZarenUI.Server.Models.JSONServer.AuditProgrammingTechnology))
        {
            var uri = new Uri(baseUri, $"AuditProgrammingTechnologies({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProgrammingTechnology), Encoding.UTF8, "application/json");

            OnUpdateAuditProgrammingTechnology(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectCategories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>> GetAuditProjectCategories(Query query)
        {
            return await GetAuditProjectCategories(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>> GetAuditProjectCategories(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectCategories");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectCategories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>>(response);
        }

        partial void OnCreateAuditProjectCategory(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> CreateAuditProjectCategory(ZarenUI.Server.Models.JSONServer.AuditProjectCategory auditProjectCategory = default(ZarenUI.Server.Models.JSONServer.AuditProjectCategory))
        {
            var uri = new Uri(baseUri, $"AuditProjectCategories");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectCategory), Encoding.UTF8, "application/json");

            OnCreateAuditProjectCategory(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>(response);
        }

        partial void OnDeleteAuditProjectCategory(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectCategory(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectCategories({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectCategoryByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectCategory> GetAuditProjectCategoryByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectCategories({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectCategoryByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectCategory>(response);
        }

        partial void OnUpdateAuditProjectCategory(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectCategory(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectCategory auditProjectCategory = default(ZarenUI.Server.Models.JSONServer.AuditProjectCategory))
        {
            var uri = new Uri(baseUri, $"AuditProjectCategories({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectCategory), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectConfigurationKeyAndValuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectConfigurationKeyAndValuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectConfigurationKeyAndValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>> GetAuditProjectConfigurationKeyAndValues(Query query)
        {
            return await GetAuditProjectConfigurationKeyAndValues(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>> GetAuditProjectConfigurationKeyAndValues(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurationKeyAndValues");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectConfigurationKeyAndValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>>(response);
        }

        partial void OnCreateAuditProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> CreateAuditProjectConfigurationKeyAndValue(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue auditProjectConfigurationKeyAndValue = default(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurationKeyAndValues");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectConfigurationKeyAndValue), Encoding.UTF8, "application/json");

            OnCreateAuditProjectConfigurationKeyAndValue(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>(response);
        }

        partial void OnDeleteAuditProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectConfigurationKeyAndValue(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurationKeyAndValues({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectConfigurationKeyAndValue(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectConfigurationKeyAndValueByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue> GetAuditProjectConfigurationKeyAndValueByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurationKeyAndValues({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectConfigurationKeyAndValueByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue>(response);
        }

        partial void OnUpdateAuditProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectConfigurationKeyAndValue(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue auditProjectConfigurationKeyAndValue = default(ZarenUI.Server.Models.JSONServer.AuditProjectConfigurationKeyAndValue))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurationKeyAndValues({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectConfigurationKeyAndValue), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectConfigurationKeyAndValue(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectConfigurationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectConfigurationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>> GetAuditProjectConfigurations(Query query)
        {
            return await GetAuditProjectConfigurations(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>> GetAuditProjectConfigurations(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurations");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>>(response);
        }

        partial void OnCreateAuditProjectConfiguration(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> CreateAuditProjectConfiguration(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration auditProjectConfiguration = default(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurations");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectConfiguration), Encoding.UTF8, "application/json");

            OnCreateAuditProjectConfiguration(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>(response);
        }

        partial void OnDeleteAuditProjectConfiguration(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectConfiguration(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurations({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectConfiguration(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectConfigurationByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration> GetAuditProjectConfigurationByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurations({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectConfigurationByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration>(response);
        }

        partial void OnUpdateAuditProjectConfiguration(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectConfiguration(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration auditProjectConfiguration = default(ZarenUI.Server.Models.JSONServer.AuditProjectConfiguration))
        {
            var uri = new Uri(baseUri, $"AuditProjectConfigurations({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectConfiguration), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectConfiguration(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectFunctionGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectFunctionGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectFunctionGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>> GetAuditProjectFunctionGroups(Query query)
        {
            return await GetAuditProjectFunctionGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>> GetAuditProjectFunctionGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctionGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectFunctionGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>>(response);
        }

        partial void OnCreateAuditProjectFunctionGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> CreateAuditProjectFunctionGroup(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup auditProjectFunctionGroup = default(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctionGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectFunctionGroup), Encoding.UTF8, "application/json");

            OnCreateAuditProjectFunctionGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>(response);
        }

        partial void OnDeleteAuditProjectFunctionGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectFunctionGroup(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctionGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectFunctionGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectFunctionGroupByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup> GetAuditProjectFunctionGroupByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctionGroups({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectFunctionGroupByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup>(response);
        }

        partial void OnUpdateAuditProjectFunctionGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectFunctionGroup(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup auditProjectFunctionGroup = default(ZarenUI.Server.Models.JSONServer.AuditProjectFunctionGroup))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctionGroups({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectFunctionGroup), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectFunctionGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectFunctionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectFunctionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectFunctions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>> GetAuditProjectFunctions(Query query)
        {
            return await GetAuditProjectFunctions(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>> GetAuditProjectFunctions(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctions");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectFunctions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>>(response);
        }

        partial void OnCreateAuditProjectFunction(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> CreateAuditProjectFunction(ZarenUI.Server.Models.JSONServer.AuditProjectFunction auditProjectFunction = default(ZarenUI.Server.Models.JSONServer.AuditProjectFunction))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctions");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectFunction), Encoding.UTF8, "application/json");

            OnCreateAuditProjectFunction(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>(response);
        }

        partial void OnDeleteAuditProjectFunction(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectFunction(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctions({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectFunction(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectFunctionByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectFunction> GetAuditProjectFunctionByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctions({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectFunctionByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectFunction>(response);
        }

        partial void OnUpdateAuditProjectFunction(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectFunction(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectFunction auditProjectFunction = default(ZarenUI.Server.Models.JSONServer.AuditProjectFunction))
        {
            var uri = new Uri(baseUri, $"AuditProjectFunctions({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectFunction), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectFunction(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPageComponentElementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPageComponentElementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectPageComponentElements(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>> GetAuditProjectPageComponentElements(Query query)
        {
            return await GetAuditProjectPageComponentElements(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>> GetAuditProjectPageComponentElements(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponentElements");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPageComponentElements(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>>(response);
        }

        partial void OnCreateAuditProjectPageComponentElement(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> CreateAuditProjectPageComponentElement(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement auditProjectPageComponentElement = default(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponentElements");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPageComponentElement), Encoding.UTF8, "application/json");

            OnCreateAuditProjectPageComponentElement(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>(response);
        }

        partial void OnDeleteAuditProjectPageComponentElement(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectPageComponentElement(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponentElements({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectPageComponentElement(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectPageComponentElementByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement> GetAuditProjectPageComponentElementByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponentElements({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPageComponentElementByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement>(response);
        }

        partial void OnUpdateAuditProjectPageComponentElement(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectPageComponentElement(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement auditProjectPageComponentElement = default(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponentElement))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponentElements({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPageComponentElement), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectPageComponentElement(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPageComponentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPageComponentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectPageComponents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>> GetAuditProjectPageComponents(Query query)
        {
            return await GetAuditProjectPageComponents(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>> GetAuditProjectPageComponents(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponents");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPageComponents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>>(response);
        }

        partial void OnCreateAuditProjectPageComponent(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> CreateAuditProjectPageComponent(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent auditProjectPageComponent = default(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponents");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPageComponent), Encoding.UTF8, "application/json");

            OnCreateAuditProjectPageComponent(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>(response);
        }

        partial void OnDeleteAuditProjectPageComponent(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectPageComponent(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponents({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectPageComponent(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectPageComponentByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent> GetAuditProjectPageComponentByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponents({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPageComponentByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent>(response);
        }

        partial void OnUpdateAuditProjectPageComponent(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectPageComponent(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent auditProjectPageComponent = default(ZarenUI.Server.Models.JSONServer.AuditProjectPageComponent))
        {
            var uri = new Uri(baseUri, $"AuditProjectPageComponents({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPageComponent), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectPageComponent(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectPages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPage>> GetAuditProjectPages(Query query)
        {
            return await GetAuditProjectPages(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPage>> GetAuditProjectPages(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectPages");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectPage>>(response);
        }

        partial void OnCreateAuditProjectPage(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> CreateAuditProjectPage(ZarenUI.Server.Models.JSONServer.AuditProjectPage auditProjectPage = default(ZarenUI.Server.Models.JSONServer.AuditProjectPage))
        {
            var uri = new Uri(baseUri, $"AuditProjectPages");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPage), Encoding.UTF8, "application/json");

            OnCreateAuditProjectPage(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPage>(response);
        }

        partial void OnDeleteAuditProjectPage(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectPage(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPages({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectPage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectPageByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectPage> GetAuditProjectPageByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectPages({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectPageByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectPage>(response);
        }

        partial void OnUpdateAuditProjectPage(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectPage(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectPage auditProjectPage = default(ZarenUI.Server.Models.JSONServer.AuditProjectPage))
        {
            var uri = new Uri(baseUri, $"AuditProjectPages({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectPage), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectPage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjects(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProject>> GetAuditProjects(Query query)
        {
            return await GetAuditProjects(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProject>> GetAuditProjects(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjects");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjects(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProject>>(response);
        }

        partial void OnCreateAuditProject(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> CreateAuditProject(ZarenUI.Server.Models.JSONServer.AuditProject auditProject = default(ZarenUI.Server.Models.JSONServer.AuditProject))
        {
            var uri = new Uri(baseUri, $"AuditProjects");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProject), Encoding.UTF8, "application/json");

            OnCreateAuditProject(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProject>(response);
        }

        partial void OnDeleteAuditProject(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProject(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjects({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProject(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProject> GetAuditProjectByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjects({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProject>(response);
        }

        partial void OnUpdateAuditProject(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProject(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProject auditProject = default(ZarenUI.Server.Models.JSONServer.AuditProject))
        {
            var uri = new Uri(baseUri, $"AuditProjects({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProject), Encoding.UTF8, "application/json");

            OnUpdateAuditProject(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectTableColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectTableColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectTableColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>> GetAuditProjectTableColumns(Query query)
        {
            return await GetAuditProjectTableColumns(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>> GetAuditProjectTableColumns(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectTableColumns");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectTableColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>>(response);
        }

        partial void OnCreateAuditProjectTableColumn(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> CreateAuditProjectTableColumn(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn auditProjectTableColumn = default(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn))
        {
            var uri = new Uri(baseUri, $"AuditProjectTableColumns");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectTableColumn), Encoding.UTF8, "application/json");

            OnCreateAuditProjectTableColumn(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>(response);
        }

        partial void OnDeleteAuditProjectTableColumn(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectTableColumn(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectTableColumns({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectTableColumn(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectTableColumnByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn> GetAuditProjectTableColumnByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectTableColumns({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectTableColumnByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn>(response);
        }

        partial void OnUpdateAuditProjectTableColumn(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectTableColumn(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn auditProjectTableColumn = default(ZarenUI.Server.Models.JSONServer.AuditProjectTableColumn))
        {
            var uri = new Uri(baseUri, $"AuditProjectTableColumns({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectTableColumn), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectTableColumn(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditProjectTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditprojecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditprojecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditProjectTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTable>> GetAuditProjectTables(Query query)
        {
            return await GetAuditProjectTables(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTable>> GetAuditProjectTables(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditProjectTables");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditProjectTable>>(response);
        }

        partial void OnCreateAuditProjectTable(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> CreateAuditProjectTable(ZarenUI.Server.Models.JSONServer.AuditProjectTable auditProjectTable = default(ZarenUI.Server.Models.JSONServer.AuditProjectTable))
        {
            var uri = new Uri(baseUri, $"AuditProjectTables");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectTable), Encoding.UTF8, "application/json");

            OnCreateAuditProjectTable(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectTable>(response);
        }

        partial void OnDeleteAuditProjectTable(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditProjectTable(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectTables({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditProjectTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditProjectTableByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditProjectTable> GetAuditProjectTableByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditProjectTables({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditProjectTableByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditProjectTable>(response);
        }

        partial void OnUpdateAuditProjectTable(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditProjectTable(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditProjectTable auditProjectTable = default(ZarenUI.Server.Models.JSONServer.AuditProjectTable))
        {
            var uri = new Uri(baseUri, $"AuditProjectTables({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditProjectTable), Encoding.UTF8, "application/json");

            OnUpdateAuditProjectTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditReferenceWebSitesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditreferencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditreferencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditReferenceWebSitesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditreferencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditreferencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditReferenceWebSites(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>> GetAuditReferenceWebSites(Query query)
        {
            return await GetAuditReferenceWebSites(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>> GetAuditReferenceWebSites(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditReferenceWebSites");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditReferenceWebSites(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>>(response);
        }

        partial void OnCreateAuditReferenceWebSite(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> CreateAuditReferenceWebSite(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite auditReferenceWebSite = default(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite))
        {
            var uri = new Uri(baseUri, $"AuditReferenceWebSites");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditReferenceWebSite), Encoding.UTF8, "application/json");

            OnCreateAuditReferenceWebSite(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>(response);
        }

        partial void OnDeleteAuditReferenceWebSite(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditReferenceWebSite(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditReferenceWebSites({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditReferenceWebSite(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditReferenceWebSiteByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite> GetAuditReferenceWebSiteByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditReferenceWebSites({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditReferenceWebSiteByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite>(response);
        }

        partial void OnUpdateAuditReferenceWebSite(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditReferenceWebSite(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite auditReferenceWebSite = default(ZarenUI.Server.Models.JSONServer.AuditReferenceWebSite))
        {
            var uri = new Uri(baseUri, $"AuditReferenceWebSites({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditReferenceWebSite), Encoding.UTF8, "application/json");

            OnUpdateAuditReferenceWebSite(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/auditschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/auditschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditScheme>> GetAuditSchemes(Query query)
        {
            return await GetAuditSchemes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditScheme>> GetAuditSchemes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditSchemes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditScheme>>(response);
        }

        partial void OnCreateAuditScheme(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> CreateAuditScheme(ZarenUI.Server.Models.JSONServer.AuditScheme auditScheme = default(ZarenUI.Server.Models.JSONServer.AuditScheme))
        {
            var uri = new Uri(baseUri, $"AuditSchemes");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditScheme), Encoding.UTF8, "application/json");

            OnCreateAuditScheme(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditScheme>(response);
        }

        partial void OnDeleteAuditScheme(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditScheme(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditSchemes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditSchemeByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditScheme> GetAuditSchemeByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditSchemes({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditSchemeByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditScheme>(response);
        }

        partial void OnUpdateAuditScheme(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditScheme(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditScheme auditScheme = default(ZarenUI.Server.Models.JSONServer.AuditScheme))
        {
            var uri = new Uri(baseUri, $"AuditSchemes({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditScheme), Encoding.UTF8, "application/json");

            OnUpdateAuditScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportAuditTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/audittables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/audittables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportAuditTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/audittables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/audittables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetAuditTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditTable>> GetAuditTables(Query query)
        {
            return await GetAuditTables(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditTable>> GetAuditTables(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"AuditTables");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.AuditTable>>(response);
        }

        partial void OnCreateAuditTable(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> CreateAuditTable(ZarenUI.Server.Models.JSONServer.AuditTable auditTable = default(ZarenUI.Server.Models.JSONServer.AuditTable))
        {
            var uri = new Uri(baseUri, $"AuditTables");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditTable), Encoding.UTF8, "application/json");

            OnCreateAuditTable(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditTable>(response);
        }

        partial void OnDeleteAuditTable(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteAuditTable(long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditTables({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteAuditTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAuditTableByLogId(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.AuditTable> GetAuditTableByLogId(string expand = default(string), long logId = default(long))
        {
            var uri = new Uri(baseUri, $"AuditTables({logId})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAuditTableByLogId(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.AuditTable>(response);
        }

        partial void OnUpdateAuditTable(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateAuditTable(long logId = default(long), ZarenUI.Server.Models.JSONServer.AuditTable auditTable = default(ZarenUI.Server.Models.JSONServer.AuditTable))
        {
            var uri = new Uri(baseUri, $"AuditTables({logId})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(auditTable), Encoding.UTF8, "application/json");

            OnUpdateAuditTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroup>> GetColorGroups(Query query)
        {
            return await GetColorGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroup>> GetColorGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroup>>(response);
        }

        partial void OnCreateColorGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> CreateColorGroup(ZarenUI.Server.Models.JSONServer.ColorGroup colorGroup = default(ZarenUI.Server.Models.JSONServer.ColorGroup))
        {
            var uri = new Uri(baseUri, $"ColorGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(colorGroup), Encoding.UTF8, "application/json");

            OnCreateColorGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ColorGroup>(response);
        }

        partial void OnDeleteColorGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteColorGroup(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ColorGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteColorGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetColorGroupById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ColorGroup> GetColorGroupById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ColorGroups({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ColorGroup>(response);
        }

        partial void OnUpdateColorGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateColorGroup(int id = default(int), ZarenUI.Server.Models.JSONServer.ColorGroup colorGroup = default(ZarenUI.Server.Models.JSONServer.ColorGroup))
        {
            var uri = new Uri(baseUri, $"ColorGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(colorGroup), Encoding.UTF8, "application/json");

            OnUpdateColorGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRule>> GetConstraintRules(Query query)
        {
            return await GetConstraintRules(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRule>> GetConstraintRules(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRules");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRule>>(response);
        }

        partial void OnCreateConstraintRule(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> CreateConstraintRule(ZarenUI.Server.Models.JSONServer.ConstraintRule constraintRule = default(ZarenUI.Server.Models.JSONServer.ConstraintRule))
        {
            var uri = new Uri(baseUri, $"ConstraintRules");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(constraintRule), Encoding.UTF8, "application/json");

            OnCreateConstraintRule(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ConstraintRule>(response);
        }

        partial void OnDeleteConstraintRule(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteConstraintRule(long id = default(long))
        {
            var uri = new Uri(baseUri, $"ConstraintRules({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteConstraintRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetConstraintRuleById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ConstraintRule> GetConstraintRuleById(string expand = default(string), long id = default(long))
        {
            var uri = new Uri(baseUri, $"ConstraintRules({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRuleById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ConstraintRule>(response);
        }

        partial void OnUpdateConstraintRule(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateConstraintRule(long id = default(long), ZarenUI.Server.Models.JSONServer.ConstraintRule constraintRule = default(ZarenUI.Server.Models.JSONServer.ConstraintRule))
        {
            var uri = new Uri(baseUri, $"ConstraintRules({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(constraintRule), Encoding.UTF8, "application/json");

            OnUpdateConstraintRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportCountriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Country>> GetCountries(Query query)
        {
            return await GetCountries(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Country>> GetCountries(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Countries");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Country>>(response);
        }

        partial void OnCreateCountry(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> CreateCountry(ZarenUI.Server.Models.JSONServer.Country country = default(ZarenUI.Server.Models.JSONServer.Country))
        {
            var uri = new Uri(baseUri, $"Countries");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(country), Encoding.UTF8, "application/json");

            OnCreateCountry(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Country>(response);
        }

        partial void OnDeleteCountry(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteCountry(int id = default(int))
        {
            var uri = new Uri(baseUri, $"Countries({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteCountry(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetCountryById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Country> GetCountryById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"Countries({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Country>(response);
        }

        partial void OnUpdateCountry(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateCountry(int id = default(int), ZarenUI.Server.Models.JSONServer.Country country = default(ZarenUI.Server.Models.JSONServer.Country))
        {
            var uri = new Uri(baseUri, $"Countries({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(country), Encoding.UTF8, "application/json");

            OnUpdateCountry(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguage>> GetCountryLanguages(Query query)
        {
            return await GetCountryLanguages(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguage>> GetCountryLanguages(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguages");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguage>>(response);
        }

        partial void OnCreateCountryLanguage(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> CreateCountryLanguage(ZarenUI.Server.Models.JSONServer.CountryLanguage countryLanguage = default(ZarenUI.Server.Models.JSONServer.CountryLanguage))
        {
            var uri = new Uri(baseUri, $"CountryLanguages");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(countryLanguage), Encoding.UTF8, "application/json");

            OnCreateCountryLanguage(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.CountryLanguage>(response);
        }

        partial void OnDeleteCountryLanguage(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteCountryLanguage(int id = default(int))
        {
            var uri = new Uri(baseUri, $"CountryLanguages({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteCountryLanguage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetCountryLanguageById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.CountryLanguage> GetCountryLanguageById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"CountryLanguages({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguageById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.CountryLanguage>(response);
        }

        partial void OnUpdateCountryLanguage(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateCountryLanguage(int id = default(int), ZarenUI.Server.Models.JSONServer.CountryLanguage countryLanguage = default(ZarenUI.Server.Models.JSONServer.CountryLanguage))
        {
            var uri = new Uri(baseUri, $"CountryLanguages({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(countryLanguage), Encoding.UTF8, "application/json");

            OnUpdateCountryLanguage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroup>> GetDeviceGroups(Query query)
        {
            return await GetDeviceGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroup>> GetDeviceGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroup>>(response);
        }

        partial void OnCreateDeviceGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> CreateDeviceGroup(ZarenUI.Server.Models.JSONServer.DeviceGroup deviceGroup = default(ZarenUI.Server.Models.JSONServer.DeviceGroup))
        {
            var uri = new Uri(baseUri, $"DeviceGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(deviceGroup), Encoding.UTF8, "application/json");

            OnCreateDeviceGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.DeviceGroup>(response);
        }

        partial void OnDeleteDeviceGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteDeviceGroup(int id = default(int))
        {
            var uri = new Uri(baseUri, $"DeviceGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteDeviceGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetDeviceGroupById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.DeviceGroup> GetDeviceGroupById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"DeviceGroups({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.DeviceGroup>(response);
        }

        partial void OnUpdateDeviceGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateDeviceGroup(int id = default(int), ZarenUI.Server.Models.JSONServer.DeviceGroup deviceGroup = default(ZarenUI.Server.Models.JSONServer.DeviceGroup))
        {
            var uri = new Uri(baseUri, $"DeviceGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(deviceGroup), Encoding.UTF8, "application/json");

            OnUpdateDeviceGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportDevicesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Device>> GetDevices(Query query)
        {
            return await GetDevices(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Device>> GetDevices(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Devices");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Device>>(response);
        }

        partial void OnCreateDevice(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> CreateDevice(ZarenUI.Server.Models.JSONServer.Device device = default(ZarenUI.Server.Models.JSONServer.Device))
        {
            var uri = new Uri(baseUri, $"Devices");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(device), Encoding.UTF8, "application/json");

            OnCreateDevice(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Device>(response);
        }

        partial void OnDeleteDevice(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteDevice(int id = default(int))
        {
            var uri = new Uri(baseUri, $"Devices({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteDevice(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetDeviceById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Device> GetDeviceById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"Devices({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Device>(response);
        }

        partial void OnUpdateDevice(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateDevice(int id = default(int), ZarenUI.Server.Models.JSONServer.Device device = default(ZarenUI.Server.Models.JSONServer.Device))
        {
            var uri = new Uri(baseUri, $"Devices({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(device), Encoding.UTF8, "application/json");

            OnUpdateDevice(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportDistributedServerCachesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/distributedservercaches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/distributedservercaches/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDistributedServerCachesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/distributedservercaches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/distributedservercaches/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDistributedServerCaches(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DistributedServerCache>> GetDistributedServerCaches(Query query)
        {
            return await GetDistributedServerCaches(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DistributedServerCache>> GetDistributedServerCaches(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DistributedServerCaches");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDistributedServerCaches(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DistributedServerCache>>(response);
        }

        partial void OnCreateDistributedServerCache(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> CreateDistributedServerCache(ZarenUI.Server.Models.JSONServer.DistributedServerCache distributedServerCache = default(ZarenUI.Server.Models.JSONServer.DistributedServerCache))
        {
            var uri = new Uri(baseUri, $"DistributedServerCaches");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(distributedServerCache), Encoding.UTF8, "application/json");

            OnCreateDistributedServerCache(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.DistributedServerCache>(response);
        }

        partial void OnDeleteDistributedServerCache(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteDistributedServerCache(string id = default(string))
        {
            var uri = new Uri(baseUri, $"DistributedServerCaches('{HttpUtility.UrlEncode(id.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteDistributedServerCache(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetDistributedServerCacheById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.DistributedServerCache> GetDistributedServerCacheById(string expand = default(string), string id = default(string))
        {
            var uri = new Uri(baseUri, $"DistributedServerCaches('{HttpUtility.UrlEncode(id.Trim().Replace("'", "''"))}')");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDistributedServerCacheById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.DistributedServerCache>(response);
        }

        partial void OnUpdateDistributedServerCache(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateDistributedServerCache(string id = default(string), ZarenUI.Server.Models.JSONServer.DistributedServerCache distributedServerCache = default(ZarenUI.Server.Models.JSONServer.DistributedServerCache))
        {
            var uri = new Uri(baseUri, $"DistributedServerCaches('{HttpUtility.UrlEncode(id.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(distributedServerCache), Encoding.UTF8, "application/json");

            OnUpdateDistributedServerCache(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportFieldsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFields(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Field>> GetFields(Query query)
        {
            return await GetFields(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Field>> GetFields(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Fields");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFields(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Field>>(response);
        }

        partial void OnCreateField(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> CreateField(ZarenUI.Server.Models.JSONServer.Field field = default(ZarenUI.Server.Models.JSONServer.Field))
        {
            var uri = new Uri(baseUri, $"Fields");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(field), Encoding.UTF8, "application/json");

            OnCreateField(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Field>(response);
        }

        partial void OnDeleteField(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteField(long id = default(long))
        {
            var uri = new Uri(baseUri, $"Fields({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteField(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetFieldById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Field> GetFieldById(string expand = default(string), long id = default(long))
        {
            var uri = new Uri(baseUri, $"Fields({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Field>(response);
        }

        partial void OnUpdateField(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateField(long id = default(long), ZarenUI.Server.Models.JSONServer.Field field = default(ZarenUI.Server.Models.JSONServer.Field))
        {
            var uri = new Uri(baseUri, $"Fields({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(field), Encoding.UTF8, "application/json");

            OnUpdateField(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>> GetForeignKeyRules(Query query)
        {
            return await GetForeignKeyRules(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>> GetForeignKeyRules(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRules");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>>(response);
        }

        partial void OnCreateForeignKeyRule(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> CreateForeignKeyRule(ZarenUI.Server.Models.JSONServer.ForeignKeyRule foreignKeyRule = default(ZarenUI.Server.Models.JSONServer.ForeignKeyRule))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRules");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(foreignKeyRule), Encoding.UTF8, "application/json");

            OnCreateForeignKeyRule(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>(response);
        }

        partial void OnDeleteForeignKeyRule(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteForeignKeyRule(long id = default(long))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRules({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteForeignKeyRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetForeignKeyRuleById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ForeignKeyRule> GetForeignKeyRuleById(string expand = default(string), long id = default(long))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRules({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRuleById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ForeignKeyRule>(response);
        }

        partial void OnUpdateForeignKeyRule(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateForeignKeyRule(long id = default(long), ZarenUI.Server.Models.JSONServer.ForeignKeyRule foreignKeyRule = default(ZarenUI.Server.Models.JSONServer.ForeignKeyRule))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRules({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(foreignKeyRule), Encoding.UTF8, "application/json");

            OnUpdateForeignKeyRule(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>> GetProgrammingCategories(Query query)
        {
            return await GetProgrammingCategories(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>> GetProgrammingCategories(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategories");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>>(response);
        }

        partial void OnCreateProgrammingCategory(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> CreateProgrammingCategory(ZarenUI.Server.Models.JSONServer.ProgrammingCategory programmingCategory = default(ZarenUI.Server.Models.JSONServer.ProgrammingCategory))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategories");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCategory), Encoding.UTF8, "application/json");

            OnCreateProgrammingCategory(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>(response);
        }

        partial void OnDeleteProgrammingCategory(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProgrammingCategory(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategories({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProgrammingCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProgrammingCategoryById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCategory> GetProgrammingCategoryById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategories({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCategory>(response);
        }

        partial void OnUpdateProgrammingCategory(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProgrammingCategory(int id = default(int), ZarenUI.Server.Models.JSONServer.ProgrammingCategory programmingCategory = default(ZarenUI.Server.Models.JSONServer.ProgrammingCategory))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategories({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCategory), Encoding.UTF8, "application/json");

            OnUpdateProgrammingCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCode>> GetProgrammingCodes(Query query)
        {
            return await GetProgrammingCodes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCode>> GetProgrammingCodes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCode>>(response);
        }

        partial void OnCreateProgrammingCode(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> CreateProgrammingCode(ZarenUI.Server.Models.JSONServer.ProgrammingCode programmingCode = default(ZarenUI.Server.Models.JSONServer.ProgrammingCode))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodes");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCode), Encoding.UTF8, "application/json");

            OnCreateProgrammingCode(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCode>(response);
        }

        partial void OnDeleteProgrammingCode(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProgrammingCode(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodes({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProgrammingCode(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProgrammingCodeById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCode> GetProgrammingCodeById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodes({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCode>(response);
        }

        partial void OnUpdateProgrammingCode(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProgrammingCode(int id = default(int), ZarenUI.Server.Models.JSONServer.ProgrammingCode programmingCode = default(ZarenUI.Server.Models.JSONServer.ProgrammingCode))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodes({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCode), Encoding.UTF8, "application/json");

            OnUpdateProgrammingCode(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>> GetProgrammingCodeTemplates(Query query)
        {
            return await GetProgrammingCodeTemplates(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>> GetProgrammingCodeTemplates(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplates");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>>(response);
        }

        partial void OnCreateProgrammingCodeTemplate(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> CreateProgrammingCodeTemplate(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate programmingCodeTemplate = default(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplates");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCodeTemplate), Encoding.UTF8, "application/json");

            OnCreateProgrammingCodeTemplate(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>(response);
        }

        partial void OnDeleteProgrammingCodeTemplate(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProgrammingCodeTemplate(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplates({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProgrammingCodeTemplate(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProgrammingCodeTemplateById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate> GetProgrammingCodeTemplateById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplates({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplateById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate>(response);
        }

        partial void OnUpdateProgrammingCodeTemplate(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProgrammingCodeTemplate(int id = default(int), ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate programmingCodeTemplate = default(ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplate))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplates({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingCodeTemplate), Encoding.UTF8, "application/json");

            OnUpdateProgrammingCodeTemplate(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologiesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologiesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>> GetProgrammingTechnologies(Query query)
        {
            return await GetProgrammingTechnologies(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>> GetProgrammingTechnologies(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologies");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>>(response);
        }

        partial void OnCreateProgrammingTechnology(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> CreateProgrammingTechnology(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology programmingTechnology = default(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologies");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingTechnology), Encoding.UTF8, "application/json");

            OnCreateProgrammingTechnology(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>(response);
        }

        partial void OnDeleteProgrammingTechnology(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProgrammingTechnology(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologies({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProgrammingTechnology(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProgrammingTechnologyById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology> GetProgrammingTechnologyById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologies({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProgrammingTechnology>(response);
        }

        partial void OnUpdateProgrammingTechnology(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProgrammingTechnology(int id = default(int), ZarenUI.Server.Models.JSONServer.ProgrammingTechnology programmingTechnology = default(ZarenUI.Server.Models.JSONServer.ProgrammingTechnology))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologies({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(programmingTechnology), Encoding.UTF8, "application/json");

            OnUpdateProgrammingTechnology(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategory>> GetProjectCategories(Query query)
        {
            return await GetProjectCategories(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategory>> GetProjectCategories(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategories");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategory>>(response);
        }

        partial void OnCreateProjectCategory(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> CreateProjectCategory(ZarenUI.Server.Models.JSONServer.ProjectCategory projectCategory = default(ZarenUI.Server.Models.JSONServer.ProjectCategory))
        {
            var uri = new Uri(baseUri, $"ProjectCategories");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectCategory), Encoding.UTF8, "application/json");

            OnCreateProjectCategory(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectCategory>(response);
        }

        partial void OnDeleteProjectCategory(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectCategory(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectCategories({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectCategoryById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectCategory> GetProjectCategoryById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectCategories({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectCategory>(response);
        }

        partial void OnUpdateProjectCategory(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectCategory(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectCategory projectCategory = default(ZarenUI.Server.Models.JSONServer.ProjectCategory))
        {
            var uri = new Uri(baseUri, $"ProjectCategories({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectCategory), Encoding.UTF8, "application/json");

            OnUpdateProjectCategory(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValuesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValuesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>> GetProjectConfigurationKeyAndValues(Query query)
        {
            return await GetProjectConfigurationKeyAndValues(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>> GetProjectConfigurationKeyAndValues(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValues");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>>(response);
        }

        partial void OnCreateProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> CreateProjectConfigurationKeyAndValue(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue projectConfigurationKeyAndValue = default(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValues");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectConfigurationKeyAndValue), Encoding.UTF8, "application/json");

            OnCreateProjectConfigurationKeyAndValue(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>(response);
        }

        partial void OnDeleteProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectConfigurationKeyAndValue(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValues({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectConfigurationKeyAndValue(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectConfigurationKeyAndValueById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue> GetProjectConfigurationKeyAndValueById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValues({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue>(response);
        }

        partial void OnUpdateProjectConfigurationKeyAndValue(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectConfigurationKeyAndValue(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue projectConfigurationKeyAndValue = default(ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValue))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValues({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectConfigurationKeyAndValue), Encoding.UTF8, "application/json");

            OnUpdateProjectConfigurationKeyAndValue(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>> GetProjectConfigurations(Query query)
        {
            return await GetProjectConfigurations(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>> GetProjectConfigurations(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurations");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>>(response);
        }

        partial void OnCreateProjectConfiguration(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> CreateProjectConfiguration(ZarenUI.Server.Models.JSONServer.ProjectConfiguration projectConfiguration = default(ZarenUI.Server.Models.JSONServer.ProjectConfiguration))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurations");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectConfiguration), Encoding.UTF8, "application/json");

            OnCreateProjectConfiguration(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>(response);
        }

        partial void OnDeleteProjectConfiguration(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectConfiguration(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurations({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectConfiguration(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectConfigurationById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectConfiguration> GetProjectConfigurationById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurations({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectConfiguration>(response);
        }

        partial void OnUpdateProjectConfiguration(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectConfiguration(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectConfiguration projectConfiguration = default(ZarenUI.Server.Models.JSONServer.ProjectConfiguration))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurations({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectConfiguration), Encoding.UTF8, "application/json");

            OnUpdateProjectConfiguration(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>> GetProjectFunctionGroups(Query query)
        {
            return await GetProjectFunctionGroups(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>> GetProjectFunctionGroups(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroups");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>>(response);
        }

        partial void OnCreateProjectFunctionGroup(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> CreateProjectFunctionGroup(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup projectFunctionGroup = default(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroups");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectFunctionGroup), Encoding.UTF8, "application/json");

            OnCreateProjectFunctionGroup(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>(response);
        }

        partial void OnDeleteProjectFunctionGroup(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectFunctionGroup(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectFunctionGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectFunctionGroupById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup> GetProjectFunctionGroupById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroups({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup>(response);
        }

        partial void OnUpdateProjectFunctionGroup(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectFunctionGroup(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup projectFunctionGroup = default(ZarenUI.Server.Models.JSONServer.ProjectFunctionGroup))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroups({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectFunctionGroup), Encoding.UTF8, "application/json");

            OnUpdateProjectFunctionGroup(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunction>> GetProjectFunctions(Query query)
        {
            return await GetProjectFunctions(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunction>> GetProjectFunctions(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctions");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunction>>(response);
        }

        partial void OnCreateProjectFunction(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> CreateProjectFunction(ZarenUI.Server.Models.JSONServer.ProjectFunction projectFunction = default(ZarenUI.Server.Models.JSONServer.ProjectFunction))
        {
            var uri = new Uri(baseUri, $"ProjectFunctions");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectFunction), Encoding.UTF8, "application/json");

            OnCreateProjectFunction(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectFunction>(response);
        }

        partial void OnDeleteProjectFunction(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectFunction(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectFunctions({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectFunction(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectFunctionById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectFunction> GetProjectFunctionById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectFunctions({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectFunction>(response);
        }

        partial void OnUpdateProjectFunction(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectFunction(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectFunction projectFunction = default(ZarenUI.Server.Models.JSONServer.ProjectFunction))
        {
            var uri = new Uri(baseUri, $"ProjectFunctions({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectFunction), Encoding.UTF8, "application/json");

            OnUpdateProjectFunction(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelements/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelements/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElements(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>> GetProjectPageComponentElements(Query query)
        {
            return await GetProjectPageComponentElements(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>> GetProjectPageComponentElements(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElements");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElements(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>>(response);
        }

        partial void OnCreateProjectPageComponentElement(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> CreateProjectPageComponentElement(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement projectPageComponentElement = default(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElements");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPageComponentElement), Encoding.UTF8, "application/json");

            OnCreateProjectPageComponentElement(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>(response);
        }

        partial void OnDeleteProjectPageComponentElement(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectPageComponentElement(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElements({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectPageComponentElement(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectPageComponentElementById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement> GetProjectPageComponentElementById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElements({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement>(response);
        }

        partial void OnUpdateProjectPageComponentElement(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectPageComponentElement(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement projectPageComponentElement = default(ZarenUI.Server.Models.JSONServer.ProjectPageComponentElement))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElements({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPageComponentElement), Encoding.UTF8, "application/json");

            OnUpdateProjectPageComponentElement(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>> GetProjectPageComponents(Query query)
        {
            return await GetProjectPageComponents(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>> GetProjectPageComponents(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponents");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>>(response);
        }

        partial void OnCreateProjectPageComponent(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> CreateProjectPageComponent(ZarenUI.Server.Models.JSONServer.ProjectPageComponent projectPageComponent = default(ZarenUI.Server.Models.JSONServer.ProjectPageComponent))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponents");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPageComponent), Encoding.UTF8, "application/json");

            OnCreateProjectPageComponent(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>(response);
        }

        partial void OnDeleteProjectPageComponent(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectPageComponent(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponents({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectPageComponent(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectPageComponentById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPageComponent> GetProjectPageComponentById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponents({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPageComponent>(response);
        }

        partial void OnUpdateProjectPageComponent(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectPageComponent(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectPageComponent projectPageComponent = default(ZarenUI.Server.Models.JSONServer.ProjectPageComponent))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponents({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPageComponent), Encoding.UTF8, "application/json");

            OnUpdateProjectPageComponent(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPage>> GetProjectPages(Query query)
        {
            return await GetProjectPages(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPage>> GetProjectPages(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPages");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPage>>(response);
        }

        partial void OnCreateProjectPage(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> CreateProjectPage(ZarenUI.Server.Models.JSONServer.ProjectPage projectPage = default(ZarenUI.Server.Models.JSONServer.ProjectPage))
        {
            var uri = new Uri(baseUri, $"ProjectPages");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPage), Encoding.UTF8, "application/json");

            OnCreateProjectPage(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPage>(response);
        }

        partial void OnDeleteProjectPage(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectPage(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPages({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectPage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectPageById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectPage> GetProjectPageById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectPages({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectPage>(response);
        }

        partial void OnUpdateProjectPage(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectPage(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectPage projectPage = default(ZarenUI.Server.Models.JSONServer.ProjectPage))
        {
            var uri = new Uri(baseUri, $"ProjectPages({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectPage), Encoding.UTF8, "application/json");

            OnUpdateProjectPage(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projects/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projects/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjects(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Project>> GetProjects(Query query)
        {
            return await GetProjects(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Project>> GetProjects(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Projects");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjects(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Project>>(response);
        }

        partial void OnCreateProject(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> CreateProject(ZarenUI.Server.Models.JSONServer.Project project = default(ZarenUI.Server.Models.JSONServer.Project))
        {
            var uri = new Uri(baseUri, $"Projects");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(project), Encoding.UTF8, "application/json");

            OnCreateProject(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Project>(response);
        }

        partial void OnDeleteProject(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProject(int id = default(int))
        {
            var uri = new Uri(baseUri, $"Projects({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProject(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Project> GetProjectById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"Projects({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Project>(response);
        }

        partial void OnUpdateProject(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProject(int id = default(int), ZarenUI.Server.Models.JSONServer.Project project = default(ZarenUI.Server.Models.JSONServer.Project))
        {
            var uri = new Uri(baseUri, $"Projects({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(project), Encoding.UTF8, "application/json");

            OnUpdateProject(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>> GetProjectTableColumns(Query query)
        {
            return await GetProjectTableColumns(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>> GetProjectTableColumns(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumns");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>>(response);
        }

        partial void OnCreateProjectTableColumn(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> CreateProjectTableColumn(ZarenUI.Server.Models.JSONServer.ProjectTableColumn projectTableColumn = default(ZarenUI.Server.Models.JSONServer.ProjectTableColumn))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumns");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectTableColumn), Encoding.UTF8, "application/json");

            OnCreateProjectTableColumn(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>(response);
        }

        partial void OnDeleteProjectTableColumn(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectTableColumn(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumns({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectTableColumn(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectTableColumnById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTableColumn> GetProjectTableColumnById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumns({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectTableColumn>(response);
        }

        partial void OnUpdateProjectTableColumn(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectTableColumn(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectTableColumn projectTableColumn = default(ZarenUI.Server.Models.JSONServer.ProjectTableColumn))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumns({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectTableColumn), Encoding.UTF8, "application/json");

            OnUpdateProjectTableColumn(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTable>> GetProjectTables(Query query)
        {
            return await GetProjectTables(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTable>> GetProjectTables(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTables");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTable>>(response);
        }

        partial void OnCreateProjectTable(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> CreateProjectTable(ZarenUI.Server.Models.JSONServer.ProjectTable projectTable = default(ZarenUI.Server.Models.JSONServer.ProjectTable))
        {
            var uri = new Uri(baseUri, $"ProjectTables");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectTable), Encoding.UTF8, "application/json");

            OnCreateProjectTable(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectTable>(response);
        }

        partial void OnDeleteProjectTable(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteProjectTable(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectTables({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteProjectTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetProjectTableById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ProjectTable> GetProjectTableById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ProjectTables({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ProjectTable>(response);
        }

        partial void OnUpdateProjectTable(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateProjectTable(int id = default(int), ZarenUI.Server.Models.JSONServer.ProjectTable projectTable = default(ZarenUI.Server.Models.JSONServer.ProjectTable))
        {
            var uri = new Uri(baseUri, $"ProjectTables({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(projectTable), Encoding.UTF8, "application/json");

            OnUpdateProjectTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsites/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsites/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSites(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>> GetReferenceWebSites(Query query)
        {
            return await GetReferenceWebSites(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>> GetReferenceWebSites(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSites");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSites(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>>(response);
        }

        partial void OnCreateReferenceWebSite(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> CreateReferenceWebSite(ZarenUI.Server.Models.JSONServer.ReferenceWebSite referenceWebSite = default(ZarenUI.Server.Models.JSONServer.ReferenceWebSite))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSites");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(referenceWebSite), Encoding.UTF8, "application/json");

            OnCreateReferenceWebSite(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>(response);
        }

        partial void OnDeleteReferenceWebSite(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteReferenceWebSite(int id = default(int))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSites({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteReferenceWebSite(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetReferenceWebSiteById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.ReferenceWebSite> GetReferenceWebSiteById(string expand = default(string), int id = default(int))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSites({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSiteById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.ReferenceWebSite>(response);
        }

        partial void OnUpdateReferenceWebSite(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateReferenceWebSite(int id = default(int), ZarenUI.Server.Models.JSONServer.ReferenceWebSite referenceWebSite = default(ZarenUI.Server.Models.JSONServer.ReferenceWebSite))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSites({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(referenceWebSite), Encoding.UTF8, "application/json");

            OnUpdateReferenceWebSite(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Scheme>> GetSchemes(Query query)
        {
            return await GetSchemes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Scheme>> GetSchemes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Schemes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Scheme>>(response);
        }

        partial void OnCreateScheme(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> CreateScheme(ZarenUI.Server.Models.JSONServer.Scheme scheme = default(ZarenUI.Server.Models.JSONServer.Scheme))
        {
            var uri = new Uri(baseUri, $"Schemes");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(scheme), Encoding.UTF8, "application/json");

            OnCreateScheme(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Scheme>(response);
        }

        partial void OnDeleteScheme(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteScheme(long id = default(long))
        {
            var uri = new Uri(baseUri, $"Schemes({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetSchemeById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Scheme> GetSchemeById(string expand = default(string), long id = default(long))
        {
            var uri = new Uri(baseUri, $"Schemes({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemeById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Scheme>(response);
        }

        partial void OnUpdateScheme(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateScheme(long id = default(long), ZarenUI.Server.Models.JSONServer.Scheme scheme = default(ZarenUI.Server.Models.JSONServer.Scheme))
        {
            var uri = new Uri(baseUri, $"Schemes({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(scheme), Encoding.UTF8, "application/json");

            OnUpdateScheme(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Table>> GetTables(Query query)
        {
            return await GetTables(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Table>> GetTables(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"Tables");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.Table>>(response);
        }

        partial void OnCreateTable(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> CreateTable(ZarenUI.Server.Models.JSONServer.Table table = default(ZarenUI.Server.Models.JSONServer.Table))
        {
            var uri = new Uri(baseUri, $"Tables");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(table), Encoding.UTF8, "application/json");

            OnCreateTable(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Table>(response);
        }

        partial void OnDeleteTable(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeleteTable(long id = default(long))
        {
            var uri = new Uri(baseUri, $"Tables({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);

            OnDeleteTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetTableById(HttpRequestMessage requestMessage);

        public async Task<ZarenUI.Server.Models.JSONServer.Table> GetTableById(string expand = default(string), long id = default(long))
        {
            var uri = new Uri(baseUri, $"Tables({id})");

            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:null, top:null, skip:null, orderby:null, expand:expand, select:null, count:null);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTableById(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<ZarenUI.Server.Models.JSONServer.Table>(response);
        }

        partial void OnUpdateTable(HttpRequestMessage requestMessage);
        
        public async Task<HttpResponseMessage> UpdateTable(long id = default(long), ZarenUI.Server.Models.JSONServer.Table table = default(ZarenUI.Server.Models.JSONServer.Table))
        {
            var uri = new Uri(baseUri, $"Tables({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Patch, uri);


            httpRequestMessage.Content = new StringContent(Radzen.ODataJsonSerializer.Serialize(table), Encoding.UTF8, "application/json");

            OnUpdateTable(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignScheme>> GetDesignSchemes(Query query)
        {
            return await GetDesignSchemes(filter:$"{query.Filter}", orderby:$"{query.OrderBy}", top:query.Top, skip:query.Skip, count:query.Top != null && query.Skip != null);
        }

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignScheme>> GetDesignSchemes(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemes");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetAll>> GetColorGroupsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByBrightnessValuesToExcel(double? BrightnessValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbybrightnessvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbybrightnessvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByBrightnessValuesToCSV(double? BrightnessValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbybrightnessvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbybrightnessvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByBrightnessValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByBrightnessValue>> GetColorGroupsGetByBrightnessValues(double? brightnessValue = default(double?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByBrightnessValuesFunc({brightnessValue})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByBrightnessValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByBrightnessValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByGroupListsToExcel(string GroupList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbygrouplists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbygrouplists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByGroupListsToCSV(string GroupList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbygrouplists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbygrouplists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByGroupLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByGroupList>> GetColorGroupsGetByGroupLists(string groupList = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByGroupListsFunc(GroupList='{HttpUtility.UrlEncode(groupList.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByGroupLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByGroupList>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByHexCodesToExcel(string HexCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyhexcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyhexcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByHexCodesToCSV(string HexCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyhexcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyhexcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByHexCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByHexCode>> GetColorGroupsGetByHexCodes(string hexCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByHexCodesFunc(HexCode='{HttpUtility.UrlEncode(hexCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByHexCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByHexCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetById>> GetColorGroupsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByIsDarksToExcel(bool? IsDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyisdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyisdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByIsDarksToCSV(bool? IsDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyisdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyisdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByIsDarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByIsDark>> GetColorGroupsGetByIsDarks(bool? isDark = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByIsDarksFunc(IsDark={isDark?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByIsDarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByIsDark>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByPossibleNamesToExcel(string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbypossiblenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbypossiblenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByPossibleNamesToCSV(string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbypossiblenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbypossiblenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByPossibleNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByPossibleName>> GetColorGroupsGetByPossibleNames(string possibleName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByPossibleNamesFunc(PossibleName='{HttpUtility.UrlEncode(possibleName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByPossibleNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByPossibleName>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByRgbCodesToExcel(string RGBCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyrgbcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyrgbcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsGetByRgbCodesToCSV(string RGBCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsgetbyrgbcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsgetbyrgbcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsGetByRgbCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByRgbCode>> GetColorGroupsGetByRgbCodes(string rgbcode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsGetByRgbCodesFunc(RGBCode='{HttpUtility.UrlEncode(rgbcode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsGetByRgbCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsGetByRgbCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsInsertsToExcel(string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsInsertsToCSV(string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsInsert>> GetColorGroupsInserts(string hexCode = default(string), string rgbcode = default(string), string groupList = default(string), double? brightnessValue = default(double?), bool? isDark = default(bool?), string possibleName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsInsertsFunc(HexCode='{HttpUtility.UrlEncode(hexCode.Trim().Replace("'", "''"))}',RGBCode='{HttpUtility.UrlEncode(rgbcode.Trim().Replace("'", "''"))}',GroupList='{HttpUtility.UrlEncode(groupList.Trim().Replace("'", "''"))}',{brightnessValue},IsDark={isDark?.ToString().ToLower()},PossibleName='{HttpUtility.UrlEncode(possibleName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsUpdatesToExcel(int? Id, string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportColorGroupsUpdatesToCSV(int? Id, string HexCode, string RGBCode, string GroupList, double? BrightnessValue, bool? IsDark, string PossibleName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/colorgroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/colorgroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetColorGroupsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsUpdate>> GetColorGroupsUpdates(int? id = default(int?), string hexCode = default(string), string rgbcode = default(string), string groupList = default(string), double? brightnessValue = default(double?), bool? isDark = default(bool?), string possibleName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ColorGroupsUpdatesFunc({id},HexCode='{HttpUtility.UrlEncode(hexCode.Trim().Replace("'", "''"))}',RGBCode='{HttpUtility.UrlEncode(rgbcode.Trim().Replace("'", "''"))}',GroupList='{HttpUtility.UrlEncode(groupList.Trim().Replace("'", "''"))}',{brightnessValue},IsDark={isDark?.ToString().ToLower()},PossibleName='{HttpUtility.UrlEncode(possibleName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetColorGroupsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ColorGroupsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetAll>> GetConstraintRulesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByAddWithChecksToExcel(string AddWithCheck, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithchecks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithchecks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByAddWithChecksToCSV(string AddWithCheck, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithchecks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithchecks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByAddWithChecks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithCheck>> GetConstraintRulesGetByAddWithChecks(string addWithCheck = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByAddWithChecksFunc(AddWithCheck='{HttpUtility.UrlEncode(addWithCheck.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByAddWithChecks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithCheck>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByAddWithNoChecksToExcel(string AddWithNoCheck, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithnochecks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithnochecks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByAddWithNoChecksToCSV(string AddWithNoCheck, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyaddwithnochecks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyaddwithnochecks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByAddWithNoChecks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithNoCheck>> GetConstraintRulesGetByAddWithNoChecks(string addWithNoCheck = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByAddWithNoChecksFunc(AddWithNoCheck='{HttpUtility.UrlEncode(addWithNoCheck.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByAddWithNoChecks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByAddWithNoCheck>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByCheckConstraintsToExcel(string CheckConstraint, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycheckconstraints/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycheckconstraints/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByCheckConstraintsToCSV(string CheckConstraint, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycheckconstraints/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycheckconstraints/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByCheckConstraints(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByCheckConstraint>> GetConstraintRulesGetByCheckConstraints(string checkConstraint = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByCheckConstraintsFunc(CheckConstraint='{HttpUtility.UrlEncode(checkConstraint.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByCheckConstraints(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByCheckConstraint>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByColumnIdsToExcel(long? ColumnId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycolumnids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycolumnids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByColumnIdsToCSV(long? ColumnId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycolumnids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycolumnids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByColumnIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByColumnId>> GetConstraintRulesGetByColumnIds(long? columnId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByColumnIdsFunc({columnId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByColumnIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByColumnId>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByComment>> GetConstraintRulesGetByComments(string comment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByCommentsFunc(Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetById>> GetConstraintRulesGetByIds(long? id = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByName>> GetConstraintRulesGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByProjectIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectId>> GetConstraintRulesGetByProjectIds(long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByProjectIdsFunc({projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByProjectIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectId>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByProjectNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectName>> GetConstraintRulesGetByProjectNames(string projectName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByProjectNamesFunc(ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByProjectNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByProjectName>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByTableIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableId>> GetConstraintRulesGetByTableIds(long? tableId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByTableIdsFunc({tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByTableIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableId>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableName>> GetConstraintRulesGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesInsertsToExcel(string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesInsertsToCSV(string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesInsert>> GetConstraintRulesInserts(string name = default(string), string comment = default(string), string checkConstraint = default(string), string addWithCheck = default(string), string addWithNoCheck = default(string), long? columnId = default(long?), string tableName = default(string), string projectName = default(string), long? tableId = default(long?), long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesInsertsFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',CheckConstraint='{HttpUtility.UrlEncode(checkConstraint.Trim().Replace("'", "''"))}',AddWithCheck='{HttpUtility.UrlEncode(addWithCheck.Trim().Replace("'", "''"))}',AddWithNoCheck='{HttpUtility.UrlEncode(addWithNoCheck.Trim().Replace("'", "''"))}',{columnId},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{tableId},{projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesUpdatesToExcel(long? Id, string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportConstraintRulesUpdatesToCSV(long? Id, string Name, string Comment, string CheckConstraint, string AddWithCheck, string AddWithNoCheck, long? ColumnId, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/constraintrulesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/constraintrulesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetConstraintRulesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesUpdate>> GetConstraintRulesUpdates(long? id = default(long?), string name = default(string), string comment = default(string), string checkConstraint = default(string), string addWithCheck = default(string), string addWithNoCheck = default(string), long? columnId = default(long?), string tableName = default(string), string projectName = default(string), long? tableId = default(long?), long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesUpdatesFunc({id},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',CheckConstraint='{HttpUtility.UrlEncode(checkConstraint.Trim().Replace("'", "''"))}',AddWithCheck='{HttpUtility.UrlEncode(addWithCheck.Trim().Replace("'", "''"))}',AddWithNoCheck='{HttpUtility.UrlEncode(addWithNoCheck.Trim().Replace("'", "''"))}',{columnId},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{tableId},{projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetConstraintRulesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ConstraintRulesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetAll>> GetCountryGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByAbbreviationsToExcel(string Abbreviation, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyabbreviations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyabbreviations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByAbbreviationsToCSV(string Abbreviation, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyabbreviations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyabbreviations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByAbbreviations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByAbbreviation>> GetCountryGetByAbbreviations(string abbreviation = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByAbbreviationsFunc(Abbreviation='{HttpUtility.UrlEncode(abbreviation.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByAbbreviations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByAbbreviation>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByAreasToExcel(string Area, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyareas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyareas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByAreasToCSV(string Area, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyareas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyareas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByAreas(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByArea>> GetCountryGetByAreas(string area = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByAreasFunc(Area='{HttpUtility.UrlEncode(area.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByAreas(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByArea>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByBarcodesToExcel(string Barcode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbybarcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbybarcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByBarcodesToCSV(string Barcode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbybarcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbybarcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByBarcodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByBarcode>> GetCountryGetByBarcodes(string barcode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByBarcodesFunc(Barcode='{HttpUtility.UrlEncode(barcode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByBarcodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByBarcode>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCallingCodesToExcel(string CallingCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycallingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycallingcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCallingCodesToCSV(string CallingCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycallingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycallingcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByCallingCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCallingCode>> GetCountryGetByCallingCodes(string callingCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByCallingCodesFunc(CallingCode='{HttpUtility.UrlEncode(callingCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByCallingCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCallingCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCitiesToExcel(string City, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCitiesToCSV(string City, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByCities(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCity>> GetCountryGetByCities(string city = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByCitiesFunc(City='{HttpUtility.UrlEncode(city.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByCities(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCity>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByContinentsToExcel(string Continent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycontinents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycontinents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByContinentsToCSV(string Continent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycontinents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycontinents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByContinents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByContinent>> GetCountryGetByContinents(string continent = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByContinentsFunc(Continent='{HttpUtility.UrlEncode(continent.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByContinents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByContinent>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCostLinesToExcel(string CostLine, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycostlines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycostlines/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCostLinesToCSV(string CostLine, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycostlines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycostlines/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByCostLines(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCostLine>> GetCountryGetByCostLines(string costLine = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByCostLinesFunc(CostLine='{HttpUtility.UrlEncode(costLine.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByCostLines(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCostLine>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCurrencyCodesToExcel(string CurrencyCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencycodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencycodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCurrencyCodesToCSV(string CurrencyCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencycodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencycodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByCurrencyCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyCode>> GetCountryGetByCurrencyCodes(string currencyCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByCurrencyCodesFunc(CurrencyCode='{HttpUtility.UrlEncode(currencyCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByCurrencyCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCurrencyNamesToExcel(string CurrencyName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByCurrencyNamesToCSV(string CurrencyName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbycurrencynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbycurrencynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByCurrencyNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyName>> GetCountryGetByCurrencyNames(string currencyName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByCurrencyNamesFunc(CurrencyName='{HttpUtility.UrlEncode(currencyName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByCurrencyNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByCurrencyName>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDefaultLanguageIdsToExcel(int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydefaultlanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydefaultlanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDefaultLanguageIdsToCSV(int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydefaultlanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydefaultlanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByDefaultLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDefaultLanguageId>> GetCountryGetByDefaultLanguageIds(int? defaultLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByDefaultLanguageIdsFunc({defaultLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByDefaultLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDefaultLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDensitiesToExcel(string Density, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydensities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydensities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDensitiesToCSV(string Density, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydensities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydensities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByDensities(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDensity>> GetCountryGetByDensities(string density = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByDensitiesFunc(Density='{HttpUtility.UrlEncode(density.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByDensities(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDensity>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDishesToExcel(string Dish, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydishes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydishes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDishesToCSV(string Dish, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydishes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydishes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByDishes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDish>> GetCountryGetByDishes(string dish = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByDishesFunc(Dish='{HttpUtility.UrlEncode(dish.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByDishes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDish>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDomainTldsToExcel(string DomainTld, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydomaintlds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydomaintlds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByDomainTldsToCSV(string DomainTld, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbydomaintlds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbydomaintlds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByDomainTlds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDomainTld>> GetCountryGetByDomainTlds(string domainTld = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByDomainTldsFunc(DomainTld='{HttpUtility.UrlEncode(domainTld.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByDomainTlds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByDomainTld>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByEastsToExcel(string East, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyeasts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyeasts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByEastsToCSV(string East, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyeasts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyeasts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByEasts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByEast>> GetCountryGetByEasts(string east = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByEastsFunc(East='{HttpUtility.UrlEncode(east.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByEasts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByEast>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByElevationsToExcel(string Elevation, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyelevations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyelevations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByElevationsToCSV(string Elevation, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyelevations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyelevations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByElevations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByElevation>> GetCountryGetByElevations(string elevation = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByElevationsFunc(Elevation='{HttpUtility.UrlEncode(elevation.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByElevations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByElevation>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByExpectanciesToExcel(string Expectancy, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyexpectancies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyexpectancies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByExpectanciesToCSV(string Expectancy, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyexpectancies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyexpectancies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByExpectancies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByExpectancy>> GetCountryGetByExpectancies(string expectancy = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByExpectanciesFunc(Expectancy='{HttpUtility.UrlEncode(expectancy.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByExpectancies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByExpectancy>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByFlagBase64SToExcel(string FlagBase64, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyflagbase64s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyflagbase64s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByFlagBase64SToCSV(string FlagBase64, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyflagbase64s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyflagbase64s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByFlagBase64S(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByFlagBase64>> GetCountryGetByFlagBase64S(string flagBase64 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByFlagBase64SFunc(FlagBase64='{HttpUtility.UrlEncode(flagBase64.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByFlagBase64S(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByFlagBase64>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByGovernmentsToExcel(string Government, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbygovernments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbygovernments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByGovernmentsToCSV(string Government, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbygovernments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbygovernments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByGovernments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByGovernment>> GetCountryGetByGovernments(string government = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByGovernmentsFunc(Government='{HttpUtility.UrlEncode(government.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByGovernments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByGovernment>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByHeightsToExcel(string Height, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyheights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyheights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByHeightsToCSV(string Height, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyheights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyheights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByHeights(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByHeight>> GetCountryGetByHeights(string height = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByHeightsFunc(Height='{HttpUtility.UrlEncode(height.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByHeights(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByHeight>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetById>> GetCountryGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIndependencesToExcel(string Independence, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyindependences/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyindependences/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIndependencesToCSV(string Independence, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyindependences/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyindependences/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByIndependences(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByIndependence>> GetCountryGetByIndependences(string independence = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByIndependencesFunc(Independence='{HttpUtility.UrlEncode(independence.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByIndependences(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByIndependence>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIsosToExcel(string Iso, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyisos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyisos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByIsosToCSV(string Iso, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyisos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyisos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByIsos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByIso>> GetCountryGetByIsos(string iso = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByIsosFunc(Iso='{HttpUtility.UrlEncode(iso.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByIsos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByIso>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLandlockedsToExcel(string Landlocked, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylandlockeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylandlockeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLandlockedsToCSV(string Landlocked, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylandlockeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylandlockeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByLandlockeds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLandlocked>> GetCountryGetByLandlockeds(string landlocked = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByLandlockedsFunc(Landlocked='{HttpUtility.UrlEncode(landlocked.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByLandlockeds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLandlocked>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLanguagesJsonsToExcel(string LanguagesJSON, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylanguagesjsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylanguagesjsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLanguagesJsonsToCSV(string LanguagesJSON, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylanguagesjsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylanguagesjsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByLanguagesJsons(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLanguagesJson>> GetCountryGetByLanguagesJsons(string languagesJson = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByLanguagesJsonsFunc(LanguagesJSON='{HttpUtility.UrlEncode(languagesJson.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByLanguagesJsons(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLanguagesJson>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLocationsToExcel(string Location, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylocations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylocations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByLocationsToCSV(string Location, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbylocations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbylocations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByLocations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLocation>> GetCountryGetByLocations(string location = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByLocationsFunc(Location='{HttpUtility.UrlEncode(location.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByLocations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByLocation>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByName>> GetCountryGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByNorthsToExcel(string North, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynorths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynorths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByNorthsToCSV(string North, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbynorths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbynorths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByNorths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByNorth>> GetCountryGetByNorths(string north = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByNorthsFunc(North='{HttpUtility.UrlEncode(north.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByNorths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByNorth>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByPopulationsToExcel(string Population, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbypopulations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbypopulations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByPopulationsToCSV(string Population, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbypopulations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbypopulations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByPopulations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByPopulation>> GetCountryGetByPopulations(string population = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByPopulationsFunc(Population='{HttpUtility.UrlEncode(population.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByPopulations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByPopulation>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByReligionsToExcel(string Religion, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyreligions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyreligions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByReligionsToCSV(string Religion, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyreligions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyreligions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByReligions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByReligion>> GetCountryGetByReligions(string religion = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByReligionsFunc(Religion='{HttpUtility.UrlEncode(religion.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByReligions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByReligion>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByShortNamesToExcel(string ShortName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyshortnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyshortnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByShortNamesToCSV(string ShortName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbyshortnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbyshortnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByShortNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByShortName>> GetCountryGetByShortNames(string shortName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByShortNamesFunc(ShortName='{HttpUtility.UrlEncode(shortName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByShortNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByShortName>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetBySouthsToExcel(string South, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysouths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysouths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetBySouthsToCSV(string South, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysouths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysouths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetBySouths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetBySouth>> GetCountryGetBySouths(string south = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetBySouthsFunc(South='{HttpUtility.UrlEncode(south.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetBySouths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetBySouth>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetBySymbolsToExcel(string Symbol, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysymbols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysymbols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetBySymbolsToCSV(string Symbol, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbysymbols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbysymbols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetBySymbols(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetBySymbol>> GetCountryGetBySymbols(string symbol = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetBySymbolsFunc(Symbol='{HttpUtility.UrlEncode(symbol.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetBySymbols(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetBySymbol>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByTemperaturesToExcel(string Temperature, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbytemperatures/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbytemperatures/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByTemperaturesToCSV(string Temperature, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbytemperatures/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbytemperatures/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByTemperatures(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByTemperature>> GetCountryGetByTemperatures(string temperature = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByTemperaturesFunc(Temperature='{HttpUtility.UrlEncode(temperature.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByTemperatures(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByTemperature>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByWestsToExcel(string West, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbywests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbywests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryGetByWestsToCSV(string West, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrygetbywests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrygetbywests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryGetByWests(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByWest>> GetCountryGetByWests(string west = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryGetByWestsFunc(West='{HttpUtility.UrlEncode(west.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryGetByWests(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryGetByWest>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryInsertsToExcel(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryInsertsToCSV(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryInsert>> GetCountryInserts(string name = default(string), string shortName = default(string), string temperature = default(string), string area = default(string), string religion = default(string), string location = default(string), string population = default(string), string density = default(string), string symbol = default(string), string abbreviation = default(string), string flagBase64 = default(string), string expectancy = default(string), string dish = default(string), string languagesJson = default(string), string landlocked = default(string), string iso = default(string), string independence = default(string), string government = default(string), string north = default(string), string south = default(string), string west = default(string), string east = default(string), string elevation = default(string), string domainTld = default(string), string currencyName = default(string), string currencyCode = default(string), string costLine = default(string), string continent = default(string), string city = default(string), string callingCode = default(string), string barcode = default(string), string height = default(string), int? defaultLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryInsertsFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',ShortName='{HttpUtility.UrlEncode(shortName.Trim().Replace("'", "''"))}',Temperature='{HttpUtility.UrlEncode(temperature.Trim().Replace("'", "''"))}',Area='{HttpUtility.UrlEncode(area.Trim().Replace("'", "''"))}',Religion='{HttpUtility.UrlEncode(religion.Trim().Replace("'", "''"))}',Location='{HttpUtility.UrlEncode(location.Trim().Replace("'", "''"))}',Population='{HttpUtility.UrlEncode(population.Trim().Replace("'", "''"))}',Density='{HttpUtility.UrlEncode(density.Trim().Replace("'", "''"))}',Symbol='{HttpUtility.UrlEncode(symbol.Trim().Replace("'", "''"))}',Abbreviation='{HttpUtility.UrlEncode(abbreviation.Trim().Replace("'", "''"))}',FlagBase64='{HttpUtility.UrlEncode(flagBase64.Trim().Replace("'", "''"))}',Expectancy='{HttpUtility.UrlEncode(expectancy.Trim().Replace("'", "''"))}',Dish='{HttpUtility.UrlEncode(dish.Trim().Replace("'", "''"))}',LanguagesJSON='{HttpUtility.UrlEncode(languagesJson.Trim().Replace("'", "''"))}',Landlocked='{HttpUtility.UrlEncode(landlocked.Trim().Replace("'", "''"))}',Iso='{HttpUtility.UrlEncode(iso.Trim().Replace("'", "''"))}',Independence='{HttpUtility.UrlEncode(independence.Trim().Replace("'", "''"))}',Government='{HttpUtility.UrlEncode(government.Trim().Replace("'", "''"))}',North='{HttpUtility.UrlEncode(north.Trim().Replace("'", "''"))}',South='{HttpUtility.UrlEncode(south.Trim().Replace("'", "''"))}',West='{HttpUtility.UrlEncode(west.Trim().Replace("'", "''"))}',East='{HttpUtility.UrlEncode(east.Trim().Replace("'", "''"))}',Elevation='{HttpUtility.UrlEncode(elevation.Trim().Replace("'", "''"))}',DomainTld='{HttpUtility.UrlEncode(domainTld.Trim().Replace("'", "''"))}',CurrencyName='{HttpUtility.UrlEncode(currencyName.Trim().Replace("'", "''"))}',CurrencyCode='{HttpUtility.UrlEncode(currencyCode.Trim().Replace("'", "''"))}',CostLine='{HttpUtility.UrlEncode(costLine.Trim().Replace("'", "''"))}',Continent='{HttpUtility.UrlEncode(continent.Trim().Replace("'", "''"))}',City='{HttpUtility.UrlEncode(city.Trim().Replace("'", "''"))}',CallingCode='{HttpUtility.UrlEncode(callingCode.Trim().Replace("'", "''"))}',Barcode='{HttpUtility.UrlEncode(barcode.Trim().Replace("'", "''"))}',Height='{HttpUtility.UrlEncode(height.Trim().Replace("'", "''"))}',{defaultLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetAll>> GetCountryLanguagesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByCountryIdsToExcel(int? CountryId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountryids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountryids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByCountryIdsToCSV(int? CountryId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountryids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountryids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesGetByCountryIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryId>> GetCountryLanguagesGetByCountryIds(int? countryId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesGetByCountryIdsFunc({countryId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesGetByCountryIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryId>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByCountryNamesToExcel(string CountryName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountrynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountrynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByCountryNamesToCSV(string CountryName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbycountrynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbycountrynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesGetByCountryNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryName>> GetCountryLanguagesGetByCountryNames(string countryName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesGetByCountryNamesFunc(CountryName='{HttpUtility.UrlEncode(countryName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesGetByCountryNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByCountryName>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetById>> GetCountryLanguagesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByLanguageNamesToExcel(string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbylanguagenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbylanguagenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesGetByLanguageNamesToCSV(string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesgetbylanguagenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesgetbylanguagenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesGetByLanguageNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByLanguageName>> GetCountryLanguagesGetByLanguageNames(string languageName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesGetByLanguageNamesFunc(LanguageName='{HttpUtility.UrlEncode(languageName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesGetByLanguageNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesGetByLanguageName>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesInsertsToExcel(int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesInsertsToCSV(int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesInsert>> GetCountryLanguagesInserts(int? countryId = default(int?), string countryName = default(string), string languageName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesInsertsFunc({countryId},CountryName='{HttpUtility.UrlEncode(countryName.Trim().Replace("'", "''"))}',LanguageName='{HttpUtility.UrlEncode(languageName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesUpdatesToExcel(int? Id, int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryLanguagesUpdatesToCSV(int? Id, int? CountryId, string CountryName, string LanguageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countrylanguagesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countrylanguagesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryLanguagesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesUpdate>> GetCountryLanguagesUpdates(int? id = default(int?), int? countryId = default(int?), string countryName = default(string), string languageName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesUpdatesFunc({id},{countryId},CountryName='{HttpUtility.UrlEncode(countryName.Trim().Replace("'", "''"))}',LanguageName='{HttpUtility.UrlEncode(languageName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryLanguagesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryLanguagesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportCountryUpdatesToExcel(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportCountryUpdatesToCSV(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/countryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/countryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetCountryUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryUpdate>> GetCountryUpdates(int? id = default(int?), string name = default(string), string shortName = default(string), string temperature = default(string), string area = default(string), string religion = default(string), string location = default(string), string population = default(string), string density = default(string), string symbol = default(string), string abbreviation = default(string), string flagBase64 = default(string), string expectancy = default(string), string dish = default(string), string languagesJson = default(string), string landlocked = default(string), string iso = default(string), string independence = default(string), string government = default(string), string north = default(string), string south = default(string), string west = default(string), string east = default(string), string elevation = default(string), string domainTld = default(string), string currencyName = default(string), string currencyCode = default(string), string costLine = default(string), string continent = default(string), string city = default(string), string callingCode = default(string), string barcode = default(string), string height = default(string), int? defaultLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"CountryUpdatesFunc({id},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',ShortName='{HttpUtility.UrlEncode(shortName.Trim().Replace("'", "''"))}',Temperature='{HttpUtility.UrlEncode(temperature.Trim().Replace("'", "''"))}',Area='{HttpUtility.UrlEncode(area.Trim().Replace("'", "''"))}',Religion='{HttpUtility.UrlEncode(religion.Trim().Replace("'", "''"))}',Location='{HttpUtility.UrlEncode(location.Trim().Replace("'", "''"))}',Population='{HttpUtility.UrlEncode(population.Trim().Replace("'", "''"))}',Density='{HttpUtility.UrlEncode(density.Trim().Replace("'", "''"))}',Symbol='{HttpUtility.UrlEncode(symbol.Trim().Replace("'", "''"))}',Abbreviation='{HttpUtility.UrlEncode(abbreviation.Trim().Replace("'", "''"))}',FlagBase64='{HttpUtility.UrlEncode(flagBase64.Trim().Replace("'", "''"))}',Expectancy='{HttpUtility.UrlEncode(expectancy.Trim().Replace("'", "''"))}',Dish='{HttpUtility.UrlEncode(dish.Trim().Replace("'", "''"))}',LanguagesJSON='{HttpUtility.UrlEncode(languagesJson.Trim().Replace("'", "''"))}',Landlocked='{HttpUtility.UrlEncode(landlocked.Trim().Replace("'", "''"))}',Iso='{HttpUtility.UrlEncode(iso.Trim().Replace("'", "''"))}',Independence='{HttpUtility.UrlEncode(independence.Trim().Replace("'", "''"))}',Government='{HttpUtility.UrlEncode(government.Trim().Replace("'", "''"))}',North='{HttpUtility.UrlEncode(north.Trim().Replace("'", "''"))}',South='{HttpUtility.UrlEncode(south.Trim().Replace("'", "''"))}',West='{HttpUtility.UrlEncode(west.Trim().Replace("'", "''"))}',East='{HttpUtility.UrlEncode(east.Trim().Replace("'", "''"))}',Elevation='{HttpUtility.UrlEncode(elevation.Trim().Replace("'", "''"))}',DomainTld='{HttpUtility.UrlEncode(domainTld.Trim().Replace("'", "''"))}',CurrencyName='{HttpUtility.UrlEncode(currencyName.Trim().Replace("'", "''"))}',CurrencyCode='{HttpUtility.UrlEncode(currencyCode.Trim().Replace("'", "''"))}',CostLine='{HttpUtility.UrlEncode(costLine.Trim().Replace("'", "''"))}',Continent='{HttpUtility.UrlEncode(continent.Trim().Replace("'", "''"))}',City='{HttpUtility.UrlEncode(city.Trim().Replace("'", "''"))}',CallingCode='{HttpUtility.UrlEncode(callingCode.Trim().Replace("'", "''"))}',Barcode='{HttpUtility.UrlEncode(barcode.Trim().Replace("'", "''"))}',Height='{HttpUtility.UrlEncode(height.Trim().Replace("'", "''"))}',{defaultLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetCountryUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.CountryUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignSchemesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesGetAll>> GetDesignSchemesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignSchemesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyBackgroundsToExcel(string colors_body_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodybackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodybackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyBackgroundsToCSV(string colors_body_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodybackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodybackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsBodyBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyBackground>> GetDesignschemesgetbycolorsBodyBackgrounds(string colorsBodyBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsBodyBackgroundsFunc(colors_body_background='{HttpUtility.UrlEncode(colorsBodyBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsBodyBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontsToExcel(string colors_body_font, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfonts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfonts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontsToCSV(string colors_body_font, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfonts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfonts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsBodyFonts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFont>> GetDesignschemesgetbycolorsBodyFonts(string colorsBodyFont = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsBodyFontsFunc(colors_body_font='{HttpUtility.UrlEncode(colorsBodyFont.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsBodyFonts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFont>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontColorsToExcel(string colors_body_font_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontcolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontcolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontColorsToCSV(string colors_body_font_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontcolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontcolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsBodyFontColors(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontColor>> GetDesignschemesgetbycolorsBodyFontColors(string colorsBodyFontColor = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsBodyFontColorsFunc(colors_body_font_color='{HttpUtility.UrlEncode(colorsBodyFontColor.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsBodyFontColors(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontColor>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontSizesToExcel(int? colors_body_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsBodyFontSizesToCSV(int? colors_body_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsbodyfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsbodyfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsBodyFontSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontSize>> GetDesignschemesgetbycolorsBodyFontSizes(int? colorsBodyFontSize = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsBodyFontSizesFunc({colorsBodyFontSize})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsBodyFontSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsBodyFontSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1BrightnessesToExcel(decimal? colors_color1_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1BrightnessesToCSV(decimal? colors_color1_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor1Brightnesses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Brightness>> GetDesignschemesgetbycolorsColor1Brightnesses(decimal? colorsColor1Brightness = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor1BrightnessesFunc({colorsColor1Brightness})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor1Brightnesses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Brightness>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1IsdarksToExcel(string colors_color1_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1IsdarksToCSV(string colors_color1_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor1Isdarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Isdark>> GetDesignschemesgetbycolorsColor1Isdarks(string colorsColor1IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor1IsdarksFunc(colors_color1_isDark='{HttpUtility.UrlEncode(colorsColor1IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor1Isdarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Isdark>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1RgbsToExcel(int? colors_color1_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor1RgbsToCSV(int? colors_color1_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor1rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor1rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor1Rgbs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Rgb>> GetDesignschemesgetbycolorsColor1Rgbs(int? colorsColor1Rgb = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor1RgbsFunc({colorsColor1Rgb})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor1Rgbs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor1Rgb>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2BrightnessesToExcel(decimal? colors_color2_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2BrightnessesToCSV(decimal? colors_color2_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor2Brightnesses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Brightness>> GetDesignschemesgetbycolorsColor2Brightnesses(decimal? colorsColor2Brightness = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor2BrightnessesFunc({colorsColor2Brightness})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor2Brightnesses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Brightness>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2HexesToExcel(int? colors_color2_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2HexesToCSV(int? colors_color2_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor2Hexes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Hex>> GetDesignschemesgetbycolorsColor2Hexes(int? colorsColor2Hex = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor2HexesFunc({colorsColor2Hex})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor2Hexes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Hex>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2IsdarksToExcel(string colors_color2_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2IsdarksToCSV(string colors_color2_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor2Isdarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Isdark>> GetDesignschemesgetbycolorsColor2Isdarks(string colorsColor2IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor2IsdarksFunc(colors_color2_isDark='{HttpUtility.UrlEncode(colorsColor2IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor2Isdarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Isdark>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2RgbsToExcel(int? colors_color2_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor2RgbsToCSV(int? colors_color2_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor2rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor2rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor2Rgbs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Rgb>> GetDesignschemesgetbycolorsColor2Rgbs(int? colorsColor2Rgb = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor2RgbsFunc({colorsColor2Rgb})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor2Rgbs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor2Rgb>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3BrightnessesToExcel(decimal? colors_color3_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3BrightnessesToCSV(decimal? colors_color3_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor3Brightnesses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Brightness>> GetDesignschemesgetbycolorsColor3Brightnesses(decimal? colorsColor3Brightness = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor3BrightnessesFunc({colorsColor3Brightness})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor3Brightnesses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Brightness>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3HexesToExcel(int? colors_color3_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3HexesToCSV(int? colors_color3_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor3Hexes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Hex>> GetDesignschemesgetbycolorsColor3Hexes(int? colorsColor3Hex = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor3HexesFunc({colorsColor3Hex})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor3Hexes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Hex>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3IsdarksToExcel(string colors_color3_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3IsdarksToCSV(string colors_color3_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor3Isdarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Isdark>> GetDesignschemesgetbycolorsColor3Isdarks(string colorsColor3IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor3IsdarksFunc(colors_color3_isDark='{HttpUtility.UrlEncode(colorsColor3IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor3Isdarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Isdark>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3RgbsToExcel(int? colors_color3_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor3RgbsToCSV(int? colors_color3_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor3rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor3rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor3Rgbs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Rgb>> GetDesignschemesgetbycolorsColor3Rgbs(int? colorsColor3Rgb = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor3RgbsFunc({colorsColor3Rgb})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor3Rgbs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor3Rgb>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4BrightnessesToExcel(decimal? colors_color4_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4BrightnessesToCSV(decimal? colors_color4_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor4Brightnesses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Brightness>> GetDesignschemesgetbycolorsColor4Brightnesses(decimal? colorsColor4Brightness = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor4BrightnessesFunc({colorsColor4Brightness})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor4Brightnesses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Brightness>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4HexesToExcel(int? colors_color4_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4HexesToCSV(int? colors_color4_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor4Hexes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Hex>> GetDesignschemesgetbycolorsColor4Hexes(int? colorsColor4Hex = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor4HexesFunc({colorsColor4Hex})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor4Hexes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Hex>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4IsdarksToExcel(string colors_color4_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4IsdarksToCSV(string colors_color4_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor4Isdarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Isdark>> GetDesignschemesgetbycolorsColor4Isdarks(string colorsColor4IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor4IsdarksFunc(colors_color4_isDark='{HttpUtility.UrlEncode(colorsColor4IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor4Isdarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Isdark>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4RgbsToExcel(int? colors_color4_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor4RgbsToCSV(int? colors_color4_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor4rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor4rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor4Rgbs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Rgb>> GetDesignschemesgetbycolorsColor4Rgbs(int? colorsColor4Rgb = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor4RgbsFunc({colorsColor4Rgb})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor4Rgbs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor4Rgb>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5BrightnessesToExcel(decimal? colors_color5_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5brightnesses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5BrightnessesToCSV(decimal? colors_color5_brightness, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5brightnesses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor5Brightnesses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Brightness>> GetDesignschemesgetbycolorsColor5Brightnesses(decimal? colorsColor5Brightness = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor5BrightnessesFunc({colorsColor5Brightness})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor5Brightnesses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Brightness>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5HexesToExcel(int? colors_color5_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5hexes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5HexesToCSV(int? colors_color5_hex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5hexes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor5Hexes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Hex>> GetDesignschemesgetbycolorsColor5Hexes(int? colorsColor5Hex = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor5HexesFunc({colorsColor5Hex})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor5Hexes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Hex>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5IsdarksToExcel(string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5isdarks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5IsdarksToCSV(string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5isdarks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor5Isdarks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Isdark>> GetDesignschemesgetbycolorsColor5Isdarks(string colorsColor5IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor5IsdarksFunc(colors_color5_isDark='{HttpUtility.UrlEncode(colorsColor5IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor5Isdarks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Isdark>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5RgbsToExcel(int? colors_color5_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5rgbs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsColor5RgbsToCSV(int? colors_color5_rgb, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscolor5rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscolor5rgbs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsColor5Rgbs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Rgb>> GetDesignschemesgetbycolorsColor5Rgbs(int? colorsColor5Rgb = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsColor5RgbsFunc({colorsColor5Rgb})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsColor5Rgbs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsColor5Rgb>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentBackgroundsToExcel(string colors_content_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentBackgroundsToCSV(string colors_content_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsContentBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBackground>> GetDesignschemesgetbycolorsContentBackgrounds(string colorsContentBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsContentBackgroundsFunc(colors_content_background='{HttpUtility.UrlEncode(colorsContentBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsContentBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentBorderColorsToExcel(string colors_content_border_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbordercolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbordercolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentBorderColorsToCSV(string colors_content_border_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentbordercolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentbordercolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsContentBorderColors(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBorderColor>> GetDesignschemesgetbycolorsContentBorderColors(string colorsContentBorderColor = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsContentBorderColorsFunc(colors_content_border_color='{HttpUtility.UrlEncode(colorsContentBorderColor.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsContentBorderColors(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentBorderColor>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentMarginsToExcel(string colors_content_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentmargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentmargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentMarginsToCSV(string colors_content_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentmargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentmargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsContentMargins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentMargin>> GetDesignschemesgetbycolorsContentMargins(string colorsContentMargin = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsContentMarginsFunc(colors_content_margin='{HttpUtility.UrlEncode(colorsContentMargin.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsContentMargins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentMargin>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentPaddingsToExcel(string colors_content_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentPaddingsToCSV(string colors_content_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontentpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontentpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsContentPaddings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentPadding>> GetDesignschemesgetbycolorsContentPaddings(string colorsContentPadding = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsContentPaddingsFunc(colors_content_padding='{HttpUtility.UrlEncode(colorsContentPadding.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsContentPaddings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentPadding>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentTextColorsToExcel(string colors_content_text_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontenttextcolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontenttextcolors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsContentTextColorsToCSV(string colors_content_text_color, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorscontenttextcolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorscontenttextcolors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsContentTextColors(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentTextColor>> GetDesignschemesgetbycolorsContentTextColors(string colorsContentTextColor = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsContentTextColorsFunc(colors_content_text_color='{HttpUtility.UrlEncode(colorsContentTextColor.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsContentTextColors(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsContentTextColor>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterBackgroundsToExcel(string colors_footer_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterBackgroundsToCSV(string colors_footer_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsFooterBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterBackground>> GetDesignschemesgetbycolorsFooterBackgrounds(string colorsFooterBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsFooterBackgroundsFunc(colors_footer_background='{HttpUtility.UrlEncode(colorsFooterBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsFooterBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterFontSizesToExcel(int? colors_footer_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterFontSizesToCSV(int? colors_footer_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsFooterFontSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterFontSize>> GetDesignschemesgetbycolorsFooterFontSizes(int? colorsFooterFontSize = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsFooterFontSizesFunc({colorsFooterFontSize})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsFooterFontSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterFontSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterMarginsToExcel(string colors_footer_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfootermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfootermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterMarginsToCSV(string colors_footer_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfootermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfootermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsFooterMargins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterMargin>> GetDesignschemesgetbycolorsFooterMargins(string colorsFooterMargin = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsFooterMarginsFunc(colors_footer_margin='{HttpUtility.UrlEncode(colorsFooterMargin.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsFooterMargins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterMargin>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterPaddingsToExcel(string colors_footer_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsFooterPaddingsToCSV(string colors_footer_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsfooterpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsfooterpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsFooterPaddings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterPadding>> GetDesignschemesgetbycolorsFooterPaddings(string colorsFooterPadding = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsFooterPaddingsFunc(colors_footer_padding='{HttpUtility.UrlEncode(colorsFooterPadding.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsFooterPaddings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsFooterPadding>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsGroupsToExcel(string colors_group, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsgroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsGroupsToCSV(string colors_group, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsgroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsGroup>> GetDesignschemesgetbycolorsGroups(string colorsGroup = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsGroupsFunc(colors_group='{HttpUtility.UrlEncode(colorsGroup.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderBackgroundsToExcel(string colors_header_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderBackgroundsToCSV(string colors_header_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsHeaderBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderBackground>> GetDesignschemesgetbycolorsHeaderBackgrounds(string colorsHeaderBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsHeaderBackgroundsFunc(colors_header_background='{HttpUtility.UrlEncode(colorsHeaderBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsHeaderBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderFontSizesToExcel(int? colors_header_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderFontSizesToCSV(int? colors_header_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsHeaderFontSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderFontSize>> GetDesignschemesgetbycolorsHeaderFontSizes(int? colorsHeaderFontSize = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsHeaderFontSizesFunc({colorsHeaderFontSize})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsHeaderFontSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderFontSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderMarginsToExcel(string colors_header_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheadermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheadermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderMarginsToCSV(string colors_header_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheadermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheadermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsHeaderMargins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderMargin>> GetDesignschemesgetbycolorsHeaderMargins(string colorsHeaderMargin = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsHeaderMarginsFunc(colors_header_margin='{HttpUtility.UrlEncode(colorsHeaderMargin.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsHeaderMargins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderMargin>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderPaddingsToExcel(string colors_header_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsHeaderPaddingsToCSV(string colors_header_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsheaderpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsheaderpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsHeaderPaddings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderPadding>> GetDesignschemesgetbycolorsHeaderPaddings(string colorsHeaderPadding = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsHeaderPaddingsFunc(colors_header_padding='{HttpUtility.UrlEncode(colorsHeaderPadding.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsHeaderPaddings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsHeaderPadding>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuBackgroundsToExcel(string colors_menu_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenubackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenubackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuBackgroundsToCSV(string colors_menu_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenubackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenubackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsMenuBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuBackground>> GetDesignschemesgetbycolorsMenuBackgrounds(string colorsMenuBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsMenuBackgroundsFunc(colors_menu_background='{HttpUtility.UrlEncode(colorsMenuBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsMenuBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuFontSizesToExcel(int? colors_menu_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenufontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenufontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuFontSizesToCSV(int? colors_menu_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenufontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenufontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsMenuFontSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuFontSize>> GetDesignschemesgetbycolorsMenuFontSizes(int? colorsMenuFontSize = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsMenuFontSizesFunc({colorsMenuFontSize})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsMenuFontSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuFontSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuMarginsToExcel(string colors_menu_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenumargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenumargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuMarginsToCSV(string colors_menu_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenumargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenumargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsMenuMargins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuMargin>> GetDesignschemesgetbycolorsMenuMargins(string colorsMenuMargin = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsMenuMarginsFunc(colors_menu_margin='{HttpUtility.UrlEncode(colorsMenuMargin.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsMenuMargins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuMargin>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuPaddingsToExcel(string colors_menu_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenupaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenupaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsMenuPaddingsToCSV(string colors_menu_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorsmenupaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorsmenupaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsMenuPaddings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuPadding>> GetDesignschemesgetbycolorsMenuPaddings(string colorsMenuPadding = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsMenuPaddingsFunc(colors_menu_padding='{HttpUtility.UrlEncode(colorsMenuPadding.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsMenuPaddings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsMenuPadding>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperBackgroundsToExcel(string colors_wrapper_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperBackgroundsToCSV(string colors_wrapper_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperbackgrounds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsWrapperBackgrounds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperBackground>> GetDesignschemesgetbycolorsWrapperBackgrounds(string colorsWrapperBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsWrapperBackgroundsFunc(colors_wrapper_background='{HttpUtility.UrlEncode(colorsWrapperBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsWrapperBackgrounds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperBackground>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperFontSizesToExcel(int? colors_wrapper_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperfontsizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperFontSizesToCSV(int? colors_wrapper_font_size, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperfontsizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsWrapperFontSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperFontSize>> GetDesignschemesgetbycolorsWrapperFontSizes(int? colorsWrapperFontSize = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsWrapperFontSizesFunc({colorsWrapperFontSize})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsWrapperFontSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperFontSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperMarginsToExcel(string colors_wrapper_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrappermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrappermargins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperMarginsToCSV(string colors_wrapper_margin, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrappermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrappermargins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsWrapperMargins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperMargin>> GetDesignschemesgetbycolorsWrapperMargins(string colorsWrapperMargin = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsWrapperMarginsFunc(colors_wrapper_margin='{HttpUtility.UrlEncode(colorsWrapperMargin.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsWrapperMargins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperMargin>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperPaddingsToExcel(string colors_wrapper_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperpaddings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperPaddingsToCSV(string colors_wrapper_padding, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperpaddings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsWrapperPaddings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperPadding>> GetDesignschemesgetbycolorsWrapperPaddings(string colorsWrapperPadding = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsWrapperPaddingsFunc(colors_wrapper_padding='{HttpUtility.UrlEncode(colorsWrapperPadding.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsWrapperPaddings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperPadding>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperWidthsToExcel(int? colors_wrapper_width, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperwidths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperwidths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignschemesgetbycolorsWrapperWidthsToCSV(int? colors_wrapper_width, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbycolorswrapperwidths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbycolorswrapperwidths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignschemesgetbycolorsWrapperWidths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperWidth>> GetDesignschemesgetbycolorsWrapperWidths(int? colorsWrapperWidth = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignschemesgetbycolorsWrapperWidthsFunc({colorsWrapperWidth})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignschemesgetbycolorsWrapperWidths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignschemesgetbycolorsWrapperWidth>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesGetByIdsToExcel(string colors_body_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesGetByIdsToCSV(string colors_body_background, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignSchemesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesGetById>> GetDesignSchemesGetByIds(string colorsBodyBackground = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemesGetByIdsFunc(colors_body_background='{HttpUtility.UrlEncode(colorsBodyBackground.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignSchemesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesInsertsToExcel(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesInsertsToCSV(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignSchemesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesInsert>> GetDesignSchemesInserts(string colorsBodyBackground = default(string), string colorsBodyFont = default(string), int? colorsBodyFontSize = default(int?), string colorsBodyFontColor = default(string), string colorsContentTextColor = default(string), string colorsContentBorderColor = default(string), string colorsContentBackground = default(string), string colorsContentPadding = default(string), string colorsContentMargin = default(string), string colorsMenuPadding = default(string), int? colorsMenuFontSize = default(int?), string colorsMenuBackground = default(string), string colorsMenuMargin = default(string), string colorsHeaderPadding = default(string), int? colorsHeaderFontSize = default(int?), string colorsHeaderBackground = default(string), string colorsHeaderMargin = default(string), string colorsFooterPadding = default(string), int? colorsFooterFontSize = default(int?), string colorsFooterBackground = default(string), string colorsFooterMargin = default(string), string colorsWrapperPadding = default(string), int? colorsWrapperFontSize = default(int?), string colorsWrapperBackground = default(string), string colorsWrapperMargin = default(string), string colorsGroup = default(string), int? colorsColor1Rgb = default(int?), decimal? colorsColor1Brightness = default(decimal?), string colorsColor1IsDark = default(string), int? colorsColor2Hex = default(int?), int? colorsColor2Rgb = default(int?), decimal? colorsColor2Brightness = default(decimal?), string colorsColor2IsDark = default(string), int? colorsColor3Hex = default(int?), int? colorsColor3Rgb = default(int?), decimal? colorsColor3Brightness = default(decimal?), string colorsColor3IsDark = default(string), int? colorsColor4Hex = default(int?), int? colorsColor4Rgb = default(int?), decimal? colorsColor4Brightness = default(decimal?), string colorsColor4IsDark = default(string), int? colorsColor5Hex = default(int?), int? colorsColor5Rgb = default(int?), decimal? colorsColor5Brightness = default(decimal?), string colorsColor5IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemesInsertsFunc(colors_body_background='{HttpUtility.UrlEncode(colorsBodyBackground.Trim().Replace("'", "''"))}',colors_body_font='{HttpUtility.UrlEncode(colorsBodyFont.Trim().Replace("'", "''"))}',{colorsBodyFontSize},colors_body_font_color='{HttpUtility.UrlEncode(colorsBodyFontColor.Trim().Replace("'", "''"))}',colors_content_text_color='{HttpUtility.UrlEncode(colorsContentTextColor.Trim().Replace("'", "''"))}',colors_content_border_color='{HttpUtility.UrlEncode(colorsContentBorderColor.Trim().Replace("'", "''"))}',colors_content_background='{HttpUtility.UrlEncode(colorsContentBackground.Trim().Replace("'", "''"))}',colors_content_padding='{HttpUtility.UrlEncode(colorsContentPadding.Trim().Replace("'", "''"))}',colors_content_margin='{HttpUtility.UrlEncode(colorsContentMargin.Trim().Replace("'", "''"))}',colors_menu_padding='{HttpUtility.UrlEncode(colorsMenuPadding.Trim().Replace("'", "''"))}',{colorsMenuFontSize},colors_menu_background='{HttpUtility.UrlEncode(colorsMenuBackground.Trim().Replace("'", "''"))}',colors_menu_margin='{HttpUtility.UrlEncode(colorsMenuMargin.Trim().Replace("'", "''"))}',colors_header_padding='{HttpUtility.UrlEncode(colorsHeaderPadding.Trim().Replace("'", "''"))}',{colorsHeaderFontSize},colors_header_background='{HttpUtility.UrlEncode(colorsHeaderBackground.Trim().Replace("'", "''"))}',colors_header_margin='{HttpUtility.UrlEncode(colorsHeaderMargin.Trim().Replace("'", "''"))}',colors_footer_padding='{HttpUtility.UrlEncode(colorsFooterPadding.Trim().Replace("'", "''"))}',{colorsFooterFontSize},colors_footer_background='{HttpUtility.UrlEncode(colorsFooterBackground.Trim().Replace("'", "''"))}',colors_footer_margin='{HttpUtility.UrlEncode(colorsFooterMargin.Trim().Replace("'", "''"))}',colors_wrapper_padding='{HttpUtility.UrlEncode(colorsWrapperPadding.Trim().Replace("'", "''"))}',{colorsWrapperFontSize},colors_wrapper_background='{HttpUtility.UrlEncode(colorsWrapperBackground.Trim().Replace("'", "''"))}',colors_wrapper_margin='{HttpUtility.UrlEncode(colorsWrapperMargin.Trim().Replace("'", "''"))}',colors_group='{HttpUtility.UrlEncode(colorsGroup.Trim().Replace("'", "''"))}',{colorsColor1Rgb},{colorsColor1Brightness},colors_color1_isDark='{HttpUtility.UrlEncode(colorsColor1IsDark.Trim().Replace("'", "''"))}',{colorsColor2Hex},{colorsColor2Rgb},{colorsColor2Brightness},colors_color2_isDark='{HttpUtility.UrlEncode(colorsColor2IsDark.Trim().Replace("'", "''"))}',{colorsColor3Hex},{colorsColor3Rgb},{colorsColor3Brightness},colors_color3_isDark='{HttpUtility.UrlEncode(colorsColor3IsDark.Trim().Replace("'", "''"))}',{colorsColor4Hex},{colorsColor4Rgb},{colorsColor4Brightness},colors_color4_isDark='{HttpUtility.UrlEncode(colorsColor4IsDark.Trim().Replace("'", "''"))}',{colorsColor5Hex},{colorsColor5Rgb},{colorsColor5Brightness},colors_color5_isDark='{HttpUtility.UrlEncode(colorsColor5IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignSchemesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesUpdatesToExcel(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, int? colors_wrapper_width, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDesignSchemesUpdatesToCSV(string colors_body_background, string colors_body_font, int? colors_body_font_size, string colors_body_font_color, string colors_content_text_color, string colors_content_border_color, string colors_content_background, string colors_content_padding, string colors_content_margin, string colors_menu_padding, int? colors_menu_font_size, string colors_menu_background, string colors_menu_margin, string colors_header_padding, int? colors_header_font_size, string colors_header_background, string colors_header_margin, string colors_footer_padding, int? colors_footer_font_size, string colors_footer_background, string colors_footer_margin, string colors_wrapper_padding, int? colors_wrapper_font_size, string colors_wrapper_background, string colors_wrapper_margin, int? colors_wrapper_width, string colors_group, int? colors_color1_rgb, decimal? colors_color1_brightness, string colors_color1_isDark, int? colors_color2_hex, int? colors_color2_rgb, decimal? colors_color2_brightness, string colors_color2_isDark, int? colors_color3_hex, int? colors_color3_rgb, decimal? colors_color3_brightness, string colors_color3_isDark, int? colors_color4_hex, int? colors_color4_rgb, decimal? colors_color4_brightness, string colors_color4_isDark, int? colors_color5_hex, int? colors_color5_rgb, decimal? colors_color5_brightness, string colors_color5_isDark, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/designschemesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/designschemesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDesignSchemesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesUpdate>> GetDesignSchemesUpdates(string colorsBodyBackground = default(string), string colorsBodyFont = default(string), int? colorsBodyFontSize = default(int?), string colorsBodyFontColor = default(string), string colorsContentTextColor = default(string), string colorsContentBorderColor = default(string), string colorsContentBackground = default(string), string colorsContentPadding = default(string), string colorsContentMargin = default(string), string colorsMenuPadding = default(string), int? colorsMenuFontSize = default(int?), string colorsMenuBackground = default(string), string colorsMenuMargin = default(string), string colorsHeaderPadding = default(string), int? colorsHeaderFontSize = default(int?), string colorsHeaderBackground = default(string), string colorsHeaderMargin = default(string), string colorsFooterPadding = default(string), int? colorsFooterFontSize = default(int?), string colorsFooterBackground = default(string), string colorsFooterMargin = default(string), string colorsWrapperPadding = default(string), int? colorsWrapperFontSize = default(int?), string colorsWrapperBackground = default(string), string colorsWrapperMargin = default(string), int? colorsWrapperWidth = default(int?), string colorsGroup = default(string), int? colorsColor1Rgb = default(int?), decimal? colorsColor1Brightness = default(decimal?), string colorsColor1IsDark = default(string), int? colorsColor2Hex = default(int?), int? colorsColor2Rgb = default(int?), decimal? colorsColor2Brightness = default(decimal?), string colorsColor2IsDark = default(string), int? colorsColor3Hex = default(int?), int? colorsColor3Rgb = default(int?), decimal? colorsColor3Brightness = default(decimal?), string colorsColor3IsDark = default(string), int? colorsColor4Hex = default(int?), int? colorsColor4Rgb = default(int?), decimal? colorsColor4Brightness = default(decimal?), string colorsColor4IsDark = default(string), int? colorsColor5Hex = default(int?), int? colorsColor5Rgb = default(int?), decimal? colorsColor5Brightness = default(decimal?), string colorsColor5IsDark = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemesUpdatesFunc(colors_body_background='{HttpUtility.UrlEncode(colorsBodyBackground.Trim().Replace("'", "''"))}',colors_body_font='{HttpUtility.UrlEncode(colorsBodyFont.Trim().Replace("'", "''"))}',{colorsBodyFontSize},colors_body_font_color='{HttpUtility.UrlEncode(colorsBodyFontColor.Trim().Replace("'", "''"))}',colors_content_text_color='{HttpUtility.UrlEncode(colorsContentTextColor.Trim().Replace("'", "''"))}',colors_content_border_color='{HttpUtility.UrlEncode(colorsContentBorderColor.Trim().Replace("'", "''"))}',colors_content_background='{HttpUtility.UrlEncode(colorsContentBackground.Trim().Replace("'", "''"))}',colors_content_padding='{HttpUtility.UrlEncode(colorsContentPadding.Trim().Replace("'", "''"))}',colors_content_margin='{HttpUtility.UrlEncode(colorsContentMargin.Trim().Replace("'", "''"))}',colors_menu_padding='{HttpUtility.UrlEncode(colorsMenuPadding.Trim().Replace("'", "''"))}',{colorsMenuFontSize},colors_menu_background='{HttpUtility.UrlEncode(colorsMenuBackground.Trim().Replace("'", "''"))}',colors_menu_margin='{HttpUtility.UrlEncode(colorsMenuMargin.Trim().Replace("'", "''"))}',colors_header_padding='{HttpUtility.UrlEncode(colorsHeaderPadding.Trim().Replace("'", "''"))}',{colorsHeaderFontSize},colors_header_background='{HttpUtility.UrlEncode(colorsHeaderBackground.Trim().Replace("'", "''"))}',colors_header_margin='{HttpUtility.UrlEncode(colorsHeaderMargin.Trim().Replace("'", "''"))}',colors_footer_padding='{HttpUtility.UrlEncode(colorsFooterPadding.Trim().Replace("'", "''"))}',{colorsFooterFontSize},colors_footer_background='{HttpUtility.UrlEncode(colorsFooterBackground.Trim().Replace("'", "''"))}',colors_footer_margin='{HttpUtility.UrlEncode(colorsFooterMargin.Trim().Replace("'", "''"))}',colors_wrapper_padding='{HttpUtility.UrlEncode(colorsWrapperPadding.Trim().Replace("'", "''"))}',{colorsWrapperFontSize},colors_wrapper_background='{HttpUtility.UrlEncode(colorsWrapperBackground.Trim().Replace("'", "''"))}',colors_wrapper_margin='{HttpUtility.UrlEncode(colorsWrapperMargin.Trim().Replace("'", "''"))}',{colorsWrapperWidth},colors_group='{HttpUtility.UrlEncode(colorsGroup.Trim().Replace("'", "''"))}',{colorsColor1Rgb},{colorsColor1Brightness},colors_color1_isDark='{HttpUtility.UrlEncode(colorsColor1IsDark.Trim().Replace("'", "''"))}',{colorsColor2Hex},{colorsColor2Rgb},{colorsColor2Brightness},colors_color2_isDark='{HttpUtility.UrlEncode(colorsColor2IsDark.Trim().Replace("'", "''"))}',{colorsColor3Hex},{colorsColor3Rgb},{colorsColor3Brightness},colors_color3_isDark='{HttpUtility.UrlEncode(colorsColor3IsDark.Trim().Replace("'", "''"))}',{colorsColor4Hex},{colorsColor4Rgb},{colorsColor4Brightness},colors_color4_isDark='{HttpUtility.UrlEncode(colorsColor4IsDark.Trim().Replace("'", "''"))}',{colorsColor5Hex},{colorsColor5Rgb},{colorsColor5Brightness},colors_color5_isDark='{HttpUtility.UrlEncode(colorsColor5IsDark.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDesignSchemesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DesignSchemesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroupsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetAll>> GetDeviceGroupsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroupsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetById>> GetDeviceGroupsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroupsGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetByName>> GetDeviceGroupsGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupsGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsInsertsToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsInsertsToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroupsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsInsert>> GetDeviceGroupsInserts(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsInsertsFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsUpdatesToExcel(int? Id, string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDeviceGroupsUpdatesToCSV(int? Id, string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicegroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicegroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDeviceGroupsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsUpdate>> GetDeviceGroupsUpdates(int? id = default(int?), string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsUpdatesFunc({id},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDeviceGroupsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DeviceGroupsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetAll>> GetDevicesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByBrandsToExcel(string Brand, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbybrands/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbybrands/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByBrandsToCSV(string Brand, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbybrands/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbybrands/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByBrands(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByBrand>> GetDevicesGetByBrands(string brand = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByBrandsFunc(Brand='{HttpUtility.UrlEncode(brand.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByBrands(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByBrand>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByDeviceGroupIdsToExcel(int? DeviceGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicegroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicegroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByDeviceGroupIdsToCSV(int? DeviceGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicegroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicegroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByDeviceGroupIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceGroupId>> GetDevicesGetByDeviceGroupIds(int? deviceGroupId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByDeviceGroupIdsFunc({deviceGroupId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByDeviceGroupIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceGroupId>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByDeviceNamesToExcel(string DeviceName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByDeviceNamesToCSV(string DeviceName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbydevicenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbydevicenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByDeviceNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceName>> GetDevicesGetByDeviceNames(string deviceName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByDeviceNamesFunc(DeviceName='{HttpUtility.UrlEncode(deviceName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByDeviceNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByDeviceName>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByHeightsToExcel(int? Height, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyheights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyheights/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByHeightsToCSV(int? Height, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyheights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyheights/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByHeights(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByHeight>> GetDevicesGetByHeights(int? height = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByHeightsFunc({height})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByHeights(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByHeight>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetById>> GetDevicesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByImgsToExcel(string Img, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyimgs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyimgs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByImgsToCSV(string Img, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyimgs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyimgs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByImgs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByImg>> GetDevicesGetByImgs(string img = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByImgsFunc(Img='{HttpUtility.UrlEncode(img.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByImgs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByImg>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByIsLandScapesToExcel(bool? IsLandScape, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyislandscapes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyislandscapes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByIsLandScapesToCSV(bool? IsLandScape, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyislandscapes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyislandscapes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByIsLandScapes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByIsLandScape>> GetDevicesGetByIsLandScapes(bool? isLandScape = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByIsLandScapesFunc(IsLandScape={isLandScape?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByIsLandScapes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByIsLandScape>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation1xesToExcel(string Resulation1x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation1xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation1xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation1xesToCSV(string Resulation1x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation1xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation1xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByResulation1xes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation1x>> GetDevicesGetByResulation1xes(string resulation1x = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByResulation1xesFunc(Resulation1x='{HttpUtility.UrlEncode(resulation1x.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByResulation1xes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation1x>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation2xesToExcel(string Resulation2x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation2xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation2xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation2xesToCSV(string Resulation2x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation2xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation2xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByResulation2xes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation2x>> GetDevicesGetByResulation2xes(string resulation2x = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByResulation2xesFunc(Resulation2x='{HttpUtility.UrlEncode(resulation2x.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByResulation2xes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation2x>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation3xesToExcel(string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation3xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation3xes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByResulation3xesToCSV(string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbyresulation3xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbyresulation3xes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByResulation3xes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation3x>> GetDevicesGetByResulation3xes(string resulation3x = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByResulation3xesFunc(Resulation3x='{HttpUtility.UrlEncode(resulation3x.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByResulation3xes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByResulation3x>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByWidthsToExcel(int? Width, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbywidths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbywidths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesGetByWidthsToCSV(int? Width, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesgetbywidths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesgetbywidths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesGetByWidths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByWidth>> GetDevicesGetByWidths(int? width = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesGetByWidthsFunc({width})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesGetByWidths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesGetByWidth>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesInsertsToExcel(string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesInsertsToCSV(string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesInsert>> GetDevicesInserts(string deviceName = default(string), int? deviceGroupId = default(int?), int? width = default(int?), int? height = default(int?), string brand = default(string), string img = default(string), bool? isLandScape = default(bool?), string resulation1x = default(string), string resulation2x = default(string), string resulation3x = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesInsertsFunc(DeviceName='{HttpUtility.UrlEncode(deviceName.Trim().Replace("'", "''"))}',{deviceGroupId},{width},{height},Brand='{HttpUtility.UrlEncode(brand.Trim().Replace("'", "''"))}',Img='{HttpUtility.UrlEncode(img.Trim().Replace("'", "''"))}',IsLandScape={isLandScape?.ToString().ToLower()},Resulation1x='{HttpUtility.UrlEncode(resulation1x.Trim().Replace("'", "''"))}',Resulation2x='{HttpUtility.UrlEncode(resulation2x.Trim().Replace("'", "''"))}',Resulation3x='{HttpUtility.UrlEncode(resulation3x.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportDevicesUpdatesToExcel(int? Id, string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDevicesUpdatesToCSV(int? Id, string DeviceName, int? DeviceGroupId, int? Width, int? Height, string Brand, string Img, bool? IsLandScape, string Resulation1x, string Resulation2x, string Resulation3x, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/devicesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/devicesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDevicesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesUpdate>> GetDevicesUpdates(int? id = default(int?), string deviceName = default(string), int? deviceGroupId = default(int?), int? width = default(int?), int? height = default(int?), string brand = default(string), string img = default(string), bool? isLandScape = default(bool?), string resulation1x = default(string), string resulation2x = default(string), string resulation3x = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DevicesUpdatesFunc({id},DeviceName='{HttpUtility.UrlEncode(deviceName.Trim().Replace("'", "''"))}',{deviceGroupId},{width},{height},Brand='{HttpUtility.UrlEncode(brand.Trim().Replace("'", "''"))}',Img='{HttpUtility.UrlEncode(img.Trim().Replace("'", "''"))}',IsLandScape={isLandScape?.ToString().ToLower()},Resulation1x='{HttpUtility.UrlEncode(resulation1x.Trim().Replace("'", "''"))}',Resulation2x='{HttpUtility.UrlEncode(resulation2x.Trim().Replace("'", "''"))}',Resulation3x='{HttpUtility.UrlEncode(resulation3x.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDevicesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DevicesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicQueueListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicqueuelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicqueuelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicQueueListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicqueuelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicqueuelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicQueueLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicQueueList>> GetDynamicQueueLists(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicQueueListsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicQueueLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicQueueList>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicSpaceReportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicspacereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicspacereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicSpaceReportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicspacereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicspacereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicSpaceReports(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicSpaceReport>> GetDynamicSpaceReports(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicSpaceReportsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicSpaceReports(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicSpaceReport>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableCountsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablecounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablecounts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableCountsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablecounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablecounts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTableCounts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableCount>> GetDynamicTableCounts(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableCountsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTableCounts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableCount>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableForeignKeysToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictableforeignkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictableforeignkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableForeignKeysToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictableforeignkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictableforeignkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTableForeignKeys(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableForeignKey>> GetDynamicTableForeignKeys(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableForeignKeysFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTableForeignKeys(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableForeignKey>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableReportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablereports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableReportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablereports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTableReports(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableReport>> GetDynamicTableReports(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableReportsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTableReports(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableReport>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableSearchAllsToExcel(string SearchStr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableSearchAllsToCSV(string SearchStr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTableSearchAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableSearchAll>> GetDynamicTableSearchAlls(string searchStr = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableSearchAllsFunc(SearchStr='{HttpUtility.UrlEncode(searchStr.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTableSearchAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableSearchAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableSearchTablesToExcel(string SearchStr, string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchtables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchtables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTableSearchTablesToCSV(string SearchStr, string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictablesearchtables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictablesearchtables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTableSearchTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableSearchTable>> GetDynamicTableSearchTables(string searchStr = default(string), string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableSearchTablesFunc(SearchStr='{HttpUtility.UrlEncode(searchStr.Trim().Replace("'", "''"))}',TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTableSearchTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTableSearchTable>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicTransactionReportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictransactionreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictransactionreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicTransactionReportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamictransactionreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamictransactionreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicTransactionReports(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTransactionReport>> GetDynamicTransactionReports(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTransactionReportsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicTransactionReports(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicTransactionReport>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicViewDtosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewdtos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewdtos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicViewDtosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewdtos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewdtos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicViewDtos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicViewDto>> GetDynamicViewDtos(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicViewDtosFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicViewDtos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicViewDto>>(response);
        }

        public async System.Threading.Tasks.Task ExportDynamicViewReportsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewreports/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportDynamicViewReportsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/dynamicviewreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/dynamicviewreports/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetDynamicViewReports(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicViewReport>> GetDynamicViewReports(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicViewReportsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetDynamicViewReports(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.DynamicViewReport>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetAll>> GetFieldsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByColumnNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByColumnName>> GetFieldsGetByColumnNames(string columnName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByColumnNamesFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByColumnNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByColumnName>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByComment>> GetFieldsGetByComments(string comment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByCommentsFunc(Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByConstraintRulesToExcel(string ConstraintRules, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyconstraintrules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByConstraintRulesToCSV(string ConstraintRules, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyconstraintrules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByConstraintRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByConstraintRule>> GetFieldsGetByConstraintRules(string constraintRules = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByConstraintRulesFunc(ConstraintRules='{HttpUtility.UrlEncode(constraintRules.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByConstraintRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByConstraintRule>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByDbTypesToExcel(string DbType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByDbTypesToCSV(string DbType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByDbTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByDbType>> GetFieldsGetByDbTypes(string dbType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByDbTypesFunc(DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByDbTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByDbType>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByDefaultValuesToExcel(string DefaultValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydefaultvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydefaultvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByDefaultValuesToCSV(string DefaultValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbydefaultvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbydefaultvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByDefaultValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByDefaultValue>> GetFieldsGetByDefaultValues(string defaultValue = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByDefaultValuesFunc(DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByDefaultValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByDefaultValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetById>> GetFieldsGetByIds(long? id = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIsNullablesToExcel(bool? IsNullable, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisnullables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisnullables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIsNullablesToCSV(bool? IsNullable, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisnullables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisnullables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByIsNullables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByIsNullable>> GetFieldsGetByIsNullables(bool? isNullable = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByIsNullablesFunc(IsNullable={isNullable?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByIsNullables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByIsNullable>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIsPrimariesToExcel(bool? IsPrimary, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisprimaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisprimaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByIsPrimariesToCSV(bool? IsPrimary, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyisprimaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyisprimaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByIsPrimaries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByIsPrimary>> GetFieldsGetByIsPrimaries(bool? isPrimary = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByIsPrimariesFunc(IsPrimary={isPrimary?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByIsPrimaries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByIsPrimary>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByMaxLengthsToExcel(int? MaxLength, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbymaxlengths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbymaxlengths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByMaxLengthsToCSV(int? MaxLength, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbymaxlengths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbymaxlengths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByMaxLengths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByMaxLength>> GetFieldsGetByMaxLengths(int? maxLength = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByMaxLengthsFunc({maxLength})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByMaxLengths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByMaxLength>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByPrimitiveTypesToExcel(string PrimitiveType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprimitivetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprimitivetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByPrimitiveTypesToCSV(string PrimitiveType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprimitivetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprimitivetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByPrimitiveTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByPrimitiveType>> GetFieldsGetByPrimitiveTypes(string primitiveType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByPrimitiveTypesFunc(PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByPrimitiveTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByPrimitiveType>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByProjectIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectId>> GetFieldsGetByProjectIds(long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByProjectIdsFunc({projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByProjectIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectId>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByProjectNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectName>> GetFieldsGetByProjectNames(string projectName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByProjectNamesFunc(ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByProjectNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByProjectName>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByTableIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByTableId>> GetFieldsGetByTableIds(long? tableId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByTableIdsFunc({tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByTableIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByTableId>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByTableName>> GetFieldsGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsInsertsToExcel(string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsInsertsToCSV(string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsInsert>> GetFieldsInserts(string columnName = default(string), string dbType = default(string), string primitiveType = default(string), bool? isNullable = default(bool?), int? maxLength = default(int?), string constraintRules = default(string), bool? isPrimary = default(bool?), string comment = default(string), string defaultValue = default(string), string tableName = default(string), string projectName = default(string), long? tableId = default(long?), long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsInsertsFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}',PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}',IsNullable={isNullable?.ToString().ToLower()},{maxLength},ConstraintRules='{HttpUtility.UrlEncode(constraintRules.Trim().Replace("'", "''"))}',IsPrimary={isPrimary?.ToString().ToLower()},Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}',TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{tableId},{projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportFieldsUpdatesToExcel(long? Id, string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportFieldsUpdatesToCSV(long? Id, string ColumnName, string DbType, string PrimitiveType, bool? IsNullable, int? MaxLength, string ConstraintRules, bool? IsPrimary, string Comment, string DefaultValue, string TableName, string ProjectName, long? TableId, long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/fieldsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/fieldsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetFieldsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsUpdate>> GetFieldsUpdates(long? id = default(long?), string columnName = default(string), string dbType = default(string), string primitiveType = default(string), bool? isNullable = default(bool?), int? maxLength = default(int?), string constraintRules = default(string), bool? isPrimary = default(bool?), string comment = default(string), string defaultValue = default(string), string tableName = default(string), string projectName = default(string), long? tableId = default(long?), long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"FieldsUpdatesFunc({id},ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}',PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}',IsNullable={isNullable?.ToString().ToLower()},{maxLength},ConstraintRules='{HttpUtility.UrlEncode(constraintRules.Trim().Replace("'", "''"))}',IsPrimary={isPrimary?.ToString().ToLower()},Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}',TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{tableId},{projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetFieldsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.FieldsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetAll>> GetForeignKeyRulesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByColumnIdsToExcel(long? ColumnId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByColumnIdsToCSV(long? ColumnId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByColumnIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnId>> GetForeignKeyRulesGetByColumnIds(long? columnId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByColumnIdsFunc({columnId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByColumnIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnId>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByColumnNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnName>> GetForeignKeyRulesGetByColumnNames(string columnName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByColumnNamesFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByColumnNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByColumnName>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByConstraintIdsToExcel(long? ConstraintId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyconstraintids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyconstraintids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByConstraintIdsToCSV(long? ConstraintId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyconstraintids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyconstraintids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByConstraintIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByConstraintId>> GetForeignKeyRulesGetByConstraintIds(long? constraintId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByConstraintIdsFunc({constraintId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByConstraintIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByConstraintId>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByDeleteRulesToExcel(int? DeleteRule, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbydeleterules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbydeleterules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByDeleteRulesToCSV(int? DeleteRule, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbydeleterules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbydeleterules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByDeleteRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByDeleteRule>> GetForeignKeyRulesGetByDeleteRules(int? deleteRule = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByDeleteRulesFunc({deleteRule})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByDeleteRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByDeleteRule>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetById>> GetForeignKeyRulesGetByIds(long? id = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByProjectIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectId>> GetForeignKeyRulesGetByProjectIds(long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByProjectIdsFunc({projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByProjectIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectId>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByProjectNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectName>> GetForeignKeyRulesGetByProjectNames(string projectName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByProjectNamesFunc(ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByProjectNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByProjectName>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedColumnDbTypeComparesToExcel(string ReferencedColumnDbTypeCompare, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedColumnDbTypeComparesToCSV(string ReferencedColumnDbTypeCompare, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumndbtypecompares/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByReferencedColumnDbTypeCompares(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnDbTypeCompare>> GetForeignKeyRulesGetByReferencedColumnDbTypeCompares(string referencedColumnDbTypeCompare = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByReferencedColumnDbTypeComparesFunc(ReferencedColumnDbTypeCompare='{HttpUtility.UrlEncode(referencedColumnDbTypeCompare.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByReferencedColumnDbTypeCompares(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnDbTypeCompare>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedColumnNamesToExcel(string ReferencedColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedColumnNamesToCSV(string ReferencedColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedcolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByReferencedColumnNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnName>> GetForeignKeyRulesGetByReferencedColumnNames(string referencedColumnName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByReferencedColumnNamesFunc(ReferencedColumnName='{HttpUtility.UrlEncode(referencedColumnName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByReferencedColumnNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedColumnName>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedTableNamesToExcel(string ReferencedTableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByReferencedTableNamesToCSV(string ReferencedTableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyreferencedtablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByReferencedTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedTableName>> GetForeignKeyRulesGetByReferencedTableNames(string referencedTableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByReferencedTableNamesFunc(ReferencedTableName='{HttpUtility.UrlEncode(referencedTableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByReferencedTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByReferencedTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByTableIdsToExcel(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByTableIdsToCSV(long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByTableIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableId>> GetForeignKeyRulesGetByTableIds(long? tableId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByTableIdsFunc({tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByTableIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableId>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableName>> GetForeignKeyRulesGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByUpdateRulesToExcel(int? UpdateRule, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyupdaterules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyupdaterules/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesGetByUpdateRulesToCSV(int? UpdateRule, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesgetbyupdaterules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesgetbyupdaterules/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesGetByUpdateRules(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByUpdateRule>> GetForeignKeyRulesGetByUpdateRules(int? updateRule = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesGetByUpdateRulesFunc({updateRule})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesGetByUpdateRules(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesGetByUpdateRule>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesInsertsToExcel(string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesInsertsToCSV(string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesInsert>> GetForeignKeyRulesInserts(string columnName = default(string), string referencedTableName = default(string), string referencedColumnName = default(string), string referencedColumnDbTypeCompare = default(string), int? deleteRule = default(int?), int? updateRule = default(int?), string tableName = default(string), string projectName = default(string), long? constraintId = default(long?), long? columnId = default(long?), long? projectId = default(long?), long? tableId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesInsertsFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',ReferencedTableName='{HttpUtility.UrlEncode(referencedTableName.Trim().Replace("'", "''"))}',ReferencedColumnName='{HttpUtility.UrlEncode(referencedColumnName.Trim().Replace("'", "''"))}',ReferencedColumnDbTypeCompare='{HttpUtility.UrlEncode(referencedColumnDbTypeCompare.Trim().Replace("'", "''"))}',{deleteRule},{updateRule},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{constraintId},{columnId},{projectId},{tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesUpdatesToExcel(long? Id, string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportForeignKeyRulesUpdatesToCSV(long? Id, string ColumnName, string ReferencedTableName, string ReferencedColumnName, string ReferencedColumnDbTypeCompare, int? DeleteRule, int? UpdateRule, string TableName, string ProjectName, long? ConstraintId, long? ColumnId, long? ProjectId, long? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/foreignkeyrulesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/foreignkeyrulesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetForeignKeyRulesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesUpdate>> GetForeignKeyRulesUpdates(long? id = default(long?), string columnName = default(string), string referencedTableName = default(string), string referencedColumnName = default(string), string referencedColumnDbTypeCompare = default(string), int? deleteRule = default(int?), int? updateRule = default(int?), string tableName = default(string), string projectName = default(string), long? constraintId = default(long?), long? columnId = default(long?), long? projectId = default(long?), long? tableId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesUpdatesFunc({id},ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',ReferencedTableName='{HttpUtility.UrlEncode(referencedTableName.Trim().Replace("'", "''"))}',ReferencedColumnName='{HttpUtility.UrlEncode(referencedColumnName.Trim().Replace("'", "''"))}',ReferencedColumnDbTypeCompare='{HttpUtility.UrlEncode(referencedColumnDbTypeCompare.Trim().Replace("'", "''"))}',{deleteRule},{updateRule},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',{constraintId},{columnId},{projectId},{tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetForeignKeyRulesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ForeignKeyRulesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetAccessControlsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getaccesscontrols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getaccesscontrols/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetAccessControlsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getaccesscontrols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getaccesscontrols/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetAccessControls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetAccessControl>> GetGetAccessControls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetAccessControlsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetAccessControls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetAccessControl>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetColumn>> GetGetColumns(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetColumnsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetColumn>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetColumnsWithOutIdentitiesToExcel(string name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumnswithoutidentities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumnswithoutidentities/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetColumnsWithOutIdentitiesToCSV(string name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getcolumnswithoutidentities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getcolumnswithoutidentities/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetColumnsWithOutIdentities(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetColumnsWithOutIdentity>> GetGetColumnsWithOutIdentities(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetColumnsWithOutIdentitiesFunc(name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetColumnsWithOutIdentities(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetColumnsWithOutIdentity>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetDependenciesToExcel(string Schema, string Table, string Column, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getdependencies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getdependencies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetDependenciesToCSV(string Schema, string Table, string Column, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getdependencies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getdependencies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetDependencies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetDependency>> GetGetDependencies(string schema = default(string), string table = default(string), string column = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetDependenciesFunc(Schema='{HttpUtility.UrlEncode(schema.Trim().Replace("'", "''"))}',Table='{HttpUtility.UrlEncode(table.Trim().Replace("'", "''"))}',Column='{HttpUtility.UrlEncode(column.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetDependencies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetDependency>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetExtendedsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getextendeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getextendeds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetExtendedsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getextendeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getextendeds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetExtendeds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetExtended>> GetGetExtendeds(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetExtendedsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetExtendeds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetExtended>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetIdentityListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getidentitylists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getidentitylists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetIdentityListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getidentitylists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getidentitylists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetIdentityLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetIdentityList>> GetGetIdentityLists(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetIdentityListsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetIdentityLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetIdentityList>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetIndexStatsToExcel(string table_name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getindexstats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getindexstats/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetIndexStatsToCSV(string table_name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getindexstats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getindexstats/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetIndexStats(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetIndexStat>> GetGetIndexStats(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetIndexStatsFunc(table_name='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetIndexStats(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetIndexStat>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetModifyDatesToExcel(string name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getmodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getmodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetModifyDatesToCSV(string name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getmodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getmodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetModifyDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetModifyDate>> GetGetModifyDates(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetModifyDatesFunc(name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetModifyDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetModifyDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetParameterNamesToExcel(string Procedure, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetParameterNamesToCSV(string Procedure, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetParameterNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetParameterName>> GetGetParameterNames(string procedure = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetParameterNamesFunc(Procedure='{HttpUtility.UrlEncode(procedure.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetParameterNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetParameterName>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetProcedureNamesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getprocedurenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getprocedurenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetProcedureNamesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getprocedurenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getprocedurenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetProcedureNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetProcedureName>> GetGetProcedureNames(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetProcedureNamesFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetProcedureNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetProcedureName>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetRequestParameterNamesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getrequestparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getrequestparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetRequestParameterNamesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getrequestparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getrequestparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetRequestParameterNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetRequestParameterName>> GetGetRequestParameterNames(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetRequestParameterNamesFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetRequestParameterNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetRequestParameterName>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetReturnParameterNamesToExcel(string ProcedureName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getreturnparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getreturnparameternames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetReturnParameterNamesToCSV(string ProcedureName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getreturnparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getreturnparameternames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetReturnParameterNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetReturnParameterName>> GetGetReturnParameterNames(string procedureName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetReturnParameterNamesFunc(ProcedureName='{HttpUtility.UrlEncode(procedureName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetReturnParameterNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetReturnParameterName>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetServerInfosToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getserverinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getserverinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetServerInfosToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getserverinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getserverinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetServerInfos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetServerInfo>> GetGetServerInfos(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetServerInfosFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetServerInfos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetServerInfo>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetSpLogsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getsplogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getsplogs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetSpLogsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getsplogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getsplogs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetSpLogs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetSpLog>> GetGetSpLogs(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetSpLogsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetSpLogs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetSpLog>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetStoredProceduresForATablesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getstoredproceduresforatables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getstoredproceduresforatables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetStoredProceduresForATablesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getstoredproceduresforatables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getstoredproceduresforatables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetStoredProceduresForATables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetStoredProceduresForATable>> GetGetStoredProceduresForATables(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetStoredProceduresForATablesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetStoredProceduresForATables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetStoredProceduresForATable>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetTableColumnsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetTableColumnsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetTableColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableColumn>> GetGetTableColumns(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetTableColumnsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetTableColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableColumn>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetTableInfosToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettableinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettableinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetTableInfosToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettableinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettableinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetTableInfos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableInfo>> GetGetTableInfos(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetTableInfosFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetTableInfos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableInfo>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetTableNamesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetTableNamesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableName>> GetGetTableNames(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetTableNamesFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetTablesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetTablesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTable>> GetGetTables(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetTablesFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTable>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetTableSizesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablesizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablesizes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetTableSizesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/gettablesizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/gettablesizes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetTableSizes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableSize>> GetGetTableSizes(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetTableSizesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetTableSizes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetTableSize>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetViewBackupHistoriesToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewbackuphistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewbackuphistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetViewBackupHistoriesToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewbackuphistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewbackuphistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetViewBackupHistories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetViewBackupHistory>> GetGetViewBackupHistories(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetViewBackupHistoriesFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetViewBackupHistories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetViewBackupHistory>>(response);
        }

        public async System.Threading.Tasks.Task ExportGetViewListsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportGetViewListsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/getviewlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/getviewlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetGetViewLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetViewList>> GetGetViewLists(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"GetViewListsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGetViewLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.GetViewList>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategoryGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetAll>> GetProgrammingCategoryGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategoryGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetById>> GetProgrammingCategoryGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetByTypeNamesToExcel(string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbytypenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbytypenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryGetByTypeNamesToCSV(string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategorygetbytypenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategorygetbytypenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategoryGetByTypeNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetByTypeName>> GetProgrammingCategoryGetByTypeNames(string typeName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryGetByTypeNamesFunc(TypeName='{HttpUtility.UrlEncode(typeName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryGetByTypeNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryGetByTypeName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryInsertsToExcel(string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryInsertsToCSV(string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategoryInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryInsert>> GetProgrammingCategoryInserts(string typeName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryInsertsFunc(TypeName='{HttpUtility.UrlEncode(typeName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryUpdatesToExcel(int? Id, string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCategoryUpdatesToCSV(int? Id, string TypeName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcategoryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcategoryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCategoryUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryUpdate>> GetProgrammingCategoryUpdates(int? id = default(int?), string typeName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryUpdatesFunc({id},TypeName='{HttpUtility.UrlEncode(typeName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCategoryUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCategoryUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetAll>> GetProgrammingCodesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByCodesToExcel(string Code, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbycodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbycodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByCodesToCSV(string Code, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbycodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbycodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByCode>> GetProgrammingCodesGetByCodes(string code = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByCodesFunc(Code='{HttpUtility.UrlEncode(code.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByExampleCodesToExcel(string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyexamplecodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyexamplecodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByExampleCodesToCSV(string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyexamplecodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyexamplecodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByExampleCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByExampleCode>> GetProgrammingCodesGetByExampleCodes(string exampleCodes = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByExampleCodesFunc(ExampleCodes='{HttpUtility.UrlEncode(exampleCodes.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByExampleCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByExampleCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetById>> GetProgrammingCodesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByLanguageTypesToExcel(int? LanguageType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbylanguagetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbylanguagetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByLanguageTypesToCSV(int? LanguageType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbylanguagetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbylanguagetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByLanguageTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByLanguageType>> GetProgrammingCodesGetByLanguageTypes(int? languageType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByLanguageTypesFunc({languageType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByLanguageTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByLanguageType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByTargetLanguageCodesToExcel(string TargetLanguageCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagecodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagecodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByTargetLanguageCodesToCSV(string TargetLanguageCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagecodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagecodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByTargetLanguageCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageCode>> GetProgrammingCodesGetByTargetLanguageCodes(string targetLanguageCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByTargetLanguageCodesFunc(TargetLanguageCode='{HttpUtility.UrlEncode(targetLanguageCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByTargetLanguageCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByTargetLanguageTypesToExcel(int? TargetLanguageType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesGetByTargetLanguageTypesToCSV(int? TargetLanguageType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesgetbytargetlanguagetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesgetbytargetlanguagetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesGetByTargetLanguageTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageType>> GetProgrammingCodesGetByTargetLanguageTypes(int? targetLanguageType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesGetByTargetLanguageTypesFunc({targetLanguageType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesGetByTargetLanguageTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesGetByTargetLanguageType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesInsertsToExcel(int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesInsertsToCSV(int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesInsert>> GetProgrammingCodesInserts(int? languageType = default(int?), string code = default(string), int? targetLanguageType = default(int?), string targetLanguageCode = default(string), string exampleCodes = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesInsertsFunc({languageType},Code='{HttpUtility.UrlEncode(code.Trim().Replace("'", "''"))}',{targetLanguageType},TargetLanguageCode='{HttpUtility.UrlEncode(targetLanguageCode.Trim().Replace("'", "''"))}',ExampleCodes='{HttpUtility.UrlEncode(exampleCodes.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesUpdatesToExcel(int? Id, int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodesUpdatesToCSV(int? Id, int? LanguageType, string Code, int? TargetLanguageType, string TargetLanguageCode, string ExampleCodes, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesUpdate>> GetProgrammingCodesUpdates(int? id = default(int?), int? languageType = default(int?), string code = default(string), int? targetLanguageType = default(int?), string targetLanguageCode = default(string), string exampleCodes = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesUpdatesFunc({id},{languageType},Code='{HttpUtility.UrlEncode(code.Trim().Replace("'", "''"))}',{targetLanguageType},TargetLanguageCode='{HttpUtility.UrlEncode(targetLanguageCode.Trim().Replace("'", "''"))}',ExampleCodes='{HttpUtility.UrlEncode(exampleCodes.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetAll>> GetProgrammingCodeTemplatesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetById>> GetProgrammingCodeTemplatesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByProgrammingLanguagesToExcel(int? ProgrammingLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByProgrammingLanguagesToCSV(int? ProgrammingLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyprogramminglanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesGetByProgrammingLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByProgrammingLanguage>> GetProgrammingCodeTemplatesGetByProgrammingLanguages(int? programmingLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesGetByProgrammingLanguagesFunc({programmingLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesGetByProgrammingLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByProgrammingLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByReplacedFieldsToExcel(string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByReplacedFieldsToCSV(string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbyreplacedfields/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesGetByReplacedFields(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByReplacedField>> GetProgrammingCodeTemplatesGetByReplacedFields(string replacedFields = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesGetByReplacedFieldsFunc(ReplacedFields='{HttpUtility.UrlEncode(replacedFields.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesGetByReplacedFields(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByReplacedField>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByTemplatesToExcel(string Template, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbytemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbytemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesGetByTemplatesToCSV(string Template, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesgetbytemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesgetbytemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesGetByTemplates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByTemplate>> GetProgrammingCodeTemplatesGetByTemplates(string template = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesGetByTemplatesFunc(Template='{HttpUtility.UrlEncode(template.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesGetByTemplates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesGetByTemplate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesInsertsToExcel(int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesInsertsToCSV(int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesInsert>> GetProgrammingCodeTemplatesInserts(int? programmingLanguage = default(int?), string template = default(string), string replacedFields = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesInsertsFunc({programmingLanguage},Template='{HttpUtility.UrlEncode(template.Trim().Replace("'", "''"))}',ReplacedFields='{HttpUtility.UrlEncode(replacedFields.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesUpdatesToExcel(int? Id, int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingCodeTemplatesUpdatesToCSV(int? Id, int? ProgrammingLanguage, string Template, string ReplacedFields, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingcodetemplatesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingcodetemplatesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingCodeTemplatesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesUpdate>> GetProgrammingCodeTemplatesUpdates(int? id = default(int?), int? programmingLanguage = default(int?), string template = default(string), string replacedFields = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesUpdatesFunc({id},{programmingLanguage},Template='{HttpUtility.UrlEncode(template.Trim().Replace("'", "''"))}',ReplacedFields='{HttpUtility.UrlEncode(replacedFields.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingCodeTemplatesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingCodeTemplatesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetAll>> GetProgrammingTechnologyGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByCodeFamilyNamesToExcel(string CodeFamilyName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodefamilynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodefamilynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByCodeFamilyNamesToCSV(string CodeFamilyName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodefamilynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodefamilynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyGetByCodeFamilyNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeFamilyName>> GetProgrammingTechnologyGetByCodeFamilyNames(string codeFamilyName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyGetByCodeFamilyNamesFunc(CodeFamilyName='{HttpUtility.UrlEncode(codeFamilyName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyGetByCodeFamilyNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeFamilyName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByCodeTypesToExcel(string CodeType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByCodeTypesToCSV(string CodeType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbycodetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbycodetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyGetByCodeTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeType>> GetProgrammingTechnologyGetByCodeTypes(string codeType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyGetByCodeTypesFunc(CodeType='{HttpUtility.UrlEncode(codeType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyGetByCodeTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByCodeType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetById>> GetProgrammingTechnologyGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByIdesToExcel(string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyides/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyides/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyGetByIdesToCSV(string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologygetbyides/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologygetbyides/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyGetByIdes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByIde>> GetProgrammingTechnologyGetByIdes(string ide = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyGetByIdesFunc(IDE='{HttpUtility.UrlEncode(ide.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyGetByIdes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyGetByIde>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyInsertsToExcel(string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyInsertsToCSV(string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyInsert>> GetProgrammingTechnologyInserts(string codeFamilyName = default(string), string codeType = default(string), string ide = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyInsertsFunc(CodeFamilyName='{HttpUtility.UrlEncode(codeFamilyName.Trim().Replace("'", "''"))}',CodeType='{HttpUtility.UrlEncode(codeType.Trim().Replace("'", "''"))}',IDE='{HttpUtility.UrlEncode(ide.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyUpdatesToExcel(int? Id, string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProgrammingTechnologyUpdatesToCSV(int? Id, string CodeFamilyName, string CodeType, string IDE, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/programmingtechnologyupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/programmingtechnologyupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProgrammingTechnologyUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyUpdate>> GetProgrammingTechnologyUpdates(int? id = default(int?), string codeFamilyName = default(string), string codeType = default(string), string ide = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyUpdatesFunc({id},CodeFamilyName='{HttpUtility.UrlEncode(codeFamilyName.Trim().Replace("'", "''"))}',CodeType='{HttpUtility.UrlEncode(codeType.Trim().Replace("'", "''"))}',IDE='{HttpUtility.UrlEncode(ide.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProgrammingTechnologyUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProgrammingTechnologyUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetAll>> GetProjectCategoryGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByCategoryNamesToExcel(string CategoryName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByCategoryNamesToCSV(string CategoryName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetByCategoryNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryName>> GetProjectCategoryGetByCategoryNames(string categoryName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetByCategoryNamesFunc(CategoryName='{HttpUtility.UrlEncode(categoryName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetByCategoryNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByCategoryNameTrsToExcel(string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynametrs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynametrs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByCategoryNameTrsToCSV(string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbycategorynametrs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbycategorynametrs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetByCategoryNameTrs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryNameTr>> GetProjectCategoryGetByCategoryNameTrs(string categoryNameTr = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetByCategoryNameTrsFunc(CategoryNameTr='{HttpUtility.UrlEncode(categoryNameTr.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetByCategoryNameTrs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByCategoryNameTr>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetById>> GetProjectCategoryGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByParentIdsToExcel(int? ParentId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyparentids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyparentids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetByParentIdsToCSV(int? ParentId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbyparentids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbyparentids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetByParentIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByParentId>> GetProjectCategoryGetByParentIds(int? parentId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetByParentIdsFunc({parentId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetByParentIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetByParentId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetBySampleUrlsToExcel(string SampleUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbysampleurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbysampleurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryGetBySampleUrlsToCSV(string SampleUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategorygetbysampleurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategorygetbysampleurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryGetBySampleUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetBySampleUrl>> GetProjectCategoryGetBySampleUrls(string sampleUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryGetBySampleUrlsFunc(SampleUrl='{HttpUtility.UrlEncode(sampleUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryGetBySampleUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryGetBySampleUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryInsertsToExcel(string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryInsertsToCSV(string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryInsert>> GetProjectCategoryInserts(string categoryName = default(string), int? parentId = default(int?), string sampleUrl = default(string), string categoryNameTr = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryInsertsFunc(CategoryName='{HttpUtility.UrlEncode(categoryName.Trim().Replace("'", "''"))}',{parentId},SampleUrl='{HttpUtility.UrlEncode(sampleUrl.Trim().Replace("'", "''"))}',CategoryNameTr='{HttpUtility.UrlEncode(categoryNameTr.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryUpdatesToExcel(int? Id, string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectCategoryUpdatesToCSV(int? Id, string CategoryName, int? ParentId, string SampleUrl, string CategoryNameTr, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectcategoryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectcategoryupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectCategoryUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryUpdate>> GetProjectCategoryUpdates(int? id = default(int?), string categoryName = default(string), int? parentId = default(int?), string sampleUrl = default(string), string categoryNameTr = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryUpdatesFunc({id},CategoryName='{HttpUtility.UrlEncode(categoryName.Trim().Replace("'", "''"))}',{parentId},SampleUrl='{HttpUtility.UrlEncode(sampleUrl.Trim().Replace("'", "''"))}',CategoryNameTr='{HttpUtility.UrlEncode(categoryNameTr.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectCategoryUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectCategoryUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetAll>> GetProjectConfigurationKeyAndValueGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeysToExcel(string ConfigurationKey, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeysToCSV(string ConfigurationKey, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeys/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByConfigurationKeys(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKey>> GetProjectConfigurationKeyAndValueGetByConfigurationKeys(string configurationKey = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByConfigurationKeysFunc(ConfigurationKey='{HttpUtility.UrlEncode(configurationKey.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByConfigurationKeys(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKey>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesToExcel(string ConfigurationKeyFieldType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesToCSV(string ConfigurationKeyFieldType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfieldtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldType>> GetProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypes(string configurationKeyFieldType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypesFunc(ConfigurationKeyFieldType='{HttpUtility.UrlEncode(configurationKeyFieldType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByConfigurationKeyFieldTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFieldType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesToExcel(int? ConfigurationKeyFromInputType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesToCSV(int? ConfigurationKeyFromInputType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationkeyfrominputtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputType>> GetProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypes(int? configurationKeyFromInputType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypesFunc({configurationKeyFromInputType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationKeyFromInputType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationValuesToExcel(string ConfigurationValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationValuesToCSV(string ConfigurationValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByConfigurationValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValue>> GetProjectConfigurationKeyAndValueGetByConfigurationValues(string configurationValue = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByConfigurationValuesFunc(ConfigurationValue='{HttpUtility.UrlEncode(configurationValue.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByConfigurationValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationValueTypesToExcel(int? ConfigurationValueType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByConfigurationValueTypesToCSV(int? ConfigurationValueType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyconfigurationvaluetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByConfigurationValueTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValueType>> GetProjectConfigurationKeyAndValueGetByConfigurationValueTypes(int? configurationValueType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByConfigurationValueTypesFunc({configurationValueType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByConfigurationValueTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByConfigurationValueType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetById>> GetProjectConfigurationKeyAndValueGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsToExcel(int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsToCSV(int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvaluegetbyparentconfigurationkeyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueGetByParentConfigurationKeyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByParentConfigurationKeyId>> GetProjectConfigurationKeyAndValueGetByParentConfigurationKeyIds(int? parentConfigurationKeyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueGetByParentConfigurationKeyIdsFunc({parentConfigurationKeyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueGetByParentConfigurationKeyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueGetByParentConfigurationKeyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueInsertsToExcel(string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueInsertsToCSV(string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueInsert>> GetProjectConfigurationKeyAndValueInserts(string configurationKey = default(string), string configurationKeyFieldType = default(string), int? configurationKeyFromInputType = default(int?), string configurationValue = default(string), int? configurationValueType = default(int?), int? parentConfigurationKeyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueInsertsFunc(ConfigurationKey='{HttpUtility.UrlEncode(configurationKey.Trim().Replace("'", "''"))}',ConfigurationKeyFieldType='{HttpUtility.UrlEncode(configurationKeyFieldType.Trim().Replace("'", "''"))}',{configurationKeyFromInputType},ConfigurationValue='{HttpUtility.UrlEncode(configurationValue.Trim().Replace("'", "''"))}',{configurationValueType},{parentConfigurationKeyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueUpdatesToExcel(int? Id, string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationKeyAndValueUpdatesToCSV(int? Id, string ConfigurationKey, string ConfigurationKeyFieldType, int? ConfigurationKeyFromInputType, string ConfigurationValue, int? ConfigurationValueType, int? ParentConfigurationKeyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationkeyandvalueupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationkeyandvalueupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationKeyAndValueUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueUpdate>> GetProjectConfigurationKeyAndValueUpdates(int? id = default(int?), string configurationKey = default(string), string configurationKeyFieldType = default(string), int? configurationKeyFromInputType = default(int?), string configurationValue = default(string), int? configurationValueType = default(int?), int? parentConfigurationKeyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueUpdatesFunc({id},ConfigurationKey='{HttpUtility.UrlEncode(configurationKey.Trim().Replace("'", "''"))}',ConfigurationKeyFieldType='{HttpUtility.UrlEncode(configurationKeyFieldType.Trim().Replace("'", "''"))}',{configurationKeyFromInputType},ConfigurationValue='{HttpUtility.UrlEncode(configurationValue.Trim().Replace("'", "''"))}',{configurationValueType},{parentConfigurationKeyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationKeyAndValueUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationKeyAndValueUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetAll>> GetProjectConfigurationsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByAngularConfigurationsToExcel(string AngularConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyangularconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyangularconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByAngularConfigurationsToCSV(string AngularConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyangularconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyangularconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByAngularConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByAngularConfiguration>> GetProjectConfigurationsGetByAngularConfigurations(string angularConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByAngularConfigurationsFunc(AngularConfiguration='{HttpUtility.UrlEncode(angularConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByAngularConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByAngularConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBackgroundJobConfigurationsToExcel(string BackgroundJobConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBackgroundJobConfigurationsToCSV(string BackgroundJobConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackgroundjobconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByBackgroundJobConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackgroundJobConfiguration>> GetProjectConfigurationsGetByBackgroundJobConfigurations(string backgroundJobConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByBackgroundJobConfigurationsFunc(BackgroundJobConfiguration='{HttpUtility.UrlEncode(backgroundJobConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByBackgroundJobConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackgroundJobConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBackUpConfigurationsToExcel(string BackUpConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackupconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackupconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBackUpConfigurationsToCSV(string BackUpConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybackupconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybackupconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByBackUpConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackUpConfiguration>> GetProjectConfigurationsGetByBackUpConfigurations(string backUpConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByBackUpConfigurationsFunc(BackUpConfiguration='{HttpUtility.UrlEncode(backUpConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByBackUpConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBackUpConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBootStrapConfigurationsToExcel(string BootStrapConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBootStrapConfigurationsToCSV(string BootStrapConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybootstrapconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByBootStrapConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBootStrapConfiguration>> GetProjectConfigurationsGetByBootStrapConfigurations(string bootStrapConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByBootStrapConfigurationsFunc(BootStrapConfiguration='{HttpUtility.UrlEncode(bootStrapConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByBootStrapConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBootStrapConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBuildConfigurationsToExcel(string BuildConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybuildconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybuildconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByBuildConfigurationsToCSV(string BuildConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbybuildconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbybuildconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByBuildConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBuildConfiguration>> GetProjectConfigurationsGetByBuildConfigurations(string buildConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByBuildConfigurationsFunc(BuildConfiguration='{HttpUtility.UrlEncode(buildConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByBuildConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByBuildConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCacheConfigurationsToExcel(string CacheConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycacheconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycacheconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCacheConfigurationsToCSV(string CacheConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycacheconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycacheconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCacheConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCacheConfiguration>> GetProjectConfigurationsGetByCacheConfigurations(string cacheConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCacheConfigurationsFunc(CacheConfiguration='{HttpUtility.UrlEncode(cacheConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCacheConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCacheConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCanOverRidesToExcel(bool? CanOverRide, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycanoverrides/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycanoverrides/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCanOverRidesToCSV(bool? CanOverRide, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycanoverrides/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycanoverrides/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCanOverRides(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCanOverRide>> GetProjectConfigurationsGetByCanOverRides(bool? canOverRide = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCanOverRidesFunc(CanOverRide={canOverRide?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCanOverRides(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCanOverRide>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCmsConfigurationsToExcel(string CMSConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycmsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycmsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCmsConfigurationsToCSV(string CMSConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycmsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycmsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCmsConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCmsConfiguration>> GetProjectConfigurationsGetByCmsConfigurations(string cmsconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCmsConfigurationsFunc(CMSConfiguration='{HttpUtility.UrlEncode(cmsconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCmsConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCmsConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByColumnConfigurationsToExcel(string ColumnConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByColumnConfigurationsToCSV(string ColumnConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycolumnconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByColumnConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByColumnConfiguration>> GetProjectConfigurationsGetByColumnConfigurations(string columnConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByColumnConfigurationsFunc(ColumnConfiguration='{HttpUtility.UrlEncode(columnConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByColumnConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByColumnConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByComponentConfigurationsToExcel(string ComponentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByComponentConfigurationsToCSV(string ComponentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycomponentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByComponentConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByComponentConfiguration>> GetProjectConfigurationsGetByComponentConfigurations(string componentConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByComponentConfigurationsFunc(ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByComponentConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByComponentConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByConfigurationJsonSchemesToExcel(string ConfigurationJsonScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByConfigurationJsonSchemesToCSV(string ConfigurationJsonScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconfigurationjsonschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByConfigurationJsonSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConfigurationJsonScheme>> GetProjectConfigurationsGetByConfigurationJsonSchemes(string configurationJsonScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByConfigurationJsonSchemesFunc(ConfigurationJsonScheme='{HttpUtility.UrlEncode(configurationJsonScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByConfigurationJsonSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConfigurationJsonScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByConsoleAppConfigurationsToExcel(string ConsoleAppConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByConsoleAppConfigurationsToCSV(string ConsoleAppConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyconsoleappconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByConsoleAppConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConsoleAppConfiguration>> GetProjectConfigurationsGetByConsoleAppConfigurations(string consoleAppConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByConsoleAppConfigurationsFunc(ConsoleAppConfiguration='{HttpUtility.UrlEncode(consoleAppConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByConsoleAppConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByConsoleAppConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCreatedByIdsToExcel(int? CreatedById, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreatedbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreatedbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCreatedByIdsToCSV(int? CreatedById, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreatedbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreatedbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCreatedByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedById>> GetProjectConfigurationsGetByCreatedByIds(int? createdById = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCreatedByIdsFunc({createdById})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCreatedByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedDate>> GetProjectConfigurationsGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCssConfigurationsToExcel(string CssConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycssconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycssconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByCssConfigurationsToCSV(string CssConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbycssconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbycssconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByCssConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCssConfiguration>> GetProjectConfigurationsGetByCssConfigurations(string cssConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByCssConfigurationsFunc(CssConfiguration='{HttpUtility.UrlEncode(cssConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByCssConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByCssConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDapperConfigurationsToExcel(string DapperConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydapperconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydapperconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDapperConfigurationsToCSV(string DapperConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydapperconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydapperconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDapperConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDapperConfiguration>> GetProjectConfigurationsGetByDapperConfigurations(string dapperConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDapperConfigurationsFunc(DapperConfiguration='{HttpUtility.UrlEncode(dapperConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDapperConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDapperConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDataBaseConfigurationsToExcel(string DataBaseConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDataBaseConfigurationsToCSV(string DataBaseConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatabaseconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDataBaseConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataBaseConfiguration>> GetProjectConfigurationsGetByDataBaseConfigurations(string dataBaseConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDataBaseConfigurationsFunc(DataBaseConfiguration='{HttpUtility.UrlEncode(dataBaseConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDataBaseConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataBaseConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDataTypeConfigurationsToExcel(string DataTypeConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDataTypeConfigurationsToCSV(string DataTypeConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydatatypeconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDataTypeConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataTypeConfiguration>> GetProjectConfigurationsGetByDataTypeConfigurations(string dataTypeConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDataTypeConfigurationsFunc(DataTypeConfiguration='{HttpUtility.UrlEncode(dataTypeConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDataTypeConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDataTypeConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDbJobConfigurationsToExcel(string DBJobConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDbJobConfigurationsToCSV(string DBJobConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydbjobconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDbJobConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDbJobConfiguration>> GetProjectConfigurationsGetByDbJobConfigurations(string dbjobConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDbJobConfigurationsFunc(DBJobConfiguration='{HttpUtility.UrlEncode(dbjobConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDbJobConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDbJobConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDescriptionsToExcel(string Descriptions, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydescriptions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydescriptions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDescriptionsToCSV(string Descriptions, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydescriptions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydescriptions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDescriptions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDescription>> GetProjectConfigurationsGetByDescriptions(string descriptions = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDescriptionsFunc(Descriptions='{HttpUtility.UrlEncode(descriptions.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDescriptions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDescription>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDeviceConfigurationsToExcel(string DeviceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDeviceConfigurationsToCSV(string DeviceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydeviceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDeviceConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDeviceConfiguration>> GetProjectConfigurationsGetByDeviceConfigurations(string deviceConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDeviceConfigurationsFunc(DeviceConfiguration='{HttpUtility.UrlEncode(deviceConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDeviceConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDeviceConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDiagramConfigurationsToExcel(string DiagramConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByDiagramConfigurationsToCSV(string DiagramConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbydiagramconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByDiagramConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDiagramConfiguration>> GetProjectConfigurationsGetByDiagramConfigurations(string diagramConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByDiagramConfigurationsFunc(DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByDiagramConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByDiagramConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByElasticSearchConfigurationsToExcel(string ElasticSearchConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByElasticSearchConfigurationsToCSV(string ElasticSearchConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyelasticsearchconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByElasticSearchConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByElasticSearchConfiguration>> GetProjectConfigurationsGetByElasticSearchConfigurations(string elasticSearchConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByElasticSearchConfigurationsFunc(ElasticSearchConfiguration='{HttpUtility.UrlEncode(elasticSearchConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByElasticSearchConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByElasticSearchConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByExceptionHandlingConfigurationsToExcel(string ExceptionHandlingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByExceptionHandlingConfigurationsToCSV(string ExceptionHandlingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexceptionhandlingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByExceptionHandlingConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExceptionHandlingConfiguration>> GetProjectConfigurationsGetByExceptionHandlingConfigurations(string exceptionHandlingConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByExceptionHandlingConfigurationsFunc(ExceptionHandlingConfiguration='{HttpUtility.UrlEncode(exceptionHandlingConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByExceptionHandlingConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExceptionHandlingConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByExportConfigurationsToExcel(string ExportConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexportconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexportconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByExportConfigurationsToCSV(string ExportConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyexportconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyexportconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByExportConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExportConfiguration>> GetProjectConfigurationsGetByExportConfigurations(string exportConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByExportConfigurationsFunc(ExportConfiguration='{HttpUtility.UrlEncode(exportConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByExportConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByExportConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFigmaConfigirationsToExcel(string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFigmaConfigirationsToCSV(string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfigmaconfigirations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByFigmaConfigirations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFigmaConfigiration>> GetProjectConfigurationsGetByFigmaConfigirations(string figmaConfigiration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByFigmaConfigirationsFunc(FigmaConfigiration='{HttpUtility.UrlEncode(figmaConfigiration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByFigmaConfigirations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFigmaConfigiration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFileManagementConfigurationsToExcel(string FileManagementConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFileManagementConfigurationsToCSV(string FileManagementConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfilemanagementconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByFileManagementConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileManagementConfiguration>> GetProjectConfigurationsGetByFileManagementConfigurations(string fileManagementConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByFileManagementConfigurationsFunc(FileManagementConfiguration='{HttpUtility.UrlEncode(fileManagementConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByFileManagementConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileManagementConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFileOutputExtensionNamesToExcel(string FileOutputExtensionName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFileOutputExtensionNamesToCSV(string FileOutputExtensionName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfileoutputextensionnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByFileOutputExtensionNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileOutputExtensionName>> GetProjectConfigurationsGetByFileOutputExtensionNames(string fileOutputExtensionName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByFileOutputExtensionNamesFunc(FileOutputExtensionName='{HttpUtility.UrlEncode(fileOutputExtensionName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByFileOutputExtensionNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFileOutputExtensionName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFtpConfigurationsToExcel(string FtpConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyftpconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyftpconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFtpConfigurationsToCSV(string FtpConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyftpconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyftpconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByFtpConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFtpConfiguration>> GetProjectConfigurationsGetByFtpConfigurations(string ftpConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByFtpConfigurationsFunc(FtpConfiguration='{HttpUtility.UrlEncode(ftpConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByFtpConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFtpConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFunctionConfigurationsToExcel(string FunctionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByFunctionConfigurationsToCSV(string FunctionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyfunctionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByFunctionConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFunctionConfiguration>> GetProjectConfigurationsGetByFunctionConfigurations(string functionConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByFunctionConfigurationsFunc(FunctionConfiguration='{HttpUtility.UrlEncode(functionConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByFunctionConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByFunctionConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHasNeedCompileOnChangesToExcel(string HasNeedCompileOnChange, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHasNeedCompileOnChangesToCSV(string HasNeedCompileOnChange, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhasneedcompileonchanges/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByHasNeedCompileOnChanges(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHasNeedCompileOnChange>> GetProjectConfigurationsGetByHasNeedCompileOnChanges(string hasNeedCompileOnChange = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByHasNeedCompileOnChangesFunc(HasNeedCompileOnChange='{HttpUtility.UrlEncode(hasNeedCompileOnChange.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByHasNeedCompileOnChanges(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHasNeedCompileOnChange>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHeaderConfigurationsToExcel(string HeaderConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHeaderConfigurationsToCSV(string HeaderConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyheaderconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByHeaderConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHeaderConfiguration>> GetProjectConfigurationsGetByHeaderConfigurations(string headerConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByHeaderConfigurationsFunc(HeaderConfiguration='{HttpUtility.UrlEncode(headerConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByHeaderConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHeaderConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHelpDocumentConfigurationsToExcel(string HelpDocumentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHelpDocumentConfigurationsToCSV(string HelpDocumentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhelpdocumentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByHelpDocumentConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHelpDocumentConfiguration>> GetProjectConfigurationsGetByHelpDocumentConfigurations(string helpDocumentConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByHelpDocumentConfigurationsFunc(HelpDocumentConfiguration='{HttpUtility.UrlEncode(helpDocumentConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByHelpDocumentConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHelpDocumentConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHostingConfigurationsToExcel(string HostingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHostingConfigurationsToCSV(string HostingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhostingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByHostingConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHostingConfiguration>> GetProjectConfigurationsGetByHostingConfigurations(string hostingConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByHostingConfigurationsFunc(HostingConfiguration='{HttpUtility.UrlEncode(hostingConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByHostingConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHostingConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHtmlConfigurationsToExcel(string HtmlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByHtmlConfigurationsToCSV(string HtmlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyhtmlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByHtmlConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHtmlConfiguration>> GetProjectConfigurationsGetByHtmlConfigurations(string htmlConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByHtmlConfigurationsFunc(HtmlConfiguration='{HttpUtility.UrlEncode(htmlConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByHtmlConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByHtmlConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetById>> GetProjectConfigurationsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByIısConfigurationsToExcel(string IISConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyiısconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyiısconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByIısConfigurationsToCSV(string IISConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyiısconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyiısconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByIısConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByIısConfiguration>> GetProjectConfigurationsGetByIısConfigurations(string iisconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByIısConfigurationsFunc(IISConfiguration='{HttpUtility.UrlEncode(iisconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByIısConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByIısConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByInputConfigurationsToExcel(string InputConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyinputconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyinputconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByInputConfigurationsToCSV(string InputConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyinputconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyinputconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByInputConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByInputConfiguration>> GetProjectConfigurationsGetByInputConfigurations(string inputConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByInputConfigurationsFunc(InputConfiguration='{HttpUtility.UrlEncode(inputConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByInputConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByInputConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByJsonConfigurationsToExcel(string JsonConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByJsonConfigurationsToCSV(string JsonConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyjsonconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByJsonConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByJsonConfiguration>> GetProjectConfigurationsGetByJsonConfigurations(string jsonConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByJsonConfigurationsFunc(JsonConfiguration='{HttpUtility.UrlEncode(jsonConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByJsonConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByJsonConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLastValidDatesToExcel(string LastValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylastvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylastvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLastValidDatesToCSV(string LastValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylastvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylastvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByLastValidDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLastValidDate>> GetProjectConfigurationsGetByLastValidDates(string lastValidDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByLastValidDatesFunc(LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByLastValidDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLastValidDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLayoutConfigurationsToExcel(string LayoutConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLayoutConfigurationsToCSV(string LayoutConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylayoutconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByLayoutConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLayoutConfiguration>> GetProjectConfigurationsGetByLayoutConfigurations(string layoutConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByLayoutConfigurationsFunc(LayoutConfiguration='{HttpUtility.UrlEncode(layoutConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByLayoutConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLayoutConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLogConfigurationsToExcel(string LogConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylogconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylogconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByLogConfigurationsToCSV(string LogConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbylogconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbylogconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByLogConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLogConfiguration>> GetProjectConfigurationsGetByLogConfigurations(string logConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByLogConfigurationsFunc(LogConfiguration='{HttpUtility.UrlEncode(logConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByLogConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByLogConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMailConfigurationsToExcel(string MailConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymailconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymailconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMailConfigurationsToCSV(string MailConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymailconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymailconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByMailConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMailConfiguration>> GetProjectConfigurationsGetByMailConfigurations(string mailConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByMailConfigurationsFunc(MailConfiguration='{HttpUtility.UrlEncode(mailConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByMailConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMailConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMongoConfigurationsToExcel(string MongoConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymongoconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymongoconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMongoConfigurationsToCSV(string MongoConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymongoconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymongoconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByMongoConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMongoConfiguration>> GetProjectConfigurationsGetByMongoConfigurations(string mongoConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByMongoConfigurationsFunc(MongoConfiguration='{HttpUtility.UrlEncode(mongoConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByMongoConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMongoConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMsSqlConfigurationsToExcel(string MsSqlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMsSqlConfigurationsToCSV(string MsSqlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymssqlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByMsSqlConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMsSqlConfiguration>> GetProjectConfigurationsGetByMsSqlConfigurations(string msSqlConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByMsSqlConfigurationsFunc(MsSqlConfiguration='{HttpUtility.UrlEncode(msSqlConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByMsSqlConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMsSqlConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMySqlConfigurationsToExcel(string MySqlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByMySqlConfigurationsToCSV(string MySqlConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbymysqlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByMySqlConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMySqlConfiguration>> GetProjectConfigurationsGetByMySqlConfigurations(string mySqlConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByMySqlConfigurationsFunc(MySqlConfiguration='{HttpUtility.UrlEncode(mySqlConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByMySqlConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByMySqlConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByName>> GetProjectConfigurationsGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNameSpaceConfigurationsToExcel(string NameSpaceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNameSpaceConfigurationsToCSV(string NameSpaceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynamespaceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNameSpaceConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNameSpaceConfiguration>> GetProjectConfigurationsGetByNameSpaceConfigurations(string nameSpaceConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNameSpaceConfigurationsFunc(NameSpaceConfiguration='{HttpUtility.UrlEncode(nameSpaceConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNameSpaceConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNameSpaceConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNetCoreApıConfigurationsToExcel(string NetCoreAPIConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNetCoreApıConfigurationsToCSV(string NetCoreAPIConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynetcoreapıconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNetCoreApıConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNetCoreApıConfiguration>> GetProjectConfigurationsGetByNetCoreApıConfigurations(string netCoreApiconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNetCoreApıConfigurationsFunc(NetCoreAPIConfiguration='{HttpUtility.UrlEncode(netCoreApiconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNetCoreApıConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNetCoreApıConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNginxConfigurationsToExcel(string NginxConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynginxconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynginxconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNginxConfigurationsToCSV(string NginxConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynginxconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynginxconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNginxConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNginxConfiguration>> GetProjectConfigurationsGetByNginxConfigurations(string nginxConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNginxConfigurationsFunc(NginxConfiguration='{HttpUtility.UrlEncode(nginxConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNginxConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNginxConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNodeJsExpressConfigurationsToExcel(string NodeJsExpressConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNodeJsExpressConfigurationsToCSV(string NodeJsExpressConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynodejsexpressconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNodeJsExpressConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNodeJsExpressConfiguration>> GetProjectConfigurationsGetByNodeJsExpressConfigurations(string nodeJsExpressConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNodeJsExpressConfigurationsFunc(NodeJsExpressConfiguration='{HttpUtility.UrlEncode(nodeJsExpressConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNodeJsExpressConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNodeJsExpressConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNoteHistoriesToExcel(string NoteHistory, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynotehistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynotehistories/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByNoteHistoriesToCSV(string NoteHistory, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbynotehistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbynotehistories/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByNoteHistories(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNoteHistory>> GetProjectConfigurationsGetByNoteHistories(string noteHistory = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByNoteHistoriesFunc(NoteHistory='{HttpUtility.UrlEncode(noteHistory.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByNoteHistories(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByNoteHistory>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPackageConfigurationsToExcel(string PackageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypackageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypackageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPackageConfigurationsToCSV(string PackageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypackageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypackageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByPackageConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPackageConfiguration>> GetProjectConfigurationsGetByPackageConfigurations(string packageConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByPackageConfigurationsFunc(PackageConfiguration='{HttpUtility.UrlEncode(packageConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByPackageConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPackageConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPaymentConfigurationsToExcel(string PaymentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPaymentConfigurationsToCSV(string PaymentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypaymentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByPaymentConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPaymentConfiguration>> GetProjectConfigurationsGetByPaymentConfigurations(string paymentConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByPaymentConfigurationsFunc(PaymentConfiguration='{HttpUtility.UrlEncode(paymentConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByPaymentConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPaymentConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPrismaConfigurationsToExcel(string PrismaConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPrismaConfigurationsToCSV(string PrismaConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyprismaconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByPrismaConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPrismaConfiguration>> GetProjectConfigurationsGetByPrismaConfigurations(string prismaConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByPrismaConfigurationsFunc(PrismaConfiguration='{HttpUtility.UrlEncode(prismaConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByPrismaConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPrismaConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPublishPathConfigurationsToExcel(string PublishPathConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPublishPathConfigurationsToCSV(string PublishPathConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypublishpathconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByPublishPathConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPublishPathConfiguration>> GetProjectConfigurationsGetByPublishPathConfigurations(string publishPathConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByPublishPathConfigurationsFunc(PublishPathConfiguration='{HttpUtility.UrlEncode(publishPathConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByPublishPathConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPublishPathConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPurchasedToolConfigurationsToExcel(string PurchasedToolConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByPurchasedToolConfigurationsToCSV(string PurchasedToolConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbypurchasedtoolconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByPurchasedToolConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPurchasedToolConfiguration>> GetProjectConfigurationsGetByPurchasedToolConfigurations(string purchasedToolConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByPurchasedToolConfigurationsFunc(PurchasedToolConfiguration='{HttpUtility.UrlEncode(purchasedToolConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByPurchasedToolConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByPurchasedToolConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRateLimitConfigurationsToExcel(string RateLimitConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRateLimitConfigurationsToCSV(string RateLimitConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyratelimitconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByRateLimitConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRateLimitConfiguration>> GetProjectConfigurationsGetByRateLimitConfigurations(string rateLimitConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByRateLimitConfigurationsFunc(RateLimitConfiguration='{HttpUtility.UrlEncode(rateLimitConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByRateLimitConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRateLimitConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByReactConfigurationsToExcel(string ReactConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyreactconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyreactconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByReactConfigurationsToCSV(string ReactConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyreactconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyreactconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByReactConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByReactConfiguration>> GetProjectConfigurationsGetByReactConfigurations(string reactConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByReactConfigurationsFunc(ReactConfiguration='{HttpUtility.UrlEncode(reactConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByReactConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByReactConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRedisConfigurationsToExcel(string RedisConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyredisconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyredisconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRedisConfigurationsToCSV(string RedisConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyredisconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyredisconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByRedisConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRedisConfiguration>> GetProjectConfigurationsGetByRedisConfigurations(string redisConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByRedisConfigurationsFunc(RedisConfiguration='{HttpUtility.UrlEncode(redisConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByRedisConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRedisConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRoleConfigurationsToExcel(string RoleConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyroleconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyroleconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByRoleConfigurationsToCSV(string RoleConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyroleconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyroleconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByRoleConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRoleConfiguration>> GetProjectConfigurationsGetByRoleConfigurations(string roleConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByRoleConfigurationsFunc(RoleConfiguration='{HttpUtility.UrlEncode(roleConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByRoleConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByRoleConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySecurityConfigurationsToExcel(string SecurityConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySecurityConfigurationsToCSV(string SecurityConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysecurityconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetBySecurityConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySecurityConfiguration>> GetProjectConfigurationsGetBySecurityConfigurations(string securityConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetBySecurityConfigurationsFunc(SecurityConfiguration='{HttpUtility.UrlEncode(securityConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetBySecurityConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySecurityConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetBySoftwareLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareLanguageId>> GetProjectConfigurationsGetBySoftwareLanguageIds(int? softwareLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetBySoftwareLanguageIdsFunc({softwareLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetBySoftwareLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySoftwareVersionConfigurationsToExcel(string SoftwareVersionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySoftwareVersionConfigurationsToCSV(string SoftwareVersionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysoftwareversionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetBySoftwareVersionConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareVersionConfiguration>> GetProjectConfigurationsGetBySoftwareVersionConfigurations(string softwareVersionConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetBySoftwareVersionConfigurationsFunc(SoftwareVersionConfiguration='{HttpUtility.UrlEncode(softwareVersionConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetBySoftwareVersionConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySoftwareVersionConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySslConfigurationsToExcel(string SSLConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysslconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysslconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetBySslConfigurationsToCSV(string SSLConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbysslconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbysslconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetBySslConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySslConfiguration>> GetProjectConfigurationsGetBySslConfigurations(string sslconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetBySslConfigurationsFunc(SSLConfiguration='{HttpUtility.UrlEncode(sslconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetBySslConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetBySslConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTableConfigurationsToExcel(string TableConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytableconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytableconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTableConfigurationsToCSV(string TableConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytableconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytableconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTableConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTableConfiguration>> GetProjectConfigurationsGetByTableConfigurations(string tableConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTableConfigurationsFunc(TableConfiguration='{HttpUtility.UrlEncode(tableConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTableConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTableConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantApiKeyConfigurationsToExcel(string TenantApiKeyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantApiKeyConfigurationsToCSV(string TenantApiKeyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantapikeyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTenantApiKeyConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantApiKeyConfiguration>> GetProjectConfigurationsGetByTenantApiKeyConfigurations(string tenantApiKeyConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTenantApiKeyConfigurationsFunc(TenantApiKeyConfiguration='{HttpUtility.UrlEncode(tenantApiKeyConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTenantApiKeyConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantApiKeyConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantConfigurationsToExcel(string TenantConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantConfigurationsToCSV(string TenantConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTenantConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantConfiguration>> GetProjectConfigurationsGetByTenantConfigurations(string tenantConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTenantConfigurationsFunc(TenantConfiguration='{HttpUtility.UrlEncode(tenantConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTenantConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantPriceConfigurationsToExcel(string TenantPriceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantPriceConfigurationsToCSV(string TenantPriceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantpriceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTenantPriceConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantPriceConfiguration>> GetProjectConfigurationsGetByTenantPriceConfigurations(string tenantPriceConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTenantPriceConfigurationsFunc(TenantPriceConfiguration='{HttpUtility.UrlEncode(tenantPriceConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTenantPriceConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantPriceConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantWhiteListConfigurationsToExcel(string TenantWhiteListConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTenantWhiteListConfigurationsToCSV(string TenantWhiteListConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytenantwhitelistconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTenantWhiteListConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantWhiteListConfiguration>> GetProjectConfigurationsGetByTenantWhiteListConfigurations(string tenantWhiteListConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTenantWhiteListConfigurationsFunc(TenantWhiteListConfiguration='{HttpUtility.UrlEncode(tenantWhiteListConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTenantWhiteListConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTenantWhiteListConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTestConfigurationsToExcel(string TestConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytestconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytestconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTestConfigurationsToCSV(string TestConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytestconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytestconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTestConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTestConfiguration>> GetProjectConfigurationsGetByTestConfigurations(string testConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTestConfigurationsFunc(TestConfiguration='{HttpUtility.UrlEncode(testConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTestConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTestConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByThemeConfigurationsToExcel(string ThemeConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythemeconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythemeconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByThemeConfigurationsToCSV(string ThemeConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythemeconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythemeconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByThemeConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThemeConfiguration>> GetProjectConfigurationsGetByThemeConfigurations(string themeConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByThemeConfigurationsFunc(ThemeConfiguration='{HttpUtility.UrlEncode(themeConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByThemeConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThemeConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByThirdPartyConfigurationsToExcel(string ThirdPartyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByThirdPartyConfigurationsToCSV(string ThirdPartyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbythirdpartyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByThirdPartyConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThirdPartyConfiguration>> GetProjectConfigurationsGetByThirdPartyConfigurations(string thirdPartyConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByThirdPartyConfigurationsFunc(ThirdPartyConfiguration='{HttpUtility.UrlEncode(thirdPartyConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByThirdPartyConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByThirdPartyConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTokenConfigurationsToExcel(string TokenConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytokenconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytokenconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTokenConfigurationsToCSV(string TokenConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytokenconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytokenconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTokenConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTokenConfiguration>> GetProjectConfigurationsGetByTokenConfigurations(string tokenConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTokenConfigurationsFunc(TokenConfiguration='{HttpUtility.UrlEncode(tokenConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTokenConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTokenConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTsConfigurationsToExcel(string TsConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByTsConfigurationsToCSV(string TsConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbytsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbytsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByTsConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTsConfiguration>> GetProjectConfigurationsGetByTsConfigurations(string tsConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByTsConfigurationsFunc(TsConfiguration='{HttpUtility.UrlEncode(tsConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByTsConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByTsConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByWcfConfigurationsToExcel(string WCFConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywcfconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywcfconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByWcfConfigurationsToCSV(string WCFConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywcfconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywcfconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByWcfConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWcfConfiguration>> GetProjectConfigurationsGetByWcfConfigurations(string wcfconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByWcfConfigurationsFunc(WCFConfiguration='{HttpUtility.UrlEncode(wcfconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByWcfConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWcfConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByWindowsServiceConfigurationsToExcel(string WindowsServiceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByWindowsServiceConfigurationsToCSV(string WindowsServiceConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbywindowsserviceconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByWindowsServiceConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWindowsServiceConfiguration>> GetProjectConfigurationsGetByWindowsServiceConfigurations(string windowsServiceConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByWindowsServiceConfigurationsFunc(WindowsServiceConfiguration='{HttpUtility.UrlEncode(windowsServiceConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByWindowsServiceConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByWindowsServiceConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByXmlConfigurationsToExcel(string XMLConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetByXmlConfigurationsToCSV(string XMLConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetbyxmlconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetByXmlConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByXmlConfiguration>> GetProjectConfigurationsGetByXmlConfigurations(string xmlconfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetByXmlConfigurationsFunc(XMLConfiguration='{HttpUtility.UrlEncode(xmlconfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetByXmlConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetByXmlConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetCreatedDateBetween>> GetProjectConfigurationsGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetLastValidDateBetweensToExcel(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsGetLastValidDateBetweensToCSV(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsgetlastvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsGetLastValidDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetLastValidDateBetween>> GetProjectConfigurationsGetLastValidDateBetweens(string lastValidDateStart = default(string), string lastValidDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsGetLastValidDateBetweensFunc(LastValidDateStart='{HttpUtility.UrlEncode(lastValidDateStart.Trim().Replace("'", "''"))}',LastValidDateEnd='{HttpUtility.UrlEncode(lastValidDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsGetLastValidDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsGetLastValidDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsInsertsToExcel(string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsInsertsToCSV(string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsInsert>> GetProjectConfigurationsInserts(string name = default(string), string configurationJsonScheme = default(string), string noteHistory = default(string), string descriptions = default(string), bool? canOverRide = default(bool?), string hasNeedCompileOnChange = default(string), int? createdById = default(int?), string securityConfiguration = default(string), string logConfiguration = default(string), string cacheConfiguration = default(string), string dataBaseConfiguration = default(string), string nameSpaceConfiguration = default(string), string reactConfiguration = default(string), string angularConfiguration = default(string), string nodeJsExpressConfiguration = default(string), string netCoreApiconfiguration = default(string), string iisconfiguration = default(string), string hostingConfiguration = default(string), string buildConfiguration = default(string), string backUpConfiguration = default(string), string dbjobConfiguration = default(string), string dataTypeConfiguration = default(string), string fileManagementConfiguration = default(string), string dapperConfiguration = default(string), string rateLimitConfiguration = default(string), string tenantConfiguration = default(string), string tenantApiKeyConfiguration = default(string), string tenantPriceConfiguration = default(string), string nginxConfiguration = default(string), string lastValidDate = default(string), string createdDate = default(string), string publishPathConfiguration = default(string), string ftpConfiguration = default(string), string backgroundJobConfiguration = default(string), string windowsServiceConfiguration = default(string), string consoleAppConfiguration = default(string), string wcfconfiguration = default(string), string tokenConfiguration = default(string), string paymentConfiguration = default(string), string purchasedToolConfiguration = default(string), string tenantWhiteListConfiguration = default(string), string helpDocumentConfiguration = default(string), string headerConfiguration = default(string), string roleConfiguration = default(string), string mongoConfiguration = default(string), string msSqlConfiguration = default(string), string mySqlConfiguration = default(string), string elasticSearchConfiguration = default(string), string tableConfiguration = default(string), string columnConfiguration = default(string), string functionConfiguration = default(string), string inputConfiguration = default(string), string cmsconfiguration = default(string), string themeConfiguration = default(string), string sslconfiguration = default(string), string softwareVersionConfiguration = default(string), string exceptionHandlingConfiguration = default(string), string jsonConfiguration = default(string), string xmlconfiguration = default(string), int? softwareLanguageId = default(int?), string cssConfiguration = default(string), string htmlConfiguration = default(string), string tsConfiguration = default(string), string packageConfiguration = default(string), string testConfiguration = default(string), string deviceConfiguration = default(string), string redisConfiguration = default(string), string fileOutputExtensionName = default(string), string exportConfiguration = default(string), string mailConfiguration = default(string), string thirdPartyConfiguration = default(string), string diagramConfiguration = default(string), string prismaConfiguration = default(string), string bootStrapConfiguration = default(string), string layoutConfiguration = default(string), string componentConfiguration = default(string), string figmaConfigiration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsInsertsFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',ConfigurationJsonScheme='{HttpUtility.UrlEncode(configurationJsonScheme.Trim().Replace("'", "''"))}',NoteHistory='{HttpUtility.UrlEncode(noteHistory.Trim().Replace("'", "''"))}',Descriptions='{HttpUtility.UrlEncode(descriptions.Trim().Replace("'", "''"))}',CanOverRide={canOverRide?.ToString().ToLower()},HasNeedCompileOnChange='{HttpUtility.UrlEncode(hasNeedCompileOnChange.Trim().Replace("'", "''"))}',{createdById},SecurityConfiguration='{HttpUtility.UrlEncode(securityConfiguration.Trim().Replace("'", "''"))}',LogConfiguration='{HttpUtility.UrlEncode(logConfiguration.Trim().Replace("'", "''"))}',CacheConfiguration='{HttpUtility.UrlEncode(cacheConfiguration.Trim().Replace("'", "''"))}',DataBaseConfiguration='{HttpUtility.UrlEncode(dataBaseConfiguration.Trim().Replace("'", "''"))}',NameSpaceConfiguration='{HttpUtility.UrlEncode(nameSpaceConfiguration.Trim().Replace("'", "''"))}',ReactConfiguration='{HttpUtility.UrlEncode(reactConfiguration.Trim().Replace("'", "''"))}',AngularConfiguration='{HttpUtility.UrlEncode(angularConfiguration.Trim().Replace("'", "''"))}',NodeJsExpressConfiguration='{HttpUtility.UrlEncode(nodeJsExpressConfiguration.Trim().Replace("'", "''"))}',NetCoreAPIConfiguration='{HttpUtility.UrlEncode(netCoreApiconfiguration.Trim().Replace("'", "''"))}',IISConfiguration='{HttpUtility.UrlEncode(iisconfiguration.Trim().Replace("'", "''"))}',HostingConfiguration='{HttpUtility.UrlEncode(hostingConfiguration.Trim().Replace("'", "''"))}',BuildConfiguration='{HttpUtility.UrlEncode(buildConfiguration.Trim().Replace("'", "''"))}',BackUpConfiguration='{HttpUtility.UrlEncode(backUpConfiguration.Trim().Replace("'", "''"))}',DBJobConfiguration='{HttpUtility.UrlEncode(dbjobConfiguration.Trim().Replace("'", "''"))}',DataTypeConfiguration='{HttpUtility.UrlEncode(dataTypeConfiguration.Trim().Replace("'", "''"))}',FileManagementConfiguration='{HttpUtility.UrlEncode(fileManagementConfiguration.Trim().Replace("'", "''"))}',DapperConfiguration='{HttpUtility.UrlEncode(dapperConfiguration.Trim().Replace("'", "''"))}',RateLimitConfiguration='{HttpUtility.UrlEncode(rateLimitConfiguration.Trim().Replace("'", "''"))}',TenantConfiguration='{HttpUtility.UrlEncode(tenantConfiguration.Trim().Replace("'", "''"))}',TenantApiKeyConfiguration='{HttpUtility.UrlEncode(tenantApiKeyConfiguration.Trim().Replace("'", "''"))}',TenantPriceConfiguration='{HttpUtility.UrlEncode(tenantPriceConfiguration.Trim().Replace("'", "''"))}',NginxConfiguration='{HttpUtility.UrlEncode(nginxConfiguration.Trim().Replace("'", "''"))}',LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',PublishPathConfiguration='{HttpUtility.UrlEncode(publishPathConfiguration.Trim().Replace("'", "''"))}',FtpConfiguration='{HttpUtility.UrlEncode(ftpConfiguration.Trim().Replace("'", "''"))}',BackgroundJobConfiguration='{HttpUtility.UrlEncode(backgroundJobConfiguration.Trim().Replace("'", "''"))}',WindowsServiceConfiguration='{HttpUtility.UrlEncode(windowsServiceConfiguration.Trim().Replace("'", "''"))}',ConsoleAppConfiguration='{HttpUtility.UrlEncode(consoleAppConfiguration.Trim().Replace("'", "''"))}',WCFConfiguration='{HttpUtility.UrlEncode(wcfconfiguration.Trim().Replace("'", "''"))}',TokenConfiguration='{HttpUtility.UrlEncode(tokenConfiguration.Trim().Replace("'", "''"))}',PaymentConfiguration='{HttpUtility.UrlEncode(paymentConfiguration.Trim().Replace("'", "''"))}',PurchasedToolConfiguration='{HttpUtility.UrlEncode(purchasedToolConfiguration.Trim().Replace("'", "''"))}',TenantWhiteListConfiguration='{HttpUtility.UrlEncode(tenantWhiteListConfiguration.Trim().Replace("'", "''"))}',HelpDocumentConfiguration='{HttpUtility.UrlEncode(helpDocumentConfiguration.Trim().Replace("'", "''"))}',HeaderConfiguration='{HttpUtility.UrlEncode(headerConfiguration.Trim().Replace("'", "''"))}',RoleConfiguration='{HttpUtility.UrlEncode(roleConfiguration.Trim().Replace("'", "''"))}',MongoConfiguration='{HttpUtility.UrlEncode(mongoConfiguration.Trim().Replace("'", "''"))}',MsSqlConfiguration='{HttpUtility.UrlEncode(msSqlConfiguration.Trim().Replace("'", "''"))}',MySqlConfiguration='{HttpUtility.UrlEncode(mySqlConfiguration.Trim().Replace("'", "''"))}',ElasticSearchConfiguration='{HttpUtility.UrlEncode(elasticSearchConfiguration.Trim().Replace("'", "''"))}',TableConfiguration='{HttpUtility.UrlEncode(tableConfiguration.Trim().Replace("'", "''"))}',ColumnConfiguration='{HttpUtility.UrlEncode(columnConfiguration.Trim().Replace("'", "''"))}',FunctionConfiguration='{HttpUtility.UrlEncode(functionConfiguration.Trim().Replace("'", "''"))}',InputConfiguration='{HttpUtility.UrlEncode(inputConfiguration.Trim().Replace("'", "''"))}',CMSConfiguration='{HttpUtility.UrlEncode(cmsconfiguration.Trim().Replace("'", "''"))}',ThemeConfiguration='{HttpUtility.UrlEncode(themeConfiguration.Trim().Replace("'", "''"))}',SSLConfiguration='{HttpUtility.UrlEncode(sslconfiguration.Trim().Replace("'", "''"))}',SoftwareVersionConfiguration='{HttpUtility.UrlEncode(softwareVersionConfiguration.Trim().Replace("'", "''"))}',ExceptionHandlingConfiguration='{HttpUtility.UrlEncode(exceptionHandlingConfiguration.Trim().Replace("'", "''"))}',JsonConfiguration='{HttpUtility.UrlEncode(jsonConfiguration.Trim().Replace("'", "''"))}',XMLConfiguration='{HttpUtility.UrlEncode(xmlconfiguration.Trim().Replace("'", "''"))}',{softwareLanguageId},CssConfiguration='{HttpUtility.UrlEncode(cssConfiguration.Trim().Replace("'", "''"))}',HtmlConfiguration='{HttpUtility.UrlEncode(htmlConfiguration.Trim().Replace("'", "''"))}',TsConfiguration='{HttpUtility.UrlEncode(tsConfiguration.Trim().Replace("'", "''"))}',PackageConfiguration='{HttpUtility.UrlEncode(packageConfiguration.Trim().Replace("'", "''"))}',TestConfiguration='{HttpUtility.UrlEncode(testConfiguration.Trim().Replace("'", "''"))}',DeviceConfiguration='{HttpUtility.UrlEncode(deviceConfiguration.Trim().Replace("'", "''"))}',RedisConfiguration='{HttpUtility.UrlEncode(redisConfiguration.Trim().Replace("'", "''"))}',FileOutputExtensionName='{HttpUtility.UrlEncode(fileOutputExtensionName.Trim().Replace("'", "''"))}',ExportConfiguration='{HttpUtility.UrlEncode(exportConfiguration.Trim().Replace("'", "''"))}',MailConfiguration='{HttpUtility.UrlEncode(mailConfiguration.Trim().Replace("'", "''"))}',ThirdPartyConfiguration='{HttpUtility.UrlEncode(thirdPartyConfiguration.Trim().Replace("'", "''"))}',DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}',PrismaConfiguration='{HttpUtility.UrlEncode(prismaConfiguration.Trim().Replace("'", "''"))}',BootStrapConfiguration='{HttpUtility.UrlEncode(bootStrapConfiguration.Trim().Replace("'", "''"))}',LayoutConfiguration='{HttpUtility.UrlEncode(layoutConfiguration.Trim().Replace("'", "''"))}',ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}',FigmaConfigiration='{HttpUtility.UrlEncode(figmaConfigiration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsUpdatesToExcel(int? Id, string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectConfigurationsUpdatesToCSV(int? Id, string Name, string ConfigurationJsonScheme, string NoteHistory, string Descriptions, bool? CanOverRide, string HasNeedCompileOnChange, int? CreatedById, string SecurityConfiguration, string LogConfiguration, string CacheConfiguration, string DataBaseConfiguration, string NameSpaceConfiguration, string ReactConfiguration, string AngularConfiguration, string NodeJsExpressConfiguration, string NetCoreAPIConfiguration, string IISConfiguration, string HostingConfiguration, string BuildConfiguration, string BackUpConfiguration, string DBJobConfiguration, string DataTypeConfiguration, string FileManagementConfiguration, string DapperConfiguration, string RateLimitConfiguration, string TenantConfiguration, string TenantApiKeyConfiguration, string TenantPriceConfiguration, string NginxConfiguration, string LastValidDate, string CreatedDate, string PublishPathConfiguration, string FtpConfiguration, string BackgroundJobConfiguration, string WindowsServiceConfiguration, string ConsoleAppConfiguration, string WCFConfiguration, string TokenConfiguration, string PaymentConfiguration, string PurchasedToolConfiguration, string TenantWhiteListConfiguration, string HelpDocumentConfiguration, string HeaderConfiguration, string RoleConfiguration, string MongoConfiguration, string MsSqlConfiguration, string MySqlConfiguration, string ElasticSearchConfiguration, string TableConfiguration, string ColumnConfiguration, string FunctionConfiguration, string InputConfiguration, string CMSConfiguration, string ThemeConfiguration, string SSLConfiguration, string SoftwareVersionConfiguration, string ExceptionHandlingConfiguration, string JsonConfiguration, string XMLConfiguration, int? SoftwareLanguageId, string CssConfiguration, string HtmlConfiguration, string TsConfiguration, string PackageConfiguration, string TestConfiguration, string DeviceConfiguration, string RedisConfiguration, string FileOutputExtensionName, string ExportConfiguration, string MailConfiguration, string ThirdPartyConfiguration, string DiagramConfiguration, string PrismaConfiguration, string BootStrapConfiguration, string LayoutConfiguration, string ComponentConfiguration, string FigmaConfigiration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectconfigurationsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectconfigurationsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectConfigurationsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsUpdate>> GetProjectConfigurationsUpdates(int? id = default(int?), string name = default(string), string configurationJsonScheme = default(string), string noteHistory = default(string), string descriptions = default(string), bool? canOverRide = default(bool?), string hasNeedCompileOnChange = default(string), int? createdById = default(int?), string securityConfiguration = default(string), string logConfiguration = default(string), string cacheConfiguration = default(string), string dataBaseConfiguration = default(string), string nameSpaceConfiguration = default(string), string reactConfiguration = default(string), string angularConfiguration = default(string), string nodeJsExpressConfiguration = default(string), string netCoreApiconfiguration = default(string), string iisconfiguration = default(string), string hostingConfiguration = default(string), string buildConfiguration = default(string), string backUpConfiguration = default(string), string dbjobConfiguration = default(string), string dataTypeConfiguration = default(string), string fileManagementConfiguration = default(string), string dapperConfiguration = default(string), string rateLimitConfiguration = default(string), string tenantConfiguration = default(string), string tenantApiKeyConfiguration = default(string), string tenantPriceConfiguration = default(string), string nginxConfiguration = default(string), string lastValidDate = default(string), string createdDate = default(string), string publishPathConfiguration = default(string), string ftpConfiguration = default(string), string backgroundJobConfiguration = default(string), string windowsServiceConfiguration = default(string), string consoleAppConfiguration = default(string), string wcfconfiguration = default(string), string tokenConfiguration = default(string), string paymentConfiguration = default(string), string purchasedToolConfiguration = default(string), string tenantWhiteListConfiguration = default(string), string helpDocumentConfiguration = default(string), string headerConfiguration = default(string), string roleConfiguration = default(string), string mongoConfiguration = default(string), string msSqlConfiguration = default(string), string mySqlConfiguration = default(string), string elasticSearchConfiguration = default(string), string tableConfiguration = default(string), string columnConfiguration = default(string), string functionConfiguration = default(string), string inputConfiguration = default(string), string cmsconfiguration = default(string), string themeConfiguration = default(string), string sslconfiguration = default(string), string softwareVersionConfiguration = default(string), string exceptionHandlingConfiguration = default(string), string jsonConfiguration = default(string), string xmlconfiguration = default(string), int? softwareLanguageId = default(int?), string cssConfiguration = default(string), string htmlConfiguration = default(string), string tsConfiguration = default(string), string packageConfiguration = default(string), string testConfiguration = default(string), string deviceConfiguration = default(string), string redisConfiguration = default(string), string fileOutputExtensionName = default(string), string exportConfiguration = default(string), string mailConfiguration = default(string), string thirdPartyConfiguration = default(string), string diagramConfiguration = default(string), string prismaConfiguration = default(string), string bootStrapConfiguration = default(string), string layoutConfiguration = default(string), string componentConfiguration = default(string), string figmaConfigiration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsUpdatesFunc({id},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',ConfigurationJsonScheme='{HttpUtility.UrlEncode(configurationJsonScheme.Trim().Replace("'", "''"))}',NoteHistory='{HttpUtility.UrlEncode(noteHistory.Trim().Replace("'", "''"))}',Descriptions='{HttpUtility.UrlEncode(descriptions.Trim().Replace("'", "''"))}',CanOverRide={canOverRide?.ToString().ToLower()},HasNeedCompileOnChange='{HttpUtility.UrlEncode(hasNeedCompileOnChange.Trim().Replace("'", "''"))}',{createdById},SecurityConfiguration='{HttpUtility.UrlEncode(securityConfiguration.Trim().Replace("'", "''"))}',LogConfiguration='{HttpUtility.UrlEncode(logConfiguration.Trim().Replace("'", "''"))}',CacheConfiguration='{HttpUtility.UrlEncode(cacheConfiguration.Trim().Replace("'", "''"))}',DataBaseConfiguration='{HttpUtility.UrlEncode(dataBaseConfiguration.Trim().Replace("'", "''"))}',NameSpaceConfiguration='{HttpUtility.UrlEncode(nameSpaceConfiguration.Trim().Replace("'", "''"))}',ReactConfiguration='{HttpUtility.UrlEncode(reactConfiguration.Trim().Replace("'", "''"))}',AngularConfiguration='{HttpUtility.UrlEncode(angularConfiguration.Trim().Replace("'", "''"))}',NodeJsExpressConfiguration='{HttpUtility.UrlEncode(nodeJsExpressConfiguration.Trim().Replace("'", "''"))}',NetCoreAPIConfiguration='{HttpUtility.UrlEncode(netCoreApiconfiguration.Trim().Replace("'", "''"))}',IISConfiguration='{HttpUtility.UrlEncode(iisconfiguration.Trim().Replace("'", "''"))}',HostingConfiguration='{HttpUtility.UrlEncode(hostingConfiguration.Trim().Replace("'", "''"))}',BuildConfiguration='{HttpUtility.UrlEncode(buildConfiguration.Trim().Replace("'", "''"))}',BackUpConfiguration='{HttpUtility.UrlEncode(backUpConfiguration.Trim().Replace("'", "''"))}',DBJobConfiguration='{HttpUtility.UrlEncode(dbjobConfiguration.Trim().Replace("'", "''"))}',DataTypeConfiguration='{HttpUtility.UrlEncode(dataTypeConfiguration.Trim().Replace("'", "''"))}',FileManagementConfiguration='{HttpUtility.UrlEncode(fileManagementConfiguration.Trim().Replace("'", "''"))}',DapperConfiguration='{HttpUtility.UrlEncode(dapperConfiguration.Trim().Replace("'", "''"))}',RateLimitConfiguration='{HttpUtility.UrlEncode(rateLimitConfiguration.Trim().Replace("'", "''"))}',TenantConfiguration='{HttpUtility.UrlEncode(tenantConfiguration.Trim().Replace("'", "''"))}',TenantApiKeyConfiguration='{HttpUtility.UrlEncode(tenantApiKeyConfiguration.Trim().Replace("'", "''"))}',TenantPriceConfiguration='{HttpUtility.UrlEncode(tenantPriceConfiguration.Trim().Replace("'", "''"))}',NginxConfiguration='{HttpUtility.UrlEncode(nginxConfiguration.Trim().Replace("'", "''"))}',LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',PublishPathConfiguration='{HttpUtility.UrlEncode(publishPathConfiguration.Trim().Replace("'", "''"))}',FtpConfiguration='{HttpUtility.UrlEncode(ftpConfiguration.Trim().Replace("'", "''"))}',BackgroundJobConfiguration='{HttpUtility.UrlEncode(backgroundJobConfiguration.Trim().Replace("'", "''"))}',WindowsServiceConfiguration='{HttpUtility.UrlEncode(windowsServiceConfiguration.Trim().Replace("'", "''"))}',ConsoleAppConfiguration='{HttpUtility.UrlEncode(consoleAppConfiguration.Trim().Replace("'", "''"))}',WCFConfiguration='{HttpUtility.UrlEncode(wcfconfiguration.Trim().Replace("'", "''"))}',TokenConfiguration='{HttpUtility.UrlEncode(tokenConfiguration.Trim().Replace("'", "''"))}',PaymentConfiguration='{HttpUtility.UrlEncode(paymentConfiguration.Trim().Replace("'", "''"))}',PurchasedToolConfiguration='{HttpUtility.UrlEncode(purchasedToolConfiguration.Trim().Replace("'", "''"))}',TenantWhiteListConfiguration='{HttpUtility.UrlEncode(tenantWhiteListConfiguration.Trim().Replace("'", "''"))}',HelpDocumentConfiguration='{HttpUtility.UrlEncode(helpDocumentConfiguration.Trim().Replace("'", "''"))}',HeaderConfiguration='{HttpUtility.UrlEncode(headerConfiguration.Trim().Replace("'", "''"))}',RoleConfiguration='{HttpUtility.UrlEncode(roleConfiguration.Trim().Replace("'", "''"))}',MongoConfiguration='{HttpUtility.UrlEncode(mongoConfiguration.Trim().Replace("'", "''"))}',MsSqlConfiguration='{HttpUtility.UrlEncode(msSqlConfiguration.Trim().Replace("'", "''"))}',MySqlConfiguration='{HttpUtility.UrlEncode(mySqlConfiguration.Trim().Replace("'", "''"))}',ElasticSearchConfiguration='{HttpUtility.UrlEncode(elasticSearchConfiguration.Trim().Replace("'", "''"))}',TableConfiguration='{HttpUtility.UrlEncode(tableConfiguration.Trim().Replace("'", "''"))}',ColumnConfiguration='{HttpUtility.UrlEncode(columnConfiguration.Trim().Replace("'", "''"))}',FunctionConfiguration='{HttpUtility.UrlEncode(functionConfiguration.Trim().Replace("'", "''"))}',InputConfiguration='{HttpUtility.UrlEncode(inputConfiguration.Trim().Replace("'", "''"))}',CMSConfiguration='{HttpUtility.UrlEncode(cmsconfiguration.Trim().Replace("'", "''"))}',ThemeConfiguration='{HttpUtility.UrlEncode(themeConfiguration.Trim().Replace("'", "''"))}',SSLConfiguration='{HttpUtility.UrlEncode(sslconfiguration.Trim().Replace("'", "''"))}',SoftwareVersionConfiguration='{HttpUtility.UrlEncode(softwareVersionConfiguration.Trim().Replace("'", "''"))}',ExceptionHandlingConfiguration='{HttpUtility.UrlEncode(exceptionHandlingConfiguration.Trim().Replace("'", "''"))}',JsonConfiguration='{HttpUtility.UrlEncode(jsonConfiguration.Trim().Replace("'", "''"))}',XMLConfiguration='{HttpUtility.UrlEncode(xmlconfiguration.Trim().Replace("'", "''"))}',{softwareLanguageId},CssConfiguration='{HttpUtility.UrlEncode(cssConfiguration.Trim().Replace("'", "''"))}',HtmlConfiguration='{HttpUtility.UrlEncode(htmlConfiguration.Trim().Replace("'", "''"))}',TsConfiguration='{HttpUtility.UrlEncode(tsConfiguration.Trim().Replace("'", "''"))}',PackageConfiguration='{HttpUtility.UrlEncode(packageConfiguration.Trim().Replace("'", "''"))}',TestConfiguration='{HttpUtility.UrlEncode(testConfiguration.Trim().Replace("'", "''"))}',DeviceConfiguration='{HttpUtility.UrlEncode(deviceConfiguration.Trim().Replace("'", "''"))}',RedisConfiguration='{HttpUtility.UrlEncode(redisConfiguration.Trim().Replace("'", "''"))}',FileOutputExtensionName='{HttpUtility.UrlEncode(fileOutputExtensionName.Trim().Replace("'", "''"))}',ExportConfiguration='{HttpUtility.UrlEncode(exportConfiguration.Trim().Replace("'", "''"))}',MailConfiguration='{HttpUtility.UrlEncode(mailConfiguration.Trim().Replace("'", "''"))}',ThirdPartyConfiguration='{HttpUtility.UrlEncode(thirdPartyConfiguration.Trim().Replace("'", "''"))}',DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}',PrismaConfiguration='{HttpUtility.UrlEncode(prismaConfiguration.Trim().Replace("'", "''"))}',BootStrapConfiguration='{HttpUtility.UrlEncode(bootStrapConfiguration.Trim().Replace("'", "''"))}',LayoutConfiguration='{HttpUtility.UrlEncode(layoutConfiguration.Trim().Replace("'", "''"))}',ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}',FigmaConfigiration='{HttpUtility.UrlEncode(figmaConfigiration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectConfigurationsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectConfigurationsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetAll>> GetProjectFunctionGroupsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesToExcel(int? CallAfterFunctionsSuccessfullResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesToCSV(int? CallAfterFunctionsSuccessfullResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycallafterfunctionssuccessfullresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponse>> GetProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponses(int? callAfterFunctionsSuccessfullResponse = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponsesFunc({callAfterFunctionsSuccessfullResponse})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCallAfterFunctionsSuccessfullResponse>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCommission>> GetProjectFunctionGroupsGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCurrencyId>> GetProjectFunctionGroupsGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByFunctionGroupNamesToExcel(string FunctionGroupName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByFunctionGroupNamesToCSV(string FunctionGroupName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyfunctiongroupnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByFunctionGroupNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByFunctionGroupName>> GetProjectFunctionGroupsGetByFunctionGroupNames(string functionGroupName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByFunctionGroupNamesFunc(FunctionGroupName='{HttpUtility.UrlEncode(functionGroupName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByFunctionGroupNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByFunctionGroupName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetById>> GetProjectFunctionGroupsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByPrice>> GetProjectFunctionGroupsGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetBySoftWareLanguageIdsToExcel(int? SoftWareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsGetBySoftWareLanguageIdsToCSV(int? SoftWareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsGetBySoftWareLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetBySoftWareLanguageId>> GetProjectFunctionGroupsGetBySoftWareLanguageIds(int? softWareLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsGetBySoftWareLanguageIdsFunc({softWareLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsGetBySoftWareLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsGetBySoftWareLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsInsertsToExcel(string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsInsertsToCSV(string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsInsert>> GetProjectFunctionGroupsInserts(string functionGroupName = default(string), int? callAfterFunctionsSuccessfullResponse = default(int?), int? softWareLanguageId = default(int?), int? currencyId = default(int?), decimal? price = default(decimal?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsInsertsFunc(FunctionGroupName='{HttpUtility.UrlEncode(functionGroupName.Trim().Replace("'", "''"))}',{callAfterFunctionsSuccessfullResponse},{softWareLanguageId},{currencyId},{price},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsUpdatesToExcel(int? Id, string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionGroupsUpdatesToCSV(int? Id, string FunctionGroupName, int? CallAfterFunctionsSuccessfullResponse, int? SoftWareLanguageId, int? CurrencyId, decimal? Price, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctiongroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctiongroupsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionGroupsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsUpdate>> GetProjectFunctionGroupsUpdates(int? id = default(int?), string functionGroupName = default(string), int? callAfterFunctionsSuccessfullResponse = default(int?), int? softWareLanguageId = default(int?), int? currencyId = default(int?), decimal? price = default(decimal?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsUpdatesFunc({id},FunctionGroupName='{HttpUtility.UrlEncode(functionGroupName.Trim().Replace("'", "''"))}',{callAfterFunctionsSuccessfullResponse},{softWareLanguageId},{currencyId},{price},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionGroupsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionGroupsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetAll>> GetProjectFunctionsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByAcceptableQuerystringsToExcel(string AcceptableQuerystrings, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByAcceptableQuerystringsToCSV(string AcceptableQuerystrings, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyacceptablequerystrings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByAcceptableQuerystrings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAcceptableQuerystring>> GetProjectFunctionsGetByAcceptableQuerystrings(string acceptableQuerystrings = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByAcceptableQuerystringsFunc(AcceptableQuerystrings='{HttpUtility.UrlEncode(acceptableQuerystrings.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByAcceptableQuerystrings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAcceptableQuerystring>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByAccessModifierIdsToExcel(int? AccessModifierId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyaccessmodifierids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyaccessmodifierids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByAccessModifierIdsToCSV(int? AccessModifierId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyaccessmodifierids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyaccessmodifierids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByAccessModifierIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAccessModifierId>> GetProjectFunctionsGetByAccessModifierIds(int? accessModifierId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByAccessModifierIdsFunc({accessModifierId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByAccessModifierIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByAccessModifierId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByApiMethodCommentsToExcel(string ApiMethodComment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyapimethodcomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyapimethodcomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByApiMethodCommentsToCSV(string ApiMethodComment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyapimethodcomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyapimethodcomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByApiMethodComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByApiMethodComment>> GetProjectFunctionsGetByApiMethodComments(string apiMethodComment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByApiMethodCommentsFunc(ApiMethodComment='{HttpUtility.UrlEncode(apiMethodComment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByApiMethodComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByApiMethodComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCacheDbConnectionsToExcel(int? CacheDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCacheDbConnectionsToCSV(int? CacheDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCacheDbConnections(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheDbConnection>> GetProjectFunctionsGetByCacheDbConnections(int? cacheDbconnection = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCacheDbConnectionsFunc({cacheDbconnection})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCacheDbConnections(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheDbConnection>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCacheTypesToExcel(int? CacheType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCacheTypesToCSV(int? CacheType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycachetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycachetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCacheTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheType>> GetProjectFunctionsGetByCacheTypes(int? cacheType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCacheTypesFunc({cacheType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCacheTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCacheType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCommission>> GetProjectFunctionsGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCreatedDate>> GetProjectFunctionsGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCrudTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCrudType>> GetProjectFunctionsGetByCrudTypes(int? crudType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCrudTypesFunc({crudType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCrudTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCrudType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCurrencyId>> GetProjectFunctionsGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByCustomCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCustomCode>> GetProjectFunctionsGetByCustomCodes(string customCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByCustomCodesFunc(CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByCustomCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByCustomCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByDatabaseTypesIdsToExcel(int? DatabaseTypesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydatabasetypesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydatabasetypesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByDatabaseTypesIdsToCSV(int? DatabaseTypesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydatabasetypesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydatabasetypesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByDatabaseTypesIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDatabaseTypesId>> GetProjectFunctionsGetByDatabaseTypesIds(int? databaseTypesId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByDatabaseTypesIdsFunc({databaseTypesId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByDatabaseTypesIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDatabaseTypesId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByDocumentUrlsToExcel(string DocumentUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydocumenturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydocumenturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByDocumentUrlsToCSV(string DocumentUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbydocumenturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbydocumenturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByDocumentUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDocumentUrl>> GetProjectFunctionsGetByDocumentUrls(string documentUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByDocumentUrlsFunc(DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByDocumentUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByDocumentUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByEventTypesToExcel(int? EventType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyeventtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyeventtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByEventTypesToCSV(int? EventType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyeventtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyeventtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByEventTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByEventType>> GetProjectFunctionsGetByEventTypes(int? eventType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByEventTypesFunc({eventType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByEventTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByEventType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByExampleRequestsToExcel(string ExampleRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexamplerequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexamplerequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByExampleRequestsToCSV(string ExampleRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexamplerequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexamplerequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByExampleRequests(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleRequest>> GetProjectFunctionsGetByExampleRequests(string exampleRequest = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByExampleRequestsFunc(ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByExampleRequests(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleRequest>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByExampleResponsesToExcel(string ExampleResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexampleresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexampleresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByExampleResponsesToCSV(string ExampleResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyexampleresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyexampleresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByExampleResponses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleResponse>> GetProjectFunctionsGetByExampleResponses(string exampleResponse = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByExampleResponsesFunc(ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByExampleResponses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByExampleResponse>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionCallRankInGroupsToExcel(int? FunctionCallRankInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionCallRankInGroupsToCSV(int? FunctionCallRankInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctioncallrankingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByFunctionCallRankInGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionCallRankInGroup>> GetProjectFunctionsGetByFunctionCallRankInGroups(int? functionCallRankInGroup = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByFunctionCallRankInGroupsFunc({functionCallRankInGroup})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByFunctionCallRankInGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionCallRankInGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionGroupIdsToExcel(int? FunctionGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctiongroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctiongroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionGroupIdsToCSV(int? FunctionGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctiongroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctiongroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByFunctionGroupIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionGroupId>> GetProjectFunctionsGetByFunctionGroupIds(int? functionGroupId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByFunctionGroupIdsFunc({functionGroupId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByFunctionGroupIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionGroupId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionIsParentInGroupsToExcel(bool? FunctionIsParentInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByFunctionIsParentInGroupsToCSV(bool? FunctionIsParentInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyfunctionisparentingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByFunctionIsParentInGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionIsParentInGroup>> GetProjectFunctionsGetByFunctionIsParentInGroups(bool? functionIsParentInGroup = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByFunctionIsParentInGroupsFunc(FunctionIsParentInGroup={functionIsParentInGroup?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByFunctionIsParentInGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByFunctionIsParentInGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasAsyncsToExcel(bool? HasAsync, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasasyncs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasasyncs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasAsyncsToCSV(bool? HasAsync, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasasyncs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasasyncs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHasAsyncs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAsync>> GetProjectFunctionsGetByHasAsyncs(bool? hasAsync = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHasAsyncsFunc(HasAsync={hasAsync?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHasAsyncs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAsync>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasAuditEventsToExcel(bool? HasAuditEvents, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasauditevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasauditevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasAuditEventsToCSV(bool? HasAuditEvents, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasauditevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasauditevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHasAuditEvents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAuditEvent>> GetProjectFunctionsGetByHasAuditEvents(bool? hasAuditEvents = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHasAuditEventsFunc(HasAuditEvents={hasAuditEvents?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHasAuditEvents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasAuditEvent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasBusEventsToExcel(bool? HasBusEvent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasbusevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasbusevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasBusEventsToCSV(bool? HasBusEvent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasbusevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasbusevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHasBusEvents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasBusEvent>> GetProjectFunctionsGetByHasBusEvents(bool? hasBusEvent = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHasBusEventsFunc(HasBusEvent={hasBusEvent?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHasBusEvents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasBusEvent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasCacheMethodsToExcel(bool? HasCacheMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhascachemethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhascachemethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasCacheMethodsToCSV(bool? HasCacheMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhascachemethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhascachemethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHasCacheMethods(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasCacheMethod>> GetProjectFunctionsGetByHasCacheMethods(bool? hasCacheMethod = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHasCacheMethodsFunc(HasCacheMethod={hasCacheMethod?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHasCacheMethods(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasCacheMethod>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasRateLimitsToExcel(bool? HasRateLimit, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasratelimits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasratelimits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHasRateLimitsToCSV(bool? HasRateLimit, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyhasratelimits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyhasratelimits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHasRateLimits(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasRateLimit>> GetProjectFunctionsGetByHasRateLimits(bool? hasRateLimit = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHasRateLimitsFunc(HasRateLimit={hasRateLimit?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHasRateLimits(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHasRateLimit>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHeaderSchemesToExcel(string HeaderScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyheaderschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyheaderschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByHeaderSchemesToCSV(string HeaderScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyheaderschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyheaderschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByHeaderSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHeaderScheme>> GetProjectFunctionsGetByHeaderSchemes(string headerScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByHeaderSchemesFunc(HeaderScheme='{HttpUtility.UrlEncode(headerScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByHeaderSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByHeaderScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByi18JsonsToExcel(string i18Json, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyi18jsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyi18jsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByi18JsonsToCSV(string i18Json, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyi18jsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyi18jsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByi18Jsons(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByi18Json>> GetProjectFunctionsGetByi18Jsons(string i18Json = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByi18JsonsFunc(i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByi18Jsons(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByi18Json>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetById>> GetProjectFunctionsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsToExcel(int? IfResponseIsSuccessCallThisFunctionId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsToCSV(int? IfResponseIsSuccessCallThisFunctionId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyifresponseissuccesscallthisfunctionids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionId>> GetProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIds(int? ifResponseIsSuccessCallThisFunctionId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIdsFunc({ifResponseIsSuccessCallThisFunctionId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIfResponseIsSuccessCallThisFunctionId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIsDeletedsToExcel(bool? IsDeleted, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyisdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyisdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByIsDeletedsToCSV(bool? IsDeleted, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyisdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyisdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByIsDeleteds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIsDeleted>> GetProjectFunctionsGetByIsDeleteds(bool? isDeleted = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByIsDeletedsFunc(IsDeleted={isDeleted?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByIsDeleteds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByIsDeleted>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByLastScanDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLastScanDate>> GetProjectFunctionsGetByLastScanDates(string lastScanDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByLastScanDatesFunc(LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByLastScanDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLastScanDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLogCodeMergeDateDbConnectionsToExcel(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLogCodeMergeDateDbConnectionsToCSV(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByLogCodeMergeDateDbConnections(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbConnection>> GetProjectFunctionsGetByLogCodeMergeDateDbConnections(string logCodeMergeDateDbconnection = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByLogCodeMergeDateDbConnectionsFunc(LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByLogCodeMergeDateDbConnections(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbConnection>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLogCodeMergeDateDbTypesToExcel(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByLogCodeMergeDateDbTypesToCSV(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbylogcodemergedatedbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByLogCodeMergeDateDbTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbType>> GetProjectFunctionsGetByLogCodeMergeDateDbTypes(int? logCodeMergeDateDbtype = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByLogCodeMergeDateDbTypesFunc({logCodeMergeDateDbtype})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByLogCodeMergeDateDbTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByLogCodeMergeDateDbType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByNameSpaceListsToExcel(string NameSpaceList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbynamespacelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbynamespacelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByNameSpaceListsToCSV(string NameSpaceList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbynamespacelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbynamespacelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByNameSpaceLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByNameSpaceList>> GetProjectFunctionsGetByNameSpaceLists(string nameSpaceList = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByNameSpaceListsFunc(NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByNameSpaceLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByNameSpaceList>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPrice>> GetProjectFunctionsGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByPublishedDatesToExcel(string PublishedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbypublisheddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbypublisheddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByPublishedDatesToCSV(string PublishedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbypublisheddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbypublisheddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByPublishedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPublishedDate>> GetProjectFunctionsGetByPublishedDates(string publishedDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByPublishedDatesFunc(PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByPublishedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByPublishedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByQueries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByQuery>> GetProjectFunctionsGetByQueries(string query = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByQueriesFunc(Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByQueries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByQuery>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRateLimitPropertiesToExcel(string RateLimitProperty, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyratelimitproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyratelimitproperties/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRateLimitPropertiesToCSV(string RateLimitProperty, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyratelimitproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyratelimitproperties/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByRateLimitProperties(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRateLimitProperty>> GetProjectFunctionsGetByRateLimitProperties(string rateLimitProperty = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByRateLimitPropertiesFunc(RateLimitProperty='{HttpUtility.UrlEncode(rateLimitProperty.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByRateLimitProperties(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRateLimitProperty>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByRequestSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRequestScheme>> GetProjectFunctionsGetByRequestSchemes(string requestScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByRequestSchemesFunc(RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByRequestSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRequestScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseHasMultiModelsToExcel(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseHasMultiModelsToCSV(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasmultimodels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByResponseHasMultiModels(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasMultiModel>> GetProjectFunctionsGetByResponseHasMultiModels(bool? responseHasMultiModel = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByResponseHasMultiModelsFunc(ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByResponseHasMultiModels(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasMultiModel>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseHasReturnValuesToExcel(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseHasReturnValuesToCSV(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponsehasreturnvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByResponseHasReturnValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasReturnValue>> GetProjectFunctionsGetByResponseHasReturnValues(bool? responseHasReturnValue = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByResponseHasReturnValuesFunc(ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByResponseHasReturnValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseHasReturnValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByResponseSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseScheme>> GetProjectFunctionsGetByResponseSchemes(string responseScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByResponseSchemesFunc(ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByResponseSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByResponseScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRoutesToExcel(string Route, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyroutes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyroutes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByRoutesToCSV(string Route, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyroutes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyroutes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByRoutes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRoute>> GetProjectFunctionsGetByRoutes(string route = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByRoutesFunc(Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByRoutes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByRoute>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetBySoftwareLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySoftwareLanguageId>> GetProjectFunctionsGetBySoftwareLanguageIds(int? softwareLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetBySoftwareLanguageIdsFunc({softwareLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetBySoftwareLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySoftwareLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByStatusToExcel(int? Statu, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbystatus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbystatus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByStatusToCSV(int? Statu, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbystatus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbystatus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByStatus(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByStatu>> GetProjectFunctionsGetByStatus(int? statu = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByStatusFunc({statu})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByStatus(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByStatu>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetBySuccessNotificationTemplatesToExcel(string SuccessNotificationTemplate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetBySuccessNotificationTemplatesToCSV(string SuccessNotificationTemplate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbysuccessnotificationtemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetBySuccessNotificationTemplates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySuccessNotificationTemplate>> GetProjectFunctionsGetBySuccessNotificationTemplates(string successNotificationTemplate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetBySuccessNotificationTemplatesFunc(SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetBySuccessNotificationTemplates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetBySuccessNotificationTemplate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByUserAgents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserAgent>> GetProjectFunctionsGetByUserAgents(string userAgent = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByUserAgentsFunc(UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByUserAgents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserAgent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserConnectionsIdsToExcel(int? UserConnectionsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserconnectionsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserconnectionsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserConnectionsIdsToCSV(int? UserConnectionsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserconnectionsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserconnectionsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByUserConnectionsIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserConnectionsId>> GetProjectFunctionsGetByUserConnectionsIds(int? userConnectionsId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByUserConnectionsIdsFunc({userConnectionsId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByUserConnectionsIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserConnectionsId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserDescriptionForMethodsToExcel(string UserDescriptionForMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserDescriptionForMethodsToCSV(string UserDescriptionForMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserdescriptionformethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByUserDescriptionForMethods(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserDescriptionForMethod>> GetProjectFunctionsGetByUserDescriptionForMethods(string userDescriptionForMethod = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByUserDescriptionForMethodsFunc(UserDescriptionForMethod='{HttpUtility.UrlEncode(userDescriptionForMethod.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByUserDescriptionForMethods(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserDescriptionForMethod>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserId>> GetProjectFunctionsGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogAllRequestsToExcel(bool? WillLogAllRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogAllRequestsToCSV(bool? WillLogAllRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWillLogAllRequests(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllRequest>> GetProjectFunctionsGetByWillLogAllRequests(bool? willLogAllRequest = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWillLogAllRequestsFunc(WillLogAllRequest={willLogAllRequest?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWillLogAllRequests(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllRequest>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogAllResponsesToExcel(bool? WillLogAllResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogAllResponsesToCSV(bool? WillLogAllResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogallresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogallresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWillLogAllResponses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllResponse>> GetProjectFunctionsGetByWillLogAllResponses(bool? willLogAllResponse = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWillLogAllResponsesFunc(WillLogAllResponse={willLogAllResponse?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWillLogAllResponses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogAllResponse>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogCodeMergeDatesToExcel(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWillLogCodeMergeDatesToCSV(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywilllogcodemergedates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWillLogCodeMergeDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogCodeMergeDate>> GetProjectFunctionsGetByWillLogCodeMergeDates(bool? willLogCodeMergeDate = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWillLogCodeMergeDatesFunc(WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWillLogCodeMergeDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWillLogCodeMergeDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithHeadersToExcel(string WithHeaders, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithHeadersToCSV(string WithHeaders, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWithHeaders(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithHeader>> GetProjectFunctionsGetByWithHeaders(string withHeaders = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWithHeadersFunc(WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWithHeaders(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithHeader>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithMethodsToExcel(string WithMethods, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithmethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithmethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithMethodsToCSV(string WithMethods, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithmethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithmethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWithMethods(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithMethod>> GetProjectFunctionsGetByWithMethods(string withMethods = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWithMethodsFunc(WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWithMethods(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithMethod>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithOriginsToExcel(string WithOrigins, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithorigins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithorigins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetByWithOriginsToCSV(string WithOrigins, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetbywithorigins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetbywithorigins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetByWithOrigins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithOrigin>> GetProjectFunctionsGetByWithOrigins(string withOrigins = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetByWithOriginsFunc(WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetByWithOrigins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetByWithOrigin>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetCreatedDateBetween>> GetProjectFunctionsGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetLastScanDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetLastScanDateBetween>> GetProjectFunctionsGetLastScanDateBetweens(string lastScanDateStart = default(string), string lastScanDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetLastScanDateBetweensFunc(LastScanDateStart='{HttpUtility.UrlEncode(lastScanDateStart.Trim().Replace("'", "''"))}',LastScanDateEnd='{HttpUtility.UrlEncode(lastScanDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetLastScanDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetLastScanDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetPublishedDateBetweensToExcel(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetpublisheddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetpublisheddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsGetPublishedDateBetweensToCSV(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsgetpublisheddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsgetpublisheddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsGetPublishedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetPublishedDateBetween>> GetProjectFunctionsGetPublishedDateBetweens(string publishedDateStart = default(string), string publishedDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsGetPublishedDateBetweensFunc(PublishedDateStart='{HttpUtility.UrlEncode(publishedDateStart.Trim().Replace("'", "''"))}',PublishedDateEnd='{HttpUtility.UrlEncode(publishedDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsGetPublishedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsGetPublishedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsInsertsToExcel(int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsInsertsToCSV(int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsInsert>> GetProjectFunctionsInserts(int? databaseTypesId = default(int?), int? crudType = default(int?), string query = default(string), int? userId = default(int?), string userAgent = default(string), string createdDate = default(string), string lastScanDate = default(string), int? userConnectionsId = default(int?), string requestScheme = default(string), string responseScheme = default(string), string route = default(string), string headerScheme = default(string), string withMethods = default(string), string withHeaders = default(string), string withOrigins = default(string), int? cacheDbconnection = default(int?), int? cacheType = default(int?), string documentUrl = default(string), string exampleRequest = default(string), string exampleResponse = default(string), bool? hasAsync = default(bool?), bool? hasCacheMethod = default(bool?), bool? responseHasMultiModel = default(bool?), bool? responseHasReturnValue = default(bool?), int? logCodeMergeDateDbtype = default(int?), string logCodeMergeDateDbconnection = default(string), bool? willLogAllRequest = default(bool?), bool? willLogCodeMergeDate = default(bool?), bool? willLogAllResponse = default(bool?), bool? isDeleted = default(bool?), int? statu = default(int?), string publishedDate = default(string), int? eventType = default(int?), int? accessModifierId = default(int?), string acceptableQuerystrings = default(string), bool? hasRateLimit = default(bool?), string rateLimitProperty = default(string), bool? hasAuditEvents = default(bool?), bool? hasBusEvent = default(bool?), string i18Json = default(string), int? ifResponseIsSuccessCallThisFunctionId = default(int?), string successNotificationTemplate = default(string), string apiMethodComment = default(string), string userDescriptionForMethod = default(string), string nameSpaceList = default(string), int? softwareLanguageId = default(int?), int? functionGroupId = default(int?), bool? functionIsParentInGroup = default(bool?), int? functionCallRankInGroup = default(int?), string customCode = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsInsertsFunc({databaseTypesId},{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userConnectionsId},RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}',HeaderScheme='{HttpUtility.UrlEncode(headerScheme.Trim().Replace("'", "''"))}',WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}',WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}',WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}',{cacheDbconnection},{cacheType},DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}',ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}',ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}',HasAsync={hasAsync?.ToString().ToLower()},HasCacheMethod={hasCacheMethod?.ToString().ToLower()},ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()},ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()},{logCodeMergeDateDbtype},LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}',WillLogAllRequest={willLogAllRequest?.ToString().ToLower()},WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()},WillLogAllResponse={willLogAllResponse?.ToString().ToLower()},IsDeleted={isDeleted?.ToString().ToLower()},{statu},PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}',{eventType},{accessModifierId},AcceptableQuerystrings='{HttpUtility.UrlEncode(acceptableQuerystrings.Trim().Replace("'", "''"))}',HasRateLimit={hasRateLimit?.ToString().ToLower()},RateLimitProperty='{HttpUtility.UrlEncode(rateLimitProperty.Trim().Replace("'", "''"))}',HasAuditEvents={hasAuditEvents?.ToString().ToLower()},HasBusEvent={hasBusEvent?.ToString().ToLower()},i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}',{ifResponseIsSuccessCallThisFunctionId},SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}',ApiMethodComment='{HttpUtility.UrlEncode(apiMethodComment.Trim().Replace("'", "''"))}',UserDescriptionForMethod='{HttpUtility.UrlEncode(userDescriptionForMethod.Trim().Replace("'", "''"))}',NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}',{softwareLanguageId},{functionGroupId},FunctionIsParentInGroup={functionIsParentInGroup?.ToString().ToLower()},{functionCallRankInGroup},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',{price},{currencyId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsUpdatesToExcel(int? Id, int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectFunctionsUpdatesToCSV(int? Id, int? DatabaseTypesId, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, int? UserConnectionsId, string RequestScheme, string ResponseScheme, string Route, string HeaderScheme, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, string ExampleRequest, string ExampleResponse, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, int? AccessModifierId, string AcceptableQuerystrings, bool? HasRateLimit, string RateLimitProperty, bool? HasAuditEvents, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisFunctionId, string SuccessNotificationTemplate, string ApiMethodComment, string UserDescriptionForMethod, string NameSpaceList, int? SoftwareLanguageId, int? FunctionGroupId, bool? FunctionIsParentInGroup, int? FunctionCallRankInGroup, string CustomCode, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectfunctionsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectfunctionsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectFunctionsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsUpdate>> GetProjectFunctionsUpdates(int? id = default(int?), int? databaseTypesId = default(int?), int? crudType = default(int?), string query = default(string), int? userId = default(int?), string userAgent = default(string), string createdDate = default(string), string lastScanDate = default(string), int? userConnectionsId = default(int?), string requestScheme = default(string), string responseScheme = default(string), string route = default(string), string headerScheme = default(string), string withMethods = default(string), string withHeaders = default(string), string withOrigins = default(string), int? cacheDbconnection = default(int?), int? cacheType = default(int?), string documentUrl = default(string), string exampleRequest = default(string), string exampleResponse = default(string), bool? hasAsync = default(bool?), bool? hasCacheMethod = default(bool?), bool? responseHasMultiModel = default(bool?), bool? responseHasReturnValue = default(bool?), int? logCodeMergeDateDbtype = default(int?), string logCodeMergeDateDbconnection = default(string), bool? willLogAllRequest = default(bool?), bool? willLogCodeMergeDate = default(bool?), bool? willLogAllResponse = default(bool?), bool? isDeleted = default(bool?), int? statu = default(int?), string publishedDate = default(string), int? eventType = default(int?), int? accessModifierId = default(int?), string acceptableQuerystrings = default(string), bool? hasRateLimit = default(bool?), string rateLimitProperty = default(string), bool? hasAuditEvents = default(bool?), bool? hasBusEvent = default(bool?), string i18Json = default(string), int? ifResponseIsSuccessCallThisFunctionId = default(int?), string successNotificationTemplate = default(string), string apiMethodComment = default(string), string userDescriptionForMethod = default(string), string nameSpaceList = default(string), int? softwareLanguageId = default(int?), int? functionGroupId = default(int?), bool? functionIsParentInGroup = default(bool?), int? functionCallRankInGroup = default(int?), string customCode = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsUpdatesFunc({id},{databaseTypesId},{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userConnectionsId},RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}',HeaderScheme='{HttpUtility.UrlEncode(headerScheme.Trim().Replace("'", "''"))}',WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}',WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}',WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}',{cacheDbconnection},{cacheType},DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}',ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}',ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}',HasAsync={hasAsync?.ToString().ToLower()},HasCacheMethod={hasCacheMethod?.ToString().ToLower()},ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()},ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()},{logCodeMergeDateDbtype},LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}',WillLogAllRequest={willLogAllRequest?.ToString().ToLower()},WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()},WillLogAllResponse={willLogAllResponse?.ToString().ToLower()},IsDeleted={isDeleted?.ToString().ToLower()},{statu},PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}',{eventType},{accessModifierId},AcceptableQuerystrings='{HttpUtility.UrlEncode(acceptableQuerystrings.Trim().Replace("'", "''"))}',HasRateLimit={hasRateLimit?.ToString().ToLower()},RateLimitProperty='{HttpUtility.UrlEncode(rateLimitProperty.Trim().Replace("'", "''"))}',HasAuditEvents={hasAuditEvents?.ToString().ToLower()},HasBusEvent={hasBusEvent?.ToString().ToLower()},i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}',{ifResponseIsSuccessCallThisFunctionId},SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}',ApiMethodComment='{HttpUtility.UrlEncode(apiMethodComment.Trim().Replace("'", "''"))}',UserDescriptionForMethod='{HttpUtility.UrlEncode(userDescriptionForMethod.Trim().Replace("'", "''"))}',NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}',{softwareLanguageId},{functionGroupId},FunctionIsParentInGroup={functionIsParentInGroup?.ToString().ToLower()},{functionCallRankInGroup},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',{price},{currencyId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectFunctionsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectFunctionsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetAll>> GetProjectPageComponentElementsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByApiRequestUrlsToExcel(string ApiRequestUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByApiRequestUrlsToCSV(string ApiRequestUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyapirequesturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByApiRequestUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByApiRequestUrl>> GetProjectPageComponentElementsGetByApiRequestUrls(string apiRequestUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByApiRequestUrlsFunc(ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByApiRequestUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByApiRequestUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByBusEventConnectionIdsToExcel(int? BusEventConnectionId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByBusEventConnectionIdsToCSV(int? BusEventConnectionId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbybuseventconnectionids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByBusEventConnectionIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByBusEventConnectionId>> GetProjectPageComponentElementsGetByBusEventConnectionIds(int? busEventConnectionId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByBusEventConnectionIdsFunc({busEventConnectionId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByBusEventConnectionIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByBusEventConnectionId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCacheDbConnectionsToExcel(int? CacheDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCacheDbConnectionsToCSV(int? CacheDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCacheDbConnections(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheDbConnection>> GetProjectPageComponentElementsGetByCacheDbConnections(int? cacheDbconnection = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCacheDbConnectionsFunc({cacheDbconnection})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCacheDbConnections(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheDbConnection>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCacheTypesToExcel(int? CacheType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCacheTypesToCSV(int? CacheType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycachetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycachetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCacheTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheType>> GetProjectPageComponentElementsGetByCacheTypes(int? cacheType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCacheTypesFunc({cacheType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCacheTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCacheType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComment>> GetProjectPageComponentElementsGetByComments(string comment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCommentsFunc(Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCommission>> GetProjectPageComponentElementsGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentCallRankInGroupsToExcel(int? ComponentCallRankInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentCallRankInGroupsToCSV(int? ComponentCallRankInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentcallrankingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByComponentCallRankInGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentCallRankInGroup>> GetProjectPageComponentElementsGetByComponentCallRankInGroups(int? componentCallRankInGroup = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByComponentCallRankInGroupsFunc({componentCallRankInGroup})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByComponentCallRankInGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentCallRankInGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentGroupIdsToExcel(int? ComponentGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentGroupIdsToCSV(int? ComponentGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentgroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByComponentGroupIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentGroupId>> GetProjectPageComponentElementsGetByComponentGroupIds(int? componentGroupId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByComponentGroupIdsFunc({componentGroupId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByComponentGroupIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentGroupId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentIsParentInGroupsToExcel(bool? ComponentIsParentInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByComponentIsParentInGroupsToCSV(bool? ComponentIsParentInGroup, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycomponentisparentingroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByComponentIsParentInGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentIsParentInGroup>> GetProjectPageComponentElementsGetByComponentIsParentInGroups(bool? componentIsParentInGroup = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByComponentIsParentInGroupsFunc(ComponentIsParentInGroup={componentIsParentInGroup?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByComponentIsParentInGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByComponentIsParentInGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCreatedDate>> GetProjectPageComponentElementsGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCrudTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCrudType>> GetProjectPageComponentElementsGetByCrudTypes(int? crudType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCrudTypesFunc({crudType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCrudTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCrudType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCurrencyId>> GetProjectPageComponentElementsGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomAnimationSchemesToExcel(string CustomAnimationScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomAnimationSchemesToCSV(string CustomAnimationScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomanimationschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCustomAnimationSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomAnimationScheme>> GetProjectPageComponentElementsGetByCustomAnimationSchemes(string customAnimationScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCustomAnimationSchemesFunc(CustomAnimationScheme='{HttpUtility.UrlEncode(customAnimationScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCustomAnimationSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomAnimationScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCustomCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCode>> GetProjectPageComponentElementsGetByCustomCodes(string customCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCustomCodesFunc(CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCustomCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomCssesToExcel(string CustomCss, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomCssesToCSV(string CustomCss, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomcsses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCustomCsses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCss>> GetProjectPageComponentElementsGetByCustomCsses(string customCss = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCustomCssesFunc(CustomCss='{HttpUtility.UrlEncode(customCss.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCustomCsses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomCss>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomSchemesToExcel(string CustomScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomSchemesToCSV(string CustomScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCustomSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScheme>> GetProjectPageComponentElementsGetByCustomSchemes(string customScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCustomSchemesFunc(CustomScheme='{HttpUtility.UrlEncode(customScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCustomSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomScriptsToExcel(string CustomScript, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByCustomScriptsToCSV(string CustomScript, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbycustomscripts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByCustomScripts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScript>> GetProjectPageComponentElementsGetByCustomScripts(string customScript = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByCustomScriptsFunc(CustomScript='{HttpUtility.UrlEncode(customScript.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByCustomScripts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByCustomScript>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByDatabaseTypesIdsToExcel(int? DatabaseTypesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByDatabaseTypesIdsToCSV(int? DatabaseTypesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydatabasetypesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByDatabaseTypesIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDatabaseTypesId>> GetProjectPageComponentElementsGetByDatabaseTypesIds(int? databaseTypesId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByDatabaseTypesIdsFunc({databaseTypesId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByDatabaseTypesIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDatabaseTypesId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByDocumentUrlsToExcel(string DocumentUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByDocumentUrlsToCSV(string DocumentUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbydocumenturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByDocumentUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDocumentUrl>> GetProjectPageComponentElementsGetByDocumentUrls(string documentUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByDocumentUrlsFunc(DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByDocumentUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByDocumentUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByEventTypesToExcel(int? EventType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByEventTypesToCSV(int? EventType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyeventtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByEventTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByEventType>> GetProjectPageComponentElementsGetByEventTypes(int? eventType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByEventTypesFunc({eventType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByEventTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByEventType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleHtmlCodesToExcel(string ExampleHtmlCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleHtmlCodesToCSV(string ExampleHtmlCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplehtmlcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByExampleHtmlCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleHtmlCode>> GetProjectPageComponentElementsGetByExampleHtmlCodes(string exampleHtmlCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByExampleHtmlCodesFunc(ExampleHtmlCode='{HttpUtility.UrlEncode(exampleHtmlCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByExampleHtmlCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleHtmlCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleRequestsToExcel(string ExampleRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleRequestsToCSV(string ExampleRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexamplerequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByExampleRequests(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleRequest>> GetProjectPageComponentElementsGetByExampleRequests(string exampleRequest = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByExampleRequestsFunc(ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByExampleRequests(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleRequest>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleResponsesToExcel(string ExampleResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByExampleResponsesToCSV(string ExampleResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyexampleresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByExampleResponses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleResponse>> GetProjectPageComponentElementsGetByExampleResponses(string exampleResponse = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByExampleResponsesFunc(ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByExampleResponses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByExampleResponse>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersToExcel(int? FunctionTriggerCallAfterSuccessfullTrigger, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersToCSV(int? FunctionTriggerCallAfterSuccessfullTrigger, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggercallaftersuccessfulltriggers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggers(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTrigger>> GetProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggers(int? functionTriggerCallAfterSuccessfullTrigger = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggersFunc({functionTriggerCallAfterSuccessfullTrigger})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTriggers(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerCallAfterSuccessfullTrigger>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerGroupIdsToExcel(int? FunctionTriggerGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerGroupIdsToCSV(int? FunctionTriggerGroupId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggergroupids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByFunctionTriggerGroupIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerGroupId>> GetProjectPageComponentElementsGetByFunctionTriggerGroupIds(int? functionTriggerGroupId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByFunctionTriggerGroupIdsFunc({functionTriggerGroupId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByFunctionTriggerGroupIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerGroupId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerRanksToExcel(int? FunctionTriggerRank, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByFunctionTriggerRanksToCSV(int? FunctionTriggerRank, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyfunctiontriggerranks/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByFunctionTriggerRanks(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerRank>> GetProjectPageComponentElementsGetByFunctionTriggerRanks(int? functionTriggerRank = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByFunctionTriggerRanksFunc({functionTriggerRank})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByFunctionTriggerRanks(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByFunctionTriggerRank>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasAsyncsToExcel(bool? HasAsync, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasAsyncsToCSV(bool? HasAsync, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasasyncs/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByHasAsyncs(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasAsync>> GetProjectPageComponentElementsGetByHasAsyncs(bool? hasAsync = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByHasAsyncsFunc(HasAsync={hasAsync?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByHasAsyncs(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasAsync>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasBusEventsToExcel(bool? HasBusEvent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasBusEventsToCSV(bool? HasBusEvent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhasbusevents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByHasBusEvents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasBusEvent>> GetProjectPageComponentElementsGetByHasBusEvents(bool? hasBusEvent = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByHasBusEventsFunc(HasBusEvent={hasBusEvent?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByHasBusEvents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasBusEvent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasCacheMethodsToExcel(bool? HasCacheMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasCacheMethodsToCSV(bool? HasCacheMethod, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascachemethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByHasCacheMethods(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCacheMethod>> GetProjectPageComponentElementsGetByHasCacheMethods(bool? hasCacheMethod = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByHasCacheMethodsFunc(HasCacheMethod={hasCacheMethod?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByHasCacheMethods(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCacheMethod>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasCodeBuildsToExcel(string HasCodeBuild, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByHasCodeBuildsToCSV(string HasCodeBuild, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyhascodebuilds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByHasCodeBuilds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCodeBuild>> GetProjectPageComponentElementsGetByHasCodeBuilds(string hasCodeBuild = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByHasCodeBuildsFunc(HasCodeBuild='{HttpUtility.UrlEncode(hasCodeBuild.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByHasCodeBuilds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByHasCodeBuild>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByi18JsonsToExcel(string i18Json, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByi18JsonsToCSV(string i18Json, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyi18jsons/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByi18Jsons(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByi18Json>> GetProjectPageComponentElementsGetByi18Jsons(string i18Json = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByi18JsonsFunc(i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByi18Jsons(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByi18Json>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetById>> GetProjectPageComponentElementsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsToExcel(int? IfResponseIsSuccessCallThisComponentPartId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsToCSV(int? IfResponseIsSuccessCallThisComponentPartId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyifresponseissuccesscallthiscomponentpartids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartId>> GetProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIds(int? ifResponseIsSuccessCallThisComponentPartId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIdsFunc({ifResponseIsSuccessCallThisComponentPartId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIfResponseIsSuccessCallThisComponentPartId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIsDeletedsToExcel(bool? IsDeleted, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByIsDeletedsToCSV(bool? IsDeleted, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyisdeleteds/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByIsDeleteds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIsDeleted>> GetProjectPageComponentElementsGetByIsDeleteds(bool? isDeleted = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByIsDeletedsFunc(IsDeleted={isDeleted?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByIsDeleteds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByIsDeleted>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByLastScanDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLastScanDate>> GetProjectPageComponentElementsGetByLastScanDates(string lastScanDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByLastScanDatesFunc(LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByLastScanDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLastScanDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsToExcel(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsToCSV(string LogCodeMergeDateDBConnection, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByLogCodeMergeDateDbConnections(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbConnection>> GetProjectPageComponentElementsGetByLogCodeMergeDateDbConnections(string logCodeMergeDateDbconnection = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByLogCodeMergeDateDbConnectionsFunc(LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByLogCodeMergeDateDbConnections(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbConnection>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbTypesToExcel(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByLogCodeMergeDateDbTypesToCSV(int? LogCodeMergeDateDBType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbylogcodemergedatedbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByLogCodeMergeDateDbTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbType>> GetProjectPageComponentElementsGetByLogCodeMergeDateDbTypes(int? logCodeMergeDateDbtype = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByLogCodeMergeDateDbTypesFunc({logCodeMergeDateDbtype})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByLogCodeMergeDateDbTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByLogCodeMergeDateDbType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByNameSpaceListsToExcel(string NameSpaceList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByNameSpaceListsToCSV(string NameSpaceList, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbynamespacelists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByNameSpaceLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByNameSpaceList>> GetProjectPageComponentElementsGetByNameSpaceLists(string nameSpaceList = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByNameSpaceListsFunc(NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByNameSpaceLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByNameSpaceList>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPreviewCodesToExcel(string PreviewCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPreviewCodesToCSV(string PreviewCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByPreviewCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewCode>> GetProjectPageComponentElementsGetByPreviewCodes(string previewCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByPreviewCodesFunc(PreviewCode='{HttpUtility.UrlEncode(previewCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByPreviewCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPreviewUrlsToExcel(string PreviewUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPreviewUrlsToCSV(string PreviewUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypreviewurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByPreviewUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewUrl>> GetProjectPageComponentElementsGetByPreviewUrls(string previewUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByPreviewUrlsFunc(PreviewUrl='{HttpUtility.UrlEncode(previewUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByPreviewUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPreviewUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPrice>> GetProjectPageComponentElementsGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPublishedDatesToExcel(string PublishedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByPublishedDatesToCSV(string PublishedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbypublisheddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByPublishedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPublishedDate>> GetProjectPageComponentElementsGetByPublishedDates(string publishedDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByPublishedDatesFunc(PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByPublishedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByPublishedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByQueries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByQuery>> GetProjectPageComponentElementsGetByQueries(string query = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByQueriesFunc(Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByQueries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByQuery>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByRequestHeadersToExcel(string RequestHeader, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByRequestHeadersToCSV(string RequestHeader, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByRequestHeaders(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestHeader>> GetProjectPageComponentElementsGetByRequestHeaders(string requestHeader = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByRequestHeadersFunc(RequestHeader='{HttpUtility.UrlEncode(requestHeader.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByRequestHeaders(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestHeader>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByRequestSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestScheme>> GetProjectPageComponentElementsGetByRequestSchemes(string requestScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByRequestSchemesFunc(RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByRequestSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByRequestScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseHasMultiModelsToExcel(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseHasMultiModelsToCSV(bool? ResponseHasMultiModel, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasmultimodels/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByResponseHasMultiModels(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasMultiModel>> GetProjectPageComponentElementsGetByResponseHasMultiModels(bool? responseHasMultiModel = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByResponseHasMultiModelsFunc(ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByResponseHasMultiModels(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasMultiModel>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseHasReturnValuesToExcel(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseHasReturnValuesToCSV(bool? ResponseHasReturnValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponsehasreturnvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByResponseHasReturnValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasReturnValue>> GetProjectPageComponentElementsGetByResponseHasReturnValues(bool? responseHasReturnValue = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByResponseHasReturnValuesFunc(ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByResponseHasReturnValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseHasReturnValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByResponseSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseScheme>> GetProjectPageComponentElementsGetByResponseSchemes(string responseScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByResponseSchemesFunc(ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByResponseSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByResponseScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetBySoftwareLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySoftwareLanguageId>> GetProjectPageComponentElementsGetBySoftwareLanguageIds(int? softwareLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetBySoftwareLanguageIdsFunc({softwareLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetBySoftwareLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySoftwareLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByStatusToExcel(int? Statu, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbystatus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbystatus/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByStatusToCSV(int? Statu, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbystatus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbystatus/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByStatus(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByStatu>> GetProjectPageComponentElementsGetByStatus(int? statu = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByStatusFunc({statu})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByStatus(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByStatu>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetBySuccessNotificationTemplatesToExcel(string SuccessNotificationTemplate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetBySuccessNotificationTemplatesToCSV(string SuccessNotificationTemplate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbysuccessnotificationtemplates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetBySuccessNotificationTemplates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySuccessNotificationTemplate>> GetProjectPageComponentElementsGetBySuccessNotificationTemplates(string successNotificationTemplate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetBySuccessNotificationTemplatesFunc(SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetBySuccessNotificationTemplates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetBySuccessNotificationTemplate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByUserAgents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserAgent>> GetProjectPageComponentElementsGetByUserAgents(string userAgent = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByUserAgentsFunc(UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByUserAgents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserAgent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserDescriptionForComponentsToExcel(string UserDescriptionForComponent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserDescriptionForComponentsToCSV(string UserDescriptionForComponent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserdescriptionforcomponents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByUserDescriptionForComponents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserDescriptionForComponent>> GetProjectPageComponentElementsGetByUserDescriptionForComponents(string userDescriptionForComponent = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByUserDescriptionForComponentsFunc(UserDescriptionForComponent='{HttpUtility.UrlEncode(userDescriptionForComponent.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByUserDescriptionForComponents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserDescriptionForComponent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserId>> GetProjectPageComponentElementsGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWebSitePageComponentsIdsToExcel(int? WebSitePageComponentsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWebSitePageComponentsIdsToCSV(int? WebSitePageComponentsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywebsitepagecomponentsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWebSitePageComponentsIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWebSitePageComponentsId>> GetProjectPageComponentElementsGetByWebSitePageComponentsIds(int? webSitePageComponentsId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWebSitePageComponentsIdsFunc({webSitePageComponentsId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWebSitePageComponentsIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWebSitePageComponentsId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogAllRequestsToExcel(bool? WillLogAllRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogAllRequestsToCSV(bool? WillLogAllRequest, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallrequests/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWillLogAllRequests(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllRequest>> GetProjectPageComponentElementsGetByWillLogAllRequests(bool? willLogAllRequest = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWillLogAllRequestsFunc(WillLogAllRequest={willLogAllRequest?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWillLogAllRequests(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllRequest>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogAllResponsesToExcel(bool? WillLogAllResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogAllResponsesToCSV(bool? WillLogAllResponse, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogallresponses/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWillLogAllResponses(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllResponse>> GetProjectPageComponentElementsGetByWillLogAllResponses(bool? willLogAllResponse = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWillLogAllResponsesFunc(WillLogAllResponse={willLogAllResponse?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWillLogAllResponses(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogAllResponse>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogCodeMergeDatesToExcel(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWillLogCodeMergeDatesToCSV(bool? WillLogCodeMergeDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywilllogcodemergedates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWillLogCodeMergeDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogCodeMergeDate>> GetProjectPageComponentElementsGetByWillLogCodeMergeDates(bool? willLogCodeMergeDate = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWillLogCodeMergeDatesFunc(WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWillLogCodeMergeDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWillLogCodeMergeDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithHeadersToExcel(string WithHeaders, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithheaders/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithHeadersToCSV(string WithHeaders, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithheaders/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWithHeaders(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithHeader>> GetProjectPageComponentElementsGetByWithHeaders(string withHeaders = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWithHeadersFunc(WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWithHeaders(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithHeader>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithMethodsToExcel(string WithMethods, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithmethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithmethods/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithMethodsToCSV(string WithMethods, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithmethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithmethods/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWithMethods(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithMethod>> GetProjectPageComponentElementsGetByWithMethods(string withMethods = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWithMethodsFunc(WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWithMethods(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithMethod>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithOriginsToExcel(string WithOrigins, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithorigins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithorigins/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetByWithOriginsToCSV(string WithOrigins, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetbywithorigins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetbywithorigins/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetByWithOrigins(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithOrigin>> GetProjectPageComponentElementsGetByWithOrigins(string withOrigins = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetByWithOriginsFunc(WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetByWithOrigins(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetByWithOrigin>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetCreatedDateBetween>> GetProjectPageComponentElementsGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetLastScanDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetLastScanDateBetween>> GetProjectPageComponentElementsGetLastScanDateBetweens(string lastScanDateStart = default(string), string lastScanDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetLastScanDateBetweensFunc(LastScanDateStart='{HttpUtility.UrlEncode(lastScanDateStart.Trim().Replace("'", "''"))}',LastScanDateEnd='{HttpUtility.UrlEncode(lastScanDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetLastScanDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetLastScanDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetPublishedDateBetweensToExcel(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsGetPublishedDateBetweensToCSV(string PublishedDateStart, string PublishedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsgetpublisheddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsGetPublishedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetPublishedDateBetween>> GetProjectPageComponentElementsGetPublishedDateBetweens(string publishedDateStart = default(string), string publishedDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsGetPublishedDateBetweensFunc(PublishedDateStart='{HttpUtility.UrlEncode(publishedDateStart.Trim().Replace("'", "''"))}',PublishedDateEnd='{HttpUtility.UrlEncode(publishedDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsGetPublishedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsGetPublishedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsInsertsToExcel(int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsInsertsToCSV(int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsInsert>> GetProjectPageComponentElementsInserts(int? webSitePageComponentsId = default(int?), int? databaseTypesId = default(int?), int? functionTriggerGroupId = default(int?), int? functionTriggerRank = default(int?), int? functionTriggerCallAfterSuccessfullTrigger = default(int?), int? crudType = default(int?), string query = default(string), int? userId = default(int?), string userAgent = default(string), string createdDate = default(string), string lastScanDate = default(string), string exampleRequest = default(string), string exampleHtmlCode = default(string), string previewCode = default(string), string previewUrl = default(string), string hasCodeBuild = default(string), string exampleResponse = default(string), string requestScheme = default(string), string responseScheme = default(string), string apiRequestUrl = default(string), string requestHeader = default(string), string withMethods = default(string), string withHeaders = default(string), string withOrigins = default(string), int? cacheDbconnection = default(int?), int? cacheType = default(int?), string documentUrl = default(string), bool? hasAsync = default(bool?), bool? hasCacheMethod = default(bool?), bool? responseHasMultiModel = default(bool?), bool? responseHasReturnValue = default(bool?), int? logCodeMergeDateDbtype = default(int?), string logCodeMergeDateDbconnection = default(string), bool? willLogAllRequest = default(bool?), bool? willLogCodeMergeDate = default(bool?), bool? willLogAllResponse = default(bool?), bool? isDeleted = default(bool?), int? statu = default(int?), string publishedDate = default(string), int? eventType = default(int?), bool? hasBusEvent = default(bool?), string i18Json = default(string), int? ifResponseIsSuccessCallThisComponentPartId = default(int?), string successNotificationTemplate = default(string), string comment = default(string), string userDescriptionForComponent = default(string), string nameSpaceList = default(string), int? softwareLanguageId = default(int?), int? componentGroupId = default(int?), bool? componentIsParentInGroup = default(bool?), int? componentCallRankInGroup = default(int?), string customCode = default(string), string customCss = default(string), string customScript = default(string), string customScheme = default(string), string customAnimationScheme = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), int? busEventConnectionId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsInsertsFunc({webSitePageComponentsId},{databaseTypesId},{functionTriggerGroupId},{functionTriggerRank},{functionTriggerCallAfterSuccessfullTrigger},{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}',ExampleHtmlCode='{HttpUtility.UrlEncode(exampleHtmlCode.Trim().Replace("'", "''"))}',PreviewCode='{HttpUtility.UrlEncode(previewCode.Trim().Replace("'", "''"))}',PreviewUrl='{HttpUtility.UrlEncode(previewUrl.Trim().Replace("'", "''"))}',HasCodeBuild='{HttpUtility.UrlEncode(hasCodeBuild.Trim().Replace("'", "''"))}',ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}',RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}',RequestHeader='{HttpUtility.UrlEncode(requestHeader.Trim().Replace("'", "''"))}',WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}',WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}',WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}',{cacheDbconnection},{cacheType},DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}',HasAsync={hasAsync?.ToString().ToLower()},HasCacheMethod={hasCacheMethod?.ToString().ToLower()},ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()},ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()},{logCodeMergeDateDbtype},LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}',WillLogAllRequest={willLogAllRequest?.ToString().ToLower()},WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()},WillLogAllResponse={willLogAllResponse?.ToString().ToLower()},IsDeleted={isDeleted?.ToString().ToLower()},{statu},PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}',{eventType},HasBusEvent={hasBusEvent?.ToString().ToLower()},i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}',{ifResponseIsSuccessCallThisComponentPartId},SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',UserDescriptionForComponent='{HttpUtility.UrlEncode(userDescriptionForComponent.Trim().Replace("'", "''"))}',NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}',{softwareLanguageId},{componentGroupId},ComponentIsParentInGroup={componentIsParentInGroup?.ToString().ToLower()},{componentCallRankInGroup},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CustomCss='{HttpUtility.UrlEncode(customCss.Trim().Replace("'", "''"))}',CustomScript='{HttpUtility.UrlEncode(customScript.Trim().Replace("'", "''"))}',CustomScheme='{HttpUtility.UrlEncode(customScheme.Trim().Replace("'", "''"))}',CustomAnimationScheme='{HttpUtility.UrlEncode(customAnimationScheme.Trim().Replace("'", "''"))}',{price},{currencyId},{busEventConnectionId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsUpdatesToExcel(int? Id, int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentElementsUpdatesToCSV(int? Id, int? WebSitePageComponentsId, int? DatabaseTypesId, int? FunctionTriggerGroupId, int? FunctionTriggerRank, int? FunctionTriggerCallAfterSuccessfullTrigger, int? CrudType, string Query, int? UserId, string UserAgent, string CreatedDate, string LastScanDate, string ExampleRequest, string ExampleHtmlCode, string PreviewCode, string PreviewUrl, string HasCodeBuild, string ExampleResponse, string RequestScheme, string ResponseScheme, string ApiRequestUrl, string RequestHeader, string WithMethods, string WithHeaders, string WithOrigins, int? CacheDBConnection, int? CacheType, string DocumentUrl, bool? HasAsync, bool? HasCacheMethod, bool? ResponseHasMultiModel, bool? ResponseHasReturnValue, int? LogCodeMergeDateDBType, string LogCodeMergeDateDBConnection, bool? WillLogAllRequest, bool? WillLogCodeMergeDate, bool? WillLogAllResponse, bool? IsDeleted, int? Statu, string PublishedDate, int? EventType, bool? HasBusEvent, string i18Json, int? IfResponseIsSuccessCallThisComponentPartId, string SuccessNotificationTemplate, string Comment, string UserDescriptionForComponent, string NameSpaceList, int? SoftwareLanguageId, int? ComponentGroupId, bool? ComponentIsParentInGroup, int? ComponentCallRankInGroup, string CustomCode, string CustomCss, string CustomScript, string CustomScheme, string CustomAnimationScheme, decimal? Price, int? CurrencyId, int? BusEventConnectionId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentelementsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentelementsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentElementsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsUpdate>> GetProjectPageComponentElementsUpdates(int? id = default(int?), int? webSitePageComponentsId = default(int?), int? databaseTypesId = default(int?), int? functionTriggerGroupId = default(int?), int? functionTriggerRank = default(int?), int? functionTriggerCallAfterSuccessfullTrigger = default(int?), int? crudType = default(int?), string query = default(string), int? userId = default(int?), string userAgent = default(string), string createdDate = default(string), string lastScanDate = default(string), string exampleRequest = default(string), string exampleHtmlCode = default(string), string previewCode = default(string), string previewUrl = default(string), string hasCodeBuild = default(string), string exampleResponse = default(string), string requestScheme = default(string), string responseScheme = default(string), string apiRequestUrl = default(string), string requestHeader = default(string), string withMethods = default(string), string withHeaders = default(string), string withOrigins = default(string), int? cacheDbconnection = default(int?), int? cacheType = default(int?), string documentUrl = default(string), bool? hasAsync = default(bool?), bool? hasCacheMethod = default(bool?), bool? responseHasMultiModel = default(bool?), bool? responseHasReturnValue = default(bool?), int? logCodeMergeDateDbtype = default(int?), string logCodeMergeDateDbconnection = default(string), bool? willLogAllRequest = default(bool?), bool? willLogCodeMergeDate = default(bool?), bool? willLogAllResponse = default(bool?), bool? isDeleted = default(bool?), int? statu = default(int?), string publishedDate = default(string), int? eventType = default(int?), bool? hasBusEvent = default(bool?), string i18Json = default(string), int? ifResponseIsSuccessCallThisComponentPartId = default(int?), string successNotificationTemplate = default(string), string comment = default(string), string userDescriptionForComponent = default(string), string nameSpaceList = default(string), int? softwareLanguageId = default(int?), int? componentGroupId = default(int?), bool? componentIsParentInGroup = default(bool?), int? componentCallRankInGroup = default(int?), string customCode = default(string), string customCss = default(string), string customScript = default(string), string customScheme = default(string), string customAnimationScheme = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), int? busEventConnectionId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsUpdatesFunc({id},{webSitePageComponentsId},{databaseTypesId},{functionTriggerGroupId},{functionTriggerRank},{functionTriggerCallAfterSuccessfullTrigger},{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',ExampleRequest='{HttpUtility.UrlEncode(exampleRequest.Trim().Replace("'", "''"))}',ExampleHtmlCode='{HttpUtility.UrlEncode(exampleHtmlCode.Trim().Replace("'", "''"))}',PreviewCode='{HttpUtility.UrlEncode(previewCode.Trim().Replace("'", "''"))}',PreviewUrl='{HttpUtility.UrlEncode(previewUrl.Trim().Replace("'", "''"))}',HasCodeBuild='{HttpUtility.UrlEncode(hasCodeBuild.Trim().Replace("'", "''"))}',ExampleResponse='{HttpUtility.UrlEncode(exampleResponse.Trim().Replace("'", "''"))}',RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}',RequestHeader='{HttpUtility.UrlEncode(requestHeader.Trim().Replace("'", "''"))}',WithMethods='{HttpUtility.UrlEncode(withMethods.Trim().Replace("'", "''"))}',WithHeaders='{HttpUtility.UrlEncode(withHeaders.Trim().Replace("'", "''"))}',WithOrigins='{HttpUtility.UrlEncode(withOrigins.Trim().Replace("'", "''"))}',{cacheDbconnection},{cacheType},DocumentUrl='{HttpUtility.UrlEncode(documentUrl.Trim().Replace("'", "''"))}',HasAsync={hasAsync?.ToString().ToLower()},HasCacheMethod={hasCacheMethod?.ToString().ToLower()},ResponseHasMultiModel={responseHasMultiModel?.ToString().ToLower()},ResponseHasReturnValue={responseHasReturnValue?.ToString().ToLower()},{logCodeMergeDateDbtype},LogCodeMergeDateDBConnection='{HttpUtility.UrlEncode(logCodeMergeDateDbconnection.Trim().Replace("'", "''"))}',WillLogAllRequest={willLogAllRequest?.ToString().ToLower()},WillLogCodeMergeDate={willLogCodeMergeDate?.ToString().ToLower()},WillLogAllResponse={willLogAllResponse?.ToString().ToLower()},IsDeleted={isDeleted?.ToString().ToLower()},{statu},PublishedDate='{HttpUtility.UrlEncode(publishedDate.Trim().Replace("'", "''"))}',{eventType},HasBusEvent={hasBusEvent?.ToString().ToLower()},i18Json='{HttpUtility.UrlEncode(i18Json.Trim().Replace("'", "''"))}',{ifResponseIsSuccessCallThisComponentPartId},SuccessNotificationTemplate='{HttpUtility.UrlEncode(successNotificationTemplate.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',UserDescriptionForComponent='{HttpUtility.UrlEncode(userDescriptionForComponent.Trim().Replace("'", "''"))}',NameSpaceList='{HttpUtility.UrlEncode(nameSpaceList.Trim().Replace("'", "''"))}',{softwareLanguageId},{componentGroupId},ComponentIsParentInGroup={componentIsParentInGroup?.ToString().ToLower()},{componentCallRankInGroup},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CustomCss='{HttpUtility.UrlEncode(customCss.Trim().Replace("'", "''"))}',CustomScript='{HttpUtility.UrlEncode(customScript.Trim().Replace("'", "''"))}',CustomScheme='{HttpUtility.UrlEncode(customScheme.Trim().Replace("'", "''"))}',CustomAnimationScheme='{HttpUtility.UrlEncode(customAnimationScheme.Trim().Replace("'", "''"))}',{price},{currencyId},{busEventConnectionId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentElementsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentElementsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetAll>> GetProjectPageComponentsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByApiRequestUrlsToExcel(string ApiRequestUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyapirequesturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyapirequesturls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByApiRequestUrlsToCSV(string ApiRequestUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyapirequesturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyapirequesturls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByApiRequestUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByApiRequestUrl>> GetProjectPageComponentsGetByApiRequestUrls(string apiRequestUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByApiRequestUrlsFunc(ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByApiRequestUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByApiRequestUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCommission>> GetProjectPageComponentsGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByComponentNamesToExcel(string ComponentName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycomponentnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycomponentnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByComponentNamesToCSV(string ComponentName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycomponentnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycomponentnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByComponentNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByComponentName>> GetProjectPageComponentsGetByComponentNames(string componentName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByComponentNamesFunc(ComponentName='{HttpUtility.UrlEncode(componentName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByComponentNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByComponentName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCreatedDate>> GetProjectPageComponentsGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCrudTypesToExcel(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycrudtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCrudTypesToCSV(int? CrudType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycrudtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByCrudTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCrudType>> GetProjectPageComponentsGetByCrudTypes(int? crudType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByCrudTypesFunc({crudType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByCrudTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCrudType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCurrencyId>> GetProjectPageComponentsGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByDatabaseIdsToExcel(int? DatabaseId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydatabaseids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydatabaseids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByDatabaseIdsToCSV(int? DatabaseId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydatabaseids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydatabaseids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByDatabaseIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDatabaseId>> GetProjectPageComponentsGetByDatabaseIds(int? databaseId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByDatabaseIdsFunc({databaseId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByDatabaseIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDatabaseId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByDefaultLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDefaultLanguage>> GetProjectPageComponentsGetByDefaultLanguages(int? defaultLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByDefaultLanguagesFunc({defaultLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByDefaultLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByDefaultLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByFormActionUrlsToExcel(string FormActionUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyformactionurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyformactionurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByFormActionUrlsToCSV(string FormActionUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyformactionurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyformactionurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByFormActionUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByFormActionUrl>> GetProjectPageComponentsGetByFormActionUrls(string formActionUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByFormActionUrlsFunc(FormActionUrl='{HttpUtility.UrlEncode(formActionUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByFormActionUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByFormActionUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasFinishedSuccessfulliesToExcel(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasFinishedSuccessfulliesToCSV(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasfinishedsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByHasFinishedSuccessfullies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasFinishedSuccessfully>> GetProjectPageComponentsGetByHasFinishedSuccessfullies(bool? hasFinishedSuccessfully = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByHasFinishedSuccessfulliesFunc(HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByHasFinishedSuccessfullies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasFinishedSuccessfully>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasFormsToExcel(bool? HasForm, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasforms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasforms/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasFormsToCSV(bool? HasForm, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasforms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasforms/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByHasForms(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasForm>> GetProjectPageComponentsGetByHasForms(bool? hasForm = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByHasFormsFunc(HasForm={hasForm?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByHasForms(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasForm>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasMultiLanguagesToExcel(string HasMultiLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByHasMultiLanguagesToCSV(string HasMultiLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyhasmultilanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByHasMultiLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasMultiLanguage>> GetProjectPageComponentsGetByHasMultiLanguages(string hasMultiLanguage = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByHasMultiLanguagesFunc(HasMultiLanguage='{HttpUtility.UrlEncode(hasMultiLanguage.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByHasMultiLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByHasMultiLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetById>> GetProjectPageComponentsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByLastScanDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastScanDate>> GetProjectPageComponentsGetByLastScanDates(string lastScanDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByLastScanDatesFunc(LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByLastScanDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastScanDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByLastValidDatesToExcel(string LastValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByLastValidDatesToCSV(string LastValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbylastvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbylastvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByLastValidDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastValidDate>> GetProjectPageComponentsGetByLastValidDates(string lastValidDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByLastValidDatesFunc(LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByLastValidDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByLastValidDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByModifyDatesToExcel(string ModifyDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbymodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbymodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByModifyDatesToCSV(string ModifyDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbymodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbymodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByModifyDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByModifyDate>> GetProjectPageComponentsGetByModifyDates(string modifyDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByModifyDatesFunc(ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByModifyDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByModifyDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByOnHoversToExcel(bool? OnHover, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyonhovers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyonhovers/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByOnHoversToCSV(bool? OnHover, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyonhovers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyonhovers/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByOnHovers(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByOnHover>> GetProjectPageComponentsGetByOnHovers(bool? onHover = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByOnHoversFunc(OnHover={onHover?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByOnHovers(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByOnHover>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByParentWebSitePartsIdsToExcel(int? ParentWebSitePartsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByParentWebSitePartsIdsToCSV(int? ParentWebSitePartsId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyparentwebsitepartsids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByParentWebSitePartsIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByParentWebSitePartsId>> GetProjectPageComponentsGetByParentWebSitePartsIds(int? parentWebSitePartsId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByParentWebSitePartsIdsFunc({parentWebSitePartsId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByParentWebSitePartsIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByParentWebSitePartsId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByPrice>> GetProjectPageComponentsGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByQueriesToExcel(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyqueries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByQueriesToCSV(string Query, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyqueries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByQueries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByQuery>> GetProjectPageComponentsGetByQueries(string query = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByQueriesFunc(Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByQueries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByQuery>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByRequestSchemesToExcel(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyrequestschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByRequestSchemesToCSV(string RequestScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyrequestschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByRequestSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByRequestScheme>> GetProjectPageComponentsGetByRequestSchemes(string requestScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByRequestSchemesFunc(RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByRequestSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByRequestScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByResponseSchemesToExcel(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyresponseschemes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByResponseSchemesToCSV(string ResponseScheme, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyresponseschemes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByResponseSchemes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByResponseScheme>> GetProjectPageComponentsGetByResponseSchemes(string responseScheme = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByResponseSchemesFunc(ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByResponseSchemes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByResponseScheme>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByScannedLanguagesToExcel(int? ScannedLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByScannedLanguagesToCSV(int? ScannedLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyscannedlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByScannedLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByScannedLanguage>> GetProjectPageComponentsGetByScannedLanguages(int? scannedLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByScannedLanguagesFunc({scannedLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByScannedLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByScannedLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByUserAgentsToExcel(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuseragents/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByUserAgentsToCSV(string UserAgent, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuseragents/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByUserAgents(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserAgent>> GetProjectPageComponentsGetByUserAgents(string userAgent = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByUserAgentsFunc(UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByUserAgents(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserAgent>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserId>> GetProjectPageComponentsGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByWebSitePagesIdsToExcel(int? WebSitePagesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetByWebSitePagesIdsToCSV(int? WebSitePagesId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetbywebsitepagesids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetByWebSitePagesIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByWebSitePagesId>> GetProjectPageComponentsGetByWebSitePagesIds(int? webSitePagesId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetByWebSitePagesIdsFunc({webSitePagesId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetByWebSitePagesIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetByWebSitePagesId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetCreatedDateBetween>> GetProjectPageComponentsGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetLastScanDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastScanDateBetween>> GetProjectPageComponentsGetLastScanDateBetweens(string lastScanDateStart = default(string), string lastScanDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetLastScanDateBetweensFunc(LastScanDateStart='{HttpUtility.UrlEncode(lastScanDateStart.Trim().Replace("'", "''"))}',LastScanDateEnd='{HttpUtility.UrlEncode(lastScanDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetLastScanDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastScanDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetLastValidDateBetweensToExcel(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetLastValidDateBetweensToCSV(string LastValidDateStart, string LastValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetlastvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetLastValidDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastValidDateBetween>> GetProjectPageComponentsGetLastValidDateBetweens(string lastValidDateStart = default(string), string lastValidDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetLastValidDateBetweensFunc(LastValidDateStart='{HttpUtility.UrlEncode(lastValidDateStart.Trim().Replace("'", "''"))}',LastValidDateEnd='{HttpUtility.UrlEncode(lastValidDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetLastValidDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetLastValidDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetModifyDateBetweensToExcel(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsGetModifyDateBetweensToCSV(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsgetmodifydatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsGetModifyDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetModifyDateBetween>> GetProjectPageComponentsGetModifyDateBetweens(string modifyDateStart = default(string), string modifyDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsGetModifyDateBetweensFunc(ModifyDateStart='{HttpUtility.UrlEncode(modifyDateStart.Trim().Replace("'", "''"))}',ModifyDateEnd='{HttpUtility.UrlEncode(modifyDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsGetModifyDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsGetModifyDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsInsertsToExcel(int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsInsertsToCSV(int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsInsert>> GetProjectPageComponentsInserts(int? webSitePagesId = default(int?), string componentName = default(string), int? crudType = default(int?), string query = default(string), int? databaseId = default(int?), string requestScheme = default(string), string responseScheme = default(string), string createdDate = default(string), string modifyDate = default(string), string lastScanDate = default(string), int? userId = default(int?), string userAgent = default(string), string lastValidDate = default(string), bool? hasForm = default(bool?), int? parentWebSitePartsId = default(int?), string hasMultiLanguage = default(string), int? defaultLanguage = default(int?), int? scannedLanguage = default(int?), bool? hasFinishedSuccessfully = default(bool?), bool? onHover = default(bool?), string apiRequestUrl = default(string), string formActionUrl = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsInsertsFunc({webSitePagesId},ComponentName='{HttpUtility.UrlEncode(componentName.Trim().Replace("'", "''"))}',{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{databaseId},RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}',HasForm={hasForm?.ToString().ToLower()},{parentWebSitePartsId},HasMultiLanguage='{HttpUtility.UrlEncode(hasMultiLanguage.Trim().Replace("'", "''"))}',{defaultLanguage},{scannedLanguage},HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()},OnHover={onHover?.ToString().ToLower()},ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}',FormActionUrl='{HttpUtility.UrlEncode(formActionUrl.Trim().Replace("'", "''"))}',{price},{currencyId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsUpdatesToExcel(int? Id, int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPageComponentsUpdatesToCSV(int? Id, int? WebSitePagesId, string ComponentName, int? CrudType, string Query, int? DatabaseId, string RequestScheme, string ResponseScheme, string CreatedDate, string ModifyDate, string LastScanDate, int? UserId, string UserAgent, string LastValidDate, bool? HasForm, int? ParentWebSitePartsId, string HasMultiLanguage, int? DefaultLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, bool? OnHover, string ApiRequestUrl, string FormActionUrl, decimal? Price, int? CurrencyId, decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagecomponentsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagecomponentsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPageComponentsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsUpdate>> GetProjectPageComponentsUpdates(int? id = default(int?), int? webSitePagesId = default(int?), string componentName = default(string), int? crudType = default(int?), string query = default(string), int? databaseId = default(int?), string requestScheme = default(string), string responseScheme = default(string), string createdDate = default(string), string modifyDate = default(string), string lastScanDate = default(string), int? userId = default(int?), string userAgent = default(string), string lastValidDate = default(string), bool? hasForm = default(bool?), int? parentWebSitePartsId = default(int?), string hasMultiLanguage = default(string), int? defaultLanguage = default(int?), int? scannedLanguage = default(int?), bool? hasFinishedSuccessfully = default(bool?), bool? onHover = default(bool?), string apiRequestUrl = default(string), string formActionUrl = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsUpdatesFunc({id},{webSitePagesId},ComponentName='{HttpUtility.UrlEncode(componentName.Trim().Replace("'", "''"))}',{crudType},Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}',{databaseId},RequestScheme='{HttpUtility.UrlEncode(requestScheme.Trim().Replace("'", "''"))}',ResponseScheme='{HttpUtility.UrlEncode(responseScheme.Trim().Replace("'", "''"))}',CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userId},UserAgent='{HttpUtility.UrlEncode(userAgent.Trim().Replace("'", "''"))}',LastValidDate='{HttpUtility.UrlEncode(lastValidDate.Trim().Replace("'", "''"))}',HasForm={hasForm?.ToString().ToLower()},{parentWebSitePartsId},HasMultiLanguage='{HttpUtility.UrlEncode(hasMultiLanguage.Trim().Replace("'", "''"))}',{defaultLanguage},{scannedLanguage},HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()},OnHover={onHover?.ToString().ToLower()},ApiRequestUrl='{HttpUtility.UrlEncode(apiRequestUrl.Trim().Replace("'", "''"))}',FormActionUrl='{HttpUtility.UrlEncode(formActionUrl.Trim().Replace("'", "''"))}',{price},{currencyId},{commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPageComponentsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPageComponentsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetAll>> GetProjectPagesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCommission>> GetProjectPagesGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCreatedDate>> GetProjectPagesGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCssCodesToExcel(string CssCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycsscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycsscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCssCodesToCSV(string CssCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycsscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycsscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByCssCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCssCode>> GetProjectPagesGetByCssCodes(string cssCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByCssCodesFunc(CssCode='{HttpUtility.UrlEncode(cssCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByCssCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCssCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCurrencyId>> GetProjectPagesGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByCustomCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCustomCode>> GetProjectPagesGetByCustomCodes(string customCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByCustomCodesFunc(CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByCustomCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByCustomCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByDefaultLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByDefaultLanguage>> GetProjectPagesGetByDefaultLanguages(int? defaultLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByDefaultLanguagesFunc({defaultLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByDefaultLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByDefaultLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasFinishedSuccessfulliesToExcel(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasFinishedSuccessfulliesToCSV(bool? HasFinishedSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasfinishedsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByHasFinishedSuccessfullies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasFinishedSuccessfully>> GetProjectPagesGetByHasFinishedSuccessfullies(bool? hasFinishedSuccessfully = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByHasFinishedSuccessfulliesFunc(HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByHasFinishedSuccessfullies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasFinishedSuccessfully>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasMultipleLanguagesToExcel(bool? HasMultipleLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasmultiplelanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasmultiplelanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasMultipleLanguagesToCSV(bool? HasMultipleLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhasmultiplelanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhasmultiplelanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByHasMultipleLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasMultipleLanguage>> GetProjectPagesGetByHasMultipleLanguages(bool? hasMultipleLanguage = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByHasMultipleLanguagesFunc(HasMultipleLanguage={hasMultipleLanguage?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByHasMultipleLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasMultipleLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasPaidsToExcel(bool? HasPaid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhaspaids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhaspaids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHasPaidsToCSV(bool? HasPaid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhaspaids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhaspaids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByHasPaids(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasPaid>> GetProjectPagesGetByHasPaids(bool? hasPaid = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByHasPaidsFunc(HasPaid={hasPaid?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByHasPaids(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHasPaid>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHtmlCodesToExcel(string HtmlCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhtmlcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhtmlcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByHtmlCodesToCSV(string HtmlCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyhtmlcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyhtmlcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByHtmlCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHtmlCode>> GetProjectPagesGetByHtmlCodes(string htmlCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByHtmlCodesFunc(HtmlCode='{HttpUtility.UrlEncode(htmlCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByHtmlCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByHtmlCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetById>> GetProjectPagesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByJsCodesToExcel(string JsCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjscodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByJsCodesToCSV(string JsCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjscodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByJsCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsCode>> GetProjectPagesGetByJsCodes(string jsCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByJsCodesFunc(JsCode='{HttpUtility.UrlEncode(jsCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByJsCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByJsonCodesToExcel(string JsonCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjsoncodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjsoncodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByJsonCodesToCSV(string JsonCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyjsoncodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyjsoncodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByJsonCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsonCode>> GetProjectPagesGetByJsonCodes(string jsonCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByJsonCodesFunc(JsonCode='{HttpUtility.UrlEncode(jsonCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByJsonCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByJsonCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByLastScanDatesToExcel(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbylastscandates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByLastScanDatesToCSV(string LastScanDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbylastscandates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByLastScanDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByLastScanDate>> GetProjectPagesGetByLastScanDates(string lastScanDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByLastScanDatesFunc(LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByLastScanDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByLastScanDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageCycleEventDefinationsToExcel(string PageCycleEventDefination, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefinations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefinations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageCycleEventDefinationsToCSV(string PageCycleEventDefination, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefinations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefinations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByPageCycleEventDefinations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination>> GetProjectPagesGetByPageCycleEventDefinations(string pageCycleEventDefination = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByPageCycleEventDefinationsFunc(PageCycleEventDefination='{HttpUtility.UrlEncode(pageCycleEventDefination.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByPageCycleEventDefinations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageCycleEventDefination1SToExcel(string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageCycleEventDefination1SToCSV(string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagecycleeventdefination1s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByPageCycleEventDefination1S(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination1>> GetProjectPagesGetByPageCycleEventDefination1S(string pageCycleEventDefination1 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByPageCycleEventDefination1SFunc(PageCycleEventDefination1='{HttpUtility.UrlEncode(pageCycleEventDefination1.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByPageCycleEventDefination1S(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageCycleEventDefination1>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageNamesToExcel(string PageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageNamesToCSV(string PageName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypagenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypagenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByPageNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageName>> GetProjectPagesGetByPageNames(string pageName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByPageNamesFunc(PageName='{HttpUtility.UrlEncode(pageName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByPageNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageUrlsToExcel(string PageUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypageurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypageurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPageUrlsToCSV(string PageUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbypageurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbypageurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByPageUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageUrl>> GetProjectPagesGetByPageUrls(string pageUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByPageUrlsFunc(PageUrl='{HttpUtility.UrlEncode(pageUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByPageUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPageUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPrice>> GetProjectPagesGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByProjectIdsToExcel(int? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByProjectIdsToCSV(int? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByProjectIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByProjectId>> GetProjectPagesGetByProjectIds(int? projectId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByProjectIdsFunc({projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByProjectIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByProjectId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByReferralUrlsToExcel(string ReferralUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyreferralurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyreferralurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByReferralUrlsToCSV(string ReferralUrl, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyreferralurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyreferralurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByReferralUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByReferralUrl>> GetProjectPagesGetByReferralUrls(string referralUrl = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByReferralUrlsFunc(ReferralUrl='{HttpUtility.UrlEncode(referralUrl.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByReferralUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByReferralUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByRoutesToExcel(string Route, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyroutes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyroutes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByRoutesToCSV(string Route, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyroutes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyroutes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByRoutes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByRoute>> GetProjectPagesGetByRoutes(string route = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByRoutesFunc(Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByRoutes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByRoute>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByScannedLanguagesToExcel(int? ScannedLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyscannedlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyscannedlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByScannedLanguagesToCSV(int? ScannedLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyscannedlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyscannedlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByScannedLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByScannedLanguage>> GetProjectPagesGetByScannedLanguages(int? scannedLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByScannedLanguagesFunc({scannedLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByScannedLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByScannedLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByUserId>> GetProjectPagesGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetCreatedDateBetween>> GetProjectPagesGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetLastScanDateBetweensToExcel(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetlastscandatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesGetLastScanDateBetweensToCSV(string LastScanDateStart, string LastScanDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesgetlastscandatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesGetLastScanDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetLastScanDateBetween>> GetProjectPagesGetLastScanDateBetweens(string lastScanDateStart = default(string), string lastScanDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesGetLastScanDateBetweensFunc(LastScanDateStart='{HttpUtility.UrlEncode(lastScanDateStart.Trim().Replace("'", "''"))}',LastScanDateEnd='{HttpUtility.UrlEncode(lastScanDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesGetLastScanDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesGetLastScanDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesInsertsToExcel(string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesInsertsToCSV(string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesInsert>> GetProjectPagesInserts(string pageUrl = default(string), int? projectId = default(int?), string createdDate = default(string), string lastScanDate = default(string), int? userId = default(int?), bool? hasPaid = default(bool?), string referralUrl = default(string), string htmlCode = default(string), string jsonCode = default(string), string pageName = default(string), string route = default(string), int? defaultLanguage = default(int?), bool? hasMultipleLanguage = default(bool?), int? scannedLanguage = default(int?), bool? hasFinishedSuccessfully = default(bool?), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string cssCode = default(string), string jsCode = default(string), string pageCycleEventDefination = default(string), string pageCycleEventDefination1 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesInsertsFunc(PageUrl='{HttpUtility.UrlEncode(pageUrl.Trim().Replace("'", "''"))}',{projectId},CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userId},HasPaid={hasPaid?.ToString().ToLower()},ReferralUrl='{HttpUtility.UrlEncode(referralUrl.Trim().Replace("'", "''"))}',HtmlCode='{HttpUtility.UrlEncode(htmlCode.Trim().Replace("'", "''"))}',JsonCode='{HttpUtility.UrlEncode(jsonCode.Trim().Replace("'", "''"))}',PageName='{HttpUtility.UrlEncode(pageName.Trim().Replace("'", "''"))}',Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}',{defaultLanguage},HasMultipleLanguage={hasMultipleLanguage?.ToString().ToLower()},{scannedLanguage},HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()},{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CssCode='{HttpUtility.UrlEncode(cssCode.Trim().Replace("'", "''"))}',JsCode='{HttpUtility.UrlEncode(jsCode.Trim().Replace("'", "''"))}',PageCycleEventDefination='{HttpUtility.UrlEncode(pageCycleEventDefination.Trim().Replace("'", "''"))}',PageCycleEventDefination1='{HttpUtility.UrlEncode(pageCycleEventDefination1.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesUpdatesToExcel(int? Id, string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectPagesUpdatesToCSV(int? Id, string PageUrl, int? ProjectId, string CreatedDate, string LastScanDate, int? UserId, bool? HasPaid, string ReferralUrl, string HtmlCode, string JsonCode, string PageName, string Route, int? DefaultLanguage, bool? HasMultipleLanguage, int? ScannedLanguage, bool? HasFinishedSuccessfully, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CssCode, string JsCode, string PageCycleEventDefination, string PageCycleEventDefination1, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectpagesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectpagesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectPagesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesUpdate>> GetProjectPagesUpdates(int? id = default(int?), string pageUrl = default(string), int? projectId = default(int?), string createdDate = default(string), string lastScanDate = default(string), int? userId = default(int?), bool? hasPaid = default(bool?), string referralUrl = default(string), string htmlCode = default(string), string jsonCode = default(string), string pageName = default(string), string route = default(string), int? defaultLanguage = default(int?), bool? hasMultipleLanguage = default(bool?), int? scannedLanguage = default(int?), bool? hasFinishedSuccessfully = default(bool?), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string cssCode = default(string), string jsCode = default(string), string pageCycleEventDefination = default(string), string pageCycleEventDefination1 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectPagesUpdatesFunc({id},PageUrl='{HttpUtility.UrlEncode(pageUrl.Trim().Replace("'", "''"))}',{projectId},CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',LastScanDate='{HttpUtility.UrlEncode(lastScanDate.Trim().Replace("'", "''"))}',{userId},HasPaid={hasPaid?.ToString().ToLower()},ReferralUrl='{HttpUtility.UrlEncode(referralUrl.Trim().Replace("'", "''"))}',HtmlCode='{HttpUtility.UrlEncode(htmlCode.Trim().Replace("'", "''"))}',JsonCode='{HttpUtility.UrlEncode(jsonCode.Trim().Replace("'", "''"))}',PageName='{HttpUtility.UrlEncode(pageName.Trim().Replace("'", "''"))}',Route='{HttpUtility.UrlEncode(route.Trim().Replace("'", "''"))}',{defaultLanguage},HasMultipleLanguage={hasMultipleLanguage?.ToString().ToLower()},{scannedLanguage},HasFinishedSuccessfully={hasFinishedSuccessfully?.ToString().ToLower()},{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CssCode='{HttpUtility.UrlEncode(cssCode.Trim().Replace("'", "''"))}',JsCode='{HttpUtility.UrlEncode(jsCode.Trim().Replace("'", "''"))}',PageCycleEventDefination='{HttpUtility.UrlEncode(pageCycleEventDefination.Trim().Replace("'", "''"))}',PageCycleEventDefination1='{HttpUtility.UrlEncode(pageCycleEventDefination1.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectPagesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectPagesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetAll>> GetProjectsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByConfigurationsToExcel(string Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByConfigurationsToCSV(string Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByConfiguration>> GetProjectsGetByConfigurations(string configuration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByConfigurationsFunc(Configuration='{HttpUtility.UrlEncode(configuration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByConnectionSettingsToExcel(object ConnectionSettings, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconnectionsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconnectionsettings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByConnectionSettingsToCSV(object ConnectionSettings, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyconnectionsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyconnectionsettings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByConnectionSettings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByConnectionSetting>> GetProjectsGetByConnectionSettings(object connectionSettings = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByConnectionSettingsFunc({connectionSettings})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByConnectionSettings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByConnectionSetting>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByDatabaseSchemasToExcel(string DatabaseSchemas, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbydatabaseschemas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbydatabaseschemas/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByDatabaseSchemasToCSV(string DatabaseSchemas, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbydatabaseschemas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbydatabaseschemas/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByDatabaseSchemas(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByDatabaseSchema>> GetProjectsGetByDatabaseSchemas(string databaseSchemas = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByDatabaseSchemasFunc(DatabaseSchemas='{HttpUtility.UrlEncode(databaseSchemas.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByDatabaseSchemas(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByDatabaseSchema>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByEndpointsToExcel(object Endpoints, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyendpoints/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyendpoints/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByEndpointsToCSV(object Endpoints, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyendpoints/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyendpoints/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByEndpoints(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByEndpoint>> GetProjectsGetByEndpoints(object endpoints = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByEndpointsFunc({endpoints})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByEndpoints(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByEndpoint>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByEnumListsToExcel(object EnumLists, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyenumlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyenumlists/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByEnumListsToCSV(object EnumLists, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyenumlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyenumlists/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByEnumLists(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByEnumList>> GetProjectsGetByEnumLists(object enumLists = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByEnumListsFunc({enumLists})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByEnumLists(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByEnumList>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByGuidsToExcel(string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyguids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyguids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByGuidsToCSV(string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyguids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyguids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByGuids(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByGuid>> GetProjectsGetByGuids(string guid = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByGuidsFunc(Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByGuids(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByGuid>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetById>> GetProjectsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByLanguageDefinationsToExcel(object LanguageDefinations, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylanguagedefinations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylanguagedefinations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByLanguageDefinationsToCSV(object LanguageDefinations, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylanguagedefinations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylanguagedefinations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByLanguageDefinations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByLanguageDefination>> GetProjectsGetByLanguageDefinations(object languageDefinations = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByLanguageDefinationsFunc({languageDefinations})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByLanguageDefinations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByLanguageDefination>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByLookupsToExcel(object Lookups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylookups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylookups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByLookupsToCSV(object Lookups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbylookups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbylookups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByLookups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByLookup>> GetProjectsGetByLookups(object lookups = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByLookupsFunc({lookups})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByLookups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByLookup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByName>> GetProjectsGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByRuleGroupsToExcel(string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyrulegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyrulegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByRuleGroupsToCSV(string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyrulegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyrulegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByRuleGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByRuleGroup>> GetProjectsGetByRuleGroups(string ruleGroups = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByRuleGroupsFunc(RuleGroups='{HttpUtility.UrlEncode(ruleGroups.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByRuleGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByRuleGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByTableGroupsToExcel(object TableGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytablegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytablegroups/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByTableGroupsToCSV(object TableGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytablegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytablegroups/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByTableGroups(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByTableGroup>> GetProjectsGetByTableGroups(object tableGroups = default(object), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByTableGroupsFunc({tableGroups})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByTableGroups(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByTableGroup>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByTablesToExcel(string Tables, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByTablesToCSV(string Tables, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbytables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbytables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByTables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByTable>> GetProjectsGetByTables(string tables = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByTablesFunc(Tables='{HttpUtility.UrlEncode(tables.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByTables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByTable>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByUserId>> GetProjectsGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsInsertsToExcel(int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsInsertsToCSV(int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsInsert>> GetProjectsInserts(int? userId = default(int?), string name = default(string), string guid = default(string), string tables = default(string), string configuration = default(string), object tableGroups = default(object), object enumLists = default(object), object endpoints = default(object), object languageDefinations = default(object), object lookups = default(object), object connectionSettings = default(object), string databaseSchemas = default(string), string ruleGroups = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsInsertsFunc({userId},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}',Tables='{HttpUtility.UrlEncode(tables.Trim().Replace("'", "''"))}',Configuration='{HttpUtility.UrlEncode(configuration.Trim().Replace("'", "''"))}',{tableGroups},{enumLists},{endpoints},{languageDefinations},{lookups},{connectionSettings},DatabaseSchemas='{HttpUtility.UrlEncode(databaseSchemas.Trim().Replace("'", "''"))}',RuleGroups='{HttpUtility.UrlEncode(ruleGroups.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectsUpdatesToExcel(int? Id, int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectsUpdatesToCSV(int? Id, int? UserId, string Name, string Guid, string Tables, string Configuration, object TableGroups, object EnumLists, object Endpoints, object LanguageDefinations, object Lookups, object ConnectionSettings, string DatabaseSchemas, string RuleGroups, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projectsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projectsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsUpdate>> GetProjectsUpdates(int? id = default(int?), int? userId = default(int?), string name = default(string), string guid = default(string), string tables = default(string), string configuration = default(string), object tableGroups = default(object), object enumLists = default(object), object endpoints = default(object), object languageDefinations = default(object), object lookups = default(object), object connectionSettings = default(object), string databaseSchemas = default(string), string ruleGroups = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectsUpdatesFunc({id},{userId},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}',Tables='{HttpUtility.UrlEncode(tables.Trim().Replace("'", "''"))}',Configuration='{HttpUtility.UrlEncode(configuration.Trim().Replace("'", "''"))}',{tableGroups},{enumLists},{endpoints},{languageDefinations},{lookups},{connectionSettings},DatabaseSchemas='{HttpUtility.UrlEncode(databaseSchemas.Trim().Replace("'", "''"))}',RuleGroups='{HttpUtility.UrlEncode(ruleGroups.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetAll>> GetProjectTableColumnsGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsCreatePageConfigurationsToExcel(string CMSCreatePageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsCreatePageConfigurationsToCSV(string CMSCreatePageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmscreatepageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCmsCreatePageConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsCreatePageConfiguration>> GetProjectTableColumnsGetByCmsCreatePageConfigurations(string cmscreatePageConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCmsCreatePageConfigurationsFunc(CMSCreatePageConfiguration='{HttpUtility.UrlEncode(cmscreatePageConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCmsCreatePageConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsCreatePageConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsDeletePageConfigurationsToExcel(string CMSDeletePageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsDeletePageConfigurationsToCSV(string CMSDeletePageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmsdeletepageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCmsDeletePageConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsDeletePageConfiguration>> GetProjectTableColumnsGetByCmsDeletePageConfigurations(string cmsdeletePageConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCmsDeletePageConfigurationsFunc(CMSDeletePageConfiguration='{HttpUtility.UrlEncode(cmsdeletePageConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCmsDeletePageConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsDeletePageConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsEditPageConfigurationsToExcel(string CMSEditPageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsEditPageConfigurationsToCSV(string CMSEditPageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmseditpageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCmsEditPageConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsEditPageConfiguration>> GetProjectTableColumnsGetByCmsEditPageConfigurations(string cmseditPageConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCmsEditPageConfigurationsFunc(CMSEditPageConfiguration='{HttpUtility.UrlEncode(cmseditPageConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCmsEditPageConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsEditPageConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsListPageConfigurationsToExcel(string CMSListPageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCmsListPageConfigurationsToCSV(string CMSListPageConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycmslistpageconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCmsListPageConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsListPageConfiguration>> GetProjectTableColumnsGetByCmsListPageConfigurations(string cmslistPageConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCmsListPageConfigurationsFunc(CMSListPageConfiguration='{HttpUtility.UrlEncode(cmslistPageConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCmsListPageConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCmsListPageConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNamesToExcel(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNamesToCSV(string ColumnName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByColumnNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnName>> GetProjectTableColumnsGetByColumnNames(string columnName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByColumnNamesFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByColumnNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNameCryptosToExcel(string ColumnNameCrypto, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNameCryptosToCSV(string ColumnNameCrypto, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamecryptos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByColumnNameCryptos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameCrypto>> GetProjectTableColumnsGetByColumnNameCryptos(string columnNameCrypto = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByColumnNameCryptosFunc(ColumnNameCrypto='{HttpUtility.UrlEncode(columnNameCrypto.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByColumnNameCryptos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameCrypto>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNameI18SToExcel(string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnNameI18SToCSV(string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnnamei18s/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByColumnNameI18S(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameI18>> GetProjectTableColumnsGetByColumnNameI18S(string columnNameI18 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByColumnNameI18SFunc(ColumnNameI18='{HttpUtility.UrlEncode(columnNameI18.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByColumnNameI18S(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnNameI18>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnsConfigurationsToExcel(string ColumnsConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByColumnsConfigurationsToCSV(string ColumnsConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycolumnsconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByColumnsConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnsConfiguration>> GetProjectTableColumnsGetByColumnsConfigurations(string columnsConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByColumnsConfigurationsFunc(ColumnsConfiguration='{HttpUtility.UrlEncode(columnsConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByColumnsConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByColumnsConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComment>> GetProjectTableColumnsGetByComments(string comment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCommentsFunc(Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCommission>> GetProjectTableColumnsGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByComponentConfigurationsToExcel(string ComponentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByComponentConfigurationsToCSV(string ComponentConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycomponentconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByComponentConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComponentConfiguration>> GetProjectTableColumnsGetByComponentConfigurations(string componentConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByComponentConfigurationsFunc(ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByComponentConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByComponentConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCurrencyId>> GetProjectTableColumnsGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByCustomCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCustomCode>> GetProjectTableColumnsGetByCustomCodes(string customCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByCustomCodesFunc(CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByCustomCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByCustomCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDatabaseCreateMigrationScriptsToExcel(string DatabaseCreateMigrationScript, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDatabaseCreateMigrationScriptsToCSV(string DatabaseCreateMigrationScript, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatabasecreatemigrationscripts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByDatabaseCreateMigrationScripts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDatabaseCreateMigrationScript>> GetProjectTableColumnsGetByDatabaseCreateMigrationScripts(string databaseCreateMigrationScript = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByDatabaseCreateMigrationScriptsFunc(DatabaseCreateMigrationScript='{HttpUtility.UrlEncode(databaseCreateMigrationScript.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByDatabaseCreateMigrationScripts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDatabaseCreateMigrationScript>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDataTypeMappingsToExcel(string DataTypeMapping, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatatypemappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatatypemappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDataTypeMappingsToCSV(string DataTypeMapping, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydatatypemappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydatatypemappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByDataTypeMappings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDataTypeMapping>> GetProjectTableColumnsGetByDataTypeMappings(string dataTypeMapping = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByDataTypeMappingsFunc(DataTypeMapping='{HttpUtility.UrlEncode(dataTypeMapping.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByDataTypeMappings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDataTypeMapping>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDbTypesToExcel(string DbType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydbtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDbTypesToCSV(string DbType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydbtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByDbTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDbType>> GetProjectTableColumnsGetByDbTypes(string dbType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByDbTypesFunc(DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByDbTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDbType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDefaultValuesToExcel(string DefaultValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydefaultvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydefaultvalues/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDefaultValuesToCSV(string DefaultValue, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydefaultvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydefaultvalues/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByDefaultValues(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDefaultValue>> GetProjectTableColumnsGetByDefaultValues(string defaultValue = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByDefaultValuesFunc(DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByDefaultValues(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDefaultValue>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDependencyConfigurationsToExcel(string DependencyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByDependencyConfigurationsToCSV(string DependencyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbydependencyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByDependencyConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDependencyConfiguration>> GetProjectTableColumnsGetByDependencyConfigurations(string dependencyConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByDependencyConfigurationsFunc(DependencyConfiguration='{HttpUtility.UrlEncode(dependencyConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByDependencyConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByDependencyConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByExtrasToExcel(string Extra, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyextras/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyextras/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByExtrasToCSV(string Extra, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyextras/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyextras/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByExtras(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByExtra>> GetProjectTableColumnsGetByExtras(string extra = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByExtrasFunc(Extra='{HttpUtility.UrlEncode(extra.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByExtras(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByExtra>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByFkDetailsToExcel(string FKDetails, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyfkdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyfkdetails/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByFkDetailsToCSV(string FKDetails, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyfkdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyfkdetails/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByFkDetails(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByFkDetail>> GetProjectTableColumnsGetByFkDetails(string fkdetails = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByFkDetailsFunc(FKDetails='{HttpUtility.UrlEncode(fkdetails.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByFkDetails(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByFkDetail>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetById>> GetProjectTableColumnsGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByInputTypesToExcel(int? InputType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyinputtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyinputtypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByInputTypesToCSV(int? InputType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyinputtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyinputtypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByInputTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByInputType>> GetProjectTableColumnsGetByInputTypes(int? inputType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByInputTypesFunc({inputType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByInputTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByInputType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIsNullablesToExcel(bool? IsNullable, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisnullables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisnullables/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIsNullablesToCSV(bool? IsNullable, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisnullables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisnullables/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByIsNullables(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsNullable>> GetProjectTableColumnsGetByIsNullables(bool? isNullable = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByIsNullablesFunc(IsNullable={isNullable?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByIsNullables(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsNullable>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIsPrimariesToExcel(bool? IsPrimary, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisprimaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisprimaries/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByIsPrimariesToCSV(bool? IsPrimary, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyisprimaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyisprimaries/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByIsPrimaries(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsPrimary>> GetProjectTableColumnsGetByIsPrimaries(bool? isPrimary = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByIsPrimariesFunc(IsPrimary={isPrimary?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByIsPrimaries(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByIsPrimary>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByKeyConfigurationsToExcel(string KeyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByKeyConfigurationsToCSV(string KeyConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbykeyconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByKeyConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByKeyConfiguration>> GetProjectTableColumnsGetByKeyConfigurations(string keyConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByKeyConfigurationsFunc(KeyConfiguration='{HttpUtility.UrlEncode(keyConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByKeyConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByKeyConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByMappingConfigurationsToExcel(string MappingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByMappingConfigurationsToCSV(string MappingConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymappingconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByMappingConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMappingConfiguration>> GetProjectTableColumnsGetByMappingConfigurations(string mappingConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByMappingConfigurationsFunc(MappingConfiguration='{HttpUtility.UrlEncode(mappingConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByMappingConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMappingConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByMaxLengthsToExcel(string MaxLength, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymaxlengths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymaxlengths/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByMaxLengthsToCSV(string MaxLength, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbymaxlengths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbymaxlengths/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByMaxLengths(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMaxLength>> GetProjectTableColumnsGetByMaxLengths(string maxLength = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByMaxLengthsFunc(MaxLength='{HttpUtility.UrlEncode(maxLength.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByMaxLengths(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByMaxLength>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrice>> GetProjectTableColumnsGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByPrimitiveTypesToExcel(string PrimitiveType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByPrimitiveTypesToCSV(string PrimitiveType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbyprimitivetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByPrimitiveTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrimitiveType>> GetProjectTableColumnsGetByPrimitiveTypes(string primitiveType = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByPrimitiveTypesFunc(PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByPrimitiveTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByPrimitiveType>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByTableIdsToExcel(int? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytableids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByTableIdsToCSV(int? TableId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytableids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByTableIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableId>> GetProjectTableColumnsGetByTableIds(int? tableId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByTableIdsFunc({tableId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByTableIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableName>> GetProjectTableColumnsGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsInsertsToExcel(string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsInsertsToCSV(string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsInsert>> GetProjectTableColumnsInserts(string columnName = default(string), string columnNameCrypto = default(string), string dbType = default(string), string primitiveType = default(string), string defaultValue = default(string), bool? isNullable = default(bool?), string maxLength = default(string), string fkdetails = default(string), string tableName = default(string), int? tableId = default(int?), bool? isPrimary = default(bool?), int? inputType = default(int?), string keyConfiguration = default(string), string extra = default(string), string comment = default(string), string dataTypeMapping = default(string), string columnsConfiguration = default(string), string mappingConfiguration = default(string), string dependencyConfiguration = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string componentConfiguration = default(string), string cmslistPageConfiguration = default(string), string cmseditPageConfiguration = default(string), string cmscreatePageConfiguration = default(string), string cmsdeletePageConfiguration = default(string), string databaseCreateMigrationScript = default(string), string columnNameI18 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsInsertsFunc(ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',ColumnNameCrypto='{HttpUtility.UrlEncode(columnNameCrypto.Trim().Replace("'", "''"))}',DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}',PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}',DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}',IsNullable={isNullable?.ToString().ToLower()},MaxLength='{HttpUtility.UrlEncode(maxLength.Trim().Replace("'", "''"))}',FKDetails='{HttpUtility.UrlEncode(fkdetails.Trim().Replace("'", "''"))}',TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',{tableId},IsPrimary={isPrimary?.ToString().ToLower()},{inputType},KeyConfiguration='{HttpUtility.UrlEncode(keyConfiguration.Trim().Replace("'", "''"))}',Extra='{HttpUtility.UrlEncode(extra.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',DataTypeMapping='{HttpUtility.UrlEncode(dataTypeMapping.Trim().Replace("'", "''"))}',ColumnsConfiguration='{HttpUtility.UrlEncode(columnsConfiguration.Trim().Replace("'", "''"))}',MappingConfiguration='{HttpUtility.UrlEncode(mappingConfiguration.Trim().Replace("'", "''"))}',DependencyConfiguration='{HttpUtility.UrlEncode(dependencyConfiguration.Trim().Replace("'", "''"))}',{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}',CMSListPageConfiguration='{HttpUtility.UrlEncode(cmslistPageConfiguration.Trim().Replace("'", "''"))}',CMSEditPageConfiguration='{HttpUtility.UrlEncode(cmseditPageConfiguration.Trim().Replace("'", "''"))}',CMSCreatePageConfiguration='{HttpUtility.UrlEncode(cmscreatePageConfiguration.Trim().Replace("'", "''"))}',CMSDeletePageConfiguration='{HttpUtility.UrlEncode(cmsdeletePageConfiguration.Trim().Replace("'", "''"))}',DatabaseCreateMigrationScript='{HttpUtility.UrlEncode(databaseCreateMigrationScript.Trim().Replace("'", "''"))}',ColumnNameI18='{HttpUtility.UrlEncode(columnNameI18.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsUpdatesToExcel(int? Id, string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTableColumnsUpdatesToCSV(int? Id, string ColumnName, string ColumnNameCrypto, string DbType, string PrimitiveType, string DefaultValue, bool? IsNullable, string MaxLength, string FKDetails, string TableName, int? TableId, bool? IsPrimary, int? InputType, string KeyConfiguration, string Extra, string Comment, string DataTypeMapping, string ColumnsConfiguration, string MappingConfiguration, string DependencyConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string ComponentConfiguration, string CMSListPageConfiguration, string CMSEditPageConfiguration, string CMSCreatePageConfiguration, string CMSDeletePageConfiguration, string DatabaseCreateMigrationScript, string ColumnNameI18, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablecolumnsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablecolumnsupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTableColumnsUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsUpdate>> GetProjectTableColumnsUpdates(int? id = default(int?), string columnName = default(string), string columnNameCrypto = default(string), string dbType = default(string), string primitiveType = default(string), string defaultValue = default(string), bool? isNullable = default(bool?), string maxLength = default(string), string fkdetails = default(string), string tableName = default(string), int? tableId = default(int?), bool? isPrimary = default(bool?), int? inputType = default(int?), string keyConfiguration = default(string), string extra = default(string), string comment = default(string), string dataTypeMapping = default(string), string columnsConfiguration = default(string), string mappingConfiguration = default(string), string dependencyConfiguration = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string componentConfiguration = default(string), string cmslistPageConfiguration = default(string), string cmseditPageConfiguration = default(string), string cmscreatePageConfiguration = default(string), string cmsdeletePageConfiguration = default(string), string databaseCreateMigrationScript = default(string), string columnNameI18 = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsUpdatesFunc({id},ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',ColumnNameCrypto='{HttpUtility.UrlEncode(columnNameCrypto.Trim().Replace("'", "''"))}',DbType='{HttpUtility.UrlEncode(dbType.Trim().Replace("'", "''"))}',PrimitiveType='{HttpUtility.UrlEncode(primitiveType.Trim().Replace("'", "''"))}',DefaultValue='{HttpUtility.UrlEncode(defaultValue.Trim().Replace("'", "''"))}',IsNullable={isNullable?.ToString().ToLower()},MaxLength='{HttpUtility.UrlEncode(maxLength.Trim().Replace("'", "''"))}',FKDetails='{HttpUtility.UrlEncode(fkdetails.Trim().Replace("'", "''"))}',TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',{tableId},IsPrimary={isPrimary?.ToString().ToLower()},{inputType},KeyConfiguration='{HttpUtility.UrlEncode(keyConfiguration.Trim().Replace("'", "''"))}',Extra='{HttpUtility.UrlEncode(extra.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',DataTypeMapping='{HttpUtility.UrlEncode(dataTypeMapping.Trim().Replace("'", "''"))}',ColumnsConfiguration='{HttpUtility.UrlEncode(columnsConfiguration.Trim().Replace("'", "''"))}',MappingConfiguration='{HttpUtility.UrlEncode(mappingConfiguration.Trim().Replace("'", "''"))}',DependencyConfiguration='{HttpUtility.UrlEncode(dependencyConfiguration.Trim().Replace("'", "''"))}',{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',ComponentConfiguration='{HttpUtility.UrlEncode(componentConfiguration.Trim().Replace("'", "''"))}',CMSListPageConfiguration='{HttpUtility.UrlEncode(cmslistPageConfiguration.Trim().Replace("'", "''"))}',CMSEditPageConfiguration='{HttpUtility.UrlEncode(cmseditPageConfiguration.Trim().Replace("'", "''"))}',CMSCreatePageConfiguration='{HttpUtility.UrlEncode(cmscreatePageConfiguration.Trim().Replace("'", "''"))}',CMSDeletePageConfiguration='{HttpUtility.UrlEncode(cmsdeletePageConfiguration.Trim().Replace("'", "''"))}',DatabaseCreateMigrationScript='{HttpUtility.UrlEncode(databaseCreateMigrationScript.Trim().Replace("'", "''"))}',ColumnNameI18='{HttpUtility.UrlEncode(columnNameI18.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTableColumnsUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTableColumnsUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetAll>> GetProjectTablesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByApiConfigurationsToExcel(string ApiConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyapiconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyapiconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByApiConfigurationsToCSV(string ApiConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyapiconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyapiconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByApiConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByApiConfiguration>> GetProjectTablesGetByApiConfigurations(string apiConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByApiConfigurationsFunc(ApiConfiguration='{HttpUtility.UrlEncode(apiConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByApiConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByApiConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByAuditConfigurationsToExcel(string AuditConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyauditconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyauditconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByAuditConfigurationsToCSV(string AuditConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyauditconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyauditconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByAuditConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByAuditConfiguration>> GetProjectTablesGetByAuditConfigurations(string auditConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByAuditConfigurationsFunc(AuditConfiguration='{HttpUtility.UrlEncode(auditConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByAuditConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByAuditConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsCustomFilterConfigurationsToExcel(string CMSCustomFilterConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsCustomFilterConfigurationsToCSV(string CMSCustomFilterConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmscustomfilterconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCmsCustomFilterConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsCustomFilterConfiguration>> GetProjectTablesGetByCmsCustomFilterConfigurations(string cmscustomFilterConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCmsCustomFilterConfigurationsFunc(CMSCustomFilterConfiguration='{HttpUtility.UrlEncode(cmscustomFilterConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCmsCustomFilterConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsCustomFilterConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsExportConfigurationsToExcel(string CMSExportConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsexportconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsexportconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsExportConfigurationsToCSV(string CMSExportConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsexportconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsexportconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCmsExportConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsExportConfiguration>> GetProjectTablesGetByCmsExportConfigurations(string cmsexportConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCmsExportConfigurationsFunc(CMSExportConfiguration='{HttpUtility.UrlEncode(cmsexportConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCmsExportConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsExportConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsMenuConfigurationsToExcel(string CMSMenuConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsmenuconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsmenuconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsMenuConfigurationsToCSV(string CMSMenuConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsmenuconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsmenuconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCmsMenuConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsMenuConfiguration>> GetProjectTablesGetByCmsMenuConfigurations(string cmsmenuConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCmsMenuConfigurationsFunc(CMSMenuConfiguration='{HttpUtility.UrlEncode(cmsmenuConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCmsMenuConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsMenuConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsPermissionConfigurationsToExcel(string CMSPermissionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmspermissionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmspermissionconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsPermissionConfigurationsToCSV(string CMSPermissionConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmspermissionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmspermissionconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCmsPermissionConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsPermissionConfiguration>> GetProjectTablesGetByCmsPermissionConfigurations(string cmspermissionConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCmsPermissionConfigurationsFunc(CMSPermissionConfiguration='{HttpUtility.UrlEncode(cmspermissionConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCmsPermissionConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsPermissionConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsRouteConfigurationsToExcel(string CMSRouteConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsrouteconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsrouteconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCmsRouteConfigurationsToCSV(string CMSRouteConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycmsrouteconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycmsrouteconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCmsRouteConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsRouteConfiguration>> GetProjectTablesGetByCmsRouteConfigurations(string cmsrouteConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCmsRouteConfigurationsFunc(CMSRouteConfiguration='{HttpUtility.UrlEncode(cmsrouteConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCmsRouteConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCmsRouteConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByColumnsToExcel(string Columns, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByColumnsToCSV(string Columns, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByColumn>> GetProjectTablesGetByColumns(string columns = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByColumnsFunc(Columns='{HttpUtility.UrlEncode(columns.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByColumn>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCommentsToExcel(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycomments/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCommentsToCSV(string Comment, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycomments/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByComments(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByComment>> GetProjectTablesGetByComments(string comment = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCommentsFunc(Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByComments(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByComment>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCommission>> GetProjectTablesGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCurrencyId>> GetProjectTablesGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCustomCodesToExcel(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycustomcodes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByCustomCodesToCSV(string CustomCode, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbycustomcodes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByCustomCodes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCustomCode>> GetProjectTablesGetByCustomCodes(string customCode = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByCustomCodesFunc(CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByCustomCodes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByCustomCode>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByDataIndicesToExcel(string DataIndex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydataindices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydataindices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByDataIndicesToCSV(string DataIndex, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydataindices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydataindices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByDataIndices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDataIndex>> GetProjectTablesGetByDataIndices(string dataIndex = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByDataIndicesFunc(DataIndex='{HttpUtility.UrlEncode(dataIndex.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByDataIndices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDataIndex>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByDiagramConfigurationsToExcel(string DiagramConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydiagramconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydiagramconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByDiagramConfigurationsToCSV(string DiagramConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbydiagramconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbydiagramconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByDiagramConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDiagramConfiguration>> GetProjectTablesGetByDiagramConfigurations(string diagramConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByDiagramConfigurationsFunc(DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByDiagramConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByDiagramConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByI18ConfigurationsToExcel(string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyi18configurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyi18configurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByI18ConfigurationsToCSV(string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyi18configurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyi18configurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByI18Configurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByI18Configuration>> GetProjectTablesGetByI18Configurations(string i18configuration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByI18ConfigurationsFunc(I18Configuration='{HttpUtility.UrlEncode(i18configuration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByI18Configurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByI18Configuration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetById>> GetProjectTablesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByPrice>> GetProjectTablesGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProgrammingLanguageIdsToExcel(int? ProgrammingLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprogramminglanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprogramminglanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProgrammingLanguageIdsToCSV(int? ProgrammingLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprogramminglanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprogramminglanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByProgrammingLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProgrammingLanguageId>> GetProjectTablesGetByProgrammingLanguageIds(int? programmingLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByProgrammingLanguageIdsFunc({programmingLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByProgrammingLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProgrammingLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProjectNamesToExcel(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojectnames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProjectNamesToCSV(string ProjectName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojectnames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByProjectNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectName>> GetProjectTablesGetByProjectNames(string projectName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByProjectNamesFunc(ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByProjectNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProjectTableConfigurationsToExcel(string ProjectTableConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojecttableconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojecttableconfigurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByProjectTableConfigurationsToCSV(string ProjectTableConfiguration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyprojecttableconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyprojecttableconfigurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByProjectTableConfigurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectTableConfiguration>> GetProjectTablesGetByProjectTableConfigurations(string projectTableConfiguration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByProjectTableConfigurationsFunc(ProjectTableConfiguration='{HttpUtility.UrlEncode(projectTableConfiguration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByProjectTableConfigurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByProjectTableConfiguration>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableName>> GetProjectTablesGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByTableNameCryptosToExcel(string TableNameCrypto, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenamecryptos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenamecryptos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByTableNameCryptosToCSV(string TableNameCrypto, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbytablenamecryptos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbytablenamecryptos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByTableNameCryptos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableNameCrypto>> GetProjectTablesGetByTableNameCryptos(string tableNameCrypto = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByTableNameCryptosFunc(TableNameCrypto='{HttpUtility.UrlEncode(tableNameCrypto.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByTableNameCryptos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByTableNameCrypto>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByUniqueColumnsToExcel(string UniqueColumns, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuniquecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuniquecolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByUniqueColumnsToCSV(string UniqueColumns, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuniquecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuniquecolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByUniqueColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUniqueColumn>> GetProjectTablesGetByUniqueColumns(string uniqueColumns = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByUniqueColumnsFunc(UniqueColumns='{HttpUtility.UrlEncode(uniqueColumns.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByUniqueColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUniqueColumn>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByUserProjectConnectionsToExcel(string UserProjectConnections, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuserprojectconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuserprojectconnections/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesGetByUserProjectConnectionsToCSV(string UserProjectConnections, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesgetbyuserprojectconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesgetbyuserprojectconnections/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesGetByUserProjectConnections(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUserProjectConnection>> GetProjectTablesGetByUserProjectConnections(string userProjectConnections = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesGetByUserProjectConnectionsFunc(UserProjectConnections='{HttpUtility.UrlEncode(userProjectConnections.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesGetByUserProjectConnections(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesGetByUserProjectConnection>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesInsertsToExcel(string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesInsertsToCSV(string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesInsert>> GetProjectTablesInserts(string tableName = default(string), string tableNameCrypto = default(string), string uniqueColumns = default(string), string dataIndex = default(string), string projectName = default(string), string userProjectConnections = default(string), string columns = default(string), string projectTableConfiguration = default(string), string diagramConfiguration = default(string), string auditConfiguration = default(string), string comment = default(string), string cmsmenuConfiguration = default(string), string cmspermissionConfiguration = default(string), string cmsexportConfiguration = default(string), string cmscustomFilterConfiguration = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string cmsrouteConfiguration = default(string), string apiConfiguration = default(string), int? programmingLanguageId = default(int?), string i18configuration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesInsertsFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',TableNameCrypto='{HttpUtility.UrlEncode(tableNameCrypto.Trim().Replace("'", "''"))}',UniqueColumns='{HttpUtility.UrlEncode(uniqueColumns.Trim().Replace("'", "''"))}',DataIndex='{HttpUtility.UrlEncode(dataIndex.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',UserProjectConnections='{HttpUtility.UrlEncode(userProjectConnections.Trim().Replace("'", "''"))}',Columns='{HttpUtility.UrlEncode(columns.Trim().Replace("'", "''"))}',ProjectTableConfiguration='{HttpUtility.UrlEncode(projectTableConfiguration.Trim().Replace("'", "''"))}',DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}',AuditConfiguration='{HttpUtility.UrlEncode(auditConfiguration.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',CMSMenuConfiguration='{HttpUtility.UrlEncode(cmsmenuConfiguration.Trim().Replace("'", "''"))}',CMSPermissionConfiguration='{HttpUtility.UrlEncode(cmspermissionConfiguration.Trim().Replace("'", "''"))}',CMSExportConfiguration='{HttpUtility.UrlEncode(cmsexportConfiguration.Trim().Replace("'", "''"))}',CMSCustomFilterConfiguration='{HttpUtility.UrlEncode(cmscustomFilterConfiguration.Trim().Replace("'", "''"))}',{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CMSRouteConfiguration='{HttpUtility.UrlEncode(cmsrouteConfiguration.Trim().Replace("'", "''"))}',ApiConfiguration='{HttpUtility.UrlEncode(apiConfiguration.Trim().Replace("'", "''"))}',{programmingLanguageId},I18Configuration='{HttpUtility.UrlEncode(i18configuration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesUpdatesToExcel(int? Id, string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportProjectTablesUpdatesToCSV(int? Id, string TableName, string TableNameCrypto, string UniqueColumns, string DataIndex, string ProjectName, string UserProjectConnections, string Columns, string ProjectTableConfiguration, string DiagramConfiguration, string AuditConfiguration, string Comment, string CMSMenuConfiguration, string CMSPermissionConfiguration, string CMSExportConfiguration, string CMSCustomFilterConfiguration, decimal? Price, int? CurrencyId, decimal? Commission, string CustomCode, string CMSRouteConfiguration, string ApiConfiguration, int? ProgrammingLanguageId, string I18Configuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/projecttablesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/projecttablesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetProjectTablesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesUpdate>> GetProjectTablesUpdates(int? id = default(int?), string tableName = default(string), string tableNameCrypto = default(string), string uniqueColumns = default(string), string dataIndex = default(string), string projectName = default(string), string userProjectConnections = default(string), string columns = default(string), string projectTableConfiguration = default(string), string diagramConfiguration = default(string), string auditConfiguration = default(string), string comment = default(string), string cmsmenuConfiguration = default(string), string cmspermissionConfiguration = default(string), string cmsexportConfiguration = default(string), string cmscustomFilterConfiguration = default(string), decimal? price = default(decimal?), int? currencyId = default(int?), decimal? commission = default(decimal?), string customCode = default(string), string cmsrouteConfiguration = default(string), string apiConfiguration = default(string), int? programmingLanguageId = default(int?), string i18configuration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ProjectTablesUpdatesFunc({id},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',TableNameCrypto='{HttpUtility.UrlEncode(tableNameCrypto.Trim().Replace("'", "''"))}',UniqueColumns='{HttpUtility.UrlEncode(uniqueColumns.Trim().Replace("'", "''"))}',DataIndex='{HttpUtility.UrlEncode(dataIndex.Trim().Replace("'", "''"))}',ProjectName='{HttpUtility.UrlEncode(projectName.Trim().Replace("'", "''"))}',UserProjectConnections='{HttpUtility.UrlEncode(userProjectConnections.Trim().Replace("'", "''"))}',Columns='{HttpUtility.UrlEncode(columns.Trim().Replace("'", "''"))}',ProjectTableConfiguration='{HttpUtility.UrlEncode(projectTableConfiguration.Trim().Replace("'", "''"))}',DiagramConfiguration='{HttpUtility.UrlEncode(diagramConfiguration.Trim().Replace("'", "''"))}',AuditConfiguration='{HttpUtility.UrlEncode(auditConfiguration.Trim().Replace("'", "''"))}',Comment='{HttpUtility.UrlEncode(comment.Trim().Replace("'", "''"))}',CMSMenuConfiguration='{HttpUtility.UrlEncode(cmsmenuConfiguration.Trim().Replace("'", "''"))}',CMSPermissionConfiguration='{HttpUtility.UrlEncode(cmspermissionConfiguration.Trim().Replace("'", "''"))}',CMSExportConfiguration='{HttpUtility.UrlEncode(cmsexportConfiguration.Trim().Replace("'", "''"))}',CMSCustomFilterConfiguration='{HttpUtility.UrlEncode(cmscustomFilterConfiguration.Trim().Replace("'", "''"))}',{price},{currencyId},{commission},CustomCode='{HttpUtility.UrlEncode(customCode.Trim().Replace("'", "''"))}',CMSRouteConfiguration='{HttpUtility.UrlEncode(cmsrouteConfiguration.Trim().Replace("'", "''"))}',ApiConfiguration='{HttpUtility.UrlEncode(apiConfiguration.Trim().Replace("'", "''"))}',{programmingLanguageId},I18Configuration='{HttpUtility.UrlEncode(i18configuration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetProjectTablesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ProjectTablesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetAll>> GetReferenceWebSitesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByAvgVisitDurationsToExcel(string AvgVisitDuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyavgvisitdurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyavgvisitdurations/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByAvgVisitDurationsToCSV(string AvgVisitDuration, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyavgvisitdurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyavgvisitdurations/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByAvgVisitDurations(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByAvgVisitDuration>> GetReferenceWebSitesGetByAvgVisitDurations(string avgVisitDuration = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByAvgVisitDurationsFunc(AvgVisitDuration='{HttpUtility.UrlEncode(avgVisitDuration.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByAvgVisitDurations(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByAvgVisitDuration>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByBounceRatesToExcel(string BounceRate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbybouncerates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbybouncerates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByBounceRatesToCSV(string BounceRate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbybouncerates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbybouncerates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByBounceRates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByBounceRate>> GetReferenceWebSitesGetByBounceRates(string bounceRate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByBounceRatesFunc(BounceRate='{HttpUtility.UrlEncode(bounceRate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByBounceRates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByBounceRate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCommissionsToExcel(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycommissions/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCommissionsToCSV(decimal? Commission, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycommissions/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByCommissions(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCommission>> GetReferenceWebSitesGetByCommissions(decimal? commission = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByCommissionsFunc({commission})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByCommissions(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCommission>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCreatedDatesToExcel(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycreateddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCreatedDatesToCSV(string CreatedDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycreateddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByCreatedDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCreatedDate>> GetReferenceWebSitesGetByCreatedDates(string createdDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByCreatedDatesFunc(CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByCreatedDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCreatedDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCurrencyIdsToExcel(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycurrencyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByCurrencyIdsToCSV(int? CurrencyId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbycurrencyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByCurrencyIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCurrencyId>> GetReferenceWebSitesGetByCurrencyIds(int? currencyId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByCurrencyIdsFunc({currencyId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByCurrencyIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByCurrencyId>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByDefaultLanguagesToExcel(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbydefaultlanguages/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByDefaultLanguagesToCSV(int? DefaultLanguage, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbydefaultlanguages/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByDefaultLanguages(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByDefaultLanguage>> GetReferenceWebSitesGetByDefaultLanguages(int? defaultLanguage = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByDefaultLanguagesFunc({defaultLanguage})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByDefaultLanguages(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByDefaultLanguage>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByGuidsToExcel(string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyguids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyguids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByGuidsToCSV(string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyguids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyguids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByGuids(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByGuid>> GetReferenceWebSitesGetByGuids(string guid = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByGuidsFunc(Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByGuids(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByGuid>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByIdsToExcel(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByIdsToCSV(int? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetById>> GetReferenceWebSitesGetByIds(int? id = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByIsLastPublishSuccessfulliesToExcel(bool? IsLastPublishSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByIsLastPublishSuccessfulliesToCSV(bool? IsLastPublishSuccessfully, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyislastpublishsuccessfullies/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByIsLastPublishSuccessfullies(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByIsLastPublishSuccessfully>> GetReferenceWebSitesGetByIsLastPublishSuccessfullies(bool? isLastPublishSuccessfully = default(bool?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByIsLastPublishSuccessfulliesFunc(IsLastPublishSuccessfully={isLastPublishSuccessfully?.ToString().ToLower()})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByIsLastPublishSuccessfullies(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByIsLastPublishSuccessfully>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByLastCompileDatesToExcel(string LastCompileDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylastcompiledates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylastcompiledates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByLastCompileDatesToCSV(string LastCompileDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylastcompiledates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylastcompiledates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByLastCompileDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLastCompileDate>> GetReferenceWebSitesGetByLastCompileDates(string lastCompileDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByLastCompileDatesFunc(LastCompileDate='{HttpUtility.UrlEncode(lastCompileDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByLastCompileDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLastCompileDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByLogosToExcel(string Logo, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylogos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylogos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByLogosToCSV(string Logo, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbylogos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbylogos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByLogos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLogo>> GetReferenceWebSitesGetByLogos(string logo = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByLogosFunc(Logo='{HttpUtility.UrlEncode(logo.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByLogos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByLogo>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByModifyDatesToExcel(string ModifyDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbymodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbymodifydates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByModifyDatesToCSV(string ModifyDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbymodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbymodifydates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByModifyDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByModifyDate>> GetReferenceWebSitesGetByModifyDates(string modifyDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByModifyDatesFunc(ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByModifyDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByModifyDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByPageVisitsToExcel(string PageVisit, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbypagevisits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbypagevisits/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByPageVisitsToCSV(string PageVisit, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbypagevisits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbypagevisits/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByPageVisits(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPageVisit>> GetReferenceWebSitesGetByPageVisits(string pageVisit = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByPageVisitsFunc(PageVisit='{HttpUtility.UrlEncode(pageVisit.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByPageVisits(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPageVisit>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByPricesToExcel(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprices/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByPricesToCSV(decimal? Price, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprices/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByPrices(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPrice>> GetReferenceWebSitesGetByPrices(decimal? price = default(decimal?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByPricesFunc({price})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByPrices(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByPrice>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByProjectCategoryIdsToExcel(int? ProjectCategoryId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprojectcategoryids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprojectcategoryids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByProjectCategoryIdsToCSV(int? ProjectCategoryId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyprojectcategoryids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyprojectcategoryids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByProjectCategoryIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByProjectCategoryId>> GetReferenceWebSitesGetByProjectCategoryIds(int? projectCategoryId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByProjectCategoryIdsFunc({projectCategoryId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByProjectCategoryIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByProjectCategoryId>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByRankingsToExcel(int? Ranking, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyrankings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyrankings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByRankingsToCSV(int? Ranking, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyrankings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyrankings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByRankings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByRanking>> GetReferenceWebSitesGetByRankings(int? ranking = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByRankingsFunc({ranking})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByRankings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByRanking>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetBySiteNamesToExcel(string SiteName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysitenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysitenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetBySiteNamesToCSV(string SiteName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysitenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysitenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetBySiteNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySiteName>> GetReferenceWebSitesGetBySiteNames(string siteName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetBySiteNamesFunc(SiteName='{HttpUtility.UrlEncode(siteName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetBySiteNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySiteName>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetBySoftwareLanguageIdsToExcel(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetBySoftwareLanguageIdsToCSV(int? SoftwareLanguageId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbysoftwarelanguageids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetBySoftwareLanguageIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySoftwareLanguageId>> GetReferenceWebSitesGetBySoftwareLanguageIds(int? softwareLanguageId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetBySoftwareLanguageIdsFunc({softwareLanguageId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetBySoftwareLanguageIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetBySoftwareLanguageId>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByUrlsToExcel(string Url, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyurls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByUrlsToCSV(string Url, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyurls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByUrls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUrl>> GetReferenceWebSitesGetByUrls(string url = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByUrlsFunc(Url='{HttpUtility.UrlEncode(url.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByUrls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUrl>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByUserIdsToExcel(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyuserids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByUserIdsToCSV(int? UserId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyuserids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByUserIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUserId>> GetReferenceWebSitesGetByUserIds(int? userId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByUserIdsFunc({userId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByUserIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByUserId>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByValidDatesToExcel(string ValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyvaliddates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetByValidDatesToCSV(string ValidDate, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetbyvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetbyvaliddates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetByValidDates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByValidDate>> GetReferenceWebSitesGetByValidDates(string validDate = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetByValidDatesFunc(ValidDate='{HttpUtility.UrlEncode(validDate.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetByValidDates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetByValidDate>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetCreatedDateBetweensToExcel(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetcreateddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetCreatedDateBetweensToCSV(string CreatedDateStart, string CreatedDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetcreateddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetCreatedDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetCreatedDateBetween>> GetReferenceWebSitesGetCreatedDateBetweens(string createdDateStart = default(string), string createdDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetCreatedDateBetweensFunc(CreatedDateStart='{HttpUtility.UrlEncode(createdDateStart.Trim().Replace("'", "''"))}',CreatedDateEnd='{HttpUtility.UrlEncode(createdDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetCreatedDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetCreatedDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetLastCompileDateBetweensToExcel(string LastCompileDateStart, string LastCompileDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetLastCompileDateBetweensToCSV(string LastCompileDateStart, string LastCompileDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetlastcompiledatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetLastCompileDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetLastCompileDateBetween>> GetReferenceWebSitesGetLastCompileDateBetweens(string lastCompileDateStart = default(string), string lastCompileDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetLastCompileDateBetweensFunc(LastCompileDateStart='{HttpUtility.UrlEncode(lastCompileDateStart.Trim().Replace("'", "''"))}',LastCompileDateEnd='{HttpUtility.UrlEncode(lastCompileDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetLastCompileDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetLastCompileDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetModifyDateBetweensToExcel(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetmodifydatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetmodifydatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetModifyDateBetweensToCSV(string ModifyDateStart, string ModifyDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetmodifydatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetmodifydatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetModifyDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetModifyDateBetween>> GetReferenceWebSitesGetModifyDateBetweens(string modifyDateStart = default(string), string modifyDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetModifyDateBetweensFunc(ModifyDateStart='{HttpUtility.UrlEncode(modifyDateStart.Trim().Replace("'", "''"))}',ModifyDateEnd='{HttpUtility.UrlEncode(modifyDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetModifyDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetModifyDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetValidDateBetweensToExcel(string ValidDateStart, string ValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetvaliddatebetweens/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesGetValidDateBetweensToCSV(string ValidDateStart, string ValidDateEnd, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesgetvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesgetvaliddatebetweens/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesGetValidDateBetweens(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetValidDateBetween>> GetReferenceWebSitesGetValidDateBetweens(string validDateStart = default(string), string validDateEnd = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesGetValidDateBetweensFunc(ValidDateStart='{HttpUtility.UrlEncode(validDateStart.Trim().Replace("'", "''"))}',ValidDateEnd='{HttpUtility.UrlEncode(validDateEnd.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesGetValidDateBetweens(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesGetValidDateBetween>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesInsertsToExcel(string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesInsertsToCSV(string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesInsert>> GetReferenceWebSitesInserts(string siteName = default(string), string url = default(string), int? projectCategoryId = default(int?), int? ranking = default(int?), string avgVisitDuration = default(string), string pageVisit = default(string), string bounceRate = default(string), string logo = default(string), decimal? price = default(decimal?), decimal? commission = default(decimal?), int? currencyId = default(int?), string createdDate = default(string), string validDate = default(string), string modifyDate = default(string), string lastCompileDate = default(string), int? softwareLanguageId = default(int?), bool? isLastPublishSuccessfully = default(bool?), int? defaultLanguage = default(int?), int? userId = default(int?), string guid = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesInsertsFunc(SiteName='{HttpUtility.UrlEncode(siteName.Trim().Replace("'", "''"))}',Url='{HttpUtility.UrlEncode(url.Trim().Replace("'", "''"))}',{projectCategoryId},{ranking},AvgVisitDuration='{HttpUtility.UrlEncode(avgVisitDuration.Trim().Replace("'", "''"))}',PageVisit='{HttpUtility.UrlEncode(pageVisit.Trim().Replace("'", "''"))}',BounceRate='{HttpUtility.UrlEncode(bounceRate.Trim().Replace("'", "''"))}',Logo='{HttpUtility.UrlEncode(logo.Trim().Replace("'", "''"))}',{price},{commission},{currencyId},CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',ValidDate='{HttpUtility.UrlEncode(validDate.Trim().Replace("'", "''"))}',ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}',LastCompileDate='{HttpUtility.UrlEncode(lastCompileDate.Trim().Replace("'", "''"))}',{softwareLanguageId},IsLastPublishSuccessfully={isLastPublishSuccessfully?.ToString().ToLower()},{defaultLanguage},{userId},Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesUpdatesToExcel(int? Id, string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportReferenceWebSitesUpdatesToCSV(int? Id, string SiteName, string Url, int? ProjectCategoryId, int? Ranking, string AvgVisitDuration, string PageVisit, string BounceRate, string Logo, decimal? Price, decimal? Commission, int? CurrencyId, string CreatedDate, string ValidDate, string ModifyDate, string LastCompileDate, int? SoftwareLanguageId, bool? IsLastPublishSuccessfully, int? DefaultLanguage, int? UserId, string Guid, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/referencewebsitesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/referencewebsitesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetReferenceWebSitesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesUpdate>> GetReferenceWebSitesUpdates(int? id = default(int?), string siteName = default(string), string url = default(string), int? projectCategoryId = default(int?), int? ranking = default(int?), string avgVisitDuration = default(string), string pageVisit = default(string), string bounceRate = default(string), string logo = default(string), decimal? price = default(decimal?), decimal? commission = default(decimal?), int? currencyId = default(int?), string createdDate = default(string), string validDate = default(string), string modifyDate = default(string), string lastCompileDate = default(string), int? softwareLanguageId = default(int?), bool? isLastPublishSuccessfully = default(bool?), int? defaultLanguage = default(int?), int? userId = default(int?), string guid = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesUpdatesFunc({id},SiteName='{HttpUtility.UrlEncode(siteName.Trim().Replace("'", "''"))}',Url='{HttpUtility.UrlEncode(url.Trim().Replace("'", "''"))}',{projectCategoryId},{ranking},AvgVisitDuration='{HttpUtility.UrlEncode(avgVisitDuration.Trim().Replace("'", "''"))}',PageVisit='{HttpUtility.UrlEncode(pageVisit.Trim().Replace("'", "''"))}',BounceRate='{HttpUtility.UrlEncode(bounceRate.Trim().Replace("'", "''"))}',Logo='{HttpUtility.UrlEncode(logo.Trim().Replace("'", "''"))}',{price},{commission},{currencyId},CreatedDate='{HttpUtility.UrlEncode(createdDate.Trim().Replace("'", "''"))}',ValidDate='{HttpUtility.UrlEncode(validDate.Trim().Replace("'", "''"))}',ModifyDate='{HttpUtility.UrlEncode(modifyDate.Trim().Replace("'", "''"))}',LastCompileDate='{HttpUtility.UrlEncode(lastCompileDate.Trim().Replace("'", "''"))}',{softwareLanguageId},IsLastPublishSuccessfully={isLastPublishSuccessfully?.ToString().ToLower()},{defaultLanguage},{userId},Guid='{HttpUtility.UrlEncode(guid.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetReferenceWebSitesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.ReferenceWebSitesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetAll>> GetSchemesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByDatabaseTypesToExcel(int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbydatabasetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbydatabasetypes/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByDatabaseTypesToCSV(int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbydatabasetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbydatabasetypes/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesGetByDatabaseTypes(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetByDatabaseType>> GetSchemesGetByDatabaseTypes(int? databaseType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesGetByDatabaseTypesFunc({databaseType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesGetByDatabaseTypes(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetByDatabaseType>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetById>> GetSchemesGetByIds(long? id = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByNamesToExcel(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbynames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesGetByNamesToCSV(string Name, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesgetbynames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesGetByNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetByName>> GetSchemesGetByNames(string name = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesGetByNamesFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesGetByNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesGetByName>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesInsertsToExcel(string Name, int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesInsertsToCSV(string Name, int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesInsert>> GetSchemesInserts(string name = default(string), int? databaseType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesInsertsFunc(Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',{databaseType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportSchemesUpdatesToExcel(long? Id, string Name, int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSchemesUpdatesToCSV(long? Id, string Name, int? DatabaseType, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/schemesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/schemesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSchemesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesUpdate>> GetSchemesUpdates(long? id = default(long?), string name = default(string), int? databaseType = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SchemesUpdatesFunc({id},Name='{HttpUtility.UrlEncode(name.Trim().Replace("'", "''"))}',{databaseType})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSchemesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SchemesUpdate>>(response);
        }

        public async System.Threading.Tasks.Task ExportSpColumnsToExcel(string table_name, string table_owner, string table_qualifier, string column_name, int? ODBCVer, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spcolumns/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSpColumnsToCSV(string table_name, string table_owner, string table_qualifier, string column_name, int? ODBCVer, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spcolumns/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSpColumns(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpColumn>> GetSpColumns(string tableName = default(string), string tableOwner = default(string), string tableQualifier = default(string), string columnName = default(string), int? odbcver = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SpColumnsFunc(table_name='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',table_owner='{HttpUtility.UrlEncode(tableOwner.Trim().Replace("'", "''"))}',table_qualifier='{HttpUtility.UrlEncode(tableQualifier.Trim().Replace("'", "''"))}',column_name='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',{odbcver})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSpColumns(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpColumn>>(response);
        }

        public async System.Threading.Tasks.Task ExportSpDatatypeInfosToExcel(int? data_type, byte? ODBCVer, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdatatypeinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdatatypeinfos/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSpDatatypeInfosToCSV(int? data_type, byte? ODBCVer, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdatatypeinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdatatypeinfos/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSpDatatypeInfos(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpDatatypeInfo>> GetSpDatatypeInfos(int? dataType = default(int?), byte? odbcver = default(byte?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SpDatatypeInfosFunc({dataType},{odbcver})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSpDatatypeInfos(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpDatatypeInfo>>(response);
        }

        public async System.Threading.Tasks.Task ExportSpDbmmonitorhelpalertsToExcel(string database_name, int? alert_id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdbmmonitorhelpalerts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdbmmonitorhelpalerts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSpDbmmonitorhelpalertsToCSV(string database_name, int? alert_id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spdbmmonitorhelpalerts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spdbmmonitorhelpalerts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSpDbmmonitorhelpalerts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpDbmmonitorhelpalert>> GetSpDbmmonitorhelpalerts(string databaseName = default(string), int? alertId = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SpDbmmonitorhelpalertsFunc(database_name='{HttpUtility.UrlEncode(databaseName.Trim().Replace("'", "''"))}',{alertId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSpDbmmonitorhelpalerts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpDbmmonitorhelpalert>>(response);
        }

        public async System.Threading.Tasks.Task ExportSpHelpDatatypeMappingsToExcel(string dbms_name, string dbms_version, string sql_type, int? source_prec, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/sphelpdatatypemappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/sphelpdatatypemappings/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSpHelpDatatypeMappingsToCSV(string dbms_name, string dbms_version, string sql_type, int? source_prec, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/sphelpdatatypemappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/sphelpdatatypemappings/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSpHelpDatatypeMappings(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpHelpDatatypeMapping>> GetSpHelpDatatypeMappings(string dbmsName = default(string), string dbmsVersion = default(string), string sqlType = default(string), int? sourcePrec = default(int?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SpHelpDatatypeMappingsFunc(dbms_name='{HttpUtility.UrlEncode(dbmsName.Trim().Replace("'", "''"))}',dbms_version='{HttpUtility.UrlEncode(dbmsVersion.Trim().Replace("'", "''"))}',sql_type='{HttpUtility.UrlEncode(sqlType.Trim().Replace("'", "''"))}',{sourcePrec})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSpHelpDatatypeMappings(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpHelpDatatypeMapping>>(response);
        }

        public async System.Threading.Tasks.Task ExportSpMonitorsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spmonitors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spmonitors/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportSpMonitorsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/spmonitors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/spmonitors/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetSpMonitors(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpMonitor>> GetSpMonitors(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"SpMonitorsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSpMonitors(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.SpMonitor>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesGetAllsToExcel(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetalls/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesGetAllsToCSV(Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetalls/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesGetAlls(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetAll>> GetTablesGetAlls(string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesGetAllsFunc()");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesGetAlls(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetAll>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByIdsToExcel(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByIdsToCSV(long? Id, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesGetByIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetById>> GetTablesGetByIds(long? id = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesGetByIdsFunc({id})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesGetByIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetById>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByProjectIdsToExcel(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyprojectids/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByProjectIdsToCSV(long? ProjectId, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbyprojectids/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesGetByProjectIds(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetByProjectId>> GetTablesGetByProjectIds(long? projectId = default(long?), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesGetByProjectIdsFunc({projectId})");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesGetByProjectIds(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetByProjectId>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByTableNamesToExcel(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbytablenames/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesGetByTableNamesToCSV(string TableName, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesgetbytablenames/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesGetByTableNames(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetByTableName>> GetTablesGetByTableNames(string tableName = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesGetByTableNamesFunc(TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesGetByTableNames(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesGetByTableName>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesInsertsToExcel(long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesinserts/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesInsertsToCSV(long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesinserts/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesInserts(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesInsert>> GetTablesInserts(long? projectId = default(long?), string tableName = default(string), string config = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesInsertsFunc({projectId},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',Config='{HttpUtility.UrlEncode(config.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesInserts(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesInsert>>(response);
        }

        public async System.Threading.Tasks.Task ExportTablesUpdatesToExcel(long? Id, long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesupdates/excel(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        public async System.Threading.Tasks.Task ExportTablesUpdatesToCSV(long? Id, long? ProjectId, string TableName, string Config, Query query = null, string fileName = null)
        {
            navigationManager.NavigateTo(query != null ? query.ToUrl($"export/jsonserver/tablesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')") : $"export/jsonserver/tablesupdates/csv(fileName='{(!string.IsNullOrEmpty(fileName) ? UrlEncoder.Default.Encode(fileName) : "Export")}')", true);
        }

        partial void OnGetTablesUpdates(HttpRequestMessage requestMessage);

        public async Task<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesUpdate>> GetTablesUpdates(long? id = default(long?), long? projectId = default(long?), string tableName = default(string), string config = default(string), string filter = default(string), string orderby = default(string), string expand = default(string), int? top = default(int?), int? skip = default(int?), bool? count = default(bool?), string format = default(string), string select = default(string))
        {
            var uri = new Uri(baseUri, $"TablesUpdatesFunc({id},{projectId},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',Config='{HttpUtility.UrlEncode(config.Trim().Replace("'", "''"))}')");
            uri = Radzen.ODataExtensions.GetODataUri(uri: uri, filter:filter, top:top, skip:skip, orderby:orderby, expand:expand, select:select, count:count);

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTablesUpdates(httpRequestMessage);

            var response = await httpClient.SendAsync(httpRequestMessage);

            return await Radzen.HttpResponseMessageExtensions.ReadAsync<Radzen.ODataServiceResult<ZarenUI.Server.Models.JSONServer.TablesUpdate>>(response);
        }

        partial void OnColorGroupsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ColorGroupsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ColorGroupsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnColorGroupsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnConstraintRulesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ConstraintRulesDeletes(long? id = default(long?))
        {
            var uri = new Uri(baseUri, $"ConstraintRulesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnConstraintRulesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnCountryDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> CountryDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"CountryDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnCountryDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnCountryLanguagesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> CountryLanguagesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"CountryLanguagesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnCountryLanguagesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDesignSchemesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DesignSchemesDeletes(string colorsBodyBackground = default(string))
        {
            var uri = new Uri(baseUri, $"DesignSchemesDeletesFunc(colors_body_background='{HttpUtility.UrlEncode(colorsBodyBackground.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDesignSchemesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDeviceGroupsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DeviceGroupsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"DeviceGroupsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDeviceGroupsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDevicesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DevicesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"DevicesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDevicesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicJsons(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicJsons(string json = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicJsonsFunc(json='{HttpUtility.UrlEncode(json.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicJsons(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicQueries(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicQueries(string query = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicQueriesFunc(Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicQueries(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicstatistics(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> Dynamicstatistics()
        {
            var uri = new Uri(baseUri, $"DynamicstatisticsFunc()");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicstatistics(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicTables(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicTables(bool? allColumns = default(bool?), bool? selectTop = default(bool?), bool? getCount = default(bool?), bool? hasWhere = default(bool?), bool? hasOrder = default(bool?), bool? hasGroupBy = default(bool?), bool? hasHaving = default(bool?), bool? hasDirect = default(bool?), bool? leftJoin = default(bool?), string leftJoinTable = default(string), string leftJoinTableSelectColumn = default(string), bool? rightJoin = default(bool?), string rightJoinTable = default(string), string rightJoinTableSelectColumn = default(string), bool? innerJoin = default(bool?), string innerJoinTable = default(string), string innerJoinTableSelectColumn = default(string), string table = default(string), string columnNames = default(string), string primaryKey = default(string), int? selectTopCount = default(int?), string orderColumn = default(string), string groupByColumn = default(string), string joinTable = default(string), string whereClause = default(string), string havingClause = default(string), string directQuery = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTablesFunc(AllColumns={allColumns?.ToString().ToLower()},SelectTop={selectTop?.ToString().ToLower()},GetCount={getCount?.ToString().ToLower()},HasWhere={hasWhere?.ToString().ToLower()},HasOrder={hasOrder?.ToString().ToLower()},HasGroupBy={hasGroupBy?.ToString().ToLower()},HasHaving={hasHaving?.ToString().ToLower()},HasDirect={hasDirect?.ToString().ToLower()},LeftJoin={leftJoin?.ToString().ToLower()},LeftJoinTable='{HttpUtility.UrlEncode(leftJoinTable.Trim().Replace("'", "''"))}',LeftJoinTableSelectColumn='{HttpUtility.UrlEncode(leftJoinTableSelectColumn.Trim().Replace("'", "''"))}',RightJoin={rightJoin?.ToString().ToLower()},RightJoinTable='{HttpUtility.UrlEncode(rightJoinTable.Trim().Replace("'", "''"))}',RightJoinTableSelectColumn='{HttpUtility.UrlEncode(rightJoinTableSelectColumn.Trim().Replace("'", "''"))}',InnerJoin={innerJoin?.ToString().ToLower()},InnerJoinTable='{HttpUtility.UrlEncode(innerJoinTable.Trim().Replace("'", "''"))}',InnerJoinTableSelectColumn='{HttpUtility.UrlEncode(innerJoinTableSelectColumn.Trim().Replace("'", "''"))}',Table='{HttpUtility.UrlEncode(table.Trim().Replace("'", "''"))}',ColumnNames='{HttpUtility.UrlEncode(columnNames.Trim().Replace("'", "''"))}',PrimaryKey='{HttpUtility.UrlEncode(primaryKey.Trim().Replace("'", "''"))}',{selectTopCount},OrderColumn='{HttpUtility.UrlEncode(orderColumn.Trim().Replace("'", "''"))}',GroupByColumn='{HttpUtility.UrlEncode(groupByColumn.Trim().Replace("'", "''"))}',JoinTable='{HttpUtility.UrlEncode(joinTable.Trim().Replace("'", "''"))}',WhereClause='{HttpUtility.UrlEncode(whereClause.Trim().Replace("'", "''"))}',HavingClause='{HttpUtility.UrlEncode(havingClause.Trim().Replace("'", "''"))}',DirectQuery='{HttpUtility.UrlEncode(directQuery.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicTables(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicTablePagers(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicTablePagers(int? pageSize = default(int?), int? pageNum = default(int?), string tableName = default(string), string _where = default(string), string orderBy = default(string), string orderWithAsc = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTablePagersFunc({pageSize},{pageNum},TableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',where='{HttpUtility.UrlEncode(where.Trim().Replace("'", "''"))}',orderBy='{HttpUtility.UrlEncode(orderBy.Trim().Replace("'", "''"))}',orderWithAsc='{HttpUtility.UrlEncode(orderWithAsc.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicTablePagers(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicTableRows(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicTableRows(string table = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableRowsFunc(table='{HttpUtility.UrlEncode(table.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicTableRows(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicTableSearches(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicTableSearches(string table = default(string), int? tableId = default(int?), string columnName = default(string), string query = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicTableSearchesFunc(Table='{HttpUtility.UrlEncode(table.Trim().Replace("'", "''"))}',{tableId},ColumnName='{HttpUtility.UrlEncode(columnName.Trim().Replace("'", "''"))}',Query='{HttpUtility.UrlEncode(query.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicTableSearches(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnDynamicUpserts(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> DynamicUpserts(string tablename = default(string), string tableschema = default(string))
        {
            var uri = new Uri(baseUri, $"DynamicUpsertsFunc(tablename='{HttpUtility.UrlEncode(tablename.Trim().Replace("'", "''"))}',tableschema='{HttpUtility.UrlEncode(tableschema.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnDynamicUpserts(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnFieldsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> FieldsDeletes(long? id = default(long?))
        {
            var uri = new Uri(baseUri, $"FieldsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnFieldsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnForeignKeyRulesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ForeignKeyRulesDeletes(long? id = default(long?))
        {
            var uri = new Uri(baseUri, $"ForeignKeyRulesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnForeignKeyRulesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetAnies(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetAnies(string columnList = default(string), string _where = default(string), string orderBy = default(string), bool? orderWithAsc = default(bool?), int? take = default(int?), string tableName = default(string))
        {
            var uri = new Uri(baseUri, $"GetAniesFunc(columnList='{HttpUtility.UrlEncode(columnList.Trim().Replace("'", "''"))}',where='{HttpUtility.UrlEncode(where.Trim().Replace("'", "''"))}',orderBy='{HttpUtility.UrlEncode(orderBy.Trim().Replace("'", "''"))}',orderWithAsc={orderWithAsc?.ToString().ToLower()},{take},tableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetAnies(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetExtendedInserts(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetExtendedInserts(string pname = default(string), string pvalue = default(string), string plevel1name = default(string), string plevel2name = default(string))
        {
            var uri = new Uri(baseUri, $"GetExtendedInsertsFunc(pname='{HttpUtility.UrlEncode(pname.Trim().Replace("'", "''"))}',pvalue='{HttpUtility.UrlEncode(pvalue.Trim().Replace("'", "''"))}',plevel1name='{HttpUtility.UrlEncode(plevel1name.Trim().Replace("'", "''"))}',plevel2name='{HttpUtility.UrlEncode(plevel2name.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetExtendedInserts(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetExtendedRemoves(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetExtendedRemoves(string pname = default(string), string plevel1name = default(string), string plevel2name = default(string))
        {
            var uri = new Uri(baseUri, $"GetExtendedRemovesFunc(pname='{HttpUtility.UrlEncode(pname.Trim().Replace("'", "''"))}',plevel1name='{HttpUtility.UrlEncode(plevel1name.Trim().Replace("'", "''"))}',plevel2name='{HttpUtility.UrlEncode(plevel2name.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetExtendedRemoves(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetGroupBies(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetGroupBies(string column = default(string), string _where = default(string), string groupBy = default(string), string havingClause = default(string), string tableName = default(string))
        {
            var uri = new Uri(baseUri, $"GetGroupBiesFunc(column='{HttpUtility.UrlEncode(column.Trim().Replace("'", "''"))}',where='{HttpUtility.UrlEncode(where.Trim().Replace("'", "''"))}',groupBy='{HttpUtility.UrlEncode(groupBy.Trim().Replace("'", "''"))}',havingClause='{HttpUtility.UrlEncode(havingClause.Trim().Replace("'", "''"))}',tableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetGroupBies(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetPagers(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetPagers(int? pageSize = default(int?), int? pageNum = default(int?), string tableName = default(string), string _where = default(string), string orderBy = default(string), string orderWithAsc = default(string), string columnList = default(string), int? take = default(int?))
        {
            var uri = new Uri(baseUri, $"GetPagersFunc({pageSize},{pageNum},tableName='{HttpUtility.UrlEncode(tableName.Trim().Replace("'", "''"))}',where='{HttpUtility.UrlEncode(where.Trim().Replace("'", "''"))}',orderBy='{HttpUtility.UrlEncode(orderBy.Trim().Replace("'", "''"))}',orderWithAsc='{HttpUtility.UrlEncode(orderWithAsc.Trim().Replace("'", "''"))}',columnList='{HttpUtility.UrlEncode(columnList.Trim().Replace("'", "''"))}',{take})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetPagers(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetSearchWithLists(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetSearchWithLists()
        {
            var uri = new Uri(baseUri, $"GetSearchWithListsFunc()");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetSearchWithLists(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnGetTableFks(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> GetTableFks()
        {
            var uri = new Uri(baseUri, $"GetTableFksFunc()");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnGetTableFks(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProgrammingCategoryDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProgrammingCategoryDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProgrammingCategoryDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProgrammingCategoryDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProgrammingCodesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProgrammingCodesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProgrammingCodesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProgrammingCodeTemplatesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProgrammingCodeTemplatesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProgrammingCodeTemplatesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProgrammingCodeTemplatesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProgrammingTechnologyDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProgrammingTechnologyDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProgrammingTechnologyDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProgrammingTechnologyDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectCategoryDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectCategoryDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectCategoryDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectCategoryDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectConfigurationKeyAndValueDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectConfigurationKeyAndValueDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationKeyAndValueDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectConfigurationKeyAndValueDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectConfigurationsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectConfigurationsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectConfigurationsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectConfigurationsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectFunctionGroupsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectFunctionGroupsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionGroupsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectFunctionGroupsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectFunctionsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectFunctionsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectFunctionsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectFunctionsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectPageComponentElementsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectPageComponentElementsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentElementsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectPageComponentElementsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectPageComponentsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectPageComponentsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectPageComponentsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectPageComponentsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectPagesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectPagesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectPagesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectPagesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectTableColumnsDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectTableColumnsDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectTableColumnsDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectTableColumnsDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnProjectTablesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ProjectTablesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ProjectTablesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnProjectTablesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnReferenceWebSitesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> ReferenceWebSitesDeletes(int? id = default(int?))
        {
            var uri = new Uri(baseUri, $"ReferenceWebSitesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnReferenceWebSitesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSchemesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SchemesDeletes(long? id = default(long?))
        {
            var uri = new Uri(baseUri, $"SchemesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSchemesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpDbmmonitoraddmonitorings(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpDbmmonitoraddmonitorings(int? updatePeriod = default(int?))
        {
            var uri = new Uri(baseUri, $"SpDbmmonitoraddmonitoringsFunc({updatePeriod})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpDbmmonitoraddmonitorings(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpDbmmonitorresults(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpDbmmonitorresults(string databaseName = default(string), int? mode = default(int?), int? updateTable = default(int?))
        {
            var uri = new Uri(baseUri, $"SpDbmmonitorresultsFunc(database_name='{HttpUtility.UrlEncode(databaseName.Trim().Replace("'", "''"))}',{mode},{updateTable})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpDbmmonitorresults(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpDbmmonitorupdates(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpDbmmonitorupdates(string databaseName = default(string))
        {
            var uri = new Uri(baseUri, $"SpDbmmonitorupdatesFunc(database_name='{HttpUtility.UrlEncode(databaseName.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpDbmmonitorupdates(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpDroplogins(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpDroplogins(string loginame = default(string))
        {
            var uri = new Uri(baseUri, $"SpDroploginsFunc(loginame='{HttpUtility.UrlEncode(loginame.Trim().Replace("'", "''"))}')");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpDroplogins(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpKillOldestTransactionOnSecondaries(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpKillOldestTransactionOnSecondaries(string databaseName = default(string), bool? killAll = default(bool?), long? killedXdests = default(long?))
        {
            var uri = new Uri(baseUri, $"SpKillOldestTransactionOnSecondariesFunc(database_name='{HttpUtility.UrlEncode(databaseName.Trim().Replace("'", "''"))}',kill_all={killAll?.ToString().ToLower()},{killedXdests})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpKillOldestTransactionOnSecondaries(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnSpMsgetalertinfos(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> SpMsgetalertinfos(bool? includeaddresses = default(bool?))
        {
            var uri = new Uri(baseUri, $"SpMsgetalertinfosFunc(includeaddresses={includeaddresses?.ToString().ToLower()})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnSpMsgetalertinfos(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }

        partial void OnTablesDeletes(HttpRequestMessage requestMessage);

        public async Task<HttpResponseMessage> TablesDeletes(long? id = default(long?))
        {
            var uri = new Uri(baseUri, $"TablesDeletesFunc({id})");

            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);

            OnTablesDeletes(httpRequestMessage);

            return await httpClient.SendAsync(httpRequestMessage);
        }
    }
}