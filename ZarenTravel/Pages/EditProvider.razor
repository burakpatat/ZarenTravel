@page "/edit-provider"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Edit Provider</PageTitle>
    <div class="col-md-12">
        <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Provider</RadzenAlert>
        <RadzenTemplateForm TItem="ZarenTravel.Models.ZarenSoft.Provider" Data="@provider" Visible="@(provider != null)" Submit="@FormSubmit">
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@provider.Name" Name="Name" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Address" Component="Address" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@provider.Address" Name="Address" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Website" Component="Website" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@provider.Website" Name="Website" />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Contact" Component="Contact" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@contactsForComercialContactId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasComercialContactIdValue) Placeholder="Choose Contact" style="display: block; width: 100%" @bind-Value="@provider.ComercialContactId" Name="ComercialContactId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Contact1" Component="Contact1" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@contactsForFinanceContactId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasFinanceContactIdValue) Placeholder="Choose Contact1" style="display: block; width: 100%" @bind-Value="@provider.FinanceContactId" Name="FinanceContactId"
                           />
                </div>
            </div>
            <div style="margin-bottom: 1rem" class="row">
                <div class="col-md-3">
                    <RadzenLabel Text="Contact2" Component="Contact2" style="width: 100%" />
                </div>
                <div class="col-md-9">
                    <RadzenDropDownDataGrid Data="@contactsForReservationContactId" TextProperty="Name" ValueProperty="Id"
                        Disabled=@(hasReservationContactIdValue) Placeholder="Choose Contact2" style="display: block; width: 100%" @bind-Value="@provider.ReservationContactId" Name="ReservationContactId"
                           />
                </div>
            </div>
            <div class="row">
                <div class="col d-flex justify-content-end" style="margin-top: 1rem">
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Style="margin-right: 0.5rem" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick"  />
                </div>
            </div>
        </RadzenTemplateForm>
    </div>

@code {

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        provider = await ZarenSoftService.GetProviderById(Id);

        contactsForComercialContactId = await ZarenSoftService.GetContacts();

        contactsForFinanceContactId = await ZarenSoftService.GetContacts();

        contactsForReservationContactId = await ZarenSoftService.GetContacts();
    }
    protected bool errorVisible;
    protected ZarenTravel.Models.ZarenSoft.Provider provider;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Contact> contactsForComercialContactId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Contact> contactsForFinanceContactId;

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Contact> contactsForReservationContactId;

    protected async Task FormSubmit()
    {
        try
        {
            await ZarenSoftService.UpdateProvider(Id, provider);
            DialogService.Close(provider);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }





    bool hasComercialContactIdValue;

    [Parameter]
    public int? ComercialContactId { get; set; }

    bool hasFinanceContactIdValue;

    [Parameter]
    public int? FinanceContactId { get; set; }

    bool hasReservationContactIdValue;

    [Parameter]
    public int? ReservationContactId { get; set; }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        provider = new ZarenTravel.Models.ZarenSoft.Provider();

        hasComercialContactIdValue = parameters.TryGetValue<int?>("ComercialContactId", out var hasComercialContactIdResult);

        if (hasComercialContactIdValue)
        {
            provider.ComercialContactId = hasComercialContactIdResult;
        }

        hasFinanceContactIdValue = parameters.TryGetValue<int?>("FinanceContactId", out var hasFinanceContactIdResult);

        if (hasFinanceContactIdValue)
        {
            provider.FinanceContactId = hasFinanceContactIdResult;
        }

        hasReservationContactIdValue = parameters.TryGetValue<int?>("ReservationContactId", out var hasReservationContactIdResult);

        if (hasReservationContactIdValue)
        {
            provider.ReservationContactId = hasReservationContactIdResult;
        }
        await base.SetParametersAsync(parameters);
    }
}
