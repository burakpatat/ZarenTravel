@page "/passengers"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Passengers</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Passengers" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@passengers"    TItem="ZarenTravel.Models.ZarenSoft.Passenger" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerFullName" Title="Passenger Full Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerPhone" Title="Passenger Phone">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerCelPhone" Title="Passenger Cel Phone">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerEmail" Title="Passenger Email">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerJobPosition" Title="Passenger Job Position">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerVIP" Title="Passenger V I P">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassemgerTimestamp" Title="Passemger Timestamp">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Property="PassengerActive" Title="Passenger Active">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Passenger" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="passenger">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, passenger)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(passenger != null)" Size="H1" Text="PnRs" />
                    <RadzenButton Visible="@(passenger != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => PnRAddButtonClick(args,passenger)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(passenger != null)" @ref=PnRDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@passenger?.PnRs" TItem="ZarenTravel.Models.ZarenSoft.PnR"  RowSelect="@(args => PnRRowSelect(args, passenger))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PCCId" Title="P C C Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRRecord" Title="P N R Record">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRTimestamp" Title="P N R Timestamp">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="PNRActive" Title="P N R Active">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Company.CompanyCode" Title="Company">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Property="Passenger.PassengerFullName" Title="Passenger">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.PnR" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="pnRChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => PnRDeleteButtonClick(args, pnRChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Passenger> passengers;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Passenger> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        passengers = await ZarenSoftService.GetPassengers(new Query { Filter = $@"i => i.PassengerFullName.Contains(@0) || i.PassengerPhone.Contains(@0) || i.PassengerCelPhone.Contains(@0) || i.PassengerEmail.Contains(@0) || i.PassengerJobPosition.Contains(@0)", FilterParameters = new object[] { search } });
    }
    protected override async Task OnInitializedAsync()
    {
        passengers = await ZarenSoftService.GetPassengers(new Query { Filter = $@"i => i.PassengerFullName.Contains(@0) || i.PassengerPhone.Contains(@0) || i.PassengerCelPhone.Contains(@0) || i.PassengerEmail.Contains(@0) || i.PassengerJobPosition.Contains(@0)", FilterParameters = new object[] { search } });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddPassenger>("Add Passenger", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.Passenger> args)
    {
        await DialogService.OpenAsync<EditPassenger>("Edit Passenger", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Passenger passenger)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeletePassenger(passenger.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Passenger" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportPassengersToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Passengers");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportPassengersToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Passengers");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.Passenger passenger;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.Passenger args)
    {
        passenger = args;
        var PnRResult = await ZarenSoftService.GetPnRs(new Query { Filter = $"i => i.PassengerId == {args.Id}", Expand = "Agency,Company,Passenger" });
        if (PnRResult != null)
        {
            args.PnRs = PnRResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.PnR> PnRDataGrid;

    protected async Task PnRAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Passenger data)
    {
        var dialogResult = await DialogService.OpenAsync<AddPnR>("Add PnR", new Dictionary<string, object> { {"PassengerId" , data.Id} });
        await GetChildData(data);
        await PnRDataGrid.Reload();
    }

    protected async Task PnRRowSelect(ZarenTravel.Models.ZarenSoft.PnR args, ZarenTravel.Models.ZarenSoft.Passenger data)
    {
        var dialogResult = await DialogService.OpenAsync<EditPnR>("Edit PnR", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await PnRDataGrid.Reload();
    }

    protected async Task PnRDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.PnR pnR)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeletePnR(pnR.Id);

                if (deleteResult != null)
                {
                    await PnRDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete PnR" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.Passenger> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            passenger = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(passenger);
        }

        lastFilter = grid0.Query.Filter;
    }
}
