@page "/asp-net-user-claims"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenService ZarenService
@inject Microsoft.Extensions.Localization.IStringLocalizer<AspNetUserClaims> L

<PageTitle>AspNetUserClaims</PageTitle>
<RadzenStack>
<RadzenRow AlignItems="AlignItems.Center">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenText Text="AspNetUserClaims" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenSplitButton Icon="get_app" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
                <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
                <RadzenSplitButtonItem Text="CSV" Value="csv" />
            </RadzenSplitButton>
            <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
<RadzenRow>
    <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"  AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@aspNetUserClaims"    TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" RowSelect="@EditRow" >
            <Columns>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" Property="ClaimType" Title="Claim Type">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" Property="ClaimValue" Title="Claim Value">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" Property="AspNetUser.Id" Title="Asp Net User">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenBO2.Models.Zaren.AspNetUserClaim" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="aspNetUserClaim">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, aspNetUserClaim)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<ZarenBO2.Models.Zaren.AspNetUserClaim> aspNetUserClaims;

    protected RadzenDataGrid<ZarenBO2.Models.Zaren.AspNetUserClaim> grid0;

    protected string search = "";

    [Inject]
    protected SecurityService Security { get; set; }

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        aspNetUserClaims = await ZarenService.GetAspNetUserClaims(new Query { Filter = $@"i => i.ClaimType.Contains(@0) || i.ClaimValue.Contains(@0) || i.UserId.Contains(@0)", FilterParameters = new object[] { search }, Expand = "AspNetUser" });
    }
    protected override async Task OnInitializedAsync()
    {
        aspNetUserClaims = await ZarenService.GetAspNetUserClaims(new Query { Filter = $@"i => i.ClaimType.Contains(@0) || i.ClaimValue.Contains(@0) || i.UserId.Contains(@0)", FilterParameters = new object[] { search }, Expand = "AspNetUser" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddAspNetUserClaim>("Add AspNetUserClaim", null);
        await grid0.Reload();
    }

    protected async Task EditRow(ZarenBO2.Models.Zaren.AspNetUserClaim args)
    {
        await DialogService.OpenAsync<EditAspNetUserClaim>("Edit AspNetUserClaim", new Dictionary<string, object> { {"Id", args.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenBO2.Models.Zaren.AspNetUserClaim aspNetUserClaim)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenService.DeleteAspNetUserClaim(aspNetUserClaim.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete AspNetUserClaim" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenService.ExportAspNetUserClaimsToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "AspNetUser", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "AspNetUserClaims");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenService.ExportAspNetUserClaimsToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "AspNetUser", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property))
}, "AspNetUserClaims");
        }
    }
}
