@page "/hotels"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>Hotels</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="Hotels" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@hotels"    TItem="ZarenTravel.Models.ZarenSoft.Hotel" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Address" Title="Address">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="ZipCode" Title="Zip Code">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Latitude" Title="Latitude">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Longitude" Title="Longitude">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Release" Title="Release">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="NumberRooms" Title="Number Rooms">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="City.Name" Title="City">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact.Name" Title="Contact">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Country.Name" Title="Country">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact1.Name" Title="Contact1">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="HotelChain.Name" Title="Hotel Chain">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="HotelType.Name" Title="Hotel Type">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Region.Name" Title="Region">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Contact2.Name" Title="Contact2">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Property="Zone.Name" Title="Zone">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Hotel" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="hotel">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, hotel)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="Bookings" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => BookingAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=BookingDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.Bookings" TItem="ZarenTravel.Models.ZarenSoft.Booking"  RowSelect="@(args => BookingRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Reference" Title="Reference">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="FromDate" Title="From Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ToDate" Title="To Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="DateBooked" Title="Date Booked">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Nights" Title="Nights">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="NumRooms" Title="Num Rooms">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="TotalCost" Title="Total Cost">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="TotalPrice" Title="Total Price">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Status" Title="Status">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="PaidStatus" Title="Paid Status">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientTitle" Title="Client Title">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientName" Title="Client Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientSurname" Title="Client Surname">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientEmail" Title="Client Email">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientNotes" Title="Client Notes">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientAddress" Title="Client Address">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ClientContact" Title="Client Contact">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Adults" Title="Adults">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Children" Title="Children">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Infants" Title="Infants">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="ChildrenAges" Title="Children Ages">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Property="Provider.Name" Title="Provider">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Booking" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="bookingChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => BookingDeleteButtonClick(args, bookingChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="CancellationSeasons" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => CancellationSeasonAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=CancellationSeasonDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.CancellationSeasons" TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason"  RowSelect="@(args => CancellationSeasonRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason" Property="StartDate" Title="Start Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason" Property="EndDate" Title="End Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.CancellationSeason" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="cancellationSeasonChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => CancellationSeasonDeleteButtonClick(args, cancellationSeasonChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="FacilitiesHotels" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => FacilitiesHotelAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=FacilitiesHotelDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.FacilitiesHotels" TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel"  RowSelect="@(args => FacilitiesHotelRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Facility.Name" Title="Facility">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="facilitiesHotelChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => FacilitiesHotelDeleteButtonClick(args, facilitiesHotelChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="HotelAgencyMarkups" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelAgencyMarkupAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=HotelAgencyMarkupDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.HotelAgencyMarkups" TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup"  RowSelect="@(args => HotelAgencyMarkupRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="MarkUp" Title="Mark Up">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="StartDate" Title="Start Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="EndDate" Title="End Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Agency.Name" Title="Agency">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelAgencyMarkupChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelAgencyMarkupDeleteButtonClick(args, hotelAgencyMarkupChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="HotelBuyRooms" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelBuyRoomAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=HotelBuyRoomDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.HotelBuyRooms" TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom"  RowSelect="@(args => HotelBuyRoomRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="BuyRoom.Name" Title="Buy Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelBuyRoom" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelBuyRoomChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelBuyRoomDeleteButtonClick(args, hotelBuyRoomChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="HotelDescriptions" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelDescriptionAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=HotelDescriptionDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.HotelDescriptions" TItem="ZarenTravel.Models.ZarenSoft.HotelDescription"  RowSelect="@(args => HotelDescriptionRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelDescription" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelDescription" Property="Description" Title="Description">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelDescription" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelDescription" Property="Language.Name" Title="Language">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelDescription" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelDescriptionChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelDescriptionDeleteButtonClick(args, hotelDescriptionChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotel != null)" Size="H1" Text="HotelPhotos" />
                    <RadzenButton Visible="@(hotel != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelPhotoAddButtonClick(args,hotel)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotel != null)" @ref=HotelPhotoDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotel?.HotelPhotos" TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto"  RowSelect="@(args => HotelPhotoRowSelect(args, hotel))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Path" Title="Path">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Order" Title="Order">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelPhotoChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelPhotoDeleteButtonClick(args, hotelPhotoChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.Hotel> hotels;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Hotel> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        hotels = await ZarenSoftService.GetHotels(new Query { Filter = $@"i => i.Name.Contains(@0) || i.Address.Contains(@0) || i.ZipCode.Contains(@0)", FilterParameters = new object[] { search }, Expand = "City,Contact,Country,Contact1,HotelChain,HotelType,Region,Contact2,Zone" });
    }
    protected override async Task OnInitializedAsync()
    {
        hotels = await ZarenSoftService.GetHotels(new Query { Filter = $@"i => i.Name.Contains(@0) || i.Address.Contains(@0) || i.ZipCode.Contains(@0)", FilterParameters = new object[] { search }, Expand = "City,Contact,Country,Contact1,HotelChain,HotelType,Region,Contact2,Zone" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddHotel>("Add Hotel", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.Hotel> args)
    {
        await DialogService.OpenAsync<EditHotel>("Edit Hotel", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel hotel)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotel(hotel.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Hotel" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportHotelsToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "City,Contact,Country,Contact1,HotelChain,HotelType,Region,Contact2,Zone", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Hotels");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportHotelsToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "City,Contact,Country,Contact1,HotelChain,HotelType,Region,Contact2,Zone", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "Hotels");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.Hotel hotel;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.Hotel args)
    {
        hotel = args;
        var BookingResult = await ZarenSoftService.GetBookings(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Agency,Hotel,Provider" });
        if (BookingResult != null)
        {
            args.Bookings = BookingResult.ToList();
        }
        var CancellationSeasonResult = await ZarenSoftService.GetCancellationSeasons(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Hotel" });
        if (CancellationSeasonResult != null)
        {
            args.CancellationSeasons = CancellationSeasonResult.ToList();
        }
        var FacilitiesHotelResult = await ZarenSoftService.GetFacilitiesHotels(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Facility,Hotel,HotelRoom" });
        if (FacilitiesHotelResult != null)
        {
            args.FacilitiesHotels = FacilitiesHotelResult.ToList();
        }
        var HotelAgencyMarkupResult = await ZarenSoftService.GetHotelAgencyMarkups(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Agency,Hotel" });
        if (HotelAgencyMarkupResult != null)
        {
            args.HotelAgencyMarkups = HotelAgencyMarkupResult.ToList();
        }
        var HotelBuyRoomResult = await ZarenSoftService.GetHotelBuyRooms(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "BuyRoom,Hotel" });
        if (HotelBuyRoomResult != null)
        {
            args.HotelBuyRooms = HotelBuyRoomResult.ToList();
        }
        var HotelDescriptionResult = await ZarenSoftService.GetHotelDescriptions(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Hotel,Language" });
        if (HotelDescriptionResult != null)
        {
            args.HotelDescriptions = HotelDescriptionResult.ToList();
        }
        var HotelPhotoResult = await ZarenSoftService.GetHotelPhotos(new Query { Filter = $"i => i.HotelId == {args.Id}", Expand = "Hotel,HotelRoom" });
        if (HotelPhotoResult != null)
        {
            args.HotelPhotos = HotelPhotoResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Booking> BookingDataGrid;

    protected async Task BookingAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddBooking>("Add Booking", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await BookingDataGrid.Reload();
    }

    protected async Task BookingRowSelect(ZarenTravel.Models.ZarenSoft.Booking args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditBooking>("Edit Booking", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await BookingDataGrid.Reload();
    }

    protected async Task BookingDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Booking booking)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteBooking(booking.Id);

                if (deleteResult != null)
                {
                    await BookingDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Booking" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.CancellationSeason> CancellationSeasonDataGrid;

    protected async Task CancellationSeasonAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddCancellationSeason>("Add CancellationSeason", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await CancellationSeasonDataGrid.Reload();
    }

    protected async Task CancellationSeasonRowSelect(ZarenTravel.Models.ZarenSoft.CancellationSeason args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditCancellationSeason>("Edit CancellationSeason", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await CancellationSeasonDataGrid.Reload();
    }

    protected async Task CancellationSeasonDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.CancellationSeason cancellationSeason)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteCancellationSeason(cancellationSeason.Id);

                if (deleteResult != null)
                {
                    await CancellationSeasonDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete CancellationSeason" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.FacilitiesHotel> FacilitiesHotelDataGrid;

    protected async Task FacilitiesHotelAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddFacilitiesHotel>("Add FacilitiesHotel", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await FacilitiesHotelDataGrid.Reload();
    }

    protected async Task FacilitiesHotelRowSelect(ZarenTravel.Models.ZarenSoft.FacilitiesHotel args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditFacilitiesHotel>("Edit FacilitiesHotel", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await FacilitiesHotelDataGrid.Reload();
    }

    protected async Task FacilitiesHotelDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.FacilitiesHotel facilitiesHotel)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteFacilitiesHotel(facilitiesHotel.Id);

                if (deleteResult != null)
                {
                    await FacilitiesHotelDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete FacilitiesHotel" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup> HotelAgencyMarkupDataGrid;

    protected async Task HotelAgencyMarkupAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelAgencyMarkup>("Add HotelAgencyMarkup", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await HotelAgencyMarkupDataGrid.Reload();
    }

    protected async Task HotelAgencyMarkupRowSelect(ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelAgencyMarkup>("Edit HotelAgencyMarkup", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelAgencyMarkupDataGrid.Reload();
    }

    protected async Task HotelAgencyMarkupDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelAgencyMarkup hotelAgencyMarkup)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelAgencyMarkup(hotelAgencyMarkup.Id);

                if (deleteResult != null)
                {
                    await HotelAgencyMarkupDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelAgencyMarkup" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelBuyRoom> HotelBuyRoomDataGrid;

    protected async Task HotelBuyRoomAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelBuyRoom>("Add HotelBuyRoom", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await HotelBuyRoomDataGrid.Reload();
    }

    protected async Task HotelBuyRoomRowSelect(ZarenTravel.Models.ZarenSoft.HotelBuyRoom args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelBuyRoom>("Edit HotelBuyRoom", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelBuyRoomDataGrid.Reload();
    }

    protected async Task HotelBuyRoomDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelBuyRoom hotelBuyRoom)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelBuyRoom(hotelBuyRoom.Id);

                if (deleteResult != null)
                {
                    await HotelBuyRoomDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelBuyRoom" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelDescription> HotelDescriptionDataGrid;

    protected async Task HotelDescriptionAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelDescription>("Add HotelDescription", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await HotelDescriptionDataGrid.Reload();
    }

    protected async Task HotelDescriptionRowSelect(ZarenTravel.Models.ZarenSoft.HotelDescription args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelDescription>("Edit HotelDescription", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelDescriptionDataGrid.Reload();
    }

    protected async Task HotelDescriptionDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelDescription hotelDescription)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelDescription(hotelDescription.Id);

                if (deleteResult != null)
                {
                    await HotelDescriptionDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelDescription" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelPhoto> HotelPhotoDataGrid;

    protected async Task HotelPhotoAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelPhoto>("Add HotelPhoto", new Dictionary<string, object> { {"HotelId" , data.Id} });
        await GetChildData(data);
        await HotelPhotoDataGrid.Reload();
    }

    protected async Task HotelPhotoRowSelect(ZarenTravel.Models.ZarenSoft.HotelPhoto args, ZarenTravel.Models.ZarenSoft.Hotel data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelPhoto>("Edit HotelPhoto", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelPhotoDataGrid.Reload();
    }

    protected async Task HotelPhotoDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelPhoto hotelPhoto)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelPhoto(hotelPhoto.Id);

                if (deleteResult != null)
                {
                    await HotelPhotoDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelPhoto" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.Hotel> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            hotel = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(hotel);
        }

        lastFilter = grid0.Query.Filter;
    }
}
