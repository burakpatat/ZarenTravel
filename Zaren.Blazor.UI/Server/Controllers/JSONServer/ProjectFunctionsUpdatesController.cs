using System;
using System.Net;
using System.Data;
using System.Linq;
using Microsoft.Data.SqlClient;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;

using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using Microsoft.AspNetCore.OData.Results;
using Microsoft.AspNetCore.OData.Deltas;
using Microsoft.AspNetCore.OData.Formatter;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace ZarenUI.Server.Controllers.JSONServer
{
    public partial class ProjectFunctionsUpdatesController : ODataController
    {
        private ZarenUI.Server.Data.JSONServerContext context;

        public ProjectFunctionsUpdatesController(ZarenUI.Server.Data.JSONServerContext context)
        {
            this.context = context;
        }


        [HttpGet]
        [EnableQuery(MaxExpansionDepth=10,MaxAnyAllExpressionDepth=10,MaxNodeCount=1000)]
        [Route("odata/JSONServer/ProjectFunctionsUpdatesFunc(Id={Id},DatabaseTypesId={DatabaseTypesId},CrudType={CrudType},Query={Query},UserId={UserId},UserAgent={UserAgent},CreatedDate={CreatedDate},LastScanDate={LastScanDate},UserConnectionsId={UserConnectionsId},RequestScheme={RequestScheme},ResponseScheme={ResponseScheme},Route={Route},HeaderScheme={HeaderScheme},WithMethods={WithMethods},WithHeaders={WithHeaders},WithOrigins={WithOrigins},CacheDBConnection={CacheDBConnection},CacheType={CacheType},DocumentUrl={DocumentUrl},ExampleRequest={ExampleRequest},ExampleResponse={ExampleResponse},HasAsync={HasAsync},HasCacheMethod={HasCacheMethod},ResponseHasMultiModel={ResponseHasMultiModel},ResponseHasReturnValue={ResponseHasReturnValue},LogCodeMergeDateDBType={LogCodeMergeDateDBType},LogCodeMergeDateDBConnection={LogCodeMergeDateDBConnection},WillLogAllRequest={WillLogAllRequest},WillLogCodeMergeDate={WillLogCodeMergeDate},WillLogAllResponse={WillLogAllResponse},IsDeleted={IsDeleted},Statu={Statu},PublishedDate={PublishedDate},EventType={EventType},AccessModifierId={AccessModifierId},AcceptableQuerystrings={AcceptableQuerystrings},HasRateLimit={HasRateLimit},RateLimitProperty={RateLimitProperty},HasAuditEvents={HasAuditEvents},HasBusEvent={HasBusEvent},i18Json={i18Json},IfResponseIsSuccessCallThisFunctionId={IfResponseIsSuccessCallThisFunctionId},SuccessNotificationTemplate={SuccessNotificationTemplate},ApiMethodComment={ApiMethodComment},UserDescriptionForMethod={UserDescriptionForMethod},NameSpaceList={NameSpaceList},SoftwareLanguageId={SoftwareLanguageId},FunctionGroupId={FunctionGroupId},FunctionIsParentInGroup={FunctionIsParentInGroup},FunctionCallRankInGroup={FunctionCallRankInGroup},CustomCode={CustomCode},Price={Price},CurrencyId={CurrencyId},Commission={Commission})")]
        public IActionResult ProjectFunctionsUpdatesFunc([FromODataUri] int? Id, [FromODataUri] int? DatabaseTypesId, [FromODataUri] int? CrudType, [FromODataUri] string Query, [FromODataUri] int? UserId, [FromODataUri] string UserAgent, [FromODataUri] string CreatedDate, [FromODataUri] string LastScanDate, [FromODataUri] int? UserConnectionsId, [FromODataUri] string RequestScheme, [FromODataUri] string ResponseScheme, [FromODataUri] string Route, [FromODataUri] string HeaderScheme, [FromODataUri] string WithMethods, [FromODataUri] string WithHeaders, [FromODataUri] string WithOrigins, [FromODataUri] int? CacheDBConnection, [FromODataUri] int? CacheType, [FromODataUri] string DocumentUrl, [FromODataUri] string ExampleRequest, [FromODataUri] string ExampleResponse, [FromODataUri] bool? HasAsync, [FromODataUri] bool? HasCacheMethod, [FromODataUri] bool? ResponseHasMultiModel, [FromODataUri] bool? ResponseHasReturnValue, [FromODataUri] int? LogCodeMergeDateDBType, [FromODataUri] string LogCodeMergeDateDBConnection, [FromODataUri] bool? WillLogAllRequest, [FromODataUri] bool? WillLogCodeMergeDate, [FromODataUri] bool? WillLogAllResponse, [FromODataUri] bool? IsDeleted, [FromODataUri] int? Statu, [FromODataUri] string PublishedDate, [FromODataUri] int? EventType, [FromODataUri] int? AccessModifierId, [FromODataUri] string AcceptableQuerystrings, [FromODataUri] bool? HasRateLimit, [FromODataUri] string RateLimitProperty, [FromODataUri] bool? HasAuditEvents, [FromODataUri] bool? HasBusEvent, [FromODataUri] string i18Json, [FromODataUri] int? IfResponseIsSuccessCallThisFunctionId, [FromODataUri] string SuccessNotificationTemplate, [FromODataUri] string ApiMethodComment, [FromODataUri] string UserDescriptionForMethod, [FromODataUri] string NameSpaceList, [FromODataUri] int? SoftwareLanguageId, [FromODataUri] int? FunctionGroupId, [FromODataUri] bool? FunctionIsParentInGroup, [FromODataUri] int? FunctionCallRankInGroup, [FromODataUri] string CustomCode, [FromODataUri] decimal? Price, [FromODataUri] int? CurrencyId, [FromODataUri] decimal? Commission)
        {
            this.OnProjectFunctionsUpdatesDefaultParams(ref Id, ref DatabaseTypesId, ref CrudType, ref Query, ref UserId, ref UserAgent, ref CreatedDate, ref LastScanDate, ref UserConnectionsId, ref RequestScheme, ref ResponseScheme, ref Route, ref HeaderScheme, ref WithMethods, ref WithHeaders, ref WithOrigins, ref CacheDBConnection, ref CacheType, ref DocumentUrl, ref ExampleRequest, ref ExampleResponse, ref HasAsync, ref HasCacheMethod, ref ResponseHasMultiModel, ref ResponseHasReturnValue, ref LogCodeMergeDateDBType, ref LogCodeMergeDateDBConnection, ref WillLogAllRequest, ref WillLogCodeMergeDate, ref WillLogAllResponse, ref IsDeleted, ref Statu, ref PublishedDate, ref EventType, ref AccessModifierId, ref AcceptableQuerystrings, ref HasRateLimit, ref RateLimitProperty, ref HasAuditEvents, ref HasBusEvent, ref i18Json, ref IfResponseIsSuccessCallThisFunctionId, ref SuccessNotificationTemplate, ref ApiMethodComment, ref UserDescriptionForMethod, ref NameSpaceList, ref SoftwareLanguageId, ref FunctionGroupId, ref FunctionIsParentInGroup, ref FunctionCallRankInGroup, ref CustomCode, ref Price, ref CurrencyId, ref Commission);

            var items = this.context.ProjectFunctionsUpdates.FromSqlRaw("EXEC [dbo].[ProjectFunctionsUpdate] @Id={0}, @DatabaseTypesId={1}, @CrudType={2}, @Query={3}, @UserId={4}, @UserAgent={5}, @CreatedDate={6}, @LastScanDate={7}, @UserConnectionsId={8}, @RequestScheme={9}, @ResponseScheme={10}, @Route={11}, @HeaderScheme={12}, @WithMethods={13}, @WithHeaders={14}, @WithOrigins={15}, @CacheDBConnection={16}, @CacheType={17}, @DocumentUrl={18}, @ExampleRequest={19}, @ExampleResponse={20}, @HasAsync={21}, @HasCacheMethod={22}, @ResponseHasMultiModel={23}, @ResponseHasReturnValue={24}, @LogCodeMergeDateDBType={25}, @LogCodeMergeDateDBConnection={26}, @WillLogAllRequest={27}, @WillLogCodeMergeDate={28}, @WillLogAllResponse={29}, @IsDeleted={30}, @Statu={31}, @PublishedDate={32}, @EventType={33}, @AccessModifierId={34}, @AcceptableQuerystrings={35}, @HasRateLimit={36}, @RateLimitProperty={37}, @HasAuditEvents={38}, @HasBusEvent={39}, @i18Json={40}, @IfResponseIsSuccessCallThisFunctionId={41}, @SuccessNotificationTemplate={42}, @ApiMethodComment={43}, @UserDescriptionForMethod={44}, @NameSpaceList={45}, @SoftwareLanguageId={46}, @FunctionGroupId={47}, @FunctionIsParentInGroup={48}, @FunctionCallRankInGroup={49}, @CustomCode={50}, @Price={51}, @CurrencyId={52}, @Commission={53}", Id, DatabaseTypesId, CrudType, Query, UserId, UserAgent, CreatedDate, LastScanDate, UserConnectionsId, RequestScheme, ResponseScheme, Route, HeaderScheme, WithMethods, WithHeaders, WithOrigins, CacheDBConnection, CacheType, DocumentUrl, ExampleRequest, ExampleResponse, HasAsync, HasCacheMethod, ResponseHasMultiModel, ResponseHasReturnValue, LogCodeMergeDateDBType, LogCodeMergeDateDBConnection, WillLogAllRequest, WillLogCodeMergeDate, WillLogAllResponse, IsDeleted, Statu, PublishedDate, EventType, AccessModifierId, AcceptableQuerystrings, HasRateLimit, RateLimitProperty, HasAuditEvents, HasBusEvent, i18Json, IfResponseIsSuccessCallThisFunctionId, SuccessNotificationTemplate, ApiMethodComment, UserDescriptionForMethod, NameSpaceList, SoftwareLanguageId, FunctionGroupId, FunctionIsParentInGroup, FunctionCallRankInGroup, CustomCode, Price, CurrencyId, Commission).ToList().AsQueryable();

            this.OnProjectFunctionsUpdatesInvoke(ref items);

            return Ok(items);
        }

        partial void OnProjectFunctionsUpdatesDefaultParams(ref int? Id, ref int? DatabaseTypesId, ref int? CrudType, ref string Query, ref int? UserId, ref string UserAgent, ref string CreatedDate, ref string LastScanDate, ref int? UserConnectionsId, ref string RequestScheme, ref string ResponseScheme, ref string Route, ref string HeaderScheme, ref string WithMethods, ref string WithHeaders, ref string WithOrigins, ref int? CacheDBConnection, ref int? CacheType, ref string DocumentUrl, ref string ExampleRequest, ref string ExampleResponse, ref bool? HasAsync, ref bool? HasCacheMethod, ref bool? ResponseHasMultiModel, ref bool? ResponseHasReturnValue, ref int? LogCodeMergeDateDBType, ref string LogCodeMergeDateDBConnection, ref bool? WillLogAllRequest, ref bool? WillLogCodeMergeDate, ref bool? WillLogAllResponse, ref bool? IsDeleted, ref int? Statu, ref string PublishedDate, ref int? EventType, ref int? AccessModifierId, ref string AcceptableQuerystrings, ref bool? HasRateLimit, ref string RateLimitProperty, ref bool? HasAuditEvents, ref bool? HasBusEvent, ref string i18Json, ref int? IfResponseIsSuccessCallThisFunctionId, ref string SuccessNotificationTemplate, ref string ApiMethodComment, ref string UserDescriptionForMethod, ref string NameSpaceList, ref int? SoftwareLanguageId, ref int? FunctionGroupId, ref bool? FunctionIsParentInGroup, ref int? FunctionCallRankInGroup, ref string CustomCode, ref decimal? Price, ref int? CurrencyId, ref decimal? Commission);

        partial void OnProjectFunctionsUpdatesInvoke(ref IQueryable<ZarenUI.Server.Models.JSONServer.ProjectFunctionsUpdate> items);
    }
}
