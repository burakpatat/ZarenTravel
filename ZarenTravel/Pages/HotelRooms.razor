@page "/hotel-rooms"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject ZarenSoftService ZarenSoftService

<PageTitle>HotelRooms</PageTitle>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12 col-md-6">
        <RadzenText Text="HotelRooms" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
    </div>
    <div class="col-12 col-md-6 justify-content-start justify-content-md-end" style="display: flex; align-items: center; flex-wrap: wrap; gap: 0.5rem">
    <RadzenSplitButton Icon="get_app" style="margin-left: 10px; margin-bottom: 10px" Text="Export" Click="@ExportClick" Variant="Variant.Flat" Shade="Shade.Lighter">
        <RadzenSplitButtonItem Text="Excel" Value="xlsx" />
        <RadzenSplitButtonItem Text="CSV" Value="csv" />
    </RadzenSplitButton>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
    </div>
</div>
<div class="row" style="margin-bottom: 1rem">
    <div class="col-12">
        <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px" Render=Grid0Render AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true"
            Data="@hotelRooms"    TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" RowDoubleClick="@EditRow" RowSelect=@GetChildData>
            <Columns>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="HotelBuyRoomId" Title="Hotel Buy Room Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Adults" Title="Adults">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Children" Title="Children">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Infants" Title="Infants">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Property="Room.Name" Title="Room">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoom" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="hotelRoom">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, hotelRoom)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="BookingRooms" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => BookingRoomAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=BookingRoomDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.BookingRooms" TItem="ZarenTravel.Models.ZarenSoft.BookingRoom"  RowSelect="@(args => BookingRoomRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="Cost" Title="Cost">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="Price" Title="Price">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="BoardType.Name" Title="Board Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="Booking.Reference" Title="Booking">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.BookingRoom" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="bookingRoomChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => BookingRoomDeleteButtonClick(args, bookingRoomChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="Deals" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => DealAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=DealDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.Deals" TItem="ZarenTravel.Models.ZarenSoft.Deal"  RowSelect="@(args => DealRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="Release" Title="Release">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="Discount" Title="Discount">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="FreeNights" Title="Free Nights">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="StartDate" Title="Start Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="EndDate" Title="End Date">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="BoardType.Name" Title="Board Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="DealType" Title="Deal Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.Deal" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="dealChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => DealDeleteButtonClick(args, dealChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="FacilitiesHotels" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => FacilitiesHotelAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=FacilitiesHotelDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.FacilitiesHotels" TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel"  RowSelect="@(args => FacilitiesHotelRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Facility.Name" Title="Facility">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.FacilitiesHotel" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="facilitiesHotelChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => FacilitiesHotelDeleteButtonClick(args, facilitiesHotelChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="HotelPhotos" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelPhotoAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=HotelPhotoDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.HotelPhotos" TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto"  RowSelect="@(args => HotelPhotoRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Path" Title="Path">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Order" Title="Order">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="Hotel.Name" Title="Hotel">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelPhoto" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelPhotoChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelPhotoDeleteButtonClick(args, hotelPhotoChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="HotelRoomDailyPrices" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelRoomDailyPriceAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=HotelRoomDailyPriceDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.HotelRoomDailyPrices" TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice"  RowSelect="@(args => HotelRoomDailyPriceRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="Cost" Title="Cost">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="Day" Title="Day">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="StopSale" Title="Stop Sale">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="BoardType.Name" Title="Board Type">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelRoomDailyPriceChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelRoomDailyPriceDeleteButtonClick(args, hotelRoomDailyPriceChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>
                    <RadzenHeading Visible="@(hotelRoom != null)" Size="H1" Text="HotelRoomLanguages" />
                    <RadzenButton Visible="@(hotelRoom != null)" Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@(args => HotelRoomLanguageAddButtonClick(args,hotelRoom)) />
                    <RadzenDataGrid ColumnWidth="200px" Visible="@(hotelRoom != null)" @ref=HotelRoomLanguageDataGrid AllowFiltering="true" FilterMode="Radzen.FilterMode.Advanced" AllowPaging="true" AllowSorting="true" 
                      Data="@hotelRoom?.HotelRoomLanguages" TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage"  RowSelect="@(args => HotelRoomLanguageRowSelect(args, hotelRoom))">
                      <Columns>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Property="Id" Title="Id">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Property="Name" Title="Name">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Property="Description" Title="Description">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Property="HotelRoom.Name" Title="Hotel Room">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Property="Language.Name" Title="Language">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ZarenTravel.Models.ZarenSoft.HotelRoomLanguage" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                            <Template Context="hotelRoomLanguageChild">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" 
                                    Click=@(args => HotelRoomLanguageDeleteButtonClick(args, hotelRoomLanguageChild)) @onclick:stopPropagation="true" />
                            </Template>
                        </RadzenDataGridColumn>
                      </Columns>
                </RadzenDataGrid>    </div>
</div>
@code {

    protected IEnumerable<ZarenTravel.Models.ZarenSoft.HotelRoom> hotelRooms;

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelRoom> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        hotelRooms = await ZarenSoftService.GetHotelRooms(new Query { Filter = $@"i => i.Name.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Room" });
    }
    protected override async Task OnInitializedAsync()
    {
        hotelRooms = await ZarenSoftService.GetHotelRooms(new Query { Filter = $@"i => i.Name.Contains(@0)", FilterParameters = new object[] { search }, Expand = "Room" });
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddHotelRoom>("Add HotelRoom", null);
        await grid0.Reload();
    }

    protected async Task EditRow(DataGridRowMouseEventArgs<ZarenTravel.Models.ZarenSoft.HotelRoom> args)
    {
        await DialogService.OpenAsync<EditHotelRoom>("Edit HotelRoom", new Dictionary<string, object> { {"Id", args.Data.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom hotelRoom)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelRoom(hotelRoom.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelRoom" 
            });
        }
    }

    protected async Task ExportClick(RadzenSplitButtonItem args)
    {
        if (args?.Value == "csv")
        {
            await ZarenSoftService.ExportHotelRoomsToCSV(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Room", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "HotelRooms");
        }

        if (args == null || args.Value == "xlsx")
        {
            await ZarenSoftService.ExportHotelRoomsToExcel(new Query
{ 
    Filter = $@"{(string.IsNullOrEmpty(grid0.Query.Filter)? "true" : grid0.Query.Filter)}", 
    OrderBy = $"{grid0.Query.OrderBy}", 
    Expand = "Room", 
    Select = string.Join(",", grid0.ColumnsCollection.Where(c => c.GetVisible()).Select(c => c.Property))
}, "HotelRooms");
        }
    }

    protected ZarenTravel.Models.ZarenSoft.HotelRoom hotelRoom;
    protected async Task GetChildData(ZarenTravel.Models.ZarenSoft.HotelRoom args)
    {
        hotelRoom = args;
        var BookingRoomResult = await ZarenSoftService.GetBookingRooms(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "BoardType,Booking,HotelRoom" });
        if (BookingRoomResult != null)
        {
            args.BookingRooms = BookingRoomResult.ToList();
        }
        var DealResult = await ZarenSoftService.GetDeals(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "BoardType,DealType,HotelRoom" });
        if (DealResult != null)
        {
            args.Deals = DealResult.ToList();
        }
        var FacilitiesHotelResult = await ZarenSoftService.GetFacilitiesHotels(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "Facility,Hotel,HotelRoom" });
        if (FacilitiesHotelResult != null)
        {
            args.FacilitiesHotels = FacilitiesHotelResult.ToList();
        }
        var HotelPhotoResult = await ZarenSoftService.GetHotelPhotos(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "Hotel,HotelRoom" });
        if (HotelPhotoResult != null)
        {
            args.HotelPhotos = HotelPhotoResult.ToList();
        }
        var HotelRoomDailyPriceResult = await ZarenSoftService.GetHotelRoomDailyPrices(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "BoardType,HotelRoom" });
        if (HotelRoomDailyPriceResult != null)
        {
            args.HotelRoomDailyPrices = HotelRoomDailyPriceResult.ToList();
        }
        var HotelRoomLanguageResult = await ZarenSoftService.GetHotelRoomLanguages(new Query { Filter = $"i => i.HotelRoomId == {args.Id}", Expand = "HotelRoom,Language" });
        if (HotelRoomLanguageResult != null)
        {
            args.HotelRoomLanguages = HotelRoomLanguageResult.ToList();
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.BookingRoom> BookingRoomDataGrid;

    protected async Task BookingRoomAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddBookingRoom>("Add BookingRoom", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await BookingRoomDataGrid.Reload();
    }

    protected async Task BookingRoomRowSelect(ZarenTravel.Models.ZarenSoft.BookingRoom args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditBookingRoom>("Edit BookingRoom", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await BookingRoomDataGrid.Reload();
    }

    protected async Task BookingRoomDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.BookingRoom bookingRoom)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteBookingRoom(bookingRoom.Id);

                if (deleteResult != null)
                {
                    await BookingRoomDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete BookingRoom" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.Deal> DealDataGrid;

    protected async Task DealAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddDeal>("Add Deal", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await DealDataGrid.Reload();
    }

    protected async Task DealRowSelect(ZarenTravel.Models.ZarenSoft.Deal args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditDeal>("Edit Deal", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await DealDataGrid.Reload();
    }

    protected async Task DealDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.Deal deal)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteDeal(deal.Id);

                if (deleteResult != null)
                {
                    await DealDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete Deal" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.FacilitiesHotel> FacilitiesHotelDataGrid;

    protected async Task FacilitiesHotelAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddFacilitiesHotel>("Add FacilitiesHotel", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await FacilitiesHotelDataGrid.Reload();
    }

    protected async Task FacilitiesHotelRowSelect(ZarenTravel.Models.ZarenSoft.FacilitiesHotel args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditFacilitiesHotel>("Edit FacilitiesHotel", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await FacilitiesHotelDataGrid.Reload();
    }

    protected async Task FacilitiesHotelDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.FacilitiesHotel facilitiesHotel)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteFacilitiesHotel(facilitiesHotel.Id);

                if (deleteResult != null)
                {
                    await FacilitiesHotelDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete FacilitiesHotel" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelPhoto> HotelPhotoDataGrid;

    protected async Task HotelPhotoAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelPhoto>("Add HotelPhoto", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await HotelPhotoDataGrid.Reload();
    }

    protected async Task HotelPhotoRowSelect(ZarenTravel.Models.ZarenSoft.HotelPhoto args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelPhoto>("Edit HotelPhoto", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelPhotoDataGrid.Reload();
    }

    protected async Task HotelPhotoDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelPhoto hotelPhoto)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelPhoto(hotelPhoto.Id);

                if (deleteResult != null)
                {
                    await HotelPhotoDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelPhoto" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice> HotelRoomDailyPriceDataGrid;

    protected async Task HotelRoomDailyPriceAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelRoomDailyPrice>("Add HotelRoomDailyPrice", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await HotelRoomDailyPriceDataGrid.Reload();
    }

    protected async Task HotelRoomDailyPriceRowSelect(ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelRoomDailyPrice>("Edit HotelRoomDailyPrice", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelRoomDailyPriceDataGrid.Reload();
    }

    protected async Task HotelRoomDailyPriceDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoomDailyPrice hotelRoomDailyPrice)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelRoomDailyPrice(hotelRoomDailyPrice.Id);

                if (deleteResult != null)
                {
                    await HotelRoomDailyPriceDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelRoomDailyPrice" 
            });
        }
    }

    protected RadzenDataGrid<ZarenTravel.Models.ZarenSoft.HotelRoomLanguage> HotelRoomLanguageDataGrid;

    protected async Task HotelRoomLanguageAddButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<AddHotelRoomLanguage>("Add HotelRoomLanguage", new Dictionary<string, object> { {"HotelRoomId" , data.Id} });
        await GetChildData(data);
        await HotelRoomLanguageDataGrid.Reload();
    }

    protected async Task HotelRoomLanguageRowSelect(ZarenTravel.Models.ZarenSoft.HotelRoomLanguage args, ZarenTravel.Models.ZarenSoft.HotelRoom data)
    {
        var dialogResult = await DialogService.OpenAsync<EditHotelRoomLanguage>("Edit HotelRoomLanguage", new Dictionary<string, object> { {"Id", args.Id} });
        await GetChildData(data);
        await HotelRoomLanguageDataGrid.Reload();
    }

    protected async Task HotelRoomLanguageDeleteButtonClick(MouseEventArgs args, ZarenTravel.Models.ZarenSoft.HotelRoomLanguage hotelRoomLanguage)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await ZarenSoftService.DeleteHotelRoomLanguage(hotelRoomLanguage.Id);

                if (deleteResult != null)
                {
                    await HotelRoomLanguageDataGrid.Reload();
                }
            }
        }
        catch (System.Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            { 
                Severity = NotificationSeverity.Error,
                Summary = $"Error", 
                Detail = $"Unable to delete HotelRoomLanguage" 
            });
        }
    }

    string lastFilter;
    protected async void Grid0Render(DataGridRenderEventArgs<ZarenTravel.Models.ZarenSoft.HotelRoom> args)
    {
        if (grid0.Query.Filter != lastFilter) {
            hotelRoom = grid0.View.FirstOrDefault();
        }

        if (grid0.Query.Filter != lastFilter)
        {
            await grid0.SelectRow(hotelRoom);
        }

        lastFilter = grid0.Query.Filter;
    }
}
