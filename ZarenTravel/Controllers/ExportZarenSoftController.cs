using System;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;

using ZarenTravel.Data;

namespace ZarenTravel.Controllers
{
    public partial class ExportZarenSoftController : ExportController
    {
        private readonly ZarenSoftContext context;
        private readonly ZarenSoftService service;

        public ExportZarenSoftController(ZarenSoftContext context, ZarenSoftService service)
        {
            this.service = service;
            this.context = context;
        }

        [HttpGet("/export/ZarenSoft/agencies/csv")]
        [HttpGet("/export/ZarenSoft/agencies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencies/excel")]
        [HttpGet("/export/ZarenSoft/agencies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroups/csv")]
        [HttpGet("/export/ZarenSoft/agencygroups/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroups(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroups/excel")]
        [HttpGet("/export/ZarenSoft/agencygroups/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroups(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformations/csv")]
        [HttpGet("/export/ZarenSoft/agentinformations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformations/excel")]
        [HttpGet("/export/ZarenSoft/agentinformations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextras/csv")]
        [HttpGet("/export/ZarenSoft/airextras/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtras(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextras/excel")]
        [HttpGet("/export/ZarenSoft/airextras/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtras(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlines/csv")]
        [HttpGet("/export/ZarenSoft/airlines/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlinesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlines(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlines/excel")]
        [HttpGet("/export/ZarenSoft/airlines/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlinesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlines(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airports/csv")]
        [HttpGet("/export/ZarenSoft/airports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airports/excel")]
        [HttpGet("/export/ZarenSoft/airports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airs/csv")]
        [HttpGet("/export/ZarenSoft/airs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airs/excel")]
        [HttpGet("/export/ZarenSoft/airs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegments/csv")]
        [HttpGet("/export/ZarenSoft/airsegments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegments(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegments/excel")]
        [HttpGet("/export/ZarenSoft/airsegments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegments(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apis/csv")]
        [HttpGet("/export/ZarenSoft/apis/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApisToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApis(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apis/excel")]
        [HttpGet("/export/ZarenSoft/apis/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApisToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApis(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplates/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplatesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplates(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplates/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplatesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplates(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletes/csv")]
        [HttpGet("/export/ZarenSoft/autocompletes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletes/excel")]
        [HttpGet("/export/ZarenSoft/autocompletes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypes/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypes/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/banners/csv")]
        [HttpGet("/export/ZarenSoft/banners/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBanners(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/banners/excel")]
        [HttpGet("/export/ZarenSoft/banners/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBanners(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguages/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguages/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypes/csv")]
        [HttpGet("/export/ZarenSoft/boardtypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypes/excel")]
        [HttpGet("/export/ZarenSoft/boardtypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdeals/csv")]
        [HttpGet("/export/ZarenSoft/bookingdeals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDeals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdeals/excel")]
        [HttpGet("/export/ZarenSoft/bookingdeals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDeals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingrooms/csv")]
        [HttpGet("/export/ZarenSoft/bookingrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingrooms/excel")]
        [HttpGet("/export/ZarenSoft/bookingrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookings/csv")]
        [HttpGet("/export/ZarenSoft/bookings/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookings/excel")]
        [HttpGet("/export/ZarenSoft/bookings/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokers/csv")]
        [HttpGet("/export/ZarenSoft/brokers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokers/excel")]
        [HttpGet("/export/ZarenSoft/brokers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyrooms/csv")]
        [HttpGet("/export/ZarenSoft/buyrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyrooms/excel")]
        [HttpGet("/export/ZarenSoft/buyrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguages/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguages/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrules/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrules/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRules(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrules/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrules/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRules(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasons/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasons/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasons(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasons/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasons/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasons(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentals/csv")]
        [HttpGet("/export/ZarenSoft/carrentals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentals/excel")]
        [HttpGet("/export/ZarenSoft/carrentals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrents/csv")]
        [HttpGet("/export/ZarenSoft/carrents/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRents(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrents/excel")]
        [HttpGet("/export/ZarenSoft/carrents/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRents(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypes/csv")]
        [HttpGet("/export/ZarenSoft/cartypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypes/excel")]
        [HttpGet("/export/ZarenSoft/cartypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cities/csv")]
        [HttpGet("/export/ZarenSoft/cities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cities/excel")]
        [HttpGet("/export/ZarenSoft/cities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodels/csv")]
        [HttpGet("/export/ZarenSoft/citymodels/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodels/excel")]
        [HttpGet("/export/ZarenSoft/citymodels/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companies/csv")]
        [HttpGet("/export/ZarenSoft/companies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompanies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companies/excel")]
        [HttpGet("/export/ZarenSoft/companies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompanies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contacts/csv")]
        [HttpGet("/export/ZarenSoft/contacts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContacts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contacts/excel")]
        [HttpGet("/export/ZarenSoft/contacts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContacts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countries/csv")]
        [HttpGet("/export/ZarenSoft/countries/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountries(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countries/excel")]
        [HttpGet("/export/ZarenSoft/countries/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountries(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currency1s/csv")]
        [HttpGet("/export/ZarenSoft/currency1s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrency1SToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrency1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currency1s/excel")]
        [HttpGet("/export/ZarenSoft/currency1s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrency1SToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrency1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformations/csv")]
        [HttpGet("/export/ZarenSoft/customerinformations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformations/excel")]
        [HttpGet("/export/ZarenSoft/customerinformations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumns/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumns/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetables/csv")]
        [HttpGet("/export/ZarenSoft/databasetables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTables(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetables/excel")]
        [HttpGet("/export/ZarenSoft/databasetables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTables(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypes/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypes/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypes/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypes/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/deals/csv")]
        [HttpGet("/export/ZarenSoft/deals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDeals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/deals/excel")]
        [HttpGet("/export/ZarenSoft/deals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDeals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguages/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguages/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypes/csv")]
        [HttpGet("/export/ZarenSoft/dealtypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypes/excel")]
        [HttpGet("/export/ZarenSoft/dealtypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangerates/csv")]
        [HttpGet("/export/ZarenSoft/exchangerates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRates(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangerates/excel")]
        [HttpGet("/export/ZarenSoft/exchangerates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRates(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensions/csv")]
        [HttpGet("/export/ZarenSoft/extensions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensions/excel")]
        [HttpGet("/export/ZarenSoft/extensions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypes/csv")]
        [HttpGet("/export/ZarenSoft/extrastypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypes/excel")]
        [HttpGet("/export/ZarenSoft/extrastypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilities/csv")]
        [HttpGet("/export/ZarenSoft/facilities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilities/excel")]
        [HttpGet("/export/ZarenSoft/facilities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotels/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotels/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotels/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotels/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguages/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguages/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypes/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypes/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolors/csv")]
        [HttpGet("/export/ZarenSoft/headercolors/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColors(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolors/excel")]
        [HttpGet("/export/ZarenSoft/headercolors/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColors(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkups/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkups/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkups(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkups/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkups/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkups(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotments/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotments(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotments/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotments(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyrooms/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyrooms/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchains/csv")]
        [HttpGet("/export/ZarenSoft/hotelchains/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChains(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchains/excel")]
        [HttpGet("/export/ZarenSoft/hotelchains/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChains(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptions/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptions/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguages/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguages/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotos/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotos/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailyprices/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailyprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPrices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailyprices/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailyprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPrices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguages/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguages/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelrooms/csv")]
        [HttpGet("/export/ZarenSoft/hotelrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelrooms/excel")]
        [HttpGet("/export/ZarenSoft/hotelrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotels/csv")]
        [HttpGet("/export/ZarenSoft/hotels/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotels/excel")]
        [HttpGet("/export/ZarenSoft/hotels/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguages/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguages/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypes/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypes/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languages/csv")]
        [HttpGet("/export/ZarenSoft/languages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languages/excel")]
        [HttpGet("/export/ZarenSoft/languages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissions/csv")]
        [HttpGet("/export/ZarenSoft/logpermissions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissions/excel")]
        [HttpGet("/export/ZarenSoft/logpermissions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logs/csv")]
        [HttpGet("/export/ZarenSoft/logs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logs/excel")]
        [HttpGet("/export/ZarenSoft/logs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menus/csv")]
        [HttpGet("/export/ZarenSoft/menus/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenusToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menus/excel")]
        [HttpGet("/export/ZarenSoft/menus/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenusToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseos/csv")]
        [HttpGet("/export/ZarenSoft/ogseos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeosToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseos/excel")]
        [HttpGet("/export/ZarenSoft/ogseos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeosToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontents/csv")]
        [HttpGet("/export/ZarenSoft/pagecontents/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContents(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontents/excel")]
        [HttpGet("/export/ZarenSoft/pagecontents/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContents(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypes/csv")]
        [HttpGet("/export/ZarenSoft/pagetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypes/excel")]
        [HttpGet("/export/ZarenSoft/pagetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformations/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformations/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengers/csv")]
        [HttpGet("/export/ZarenSoft/passengers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengers/excel")]
        [HttpGet("/export/ZarenSoft/passengers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfields/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfields/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFields(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfields/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfields/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFields(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrs/csv")]
        [HttpGet("/export/ZarenSoft/pnrs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrs/excel")]
        [HttpGet("/export/ZarenSoft/pnrs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeries/csv")]
        [HttpGet("/export/ZarenSoft/possiblequeries/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueries(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeries/excel")]
        [HttpGet("/export/ZarenSoft/possiblequeries/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueries(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providers/csv")]
        [HttpGet("/export/ZarenSoft/providers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providers/excel")]
        [HttpGet("/export/ZarenSoft/providers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviences/csv")]
        [HttpGet("/export/ZarenSoft/proviences/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProviencesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProviences(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviences/excel")]
        [HttpGet("/export/ZarenSoft/proviences/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProviencesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProviences(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regions/csv")]
        [HttpGet("/export/ZarenSoft/regions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regions/excel")]
        [HttpGet("/export/ZarenSoft/regions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetails/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetails(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetails/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetails(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservations/csv")]
        [HttpGet("/export/ZarenSoft/reservations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservations/excel")]
        [HttpGet("/export/ZarenSoft/reservations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/rooms/csv")]
        [HttpGet("/export/ZarenSoft/rooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/rooms/excel")]
        [HttpGet("/export/ZarenSoft/rooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRooms(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statuses/csv")]
        [HttpGet("/export/ZarenSoft/statuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatuses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statuses/excel")]
        [HttpGet("/export/ZarenSoft/statuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatuses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminals/csv")]
        [HttpGet("/export/ZarenSoft/terminals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminals/excel")]
        [HttpGet("/export/ZarenSoft/terminals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyles/csv")]
        [HttpGet("/export/ZarenSoft/themestyles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStylesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyles/excel")]
        [HttpGet("/export/ZarenSoft/themestyles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStylesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urls/csv")]
        [HttpGet("/export/ZarenSoft/urls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urls/excel")]
        [HttpGet("/export/ZarenSoft/urls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferences/csv")]
        [HttpGet("/export/ZarenSoft/userpreferences/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferences(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferences/excel")]
        [HttpGet("/export/ZarenSoft/userpreferences/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferences(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/users/csv")]
        [HttpGet("/export/ZarenSoft/users/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/users/excel")]
        [HttpGet("/export/ZarenSoft/users/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypes/csv")]
        [HttpGet("/export/ZarenSoft/usertypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypes/excel")]
        [HttpGet("/export/ZarenSoft/usertypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnos/csv")]
        [HttpGet("/export/ZarenSoft/yesnos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNosToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnos/excel")]
        [HttpGet("/export/ZarenSoft/yesnos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNosToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zones/csv")]
        [HttpGet("/export/ZarenSoft/zones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZones(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zones/excel")]
        [HttpGet("/export/ZarenSoft/zones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZones(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescities/csv")]
        [HttpGet("/export/ZarenSoft/zonescities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescities/excel")]
        [HttpGet("/export/ZarenSoft/zonescities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agency1s/csv")]
        [HttpGet("/export/ZarenSoft/agency1s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgency1SToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgency1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agency1s/excel")]
        [HttpGet("/export/ZarenSoft/agency1s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgency1SToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgency1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmsdevices/csv")]
        [HttpGet("/export/ZarenSoft/agencycmsdevices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsDevicesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyCmsDevices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmsdevices/excel")]
        [HttpGet("/export/ZarenSoft/agencycmsdevices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsDevicesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyCmsDevices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmssectiontypes/csv")]
        [HttpGet("/export/ZarenSoft/agencycmssectiontypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsSectionTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyCmsSectionTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmssectiontypes/excel")]
        [HttpGet("/export/ZarenSoft/agencycmssectiontypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsSectionTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyCmsSectionTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmssocialmediaurls/csv")]
        [HttpGet("/export/ZarenSoft/agencycmssocialmediaurls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsSocialMediaUrlsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyCmsSocialMediaUrls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmssocialmediaurls/excel")]
        [HttpGet("/export/ZarenSoft/agencycmssocialmediaurls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsSocialMediaUrlsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyCmsSocialMediaUrls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmsthemes/csv")]
        [HttpGet("/export/ZarenSoft/agencycmsthemes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsThemesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyCmsThemes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycmsthemes/excel")]
        [HttpGet("/export/ZarenSoft/agencycmsthemes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCmsThemesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyCmsThemes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsclosedtours/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsclosedtours/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsClosedToursToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsClosedTours(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsclosedtours/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsclosedtours/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsClosedToursToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsClosedTours(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelcategories/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelcategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelcategories/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelcategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelinformations/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelinformations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelInformationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelinformations/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelinformations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelInformationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelInformations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelinformationimages/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelinformationimages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelInformationImagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelInformationImages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelinformationimages/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelinformationimages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelInformationImagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelInformationImages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurations/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsConfigurationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelsConfigurations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurations/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsConfigurationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelsConfigurations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurationdays/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurationdays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsConfigurationDaysToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelsConfigurationDays(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurationdays/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsconfigurationdays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsConfigurationDaysToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelsConfigurationDays(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsmenus/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsmenus/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsMenusToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsHotelsMenus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractshotelsmenus/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractshotelsmenus/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsHotelsMenusToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsHotelsMenus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsurancebasicdata/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsurancebasicdata/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceBasicDataToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsInsuranceBasicData(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsurancebasicdata/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsurancebasicdata/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceBasicDataToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsInsuranceBasicData(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedlanguages/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedlanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceSelectedLanguagesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsInsuranceSelectedLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedlanguages/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedlanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceSelectedLanguagesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsInsuranceSelectedLanguages(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedproducttypes/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedproducttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceSelectedProductTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsInsuranceSelectedProductTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedproducttypes/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsuranceselectedproducttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceSelectedProductTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsInsuranceSelectedProductTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsurancetypes/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsurancetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsInsuranceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsinsurancetypes/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsinsurancetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsInsuranceTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsInsuranceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycreditdeposits/csv")]
        [HttpGet("/export/ZarenSoft/agencycreditdeposits/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCreditDepositsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyCreditDeposits(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycreditdeposits/excel")]
        [HttpGet("/export/ZarenSoft/agencycreditdeposits/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyCreditDepositsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyCreditDeposits(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymanagers/csv")]
        [HttpGet("/export/ZarenSoft/agencymanagers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyManagersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyManagers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymanagers/excel")]
        [HttpGet("/export/ZarenSoft/agencymanagers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyManagersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyManagers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositeapiproductproviders/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositeapiproductproviders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteApiProductProvidersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteApiProductProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositeapiproductproviders/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositeapiproductproviders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteApiProductProvidersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteApiProductProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedesigns/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositedesigns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDesignsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteDesigns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedesigns/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositedesigns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDesignsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteDesigns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedomainlanguagesettings/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositedomainlanguagesettings/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDomainLanguageSettingsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteDomainLanguageSettings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedomainlanguagesettings/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositedomainlanguagesettings/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDomainLanguageSettingsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteDomainLanguageSettings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedomains/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositedomains/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDomainsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteDomains(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositedomains/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositedomains/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteDomainsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteDomains(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositepaymentproviders/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositepaymentproviders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitePaymentProvidersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSitePaymentProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositepaymentproviders/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositepaymentproviders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitePaymentProvidersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSitePaymentProviders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositeproperties/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositeproperties/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitePropertiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteProperties(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositeproperties/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositeproperties/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitePropertiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteProperties(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrosites/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrosites/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSites(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrosites/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrosites/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSites(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingpassengerdata/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingpassengerdata/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingPassengerDataToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingPassengerData(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingpassengerdata/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingpassengerdata/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingPassengerDataToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingPassengerData(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsaccommodationsearchresults/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsaccommodationsearchresults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsAccommodationSearchResultsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsAccommodationSearchResults(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsaccommodationsearchresults/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsaccommodationsearchresults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsAccommodationSearchResultsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsAccommodationSearchResults(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingprocesses/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingprocesses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsBookingProcessesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsBookingProcesses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingprocesses/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingprocesses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsBookingProcessesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsBookingProcesses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingreplicatormodes/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingreplicatormodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsBookingReplicatorModesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsBookingReplicatorModes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingreplicatormodes/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsbookingreplicatormodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsBookingReplicatorModesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsBookingReplicatorModes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsemailvouchers/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsemailvouchers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsEmailVouchersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsEmailVouchers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsemailvouchers/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsemailvouchers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsEmailVouchersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsEmailVouchers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsenablemultidays/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsenablemultidays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsEnableMultiDaysToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsEnableMultiDays(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsenablemultidays/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsenablemultidays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsEnableMultiDaysToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsEnableMultiDays(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsgenerals/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsgenerals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsGeneralsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsGenerals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsgenerals/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsgenerals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsGeneralsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsGenerals(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingshelpsupports/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingshelpsupports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsHelpSupportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsHelpSupports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingshelpsupports/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingshelpsupports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsHelpSupportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsHelpSupports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsinvoices/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsinvoices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsInvoicesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsInvoices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsinvoices/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsinvoices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsInvoicesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsInvoices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsothers/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsothers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsOthersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsOthers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsothers/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsothers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsOthersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsOthers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingspaymetoptions/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingspaymetoptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsPaymetOptionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsPaymetOptions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingspaymetoptions/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingspaymetoptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsPaymetOptionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsPaymetOptions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequestinvoices/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequestinvoices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsRequestInvoicesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsRequestInvoices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequestinvoices/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequestinvoices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsRequestInvoicesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsRequestInvoices(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequiredpassengers/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequiredpassengers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsRequiredPassengersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsRequiredPassengers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequiredpassengers/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingsrequiredpassengers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsRequiredPassengersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsRequiredPassengers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchengines/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchengines/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSearchEnginesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsSearchEngines(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchengines/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchengines/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSearchEnginesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsSearchEngines(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchsettings/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchsettings/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSearchSettingsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsSearchSettings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchsettings/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssearchsettings/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSearchSettingsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsSearchSettings(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssorttypes/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssorttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSortTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsSortTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingssorttypes/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingssorttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsSortTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsSortTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingstermsconditions/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingstermsconditions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsTermsConditionsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSiteSettingsTermsConditions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositesettingstermsconditions/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositesettingstermsconditions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSiteSettingsTermsConditionsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSiteSettingsTermsConditions(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositessettingsemailconfigurations/csv")]
        [HttpGet("/export/ZarenSoft/agencymicrositessettingsemailconfigurations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitesSettingsEmailConfigurationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyMicroSitesSettingsEmailConfigurations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencymicrositessettingsemailconfigurations/excel")]
        [HttpGet("/export/ZarenSoft/agencymicrositessettingsemailconfigurations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyMicroSitesSettingsEmailConfigurationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyMicroSitesSettingsEmailConfigurations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencyusers/csv")]
        [HttpGet("/export/ZarenSoft/agencyusers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyUsersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyUsers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencyusers/excel")]
        [HttpGet("/export/ZarenSoft/agencyusers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyUsersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyUsers(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiproducts/csv")]
        [HttpGet("/export/ZarenSoft/apiproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiProductsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiProducts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiproducts/excel")]
        [HttpGet("/export/ZarenSoft/apiproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiProductsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiProducts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiresult1s/csv")]
        [HttpGet("/export/ZarenSoft/apiresult1s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiResult1SToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiResult1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiresult1s/excel")]
        [HttpGet("/export/ZarenSoft/apiresult1s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiResult1SToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiResult1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/genders/csv")]
        [HttpGet("/export/ZarenSoft/genders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGendersToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGenders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/genders/excel")]
        [HttpGet("/export/ZarenSoft/genders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGendersToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGenders(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelcategories/csv")]
        [HttpGet("/export/ZarenSoft/hotelcategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelcategories/excel")]
        [HttpGet("/export/ZarenSoft/hotelcategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilities/csv")]
        [HttpGet("/export/ZarenSoft/hotelfacilities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilitiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilities/excel")]
        [HttpGet("/export/ZarenSoft/hotelfacilities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilitiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilitycategories/csv")]
        [HttpGet("/export/ZarenSoft/hotelfacilitycategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilityCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelFacilityCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilitycategories/excel")]
        [HttpGet("/export/ZarenSoft/hotelfacilitycategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilityCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelFacilityCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilitycategoryselectedfacilities/csv")]
        [HttpGet("/export/ZarenSoft/hotelfacilitycategoryselectedfacilities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilityCategorySelectedFacilitiesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelFacilityCategorySelectedFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelfacilitycategoryselectedfacilities/excel")]
        [HttpGet("/export/ZarenSoft/hotelfacilitycategoryselectedfacilities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelFacilityCategorySelectedFacilitiesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelFacilityCategorySelectedFacilities(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelpresentations/csv")]
        [HttpGet("/export/ZarenSoft/hotelpresentations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPresentationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPresentations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelpresentations/excel")]
        [HttpGet("/export/ZarenSoft/hotelpresentations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPresentationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPresentations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotel1s/csv")]
        [HttpGet("/export/ZarenSoft/hotel1s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotel1SToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotel1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotel1s/excel")]
        [HttpGet("/export/ZarenSoft/hotel1s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotel1SToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotel1S(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonmediafiles/csv")]
        [HttpGet("/export/ZarenSoft/hotelseasonmediafiles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonMediaFilesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelSeasonMediaFiles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonmediafiles/excel")]
        [HttpGet("/export/ZarenSoft/hotelseasonmediafiles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonMediaFilesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelSeasonMediaFiles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasons/csv")]
        [HttpGet("/export/ZarenSoft/hotelseasons/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelSeasons(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasons/excel")]
        [HttpGet("/export/ZarenSoft/hotelseasons/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelSeasons(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonselectedtextcategories/csv")]
        [HttpGet("/export/ZarenSoft/hotelseasonselectedtextcategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonSelectedTextCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelSeasonSelectedTextCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonselectedtextcategories/excel")]
        [HttpGet("/export/ZarenSoft/hotelseasonselectedtextcategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonSelectedTextCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelSeasonSelectedTextCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelselectedcategories/csv")]
        [HttpGet("/export/ZarenSoft/hotelselectedcategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSelectedCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelSelectedCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelselectedcategories/excel")]
        [HttpGet("/export/ZarenSoft/hotelselectedcategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSelectedCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelSelectedCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltextcategories/csv")]
        [HttpGet("/export/ZarenSoft/hoteltextcategories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTextCategoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTextCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltextcategories/excel")]
        [HttpGet("/export/ZarenSoft/hoteltextcategories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTextCategoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTextCategories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltextcategoriesselectedpresentations/csv")]
        [HttpGet("/export/ZarenSoft/hoteltextcategoriesselectedpresentations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTextCategoriesSelectedPresentationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTextCategoriesSelectedPresentations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltextcategoriesselectedpresentations/excel")]
        [HttpGet("/export/ZarenSoft/hoteltextcategoriesselectedpresentations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTextCategoriesSelectedPresentationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTextCategoriesSelectedPresentations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/insuranceselectedlangs/csv")]
        [HttpGet("/export/ZarenSoft/insuranceselectedlangs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportInsuranceSelectedLangsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetInsuranceSelectedLangs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/insuranceselectedlangs/excel")]
        [HttpGet("/export/ZarenSoft/insuranceselectedlangs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportInsuranceSelectedLangsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetInsuranceSelectedLangs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/invoicetypes/csv")]
        [HttpGet("/export/ZarenSoft/invoicetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportInvoiceTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetInvoiceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/invoicetypes/excel")]
        [HttpGet("/export/ZarenSoft/invoicetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportInvoiceTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetInvoiceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/limittypes/csv")]
        [HttpGet("/export/ZarenSoft/limittypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLimitTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLimitTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/limittypes/excel")]
        [HttpGet("/export/ZarenSoft/limittypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLimitTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLimitTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/paymenttypes/csv")]
        [HttpGet("/export/ZarenSoft/paymenttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPaymentTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPaymentTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/paymenttypes/excel")]
        [HttpGet("/export/ZarenSoft/paymenttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPaymentTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPaymentTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/status/csv")]
        [HttpGet("/export/ZarenSoft/status/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/status/excel")]
        [HttpGet("/export/ZarenSoft/status/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatus(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsconfigurationbyhotels/csv")]
        [HttpGet("/export/ZarenSoft/agencycontractsconfigurationbyhotels/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsConfigurationByHotelsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyContractsConfigurationByHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencycontractsconfigurationbyhotels/excel")]
        [HttpGet("/export/ZarenSoft/agencycontractsconfigurationbyhotels/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyContractsConfigurationByHotelsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyContractsConfigurationByHotels(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencies/csv")]
        [HttpGet("/export/ZarenSoft/currencies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrenciesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencies/excel")]
        [HttpGet("/export/ZarenSoft/currencies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrenciesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencies(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplaceapprovalstatuses/csv")]
        [HttpGet("/export/ZarenSoft/marketplaceapprovalstatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceApprovalStatusesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceApprovalStatuses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplaceapprovalstatuses/excel")]
        [HttpGet("/export/ZarenSoft/marketplaceapprovalstatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceApprovalStatusesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceApprovalStatuses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacebuyingdestinations/csv")]
        [HttpGet("/export/ZarenSoft/marketplacebuyingdestinations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceBuyingDestinationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceBuyingDestinations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacebuyingdestinations/excel")]
        [HttpGet("/export/ZarenSoft/marketplacebuyingdestinations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceBuyingDestinationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceBuyingDestinations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacefees/csv")]
        [HttpGet("/export/ZarenSoft/marketplacefees/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceFeesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceFees(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacefees/excel")]
        [HttpGet("/export/ZarenSoft/marketplacefees/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceFeesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceFees(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacerequestprocesses/csv")]
        [HttpGet("/export/ZarenSoft/marketplacerequestprocesses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceRequestProcessesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceRequestProcesses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacerequestprocesses/excel")]
        [HttpGet("/export/ZarenSoft/marketplacerequestprocesses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceRequestProcessesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceRequestProcesses(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacerequestproducts/csv")]
        [HttpGet("/export/ZarenSoft/marketplacerequestproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceRequestProductsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceRequestProducts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacerequestproducts/excel")]
        [HttpGet("/export/ZarenSoft/marketplacerequestproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceRequestProductsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceRequestProducts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacesprofiles/csv")]
        [HttpGet("/export/ZarenSoft/marketplacesprofiles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlacesProfilesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlacesProfiles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacesprofiles/excel")]
        [HttpGet("/export/ZarenSoft/marketplacesprofiles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlacesProfilesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlacesProfiles(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacetypes/csv")]
        [HttpGet("/export/ZarenSoft/marketplacetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacetypes/excel")]
        [HttpGet("/export/ZarenSoft/marketplacetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacesellingdestinations/csv")]
        [HttpGet("/export/ZarenSoft/marketplacesellingdestinations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceSellingDestinationsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMarketPlaceSellingDestinations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/marketplacesellingdestinations/excel")]
        [HttpGet("/export/ZarenSoft/marketplacesellingdestinations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMarketPlaceSellingDestinationsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMarketPlaceSellingDestinations(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/producttypes/csv")]
        [HttpGet("/export/ZarenSoft/producttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProductTypesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProductTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/producttypes/excel")]
        [HttpGet("/export/ZarenSoft/producttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProductTypesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProductTypes(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetalls/csv")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetallsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetEfmigrationshistorygetalls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetalls/excel")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetallsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetEfmigrationshistorygetalls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyids/csv")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetbyidsToCSV(string MigrationId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetEfmigrationshistorygetbyids(MigrationId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyids/excel")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetbyidsToExcel(string MigrationId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetEfmigrationshistorygetbyids(MigrationId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyproductversions/csv")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyproductversions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetbyproductversionsToCSV(string ProductVersion, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetEfmigrationshistorygetbyproductversions(ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyproductversions/excel")]
        [HttpGet("/export/ZarenSoft/efmigrationshistorygetbyproductversions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistorygetbyproductversionsToExcel(string ProductVersion, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetEfmigrationshistorygetbyproductversions(ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistoryinserts/csv")]
        [HttpGet("/export/ZarenSoft/efmigrationshistoryinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistoryinsertsToCSV(string ProductVersion, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetEfmigrationshistoryinserts(ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistoryinserts/excel")]
        [HttpGet("/export/ZarenSoft/efmigrationshistoryinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistoryinsertsToExcel(string ProductVersion, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetEfmigrationshistoryinserts(ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistoryupdates/csv")]
        [HttpGet("/export/ZarenSoft/efmigrationshistoryupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistoryupdatesToCSV(string MigrationId, string ProductVersion, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetEfmigrationshistoryupdates(MigrationId, ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/efmigrationshistoryupdates/excel")]
        [HttpGet("/export/ZarenSoft/efmigrationshistoryupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportEfmigrationshistoryupdatesToExcel(string MigrationId, string ProductVersion, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetEfmigrationshistoryupdates(MigrationId, ProductVersion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyaddresses/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyaddresses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByAddressesToCSV(string Address, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyaddresses/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyaddresses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByAddressesToExcel(string Address, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbycomercialcontactids/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbycomercialcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByComercialContactIdsToCSV(int? ComercialContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByComercialContactIds(ComercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbycomercialcontactids/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbycomercialcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByComercialContactIdsToExcel(int? ComercialContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByComercialContactIds(ComercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyfinancecontactids/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyfinancecontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByFinanceContactIdsToCSV(int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyfinancecontactids/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyfinancecontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByFinanceContactIdsToExcel(int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbymarkups/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbymarkups/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByMarkUpsToCSV(decimal? MarkUp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByMarkUps(MarkUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbymarkups/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbymarkups/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByMarkUpsToExcel(decimal? MarkUp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByMarkUps(MarkUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbypaymentpolitics/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbypaymentpolitics/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByPaymentPoliticsToCSV(string PaymentPolitics, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByPaymentPolitics(PaymentPolitics), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbypaymentpolitics/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbypaymentpolitics/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByPaymentPoliticsToExcel(string PaymentPolitics, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByPaymentPolitics(PaymentPolitics), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyreservationcontactids/csv")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyreservationcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByReservationContactIdsToCSV(int? ReservationContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesgetbyreservationcontactids/excel")]
        [HttpGet("/export/ZarenSoft/agenciesgetbyreservationcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesGetByReservationContactIdsToExcel(int? ReservationContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesinserts/csv")]
        [HttpGet("/export/ZarenSoft/agenciesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesInsertsToCSV(string Name, string Address, string PaymentPolitics, decimal? MarkUp, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesInserts(Name, Address, PaymentPolitics, MarkUp, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesinserts/excel")]
        [HttpGet("/export/ZarenSoft/agenciesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesInsertsToExcel(string Name, string Address, string PaymentPolitics, decimal? MarkUp, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesInserts(Name, Address, PaymentPolitics, MarkUp, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesupdates/csv")]
        [HttpGet("/export/ZarenSoft/agenciesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesUpdatesToCSV(int? Id, string Name, string Address, string PaymentPolitics, decimal? MarkUp, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgenciesUpdates(Id, Name, Address, PaymentPolitics, MarkUp, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agenciesupdates/excel")]
        [HttpGet("/export/ZarenSoft/agenciesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgenciesUpdatesToExcel(int? Id, string Name, string Address, string PaymentPolitics, decimal? MarkUp, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgenciesUpdates(Id, Name, Address, PaymentPolitics, MarkUp, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetalls/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetalls/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbyactives/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbyactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByActivesToCSV(bool? Active, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetByActives(Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbyactives/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbyactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByActivesToExcel(bool? Active, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetByActives(Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByTimestampsToCSV(string Timestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetByTimestamps(Timestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgetbytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgetbytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetByTimestampsToExcel(string Timestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetByTimestamps(Timestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgettimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupgettimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetTimestampBetweensToCSV(string TimestampStart, string TimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupGetTimestampBetweens(TimestampStart, TimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupgettimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupgettimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupGetTimestampBetweensToExcel(string TimestampStart, string TimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupGetTimestampBetweens(TimestampStart, TimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupinserts/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupInsertsToCSV(string Name, string Timestamp, bool? Active, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupInserts(Name, Timestamp, Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupinserts/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupInsertsToExcel(string Name, string Timestamp, bool? Active, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupInserts(Name, Timestamp, Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupupdates/csv")]
        [HttpGet("/export/ZarenSoft/agencygroupupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupUpdatesToCSV(int? Id, string Name, string Timestamp, bool? Active, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgencyGroupUpdates(Id, Name, Timestamp, Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agencygroupupdates/excel")]
        [HttpGet("/export/ZarenSoft/agencygroupupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgencyGroupUpdatesToExcel(int? Id, string Name, string Timestamp, bool? Active, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgencyGroupUpdates(Id, Name, Timestamp, Active), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetalls/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetalls/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentnames/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByAgentNamesToCSV(string AgentName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetByAgentNames(AgentName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentnames/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByAgentNamesToExcel(string AgentName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetByAgentNames(AgentName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentstations/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentstations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByAgentStationsToCSV(string AgentStation, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetByAgentStations(AgentStation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentstations/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyagentstations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByAgentStationsToExcel(string AgentStation, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetByAgentStations(AgentStation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyfileids/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyfileids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentinformationgetbyfileIdsToCSV(int? FILE_ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyfileids/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyfileids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentinformationgetbyfileIdsToExcel(int? FILE_ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyfilenames/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyfilenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentinformationgetbyfileNamesToCSV(string FILE_NAME, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyfilenames/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyfilenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentinformationgetbyfileNamesToExcel(string FILE_NAME, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyrecorddatestamps/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyrecorddatestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByRecordDateStampsToCSV(string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetbyrecorddatestamps/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetbyrecorddatestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetByRecordDateStampsToExcel(string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetrecorddatestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationgetrecorddatestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetRecordDateStampBetweensToCSV(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationgetrecorddatestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationgetrecorddatestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationGetRecordDateStampBetweensToExcel(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationinserts/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationInsertsToCSV(string AgentCode, string AgentName, string AgentStation, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationInserts(AgentCode, AgentName, AgentStation, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationinserts/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationInsertsToExcel(string AgentCode, string AgentName, string AgentStation, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationInserts(AgentCode, AgentName, AgentStation, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationupdates/csv")]
        [HttpGet("/export/ZarenSoft/agentinformationupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationUpdatesToCSV(int? Id, string AgentCode, string AgentName, string AgentStation, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAgentInformationUpdates(Id, AgentCode, AgentName, AgentStation, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/agentinformationupdates/excel")]
        [HttpGet("/export/ZarenSoft/agentinformationupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAgentInformationUpdatesToExcel(int? Id, string AgentCode, string AgentName, string AgentStation, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAgentInformationUpdates(Id, AgentCode, AgentName, AgentStation, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetaiextimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetaiextimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetAiExTimestampBetweensToCSV(string AiExTimestampStart, string AiExTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetAiExTimestampBetweens(AiExTimestampStart, AiExTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetaiextimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetaiextimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetAiExTimestampBetweensToExcel(string AiExTimestampStart, string AiExTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetAiExTimestampBetweens(AiExTimestampStart, AiExTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetalls/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetalls/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexactives/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExActivesToCSV(bool? AiExActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByAiExActives(AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexactives/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExActivesToExcel(bool? AiExActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByAiExActives(AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexdescriptions/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexdescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExDescriptionsToCSV(string AiExDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByAiExDescriptions(AiExDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexdescriptions/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexdescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExDescriptionsToExcel(string AiExDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByAiExDescriptions(AiExDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexfares/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExFaresToCSV(decimal? AiExFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByAiExFares(AiExFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexfares/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiexfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExFaresToExcel(decimal? AiExFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByAiExFares(AiExFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiextimestamps/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiextimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExTimestampsToCSV(string AiExTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByAiExTimestamps(AiExTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyaiextimestamps/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyaiextimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAiExTimestampsToExcel(string AiExTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByAiExTimestamps(AiExTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyairids/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyairids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAirIdsToCSV(int? AirId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByAirIds(AirId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyairids/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyairids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByAirIdsToExcel(int? AirId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByAirIds(AirId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyextyids/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyextyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByExTyIdsToCSV(int? ExTyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByExTyIds(ExTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyextyids/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyextyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByExTyIdsToExcel(int? ExTyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByExTyIds(ExTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/airextrasgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasinserts/csv")]
        [HttpGet("/export/ZarenSoft/airextrasinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasInsertsToCSV(int? AirId, int? ExTyId, string AiExDescription, decimal? AiExFare, string AiExTimestamp, bool? AiExActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasInserts(AirId, ExTyId, AiExDescription, AiExFare, AiExTimestamp, AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasinserts/excel")]
        [HttpGet("/export/ZarenSoft/airextrasinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasInsertsToExcel(int? AirId, int? ExTyId, string AiExDescription, decimal? AiExFare, string AiExTimestamp, bool? AiExActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasInserts(AirId, ExTyId, AiExDescription, AiExFare, AiExTimestamp, AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasupdates/csv")]
        [HttpGet("/export/ZarenSoft/airextrasupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasUpdatesToCSV(int? Id, int? AirId, int? ExTyId, string AiExDescription, decimal? AiExFare, string AiExTimestamp, bool? AiExActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirExtrasUpdates(Id, AirId, ExTyId, AiExDescription, AiExFare, AiExTimestamp, AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airextrasupdates/excel")]
        [HttpGet("/export/ZarenSoft/airextrasupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirExtrasUpdatesToExcel(int? Id, int? AirId, int? ExTyId, string AiExDescription, decimal? AiExFare, string AiExTimestamp, bool? AiExActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirExtrasUpdates(Id, AirId, ExTyId, AiExDescription, AiExFare, AiExTimestamp, AiExActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetairlinetimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetairlinetimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetAirlineTimestampBetweensToCSV(string AirlineTimestampStart, string AirlineTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetAirlineTimestampBetweens(AirlineTimestampStart, AirlineTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetairlinetimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetairlinetimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetAirlineTimestampBetweensToExcel(string AirlineTimestampStart, string AirlineTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetAirlineTimestampBetweens(AirlineTimestampStart, AirlineTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetalls/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetalls/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlineactives/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlineactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineActivesToCSV(bool? AirlineActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByAirlineActives(AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlineactives/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlineactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineActivesToExcel(bool? AirlineActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByAirlineActives(AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinecodes/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinecodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineCodesToCSV(string AirlineCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByAirlineCodes(AirlineCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinecodes/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinecodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineCodesToExcel(string AirlineCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByAirlineCodes(AirlineCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinenames/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineNamesToCSV(string AirlineName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByAirlineNames(AirlineName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinenames/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineNamesToExcel(string AirlineName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByAirlineNames(AirlineName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlineplates/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlineplates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlinePlatesToCSV(string AirlinePlate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByAirlinePlates(AirlinePlate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlineplates/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlineplates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlinePlatesToExcel(string AirlinePlate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByAirlinePlates(AirlinePlate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinetimestamps/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinetimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineTimestampsToCSV(string AirlineTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByAirlineTimestamps(AirlineTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyairlinetimestamps/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyairlinetimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByAirlineTimestampsToExcel(string AirlineTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByAirlineTimestamps(AirlineTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/airlinegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlinegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/airlinegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlineinserts/csv")]
        [HttpGet("/export/ZarenSoft/airlineinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineInsertsToCSV(string AirlineCode, string AirlineName, string AirlinePlate, string AirlineTimestamp, bool? AirlineActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineInserts(AirlineCode, AirlineName, AirlinePlate, AirlineTimestamp, AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlineinserts/excel")]
        [HttpGet("/export/ZarenSoft/airlineinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineInsertsToExcel(string AirlineCode, string AirlineName, string AirlinePlate, string AirlineTimestamp, bool? AirlineActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineInserts(AirlineCode, AirlineName, AirlinePlate, AirlineTimestamp, AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlineupdates/csv")]
        [HttpGet("/export/ZarenSoft/airlineupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineUpdatesToCSV(int? Id, string AirlineCode, string AirlineName, string AirlinePlate, string AirlineTimestamp, bool? AirlineActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirlineUpdates(Id, AirlineCode, AirlineName, AirlinePlate, AirlineTimestamp, AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airlineupdates/excel")]
        [HttpGet("/export/ZarenSoft/airlineupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirlineUpdatesToExcel(int? Id, string AirlineCode, string AirlineName, string AirlinePlate, string AirlineTimestamp, bool? AirlineActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirlineUpdates(Id, AirlineCode, AirlineName, AirlinePlate, AirlineTimestamp, AirlineActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetairporttimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airportgetairporttimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetAirportTimestampBetweensToCSV(string AirportTimestampStart, string AirportTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetAirportTimestampBetweens(AirportTimestampStart, AirportTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetairporttimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airportgetairporttimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetAirportTimestampBetweensToExcel(string AirportTimestampStart, string AirportTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetAirportTimestampBetweens(AirportTimestampStart, AirportTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetalls/csv")]
        [HttpGet("/export/ZarenSoft/airportgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetalls/excel")]
        [HttpGet("/export/ZarenSoft/airportgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportactives/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportActivesToCSV(bool? AirportActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByAirportActives(AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportactives/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportActivesToExcel(bool? AirportActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByAirportActives(AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportcodes/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportCodesToCSV(string AirportCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByAirportCodes(AirportCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportcodes/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportCodesToExcel(string AirportCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByAirportCodes(AirportCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportnames/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportNamesToCSV(string AirportName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByAirportNames(AirportName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairportnames/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbyairportnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportNamesToExcel(string AirportName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByAirportNames(AirportName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairporttimestamps/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbyairporttimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportTimestampsToCSV(string AirportTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByAirportTimestamps(AirportTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyairporttimestamps/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbyairporttimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByAirportTimestampsToExcel(string AirportTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByAirportTimestamps(AirportTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbycityids/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbycityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByCityIdsToCSV(int? CityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbycityids/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbycityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByCityIdsToExcel(int? CityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbycountryids/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbycountryids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByCountryIdsToCSV(int? CountryId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbycountryids/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbycountryids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByCountryIdsToExcel(int? CountryId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/airportgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/airportgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportinserts/csv")]
        [HttpGet("/export/ZarenSoft/airportinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportInsertsToCSV(string AirportCode, string AirportName, int? CountryId, int? CityId, string AirportTimestamp, bool? AirportActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportInserts(AirportCode, AirportName, CountryId, CityId, AirportTimestamp, AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportinserts/excel")]
        [HttpGet("/export/ZarenSoft/airportinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportInsertsToExcel(string AirportCode, string AirportName, int? CountryId, int? CityId, string AirportTimestamp, bool? AirportActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportInserts(AirportCode, AirportName, CountryId, CityId, AirportTimestamp, AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportupdates/csv")]
        [HttpGet("/export/ZarenSoft/airportupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportUpdatesToCSV(int? Id, string AirportCode, string AirportName, int? CountryId, int? CityId, string AirportTimestamp, bool? AirportActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirportUpdates(Id, AirportCode, AirportName, CountryId, CityId, AirportTimestamp, AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airportupdates/excel")]
        [HttpGet("/export/ZarenSoft/airportupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirportUpdatesToExcel(int? Id, string AirportCode, string AirportName, int? CountryId, int? CityId, string AirportTimestamp, bool? AirportActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirportUpdates(Id, AirportCode, AirportName, CountryId, CityId, AirportTimestamp, AirportActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisearrivalbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisearrivalbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeArrivalBetweensToCSV(string AiSeArrivalStart, string AiSeArrivalEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetAiSeArrivalBetweens(AiSeArrivalStart, AiSeArrivalEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisearrivalbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisearrivalbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeArrivalBetweensToExcel(string AiSeArrivalStart, string AiSeArrivalEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetAiSeArrivalBetweens(AiSeArrivalStart, AiSeArrivalEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisedeparturebetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisedeparturebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeDepartureBetweensToCSV(string AiSeDepartureStart, string AiSeDepartureEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetAiSeDepartureBetweens(AiSeDepartureStart, AiSeDepartureEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisedeparturebetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisedeparturebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeDepartureBetweensToExcel(string AiSeDepartureStart, string AiSeDepartureEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetAiSeDepartureBetweens(AiSeDepartureStart, AiSeDepartureEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisetimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisetimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeTimestampBetweensToCSV(string AiSeTimestampStart, string AiSeTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetAiSeTimestampBetweens(AiSeTimestampStart, AiSeTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetaisetimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetaisetimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAiSeTimestampBetweensToExcel(string AiSeTimestampStart, string AiSeTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetAiSeTimestampBetweens(AiSeTimestampStart, AiSeTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairids/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirIdsToCSV(int? AirId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAirIds(AirId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairids/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirIdsToExcel(int? AirId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAirIds(AirId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairlineids/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairlineids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirlineIdsToCSV(int? AirlineId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAirlineIds(AirlineId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairlineids/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairlineids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirlineIdsToExcel(int? AirlineId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAirlineIds(AirlineId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportiddestinations/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportiddestinations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirportIdDestinationsToCSV(int? AirportIdDestination, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAirportIdDestinations(AirportIdDestination), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportiddestinations/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportiddestinations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirportIdDestinationsToExcel(int? AirportIdDestination, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAirportIdDestinations(AirportIdDestination), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportidorigins/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportidorigins/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirportIdOriginsToCSV(int? AirportIdOrigin, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAirportIdOrigins(AirportIdOrigin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportidorigins/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyairportidorigins/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAirportIdOriginsToExcel(int? AirportIdOrigin, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAirportIdOrigins(AirportIdOrigin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseactives/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeActivesToCSV(bool? AiSeActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeActives(AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseactives/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeActivesToExcel(bool? AiSeActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeActives(AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisearrivals/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisearrivals/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeArrivalsToCSV(string AiSeArrival, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeArrivals(AiSeArrival), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisearrivals/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisearrivals/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeArrivalsToExcel(string AiSeArrival, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeArrivals(AiSeArrival), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseclasses/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseclasses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeClassesToCSV(bool? AiSeClass, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeClasses(AiSeClass), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseclasses/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseclasses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeClassesToExcel(bool? AiSeClass, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeClasses(AiSeClass), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisedepartures/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisedepartures/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeDeparturesToCSV(string AiSeDeparture, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeDepartures(AiSeDeparture), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisedepartures/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisedepartures/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeDeparturesToExcel(string AiSeDeparture, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeDepartures(AiSeDeparture), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseflightnumbers/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseflightnumbers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeFlightNumbersToCSV(string AiSeFlightNumber, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeFlightNumbers(AiSeFlightNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseflightnumbers/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaiseflightnumbers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeFlightNumbersToExcel(string AiSeFlightNumber, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeFlightNumbers(AiSeFlightNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisetimestamps/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisetimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeTimestampsToCSV(string AiSeTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByAiSeTimestamps(AiSeTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisetimestamps/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyaisetimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByAiSeTimestampsToExcel(string AiSeTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByAiSeTimestamps(AiSeTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminaliddestinations/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminaliddestinations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByTerminalIdDestinationsToCSV(int? TerminalIdDestination, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByTerminalIdDestinations(TerminalIdDestination), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminaliddestinations/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminaliddestinations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByTerminalIdDestinationsToExcel(int? TerminalIdDestination, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByTerminalIdDestinations(TerminalIdDestination), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminalidorigins/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminalidorigins/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByTerminalIdOriginsToCSV(int? TerminalIdOrigin, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsGetByTerminalIdOrigins(TerminalIdOrigin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminalidorigins/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsgetbyterminalidorigins/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsGetByTerminalIdOriginsToExcel(int? TerminalIdOrigin, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsGetByTerminalIdOrigins(TerminalIdOrigin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsinserts/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsInsertsToCSV(int? AirId, int? AirlineId, string AiSeDeparture, string AiSeArrival, int? AirportIdOrigin, int? AirportIdDestination, string AiSeFlightNumber, bool? AiSeClass, int? TerminalIdOrigin, int? TerminalIdDestination, string AiSeTimestamp, bool? AiSeActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsInserts(AirId, AirlineId, AiSeDeparture, AiSeArrival, AirportIdOrigin, AirportIdDestination, AiSeFlightNumber, AiSeClass, TerminalIdOrigin, TerminalIdDestination, AiSeTimestamp, AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsinserts/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsInsertsToExcel(int? AirId, int? AirlineId, string AiSeDeparture, string AiSeArrival, int? AirportIdOrigin, int? AirportIdDestination, string AiSeFlightNumber, bool? AiSeClass, int? TerminalIdOrigin, int? TerminalIdDestination, string AiSeTimestamp, bool? AiSeActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsInserts(AirId, AirlineId, AiSeDeparture, AiSeArrival, AirportIdOrigin, AirportIdDestination, AiSeFlightNumber, AiSeClass, TerminalIdOrigin, TerminalIdDestination, AiSeTimestamp, AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsupdates/csv")]
        [HttpGet("/export/ZarenSoft/airsegmentsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsUpdatesToCSV(int? Id, int? AirId, int? AirlineId, string AiSeDeparture, string AiSeArrival, int? AirportIdOrigin, int? AirportIdDestination, string AiSeFlightNumber, bool? AiSeClass, int? TerminalIdOrigin, int? TerminalIdDestination, string AiSeTimestamp, bool? AiSeActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirSegmentsUpdates(Id, AirId, AirlineId, AiSeDeparture, AiSeArrival, AirportIdOrigin, AirportIdDestination, AiSeFlightNumber, AiSeClass, TerminalIdOrigin, TerminalIdDestination, AiSeTimestamp, AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsegmentsupdates/excel")]
        [HttpGet("/export/ZarenSoft/airsegmentsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirSegmentsUpdatesToExcel(int? Id, int? AirId, int? AirlineId, string AiSeDeparture, string AiSeArrival, int? AirportIdOrigin, int? AirportIdDestination, string AiSeFlightNumber, bool? AiSeClass, int? TerminalIdOrigin, int? TerminalIdDestination, string AiSeTimestamp, bool? AiSeActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirSegmentsUpdates(Id, AirId, AirlineId, AiSeDeparture, AiSeArrival, AirportIdOrigin, AirportIdDestination, AiSeFlightNumber, AiSeClass, TerminalIdOrigin, TerminalIdDestination, AiSeTimestamp, AiSeActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairbookeddatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsgetairbookeddatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirBookedDateBetweensToCSV(string AirBookedDateStart, string AirBookedDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetAirBookedDateBetweens(AirBookedDateStart, AirBookedDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairbookeddatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsgetairbookeddatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirBookedDateBetweensToExcel(string AirBookedDateStart, string AirBookedDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetAirBookedDateBetweens(AirBookedDateStart, AirBookedDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairissueddatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsgetairissueddatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirIssueddateBetweensToCSV(string AirIssueddateStart, string AirIssueddateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetAirIssueddateBetweens(AirIssueddateStart, AirIssueddateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairissueddatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsgetairissueddatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirIssueddateBetweensToExcel(string AirIssueddateStart, string AirIssueddateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetAirIssueddateBetweens(AirIssueddateStart, AirIssueddateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairtimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/airsgetairtimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirTimestampBetweensToCSV(string AirTimestampStart, string AirTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetAirTimestampBetweens(AirTimestampStart, AirTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetairtimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/airsgetairtimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAirTimestampBetweensToExcel(string AirTimestampStart, string AirTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetAirTimestampBetweens(AirTimestampStart, AirTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/airsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/airsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairactives/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirActivesToCSV(bool? AirActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirActives(AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairactives/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirActivesToExcel(bool? AirActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirActives(AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairbookeddates/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairbookeddates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirBookedDatesToCSV(string AirBookedDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirBookedDates(AirBookedDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairbookeddates/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairbookeddates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirBookedDatesToExcel(string AirBookedDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirBookedDates(AirBookedDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairfares/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirFaresToCSV(decimal? AirFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirFares(AirFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairfares/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirFaresToExcel(decimal? AirFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirFares(AirFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairfarebases/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairfarebases/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirFareBasesToCSV(string AirFareBases, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirFareBases(AirFareBases), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairfarebases/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairfarebases/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirFareBasesToExcel(string AirFareBases, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirFareBases(AirFareBases), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairhighestfares/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairhighestfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirHighestFaresToCSV(decimal? AirHighestFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirHighestFares(AirHighestFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairhighestfares/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairhighestfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirHighestFaresToExcel(decimal? AirHighestFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirHighestFares(AirHighestFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairincludebags/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairincludebags/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirIncludeBagsToCSV(bool? AirIncludeBags, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirIncludeBags(AirIncludeBags), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairincludebags/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairincludebags/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirIncludeBagsToExcel(bool? AirIncludeBags, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirIncludeBags(AirIncludeBags), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairissueddates/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairissueddates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirIssueddatesToCSV(string AirIssueddate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirIssueddates(AirIssueddate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairissueddates/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairissueddates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirIssueddatesToExcel(string AirIssueddate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirIssueddates(AirIssueddate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairlineids/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairlineids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirlineIdsToCSV(int? AirlineId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirlineIds(AirlineId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairlineids/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairlineids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirlineIdsToExcel(int? AirlineId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirlineIds(AirlineId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairlowestfares/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairlowestfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirLowestFaresToCSV(decimal? AirLowestFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirLowestFares(AirLowestFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairlowestfares/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairlowestfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirLowestFaresToExcel(decimal? AirLowestFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirLowestFares(AirLowestFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairoriginaltickets/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairoriginaltickets/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirOriginalTicketsToCSV(string AirOriginalTicket, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirOriginalTickets(AirOriginalTicket), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairoriginaltickets/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairoriginaltickets/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirOriginalTicketsToExcel(string AirOriginalTicket, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirOriginalTickets(AirOriginalTicket), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairrecordairlines/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairrecordairlines/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirRecordAirlinesToCSV(string AirRecordAirline, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirRecordAirlines(AirRecordAirline), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairrecordairlines/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairrecordairlines/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirRecordAirlinesToExcel(string AirRecordAirline, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirRecordAirlines(AirRecordAirline), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairreissueds/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairreissueds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirReIssuedsToCSV(bool? AirReIssued, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirReIssueds(AirReIssued), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairreissueds/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairreissueds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirReIssuedsToExcel(bool? AirReIssued, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirReIssueds(AirReIssued), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtaxes/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtaxes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTaxesToCSV(decimal? AirTax, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirTaxes(AirTax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtaxes/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtaxes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTaxesToExcel(decimal? AirTax, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirTaxes(AirTax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtickets/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtickets/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTicketsToCSV(string AirTicket, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirTickets(AirTicket), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtickets/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtickets/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTicketsToExcel(string AirTicket, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirTickets(AirTicket), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtimestamps/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTimestampsToCSV(string AirTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByAirTimestamps(AirTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyairtimestamps/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyairtimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByAirTimestampsToExcel(string AirTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByAirTimestamps(AirTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbybrokerids/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbybrokerids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByBrokerIdsToCSV(int? BrokerId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByBrokerIds(BrokerId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbybrokerids/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbybrokerids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByBrokerIdsToExcel(int? BrokerId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByBrokerIds(BrokerId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbycurrencyids/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbycurrencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByCurrencyIdsToCSV(int? CurrencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbycurrencyids/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbycurrencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByCurrencyIdsToExcel(int? CurrencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbypnrids/csv")]
        [HttpGet("/export/ZarenSoft/airsgetbypnrids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByPnrIdsToCSV(int? PNRId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsgetbypnrids/excel")]
        [HttpGet("/export/ZarenSoft/airsgetbypnrids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsGetByPnrIdsToExcel(int? PNRId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsinserts/csv")]
        [HttpGet("/export/ZarenSoft/airsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsInsertsToCSV(int? AirlineId, string AirRecordAirline, string AirTicket, string AirBookedDate, string AirIssueddate, bool? AirReIssued, string AirOriginalTicket, int? PNRId, int? CurrencyId, decimal? AirFare, decimal? AirTax, decimal? AirLowestFare, decimal? AirHighestFare, string AirFareBases, int? BrokerId, bool? AirIncludeBags, string AirTimestamp, bool? AirActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsInserts(AirlineId, AirRecordAirline, AirTicket, AirBookedDate, AirIssueddate, AirReIssued, AirOriginalTicket, PNRId, CurrencyId, AirFare, AirTax, AirLowestFare, AirHighestFare, AirFareBases, BrokerId, AirIncludeBags, AirTimestamp, AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsinserts/excel")]
        [HttpGet("/export/ZarenSoft/airsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsInsertsToExcel(int? AirlineId, string AirRecordAirline, string AirTicket, string AirBookedDate, string AirIssueddate, bool? AirReIssued, string AirOriginalTicket, int? PNRId, int? CurrencyId, decimal? AirFare, decimal? AirTax, decimal? AirLowestFare, decimal? AirHighestFare, string AirFareBases, int? BrokerId, bool? AirIncludeBags, string AirTimestamp, bool? AirActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsInserts(AirlineId, AirRecordAirline, AirTicket, AirBookedDate, AirIssueddate, AirReIssued, AirOriginalTicket, PNRId, CurrencyId, AirFare, AirTax, AirLowestFare, AirHighestFare, AirFareBases, BrokerId, AirIncludeBags, AirTimestamp, AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsupdates/csv")]
        [HttpGet("/export/ZarenSoft/airsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsUpdatesToCSV(int? Id, int? AirlineId, string AirRecordAirline, string AirTicket, string AirBookedDate, string AirIssueddate, bool? AirReIssued, string AirOriginalTicket, int? PNRId, int? CurrencyId, decimal? AirFare, decimal? AirTax, decimal? AirLowestFare, decimal? AirHighestFare, string AirFareBases, int? BrokerId, bool? AirIncludeBags, string AirTimestamp, bool? AirActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAirsUpdates(Id, AirlineId, AirRecordAirline, AirTicket, AirBookedDate, AirIssueddate, AirReIssued, AirOriginalTicket, PNRId, CurrencyId, AirFare, AirTax, AirLowestFare, AirHighestFare, AirFareBases, BrokerId, AirIncludeBags, AirTimestamp, AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/airsupdates/excel")]
        [HttpGet("/export/ZarenSoft/airsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAirsUpdatesToExcel(int? Id, int? AirlineId, string AirRecordAirline, string AirTicket, string AirBookedDate, string AirIssueddate, bool? AirReIssued, string AirOriginalTicket, int? PNRId, int? CurrencyId, decimal? AirFare, decimal? AirTax, decimal? AirLowestFare, decimal? AirHighestFare, string AirFareBases, int? BrokerId, bool? AirIncludeBags, string AirTimestamp, bool? AirActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAirsUpdates(Id, AirlineId, AirRecordAirline, AirTicket, AirBookedDate, AirIssueddate, AirReIssued, AirOriginalTicket, PNRId, CurrencyId, AirFare, AirTax, AirLowestFare, AirHighestFare, AirFareBases, BrokerId, AirIncludeBags, AirTimestamp, AirActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetalls/csv")]
        [HttpGet("/export/ZarenSoft/apigetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetalls/excel")]
        [HttpGet("/export/ZarenSoft/apigetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyapinames/csv")]
        [HttpGet("/export/ZarenSoft/apigetbyapinames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByApiNamesToCSV(string ApiName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiGetByApiNames(ApiName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyapinames/excel")]
        [HttpGet("/export/ZarenSoft/apigetbyapinames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByApiNamesToExcel(string ApiName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiGetByApiNames(ApiName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyids/csv")]
        [HttpGet("/export/ZarenSoft/apigetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyids/excel")]
        [HttpGet("/export/ZarenSoft/apigetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbypasswords/csv")]
        [HttpGet("/export/ZarenSoft/apigetbypasswords/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByPasswordsToCSV(string Password, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiGetByPasswords(Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbypasswords/excel")]
        [HttpGet("/export/ZarenSoft/apigetbypasswords/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByPasswordsToExcel(string Password, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiGetByPasswords(Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyuserkeys/csv")]
        [HttpGet("/export/ZarenSoft/apigetbyuserkeys/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByUserKeysToCSV(string UserKey, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiGetByUserKeys(UserKey), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apigetbyuserkeys/excel")]
        [HttpGet("/export/ZarenSoft/apigetbyuserkeys/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiGetByUserKeysToExcel(string UserKey, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiGetByUserKeys(UserKey), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiinserts/csv")]
        [HttpGet("/export/ZarenSoft/apiinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiInsertsToCSV(string ApiName, string UserKey, string Password, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiInserts(ApiName, UserKey, Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiinserts/excel")]
        [HttpGet("/export/ZarenSoft/apiinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiInsertsToExcel(string ApiName, string UserKey, string Password, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiInserts(ApiName, UserKey, Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiresultinserts/csv")]
        [HttpGet("/export/ZarenSoft/apiresultinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiResultInsertsToCSV(string RequestData, string ResponseData, string RequestDate, string ResponseDate, string Currency, string CheckIn, string Nationality, int? ApiId, bool? IsSuccessfull, int? ProductType, string LocationId, string Query, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiResultInserts(RequestData, ResponseData, RequestDate, ResponseDate, Currency, CheckIn, Nationality, ApiId, IsSuccessfull, ProductType, LocationId, Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiresultinserts/excel")]
        [HttpGet("/export/ZarenSoft/apiresultinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiResultInsertsToExcel(string RequestData, string ResponseData, string RequestDate, string ResponseDate, string Currency, string CheckIn, string Nationality, int? ApiId, bool? IsSuccessfull, int? ProductType, string LocationId, string Query, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiResultInserts(RequestData, ResponseData, RequestDate, ResponseDate, Currency, CheckIn, Nationality, ApiId, IsSuccessfull, ProductType, LocationId, Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiupdates/csv")]
        [HttpGet("/export/ZarenSoft/apiupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiUpdatesToCSV(int? Id, string ApiName, string UserKey, string Password, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetApiUpdates(Id, ApiName, UserKey, Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/apiupdates/excel")]
        [HttpGet("/export/ZarenSoft/apiupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportApiUpdatesToExcel(int? Id, string ApiName, string UserKey, string Password, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetApiUpdates(Id, ApiName, UserKey, Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetalls/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetalls/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandeletes/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandeletes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanDeletesToCSV(int? CanDelete, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanDeletes(CanDelete), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandeletes/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandeletes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanDeletesToExcel(int? CanDelete, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanDeletes(CanDelete), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandetails/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandetails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanDetailsToCSV(int? CanDetail, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanDetails(CanDetail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandetails/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycandetails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanDetailsToExcel(int? CanDetail, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanDetails(CanDetail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycaninserts/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycaninserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanInsertsToCSV(int? CanInsert, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanInserts(CanInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycaninserts/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycaninserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanInsertsToExcel(int? CanInsert, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanInserts(CanInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanlists/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanlists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanListsToCSV(int? CanList, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanLists(CanList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanlists/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanlists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanListsToExcel(int? CanList, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanLists(CanList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanremoves/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanremoves/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanRemovesToCSV(int? CanRemove, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanRemoves(CanRemove), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanremoves/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanremoves/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanRemovesToExcel(int? CanRemove, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanRemoves(CanRemove), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanupdates/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanUpdatesToCSV(int? CanUpdate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByCanUpdates(CanUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanupdates/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbycanupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByCanUpdatesToExcel(int? CanUpdate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByCanUpdates(CanUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydatabasetables/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydatabasetables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByDatabaseTablesToCSV(int? DatabaseTables, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByDatabaseTables(DatabaseTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydatabasetables/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydatabasetables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByDatabaseTablesToExcel(int? DatabaseTables, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByDatabaseTables(DatabaseTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydepartments/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydepartments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByDepartmentsToCSV(int? Departments, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByDepartments(Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydepartments/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbydepartments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByDepartmentsToExcel(int? Departments, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByDepartments(Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyids/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyids/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyonleftmenus/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyonleftmenus/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByOnLeftMenusToCSV(int? OnLeftMenu, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByOnLeftMenus(OnLeftMenu), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyonleftmenus/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyonleftmenus/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByOnLeftMenusToExcel(int? OnLeftMenu, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByOnLeftMenus(OnLeftMenu), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyproducts/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByProductsToCSV(int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyproducts/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByProductsToExcel(int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyusers/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyusers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByUsersToCSV(int? Users, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateGetByUsers(Users), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyusers/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplategetbyusers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateGetByUsersToExcel(int? Users, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateGetByUsers(Users), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplateinserts/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplateinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateInsertsToCSV(int? Products, int? Users, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanDetail, int? CanList, int? CanDelete, int? CanRemove, int? OnLeftMenu, int? Departments, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateInserts(Products, Users, DatabaseTables, CanInsert, CanUpdate, CanDetail, CanList, CanDelete, CanRemove, OnLeftMenu, Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplateinserts/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplateinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateInsertsToExcel(int? Products, int? Users, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanDetail, int? CanList, int? CanDelete, int? CanRemove, int? OnLeftMenu, int? Departments, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateInserts(Products, Users, DatabaseTables, CanInsert, CanUpdate, CanDetail, CanList, CanDelete, CanRemove, OnLeftMenu, Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplateupdates/csv")]
        [HttpGet("/export/ZarenSoft/authorizationtemplateupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateUpdatesToCSV(int? ID, int? Products, int? Users, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanDetail, int? CanList, int? CanDelete, int? CanRemove, int? OnLeftMenu, int? Departments, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAuthorizationTemplateUpdates(ID, Products, Users, DatabaseTables, CanInsert, CanUpdate, CanDetail, CanList, CanDelete, CanRemove, OnLeftMenu, Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/authorizationtemplateupdates/excel")]
        [HttpGet("/export/ZarenSoft/authorizationtemplateupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAuthorizationTemplateUpdatesToExcel(int? ID, int? Products, int? Users, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanDetail, int? CanList, int? CanDelete, int? CanRemove, int? OnLeftMenu, int? Departments, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAuthorizationTemplateUpdates(ID, Products, Users, DatabaseTables, CanInsert, CanUpdate, CanDetail, CanList, CanDelete, CanRemove, OnLeftMenu, Departments), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyapiids/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyapiids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByApiIdsToCSV(int? ApiId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetByApiIds(ApiId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyapiids/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyapiids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByApiIdsToExcel(int? ApiId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetByApiIds(ApiId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyapisystemids/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyapisystemids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByApiSystemIdsToCSV(string ApiSystemId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetByApiSystemIds(ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyapisystemids/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyapisystemids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByApiSystemIdsToExcel(string ApiSystemId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetByApiSystemIds(ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbytypes/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbytypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByTypesToCSV(int? Type, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesGetByTypes(Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesgetbytypes/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesgetbytypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesGetByTypesToExcel(int? Type, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesGetByTypes(Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesinserts/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesInsertsToCSV(string Name, int? Type, int? ApiId, string ApiSystemId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesInserts(Name, Type, ApiId, ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesinserts/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesInsertsToExcel(string Name, int? Type, int? ApiId, string ApiSystemId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesInserts(Name, Type, ApiId, ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesupdates/csv")]
        [HttpGet("/export/ZarenSoft/autocompletesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesUpdatesToCSV(int? Id, string Name, int? Type, int? ApiId, string ApiSystemId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompletesUpdates(Id, Name, Type, ApiId, ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletesupdates/excel")]
        [HttpGet("/export/ZarenSoft/autocompletesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompletesUpdatesToExcel(int? Id, string Name, int? Type, int? ApiId, string ApiSystemId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompletesUpdates(Id, Name, Type, ApiId, ApiSystemId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/autocompletetypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetAutoCompleteTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/autocompletetypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/autocompletetypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportAutoCompleteTypesUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetAutoCompleteTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetalls/csv")]
        [HttpGet("/export/ZarenSoft/bannergetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetalls/excel")]
        [HttpGet("/export/ZarenSoft/bannergetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbyids/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbyids/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbyimagepaths/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbyimagepaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByImagePathsToCSV(string ImagePath, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByImagePaths(ImagePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbyimagepaths/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbyimagepaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByImagePathsToExcel(string ImagePath, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByImagePaths(ImagePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByLanguageIdsToCSV(int? LanguageID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByLanguageIdsToExcel(int? LanguageID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbymobileimagepaths/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbymobileimagepaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByMobileImagePathsToCSV(string MobileImagePath, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByMobileImagePaths(MobileImagePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbymobileimagepaths/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbymobileimagepaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByMobileImagePathsToExcel(string MobileImagePath, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByMobileImagePaths(MobileImagePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytableorders/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbytableorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByTableOrdersToCSV(int? TableOrder, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytableorders/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbytableorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByTableOrdersToExcel(int? TableOrder, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytexts/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbytexts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByTextsToCSV(string Text, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByTexts(Text), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytexts/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbytexts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByTextsToExcel(string Text, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByTexts(Text), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytext2s/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbytext2s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByText2SToCSV(string Text2, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByText2S(Text2), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytext2s/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbytext2s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByText2SToExcel(string Text2, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByText2S(Text2), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytext3s/csv")]
        [HttpGet("/export/ZarenSoft/bannergetbytext3s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByText3SToCSV(string Text3, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerGetByText3S(Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannergetbytext3s/excel")]
        [HttpGet("/export/ZarenSoft/bannergetbytext3s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerGetByText3SToExcel(string Text3, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerGetByText3S(Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannerinserts/csv")]
        [HttpGet("/export/ZarenSoft/bannerinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerInsertsToCSV(int? LanguageID, string ImagePath, string MobileImagePath, int? TableOrder, string Text, string Text2, string Text3, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerInserts(LanguageID, ImagePath, MobileImagePath, TableOrder, Text, Text2, Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannerinserts/excel")]
        [HttpGet("/export/ZarenSoft/bannerinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerInsertsToExcel(int? LanguageID, string ImagePath, string MobileImagePath, int? TableOrder, string Text, string Text2, string Text3, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerInserts(LanguageID, ImagePath, MobileImagePath, TableOrder, Text, Text2, Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannerupdates/csv")]
        [HttpGet("/export/ZarenSoft/bannerupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerUpdatesToCSV(int? ID, int? LanguageID, string ImagePath, string MobileImagePath, int? TableOrder, string Text, string Text2, string Text3, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBannerUpdates(ID, LanguageID, ImagePath, MobileImagePath, TableOrder, Text, Text2, Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bannerupdates/excel")]
        [HttpGet("/export/ZarenSoft/bannerupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBannerUpdatesToExcel(int? ID, int? LanguageID, string ImagePath, string MobileImagePath, int? TableOrder, string Text, string Text2, string Text3, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBannerUpdates(ID, LanguageID, ImagePath, MobileImagePath, TableOrder, Text, Text2, Text3), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyboardtypeids/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyboardtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByBoardTypeIdsToCSV(int? BoardTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyboardtypeids/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyboardtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByBoardTypeIdsToExcel(int? BoardTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesInsertsToCSV(int? LanguageId, int? BoardTypeId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesInserts(LanguageId, BoardTypeId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesInsertsToExcel(int? LanguageId, int? BoardTypeId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesInserts(LanguageId, BoardTypeId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesUpdatesToCSV(int? Id, int? LanguageId, int? BoardTypeId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypeLanguagesUpdates(Id, LanguageId, BoardTypeId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypelanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/boardtypelanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypeLanguagesUpdatesToExcel(int? Id, int? LanguageId, int? BoardTypeId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypeLanguagesUpdates(Id, LanguageId, BoardTypeId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/boardtypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/boardtypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/boardtypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/boardtypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/boardtypesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/boardtypesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/boardtypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/boardtypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/boardtypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBoardTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/boardtypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/boardtypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBoardTypesUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBoardTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbybookingids/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbybookingids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByBookingIdsToCSV(int? BookingId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsGetByBookingIds(BookingId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbybookingids/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbybookingids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByBookingIdsToExcel(int? BookingId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsGetByBookingIds(BookingId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbydealids/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbydealids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByDealIdsToCSV(int? DealId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsGetByDealIds(DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbydealids/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbydealids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByDealIdsToExcel(int? DealId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsGetByDealIds(DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsinserts/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsInsertsToCSV(int? BookingId, int? DealId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsInserts(BookingId, DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsinserts/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsInsertsToExcel(int? BookingId, int? DealId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsInserts(BookingId, DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsupdates/csv")]
        [HttpGet("/export/ZarenSoft/bookingdealsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsUpdatesToCSV(int? Id, int? BookingId, int? DealId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingDealsUpdates(Id, BookingId, DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingdealsupdates/excel")]
        [HttpGet("/export/ZarenSoft/bookingdealsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingDealsUpdatesToExcel(int? Id, int? BookingId, int? DealId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingDealsUpdates(Id, BookingId, DealId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyboardtypeids/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyboardtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByBoardTypeIdsToCSV(int? BoardTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyboardtypeids/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyboardtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByBoardTypeIdsToExcel(int? BoardTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbybookingids/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbybookingids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByBookingIdsToCSV(int? BookingId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByBookingIds(BookingId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbybookingids/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbybookingids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByBookingIdsToExcel(int? BookingId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByBookingIds(BookingId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbycosts/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbycosts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByCostsToCSV(decimal? Cost, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbycosts/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbycosts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByCostsToExcel(decimal? Cost, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyprices/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByPricesToCSV(int? Price, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsGetByPrices(Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsgetbyprices/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsgetbyprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsGetByPricesToExcel(int? Price, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsGetByPrices(Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsinserts/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsInsertsToCSV(int? BookingId, int? HotelRoomId, int? BoardTypeId, decimal? Cost, int? Price, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsInserts(BookingId, HotelRoomId, BoardTypeId, Cost, Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsinserts/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsInsertsToExcel(int? BookingId, int? HotelRoomId, int? BoardTypeId, decimal? Cost, int? Price, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsInserts(BookingId, HotelRoomId, BoardTypeId, Cost, Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsupdates/csv")]
        [HttpGet("/export/ZarenSoft/bookingroomsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsUpdatesToCSV(int? Id, int? BookingId, int? HotelRoomId, int? BoardTypeId, decimal? Cost, int? Price, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingRoomsUpdates(Id, BookingId, HotelRoomId, BoardTypeId, Cost, Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingroomsupdates/excel")]
        [HttpGet("/export/ZarenSoft/bookingroomsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingRoomsUpdatesToExcel(int? Id, int? BookingId, int? HotelRoomId, int? BoardTypeId, decimal? Cost, int? Price, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingRoomsUpdates(Id, BookingId, HotelRoomId, BoardTypeId, Cost, Price), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyadults/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyadults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByAdultsToCSV(int? Adults, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyadults/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyadults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByAdultsToExcel(int? Adults, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyagencyids/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyagencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByAgencyIdsToCSV(int? AgencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyagencyids/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyagencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByAgencyIdsToExcel(int? AgencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbychildren/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbychildren/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByChildrenToCSV(int? Children, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbychildren/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbychildren/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByChildrenToExcel(int? Children, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbychildrenages/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbychildrenages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByChildrenAgesToCSV(string ChildrenAges, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByChildrenAges(ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbychildrenages/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbychildrenages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByChildrenAgesToExcel(string ChildrenAges, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByChildrenAges(ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientaddresses/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientaddresses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientAddressesToCSV(string ClientAddress, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientAddresses(ClientAddress), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientaddresses/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientaddresses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientAddressesToExcel(string ClientAddress, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientAddresses(ClientAddress), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientcontacts/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientcontacts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientContactsToCSV(string ClientContact, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientContacts(ClientContact), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientcontacts/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientcontacts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientContactsToExcel(string ClientContact, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientContacts(ClientContact), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientemails/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientemails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientEmailsToCSV(string ClientEmail, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientEmails(ClientEmail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientemails/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientemails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientEmailsToExcel(string ClientEmail, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientEmails(ClientEmail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnames/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientNamesToCSV(string ClientName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientNames(ClientName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnames/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientNamesToExcel(string ClientName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientNames(ClientName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnotes/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnotes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientNotesToCSV(string ClientNotes, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientNotes(ClientNotes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnotes/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientnotes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientNotesToExcel(string ClientNotes, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientNotes(ClientNotes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientsurnames/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientsurnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientSurnamesToCSV(string ClientSurname, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientSurnames(ClientSurname), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclientsurnames/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclientsurnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientSurnamesToExcel(string ClientSurname, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientSurnames(ClientSurname), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclienttitles/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclienttitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientTitlesToCSV(string ClientTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByClientTitles(ClientTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyclienttitles/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyclienttitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByClientTitlesToExcel(string ClientTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByClientTitles(ClientTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbydatebookeds/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbydatebookeds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByDateBookedsToCSV(string DateBooked, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByDateBookeds(DateBooked), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbydatebookeds/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbydatebookeds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByDateBookedsToExcel(string DateBooked, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByDateBookeds(DateBooked), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyfromdates/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyfromdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByFromDatesToCSV(string FromDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByFromDates(FromDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyfromdates/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyfromdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByFromDatesToExcel(string FromDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByFromDates(FromDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyinfants/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyinfants/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByInfantsToCSV(int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyinfants/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyinfants/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByInfantsToExcel(int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbynights/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbynights/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByNightsToCSV(int? Nights, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByNights(Nights), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbynights/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbynights/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByNightsToExcel(int? Nights, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByNights(Nights), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbynumrooms/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbynumrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByNumRoomsToCSV(int? NumRooms, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByNumRooms(NumRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbynumrooms/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbynumrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByNumRoomsToExcel(int? NumRooms, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByNumRooms(NumRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbypaidstatuses/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbypaidstatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByPaidStatusesToCSV(int? PaidStatus, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByPaidStatuses(PaidStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbypaidstatuses/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbypaidstatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByPaidStatusesToExcel(int? PaidStatus, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByPaidStatuses(PaidStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyproviderids/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyproviderids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByProviderIdsToCSV(int? ProviderId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByProviderIds(ProviderId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyproviderids/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyproviderids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByProviderIdsToExcel(int? ProviderId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByProviderIds(ProviderId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyreferences/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyreferences/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByReferencesToCSV(string Reference, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByReferences(Reference), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbyreferences/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbyreferences/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByReferencesToExcel(string Reference, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByReferences(Reference), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbystatuses/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbystatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByStatusesToCSV(int? Status, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByStatuses(Status), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbystatuses/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbystatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByStatusesToExcel(int? Status, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByStatuses(Status), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytodates/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytodates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByToDatesToCSV(string ToDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByToDates(ToDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytodates/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytodates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByToDatesToExcel(string ToDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByToDates(ToDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytotalcosts/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytotalcosts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByTotalCostsToCSV(decimal? TotalCost, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByTotalCosts(TotalCost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytotalcosts/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytotalcosts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByTotalCostsToExcel(decimal? TotalCost, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByTotalCosts(TotalCost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytotalprices/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytotalprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByTotalPricesToCSV(decimal? TotalPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetByTotalPrices(TotalPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetbytotalprices/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetbytotalprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetByTotalPricesToExcel(decimal? TotalPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetByTotalPrices(TotalPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetdatebookedbetweens/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetdatebookedbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetDateBookedBetweensToCSV(string DateBookedStart, string DateBookedEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetDateBookedBetweens(DateBookedStart, DateBookedEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetdatebookedbetweens/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetdatebookedbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetDateBookedBetweensToExcel(string DateBookedStart, string DateBookedEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetDateBookedBetweens(DateBookedStart, DateBookedEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetfromdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgetfromdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetFromDateBetweensToCSV(string FromDateStart, string FromDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetFromDateBetweens(FromDateStart, FromDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgetfromdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgetfromdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetFromDateBetweensToExcel(string FromDateStart, string FromDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetFromDateBetweens(FromDateStart, FromDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgettodatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/bookingsgettodatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetToDateBetweensToCSV(string ToDateStart, string ToDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsGetToDateBetweens(ToDateStart, ToDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsgettodatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/bookingsgettodatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsGetToDateBetweensToExcel(string ToDateStart, string ToDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsGetToDateBetweens(ToDateStart, ToDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsinserts/csv")]
        [HttpGet("/export/ZarenSoft/bookingsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsInsertsToCSV(int? HotelId, int? ProviderId, int? AgencyId, string Reference, string FromDate, string ToDate, string DateBooked, int? Nights, int? NumRooms, decimal? TotalCost, decimal? TotalPrice, int? Status, int? PaidStatus, string ClientTitle, string ClientName, string ClientSurname, string ClientEmail, string ClientNotes, string ClientAddress, string ClientContact, int? Adults, int? Children, int? Infants, string ChildrenAges, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsInserts(HotelId, ProviderId, AgencyId, Reference, FromDate, ToDate, DateBooked, Nights, NumRooms, TotalCost, TotalPrice, Status, PaidStatus, ClientTitle, ClientName, ClientSurname, ClientEmail, ClientNotes, ClientAddress, ClientContact, Adults, Children, Infants, ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsinserts/excel")]
        [HttpGet("/export/ZarenSoft/bookingsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsInsertsToExcel(int? HotelId, int? ProviderId, int? AgencyId, string Reference, string FromDate, string ToDate, string DateBooked, int? Nights, int? NumRooms, decimal? TotalCost, decimal? TotalPrice, int? Status, int? PaidStatus, string ClientTitle, string ClientName, string ClientSurname, string ClientEmail, string ClientNotes, string ClientAddress, string ClientContact, int? Adults, int? Children, int? Infants, string ChildrenAges, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsInserts(HotelId, ProviderId, AgencyId, Reference, FromDate, ToDate, DateBooked, Nights, NumRooms, TotalCost, TotalPrice, Status, PaidStatus, ClientTitle, ClientName, ClientSurname, ClientEmail, ClientNotes, ClientAddress, ClientContact, Adults, Children, Infants, ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsupdates/csv")]
        [HttpGet("/export/ZarenSoft/bookingsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsUpdatesToCSV(int? Id, int? HotelId, int? ProviderId, int? AgencyId, string Reference, string FromDate, string ToDate, string DateBooked, int? Nights, int? NumRooms, decimal? TotalCost, decimal? TotalPrice, int? Status, int? PaidStatus, string ClientTitle, string ClientName, string ClientSurname, string ClientEmail, string ClientNotes, string ClientAddress, string ClientContact, int? Adults, int? Children, int? Infants, string ChildrenAges, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBookingsUpdates(Id, HotelId, ProviderId, AgencyId, Reference, FromDate, ToDate, DateBooked, Nights, NumRooms, TotalCost, TotalPrice, Status, PaidStatus, ClientTitle, ClientName, ClientSurname, ClientEmail, ClientNotes, ClientAddress, ClientContact, Adults, Children, Infants, ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/bookingsupdates/excel")]
        [HttpGet("/export/ZarenSoft/bookingsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBookingsUpdatesToExcel(int? Id, int? HotelId, int? ProviderId, int? AgencyId, string Reference, string FromDate, string ToDate, string DateBooked, int? Nights, int? NumRooms, decimal? TotalCost, decimal? TotalPrice, int? Status, int? PaidStatus, string ClientTitle, string ClientName, string ClientSurname, string ClientEmail, string ClientNotes, string ClientAddress, string ClientContact, int? Adults, int? Children, int? Infants, string ChildrenAges, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBookingsUpdates(Id, HotelId, ProviderId, AgencyId, Reference, FromDate, ToDate, DateBooked, Nights, NumRooms, TotalCost, TotalPrice, Status, PaidStatus, ClientTitle, ClientName, ClientSurname, ClientEmail, ClientNotes, ClientAddress, ClientContact, Adults, Children, Infants, ChildrenAges), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetalls/csv")]
        [HttpGet("/export/ZarenSoft/brokergetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetalls/excel")]
        [HttpGet("/export/ZarenSoft/brokergetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbrokertimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbrokertimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetBrokerTimestampBetweensToCSV(string BrokerTimestampStart, string BrokerTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetBrokerTimestampBetweens(BrokerTimestampStart, BrokerTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbrokertimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbrokertimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetBrokerTimestampBetweensToExcel(string BrokerTimestampStart, string BrokerTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetBrokerTimestampBetweens(BrokerTimestampStart, BrokerTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokeractives/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokeractives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerActivesToCSV(bool? BrokerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetByBrokerActives(BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokeractives/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokeractives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerActivesToExcel(bool? BrokerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetByBrokerActives(BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokercodes/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokercodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerCodesToCSV(string BrokerCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetByBrokerCodes(BrokerCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokercodes/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokercodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerCodesToExcel(string BrokerCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetByBrokerCodes(BrokerCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokernames/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokernames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerNamesToCSV(string BrokerName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetByBrokerNames(BrokerName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokernames/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokernames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerNamesToExcel(string BrokerName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetByBrokerNames(BrokerName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokertimestamps/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokertimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerTimestampsToCSV(string BrokerTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetByBrokerTimestamps(BrokerTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbybrokertimestamps/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbybrokertimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByBrokerTimestampsToExcel(string BrokerTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetByBrokerTimestamps(BrokerTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbyids/csv")]
        [HttpGet("/export/ZarenSoft/brokergetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokergetbyids/excel")]
        [HttpGet("/export/ZarenSoft/brokergetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokerinserts/csv")]
        [HttpGet("/export/ZarenSoft/brokerinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerInsertsToCSV(string BrokerCode, string BrokerName, string BrokerTimestamp, bool? BrokerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerInserts(BrokerCode, BrokerName, BrokerTimestamp, BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokerinserts/excel")]
        [HttpGet("/export/ZarenSoft/brokerinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerInsertsToExcel(string BrokerCode, string BrokerName, string BrokerTimestamp, bool? BrokerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerInserts(BrokerCode, BrokerName, BrokerTimestamp, BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokerupdates/csv")]
        [HttpGet("/export/ZarenSoft/brokerupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerUpdatesToCSV(int? Id, string BrokerCode, string BrokerName, string BrokerTimestamp, bool? BrokerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBrokerUpdates(Id, BrokerCode, BrokerName, BrokerTimestamp, BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/brokerupdates/excel")]
        [HttpGet("/export/ZarenSoft/brokerupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBrokerUpdatesToExcel(int? Id, string BrokerCode, string BrokerName, string BrokerTimestamp, bool? BrokerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBrokerUpdates(Id, BrokerCode, BrokerName, BrokerTimestamp, BrokerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxadults/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxadults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxAdultsToCSV(int? MaxAdults, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByMaxAdults(MaxAdults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxadults/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxadults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxAdultsToExcel(int? MaxAdults, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByMaxAdults(MaxAdults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxallotments/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxallotments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxAllotmentsToCSV(int? MaxAllotment, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByMaxAllotments(MaxAllotment), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxallotments/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxallotments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxAllotmentsToExcel(int? MaxAllotment, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByMaxAllotments(MaxAllotment), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxchildren/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxchildren/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxChildrenToCSV(int? MaxChildren, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByMaxChildren(MaxChildren), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxchildren/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxchildren/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxChildrenToExcel(int? MaxChildren, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByMaxChildren(MaxChildren), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxinfants/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxinfants/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxInfantsToCSV(int? MaxInfants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByMaxInfants(MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxinfants/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbymaxinfants/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByMaxInfantsToExcel(int? MaxInfants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByMaxInfants(MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsinserts/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsInsertsToCSV(string Name, string Description, int? MaxAllotment, int? MaxAdults, int? MaxChildren, int? MaxInfants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsInserts(Name, Description, MaxAllotment, MaxAdults, MaxChildren, MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsinserts/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsInsertsToExcel(string Name, string Description, int? MaxAllotment, int? MaxAdults, int? MaxChildren, int? MaxInfants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsInserts(Name, Description, MaxAllotment, MaxAdults, MaxChildren, MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsupdates/csv")]
        [HttpGet("/export/ZarenSoft/buyroomsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsUpdatesToCSV(int? Id, string Name, string Description, int? MaxAllotment, int? MaxAdults, int? MaxChildren, int? MaxInfants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetBuyRoomsUpdates(Id, Name, Description, MaxAllotment, MaxAdults, MaxChildren, MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/buyroomsupdates/excel")]
        [HttpGet("/export/ZarenSoft/buyroomsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportBuyRoomsUpdatesToExcel(int? Id, string Name, string Description, int? MaxAllotment, int? MaxAdults, int? MaxChildren, int? MaxInfants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetBuyRoomsUpdates(Id, Name, Description, MaxAllotment, MaxAdults, MaxChildren, MaxInfants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbycancelationrulesids/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbycancelationrulesids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByCancelationRulesIdsToCSV(int? CancelationRulesId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetByCancelationRulesIds(CancelationRulesId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbycancelationrulesids/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbycancelationrulesids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByCancelationRulesIdsToExcel(int? CancelationRulesId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetByCancelationRulesIds(CancelationRulesId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesInsertsToCSV(int? CancelationRulesId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesInserts(CancelationRulesId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesInsertsToExcel(int? CancelationRulesId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesInserts(CancelationRulesId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesUpdatesToCSV(int? Id, int? CancelationRulesId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancelationLanguagesUpdates(Id, CancelationRulesId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancelationlanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/cancelationlanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancelationLanguagesUpdatesToExcel(int? Id, int? CancelationRulesId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancelationLanguagesUpdates(Id, CancelationRulesId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycancellationseasonids/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycancellationseasonids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCancellationSeasonIdsToCSV(int? CancellationSeasonId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByCancellationSeasonIds(CancellationSeasonId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycancellationseasonids/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycancellationseasonids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCancellationSeasonIdsToExcel(int? CancellationSeasonId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByCancellationSeasonIds(CancellationSeasonId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosts/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCostsToCSV(decimal? Cost, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosts/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCostsToExcel(decimal? Cost, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosttypes/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCostTypesToCSV(int? CostType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByCostTypes(CostType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosttypes/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbycosttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByCostTypesToExcel(int? CostType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByCostTypes(CostType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyfromdays/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyfromdays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByFromDaysToCSV(int? FromDays, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByFromDays(FromDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyfromdays/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyfromdays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByFromDaysToExcel(int? FromDays, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByFromDays(FromDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbytodays/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbytodays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByToDaysToCSV(int? ToDays, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesGetByToDays(ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesgetbytodays/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesgetbytodays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesGetByToDaysToExcel(int? ToDays, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesGetByToDays(ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesinserts/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesInsertsToCSV(int? CancellationSeasonId, decimal? Cost, int? CostType, int? FromDays, int? ToDays, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesInserts(CancellationSeasonId, Cost, CostType, FromDays, ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesinserts/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesInsertsToExcel(int? CancellationSeasonId, decimal? Cost, int? CostType, int? FromDays, int? ToDays, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesInserts(CancellationSeasonId, Cost, CostType, FromDays, ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesupdates/csv")]
        [HttpGet("/export/ZarenSoft/cancellationrulesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesUpdatesToCSV(int? Id, int? CancellationSeasonId, decimal? Cost, int? CostType, int? FromDays, int? ToDays, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationRulesUpdates(Id, CancellationSeasonId, Cost, CostType, FromDays, ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationrulesupdates/excel")]
        [HttpGet("/export/ZarenSoft/cancellationrulesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationRulesUpdatesToExcel(int? Id, int? CancellationSeasonId, decimal? Cost, int? CostType, int? FromDays, int? ToDays, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationRulesUpdates(Id, CancellationSeasonId, Cost, CostType, FromDays, ToDays), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyenddates/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyenddates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByEndDatesToCSV(string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyenddates/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyenddates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByEndDatesToExcel(string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbystartdates/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbystartdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByStartDatesToCSV(string StartDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbystartdates/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetbystartdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetByStartDatesToExcel(string StartDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetenddatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetenddatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetEndDateBetweensToCSV(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetenddatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetenddatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetEndDateBetweensToExcel(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetstartdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetstartdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetStartDateBetweensToCSV(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsgetstartdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsgetstartdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsGetStartDateBetweensToExcel(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsinserts/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsInsertsToCSV(int? HotelId, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsInserts(HotelId, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsinserts/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsInsertsToExcel(int? HotelId, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsInserts(HotelId, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsupdates/csv")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsUpdatesToCSV(int? Id, int? HotelId, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCancellationSeasonsUpdates(Id, HotelId, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cancellationseasonsupdates/excel")]
        [HttpGet("/export/ZarenSoft/cancellationseasonsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCancellationSeasonsUpdatesToExcel(int? Id, int? HotelId, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCancellationSeasonsUpdates(Id, HotelId, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartactives/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtActivesToCSV(bool? CaRtActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetByCaRtActives(CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartactives/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtActivesToExcel(bool? CaRtActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetByCaRtActives(CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartcodes/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtCodesToCSV(string CaRtCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetByCaRtCodes(CaRtCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartcodes/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtCodesToExcel(string CaRtCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetByCaRtCodes(CaRtCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartnames/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtNamesToCSV(string CaRtName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetByCaRtNames(CaRtName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycartnames/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycartnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtNamesToExcel(string CaRtName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetByCaRtNames(CaRtName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycarttimestamps/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycarttimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtTimestampsToCSV(string CaRtTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetByCaRtTimestamps(CaRtTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbycarttimestamps/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbycarttimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByCaRtTimestampsToExcel(string CaRtTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetByCaRtTimestamps(CaRtTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetcarttimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsgetcarttimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetCaRtTimestampBetweensToCSV(string CaRtTimestampStart, string CaRtTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsGetCaRtTimestampBetweens(CaRtTimestampStart, CaRtTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsgetcarttimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsgetcarttimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsGetCaRtTimestampBetweensToExcel(string CaRtTimestampStart, string CaRtTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsGetCaRtTimestampBetweens(CaRtTimestampStart, CaRtTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsinserts/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsInsertsToCSV(string CaRtCode, string CaRtName, string CaRtTimestamp, bool? CaRtActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsInserts(CaRtCode, CaRtName, CaRtTimestamp, CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsinserts/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsInsertsToExcel(string CaRtCode, string CaRtName, string CaRtTimestamp, bool? CaRtActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsInserts(CaRtCode, CaRtName, CaRtTimestamp, CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsupdates/csv")]
        [HttpGet("/export/ZarenSoft/carrentalsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsUpdatesToCSV(int? Id, string CaRtCode, string CaRtName, string CaRtTimestamp, bool? CaRtActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentalsUpdates(Id, CaRtCode, CaRtName, CaRtTimestamp, CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentalsupdates/excel")]
        [HttpGet("/export/ZarenSoft/carrentalsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentalsUpdatesToExcel(int? Id, string CaRtCode, string CaRtName, string CaRtTimestamp, bool? CaRtActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentalsUpdates(Id, CaRtCode, CaRtName, CaRtTimestamp, CaRtActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidpickups/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidpickups/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByAirportIdPickUpsToCSV(int? AirportIdPickUp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByAirportIdPickUps(AirportIdPickUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidpickups/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidpickups/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByAirportIdPickUpsToExcel(int? AirportIdPickUp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByAirportIdPickUps(AirportIdPickUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidreturns/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidreturns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByAirportIdReturnsToCSV(int? AirportIdReturn, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByAirportIdReturns(AirportIdReturn), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidreturns/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyairportidreturns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByAirportIdReturnsToExcel(int? AirportIdReturn, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByAirportIdReturns(AirportIdReturn), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycareactives/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycareactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReActivesToCSV(bool? CaReActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReActives(CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycareactives/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycareactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReActivesToExcel(bool? CaReActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReActives(CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarebookdates/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarebookdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReBookDatesToCSV(string CaReBookDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReBookDates(CaReBookDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarebookdates/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarebookdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReBookDatesToExcel(string CaReBookDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReBookDates(CaReBookDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarepickupdates/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarepickupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaRePickUpDatesToCSV(string CaRePickUpDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaRePickUpDates(CaRePickUpDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarepickupdates/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarepickupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaRePickUpDatesToExcel(string CaRePickUpDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaRePickUpDates(CaRePickUpDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarerates/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarerates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReRatesToCSV(decimal? CaReRate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReRates(CaReRate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarerates/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarerates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReRatesToExcel(decimal? CaReRate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReRates(CaReRate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarereturndates/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarereturndates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReReturnDatesToCSV(string CaReReturnDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReReturnDates(CaReReturnDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycarereturndates/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycarereturndates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReReturnDatesToExcel(string CaReReturnDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReReturnDates(CaReReturnDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycaretaxes/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycaretaxes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReTaxesToCSV(decimal? CaReTax, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReTaxes(CaReTax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycaretaxes/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycaretaxes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReTaxesToExcel(decimal? CaReTax, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReTaxes(CaReTax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycaretimestamps/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycaretimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReTimestampsToCSV(string CaReTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaReTimestamps(CaReTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycaretimestamps/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycaretimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaReTimestampsToExcel(string CaReTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaReTimestamps(CaReTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycartids/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycartids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaRtIdsToCSV(int? CaRtId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaRtIds(CaRtId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycartids/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycartids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaRtIdsToExcel(int? CaRtId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaRtIds(CaRtId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycatyids/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycatyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaTyIdsToCSV(int? CaTyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCaTyIds(CaTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycatyids/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycatyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCaTyIdsToExcel(int? CaTyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCaTyIds(CaTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycurrencyids/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycurrencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCurrencyIdsToCSV(int? CurrencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbycurrencyids/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbycurrencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByCurrencyIdsToExcel(int? CurrencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbypnrids/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetbypnrids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByPnrIdsToCSV(int? PNRId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetbypnrids/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetbypnrids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetByPnrIdsToExcel(int? PNRId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarebookdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarebookdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReBookDateBetweensToCSV(string CaReBookDateStart, string CaReBookDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetCaReBookDateBetweens(CaReBookDateStart, CaReBookDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarebookdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarebookdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReBookDateBetweensToExcel(string CaReBookDateStart, string CaReBookDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetCaReBookDateBetweens(CaReBookDateStart, CaReBookDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarepickupdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarepickupdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaRePickUpDateBetweensToCSV(string CaRePickUpDateStart, string CaRePickUpDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetCaRePickUpDateBetweens(CaRePickUpDateStart, CaRePickUpDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarepickupdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarepickupdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaRePickUpDateBetweensToExcel(string CaRePickUpDateStart, string CaRePickUpDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetCaRePickUpDateBetweens(CaRePickUpDateStart, CaRePickUpDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarereturndatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarereturndatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReReturnDateBetweensToCSV(string CaReReturnDateStart, string CaReReturnDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetCaReReturnDateBetweens(CaReReturnDateStart, CaReReturnDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcarereturndatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetcarereturndatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReReturnDateBetweensToExcel(string CaReReturnDateStart, string CaReReturnDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetCaReReturnDateBetweens(CaReReturnDateStart, CaReReturnDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcaretimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/carrentsgetcaretimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReTimestampBetweensToCSV(string CaReTimestampStart, string CaReTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsGetCaReTimestampBetweens(CaReTimestampStart, CaReTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsgetcaretimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/carrentsgetcaretimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsGetCaReTimestampBetweensToExcel(string CaReTimestampStart, string CaReTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsGetCaReTimestampBetweens(CaReTimestampStart, CaReTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsinserts/csv")]
        [HttpGet("/export/ZarenSoft/carrentsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsInsertsToCSV(int? PNRId, int? CaTyId, int? CaRtId, int? AirportIdPickUp, int? AirportIdReturn, string CaRePickUpDate, string CaReReturnDate, decimal? CaReRate, decimal? CaReTax, int? CurrencyId, string CaReBookDate, string CaReTimestamp, bool? CaReActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsInserts(PNRId, CaTyId, CaRtId, AirportIdPickUp, AirportIdReturn, CaRePickUpDate, CaReReturnDate, CaReRate, CaReTax, CurrencyId, CaReBookDate, CaReTimestamp, CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsinserts/excel")]
        [HttpGet("/export/ZarenSoft/carrentsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsInsertsToExcel(int? PNRId, int? CaTyId, int? CaRtId, int? AirportIdPickUp, int? AirportIdReturn, string CaRePickUpDate, string CaReReturnDate, decimal? CaReRate, decimal? CaReTax, int? CurrencyId, string CaReBookDate, string CaReTimestamp, bool? CaReActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsInserts(PNRId, CaTyId, CaRtId, AirportIdPickUp, AirportIdReturn, CaRePickUpDate, CaReReturnDate, CaReRate, CaReTax, CurrencyId, CaReBookDate, CaReTimestamp, CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsupdates/csv")]
        [HttpGet("/export/ZarenSoft/carrentsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsUpdatesToCSV(int? Id, int? PNRId, int? CaTyId, int? CaRtId, int? AirportIdPickUp, int? AirportIdReturn, string CaRePickUpDate, string CaReReturnDate, decimal? CaReRate, decimal? CaReTax, int? CurrencyId, string CaReBookDate, string CaReTimestamp, bool? CaReActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarRentsUpdates(Id, PNRId, CaTyId, CaRtId, AirportIdPickUp, AirportIdReturn, CaRePickUpDate, CaReReturnDate, CaReRate, CaReTax, CurrencyId, CaReBookDate, CaReTimestamp, CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/carrentsupdates/excel")]
        [HttpGet("/export/ZarenSoft/carrentsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarRentsUpdatesToExcel(int? Id, int? PNRId, int? CaTyId, int? CaRtId, int? AirportIdPickUp, int? AirportIdReturn, string CaRePickUpDate, string CaReReturnDate, decimal? CaReRate, decimal? CaReTax, int? CurrencyId, string CaReBookDate, string CaReTimestamp, bool? CaReActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarRentsUpdates(Id, PNRId, CaTyId, CaRtId, AirportIdPickUp, AirportIdReturn, CaRePickUpDate, CaReReturnDate, CaReRate, CaReTax, CurrencyId, CaReBookDate, CaReTimestamp, CaReActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatyactives/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatyactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyActivesToCSV(bool? CaTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetByCaTyActives(CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatyactives/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatyactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyActivesToExcel(bool? CaTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetByCaTyActives(CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatycodes/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyCodesToCSV(string CaTyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetByCaTyCodes(CaTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatycodes/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyCodesToExcel(string CaTyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetByCaTyCodes(CaTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyDescriptionsToCSV(string CaTyDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetByCaTyDescriptions(CaTyDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyDescriptionsToExcel(string CaTyDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetByCaTyDescriptions(CaTyDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyTimestampsToCSV(string CaTyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetByCaTyTimestamps(CaTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbycatytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetbycatytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByCaTyTimestampsToExcel(string CaTyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetByCaTyTimestamps(CaTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetcatytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/cartypesgetcatytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetCaTyTimestampBetweensToCSV(string CaTyTimestampStart, string CaTyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesGetCaTyTimestampBetweens(CaTyTimestampStart, CaTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesgetcatytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/cartypesgetcatytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesGetCaTyTimestampBetweensToExcel(string CaTyTimestampStart, string CaTyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesGetCaTyTimestampBetweens(CaTyTimestampStart, CaTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/cartypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesInsertsToCSV(string CaTyCode, string CaTyDescription, string CaTyTimestamp, bool? CaTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesInserts(CaTyCode, CaTyDescription, CaTyTimestamp, CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/cartypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesInsertsToExcel(string CaTyCode, string CaTyDescription, string CaTyTimestamp, bool? CaTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesInserts(CaTyCode, CaTyDescription, CaTyTimestamp, CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/cartypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesUpdatesToCSV(int? Id, string CaTyCode, string CaTyDescription, string CaTyTimestamp, bool? CaTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCarTypesUpdates(Id, CaTyCode, CaTyDescription, CaTyTimestamp, CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/cartypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/cartypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCarTypesUpdatesToExcel(int? Id, string CaTyCode, string CaTyDescription, string CaTyTimestamp, bool? CaTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCarTypesUpdates(Id, CaTyCode, CaTyDescription, CaTyTimestamp, CaTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/citiesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/citiesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/citiesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/citiesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbylatitudes/csv")]
        [HttpGet("/export/ZarenSoft/citiesgetbylatitudes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByLatitudesToCSV(decimal? Latitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesGetByLatitudes(Latitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbylatitudes/excel")]
        [HttpGet("/export/ZarenSoft/citiesgetbylatitudes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByLatitudesToExcel(decimal? Latitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesGetByLatitudes(Latitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbylongitudes/csv")]
        [HttpGet("/export/ZarenSoft/citiesgetbylongitudes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByLongitudesToCSV(decimal? Longitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesGetByLongitudes(Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbylongitudes/excel")]
        [HttpGet("/export/ZarenSoft/citiesgetbylongitudes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByLongitudesToExcel(decimal? Longitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesGetByLongitudes(Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/citiesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/citiesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesinserts/csv")]
        [HttpGet("/export/ZarenSoft/citiesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesInsertsToCSV(string Name, decimal? Latitude, decimal? Longitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesInserts(Name, Latitude, Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesinserts/excel")]
        [HttpGet("/export/ZarenSoft/citiesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesInsertsToExcel(string Name, decimal? Latitude, decimal? Longitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesInserts(Name, Latitude, Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesupdates/csv")]
        [HttpGet("/export/ZarenSoft/citiesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesUpdatesToCSV(int? Id, string Name, decimal? Latitude, decimal? Longitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCitiesUpdates(Id, Name, Latitude, Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citiesupdates/excel")]
        [HttpGet("/export/ZarenSoft/citiesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCitiesUpdatesToExcel(int? Id, string Name, decimal? Latitude, decimal? Longitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCitiesUpdates(Id, Name, Latitude, Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/citymodelsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/citymodelsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetbycitynames/csv")]
        [HttpGet("/export/ZarenSoft/citymodelsgetbycitynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetByCityNamesToCSV(string CityName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModelsGetByCityNames(CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetbycitynames/excel")]
        [HttpGet("/export/ZarenSoft/citymodelsgetbycitynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetByCityNamesToExcel(string CityName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModelsGetByCityNames(CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/citymodelsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetByIdsToCSV(int? CityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModelsGetByIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/citymodelsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsGetByIdsToExcel(int? CityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModelsGetByIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsinserts/csv")]
        [HttpGet("/export/ZarenSoft/citymodelsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsInsertsToCSV(string CityName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModelsInserts(CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsinserts/excel")]
        [HttpGet("/export/ZarenSoft/citymodelsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsInsertsToExcel(string CityName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModelsInserts(CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsupdates/csv")]
        [HttpGet("/export/ZarenSoft/citymodelsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsUpdatesToCSV(int? CityId, string CityName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCityModelsUpdates(CityId, CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/citymodelsupdates/excel")]
        [HttpGet("/export/ZarenSoft/citymodelsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCityModelsUpdatesToExcel(int? CityId, string CityName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCityModelsUpdates(CityId, CityName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyagencyids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbyagencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByAgencyIdsToCSV(int? AgencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyagencyids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbyagencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByAgencyIdsToExcel(int? AgencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycodiids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycodiids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCoDiIdsToCSV(int? CoDiId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCoDiIds(CoDiId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycodiids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycodiids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCoDiIdsToExcel(int? CoDiId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCoDiIds(CoDiId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycogrids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycogrids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCoGrIdsToCSV(int? CoGrId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCoGrIds(CoGrId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycogrids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycogrids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCoGrIdsToExcel(int? CoGrId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCoGrIds(CoGrId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanyactives/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanyactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyActivesToCSV(bool? CompanyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCompanyActives(CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanyactives/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanyactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyActivesToExcel(bool? CompanyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCompanyActives(CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanycodes/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyCodesToCSV(string CompanyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCompanyCodes(CompanyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanycodes/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyCodesToExcel(string CompanyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCompanyCodes(CompanyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanyrepresentatives/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanyrepresentatives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyRepresentativesToCSV(string CompanyRepresentative, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCompanyRepresentatives(CompanyRepresentative), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanyrepresentatives/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanyrepresentatives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyRepresentativesToExcel(string CompanyRepresentative, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCompanyRepresentatives(CompanyRepresentative), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyTimestampsToCSV(string CompanyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCompanyTimestamps(CompanyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycompanytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycompanytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCompanyTimestampsToExcel(string CompanyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCompanyTimestamps(CompanyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycountryids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycountryids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCountryIdsToCSV(int? CountryId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycountryids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycountryids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCountryIdsToExcel(int? CountryId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycurrencyids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbycurrencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCurrencyIdsToCSV(int? CurrencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbycurrencyids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbycurrencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByCurrencyIdsToExcel(int? CurrencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByCurrencyIds(CurrencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyinseids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbyinseids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByInSeIdsToCSV(int? InSeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByInSeIds(InSeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbyinseids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbyinseids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByInSeIdsToExcel(int? InSeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByInSeIds(InSeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbylanguagesids/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetbylanguagesids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByLanguagesIdsToCSV(int? LanguagesId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetByLanguagesIds(LanguagesId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetbylanguagesids/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetbylanguagesids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetByLanguagesIdsToExcel(int? LanguagesId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetByLanguagesIds(LanguagesId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetcompanytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/companiesgetcompanytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetCompanyTimestampBetweensToCSV(string CompanyTimestampStart, string CompanyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesGetCompanyTimestampBetweens(CompanyTimestampStart, CompanyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesgetcompanytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/companiesgetcompanytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesGetCompanyTimestampBetweensToExcel(string CompanyTimestampStart, string CompanyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesGetCompanyTimestampBetweens(CompanyTimestampStart, CompanyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesinserts/csv")]
        [HttpGet("/export/ZarenSoft/companiesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesInsertsToCSV(string CompanyCode, int? AgencyId, int? CountryId, string CompanyRepresentative, int? CoGrId, int? CoDiId, int? LanguagesId, int? CurrencyId, int? InSeId, string CompanyTimestamp, bool? CompanyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesInserts(CompanyCode, AgencyId, CountryId, CompanyRepresentative, CoGrId, CoDiId, LanguagesId, CurrencyId, InSeId, CompanyTimestamp, CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesinserts/excel")]
        [HttpGet("/export/ZarenSoft/companiesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesInsertsToExcel(string CompanyCode, int? AgencyId, int? CountryId, string CompanyRepresentative, int? CoGrId, int? CoDiId, int? LanguagesId, int? CurrencyId, int? InSeId, string CompanyTimestamp, bool? CompanyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesInserts(CompanyCode, AgencyId, CountryId, CompanyRepresentative, CoGrId, CoDiId, LanguagesId, CurrencyId, InSeId, CompanyTimestamp, CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesupdates/csv")]
        [HttpGet("/export/ZarenSoft/companiesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesUpdatesToCSV(int? Id, string CompanyCode, int? AgencyId, int? CountryId, string CompanyRepresentative, int? CoGrId, int? CoDiId, int? LanguagesId, int? CurrencyId, int? InSeId, string CompanyTimestamp, bool? CompanyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCompaniesUpdates(Id, CompanyCode, AgencyId, CountryId, CompanyRepresentative, CoGrId, CoDiId, LanguagesId, CurrencyId, InSeId, CompanyTimestamp, CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/companiesupdates/excel")]
        [HttpGet("/export/ZarenSoft/companiesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCompaniesUpdatesToExcel(int? Id, string CompanyCode, int? AgencyId, int? CountryId, string CompanyRepresentative, int? CoGrId, int? CoDiId, int? LanguagesId, int? CurrencyId, int? InSeId, string CompanyTimestamp, bool? CompanyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCompaniesUpdates(Id, CompanyCode, AgencyId, CountryId, CompanyRepresentative, CoGrId, CoDiId, LanguagesId, CurrencyId, InSeId, CompanyTimestamp, CompanyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyemails/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetbyemails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByEmailsToCSV(string Email, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetByEmails(Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyemails/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetbyemails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByEmailsToExcel(string Email, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetByEmails(Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyfaxnumbers/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetbyfaxnumbers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByFaxNumbersToCSV(string FaxNumber, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetByFaxNumbers(FaxNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyfaxnumbers/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetbyfaxnumbers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByFaxNumbersToExcel(string FaxNumber, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetByFaxNumbers(FaxNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbytelnumbers/csv")]
        [HttpGet("/export/ZarenSoft/contactsgetbytelnumbers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByTelNumbersToCSV(string TelNumber, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsGetByTelNumbers(TelNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsgetbytelnumbers/excel")]
        [HttpGet("/export/ZarenSoft/contactsgetbytelnumbers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsGetByTelNumbersToExcel(string TelNumber, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsGetByTelNumbers(TelNumber), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsinserts/csv")]
        [HttpGet("/export/ZarenSoft/contactsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsInsertsToCSV(string Name, string TelNumber, string FaxNumber, string Email, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsInserts(Name, TelNumber, FaxNumber, Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsinserts/excel")]
        [HttpGet("/export/ZarenSoft/contactsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsInsertsToExcel(string Name, string TelNumber, string FaxNumber, string Email, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsInserts(Name, TelNumber, FaxNumber, Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsupdates/csv")]
        [HttpGet("/export/ZarenSoft/contactsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsUpdatesToCSV(int? Id, string Name, string TelNumber, string FaxNumber, string Email, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetContactsUpdates(Id, Name, TelNumber, FaxNumber, Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/contactsupdates/excel")]
        [HttpGet("/export/ZarenSoft/contactsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportContactsUpdatesToExcel(int? Id, string Name, string TelNumber, string FaxNumber, string Email, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetContactsUpdates(Id, Name, TelNumber, FaxNumber, Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetalls/csv")]
        [HttpGet("/export/ZarenSoft/countrygetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetalls/excel")]
        [HttpGet("/export/ZarenSoft/countrygetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyabbreviations/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyabbreviations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByAbbreviationsToCSV(string Abbreviation, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByAbbreviations(Abbreviation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyabbreviations/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyabbreviations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByAbbreviationsToExcel(string Abbreviation, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByAbbreviations(Abbreviation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyareas/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyareas/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByAreasToCSV(string Area, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByAreas(Area), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyareas/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyareas/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByAreasToExcel(string Area, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByAreas(Area), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbybarcodes/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbybarcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByBarcodesToCSV(string Barcode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByBarcodes(Barcode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbybarcodes/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbybarcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByBarcodesToExcel(string Barcode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByBarcodes(Barcode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycallingcodes/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycallingcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCallingCodesToCSV(string CallingCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByCallingCodes(CallingCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycallingcodes/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycallingcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCallingCodesToExcel(string CallingCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByCallingCodes(CallingCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycities/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCitiesToCSV(string City, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByCities(City), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycities/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCitiesToExcel(string City, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByCities(City), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycontinents/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycontinents/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByContinentsToCSV(string Continent, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByContinents(Continent), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycontinents/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycontinents/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByContinentsToExcel(string Continent, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByContinents(Continent), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycostlines/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycostlines/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCostLinesToCSV(string CostLine, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByCostLines(CostLine), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycostlines/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycostlines/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCostLinesToExcel(string CostLine, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByCostLines(CostLine), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycurrencycodes/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycurrencycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCurrencyCodesToCSV(string CurrencyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByCurrencyCodes(CurrencyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycurrencycodes/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycurrencycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCurrencyCodesToExcel(string CurrencyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByCurrencyCodes(CurrencyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycurrencynames/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbycurrencynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCurrencyNamesToCSV(string CurrencyName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByCurrencyNames(CurrencyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbycurrencynames/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbycurrencynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByCurrencyNamesToExcel(string CurrencyName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByCurrencyNames(CurrencyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydefaultlanguageids/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbydefaultlanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDefaultLanguageIdsToCSV(int? DefaultLanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByDefaultLanguageIds(DefaultLanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydefaultlanguageids/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbydefaultlanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDefaultLanguageIdsToExcel(int? DefaultLanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByDefaultLanguageIds(DefaultLanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydensities/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbydensities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDensitiesToCSV(string Density, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByDensities(Density), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydensities/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbydensities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDensitiesToExcel(string Density, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByDensities(Density), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydishes/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbydishes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDishesToCSV(string Dish, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByDishes(Dish), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydishes/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbydishes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDishesToExcel(string Dish, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByDishes(Dish), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydomaintlds/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbydomaintlds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDomainTldsToCSV(string DomainTld, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByDomainTlds(DomainTld), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbydomaintlds/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbydomaintlds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByDomainTldsToExcel(string DomainTld, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByDomainTlds(DomainTld), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyeasts/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyeasts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByEastsToCSV(string East, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByEasts(East), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyeasts/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyeasts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByEastsToExcel(string East, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByEasts(East), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyelevations/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyelevations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByElevationsToCSV(string Elevation, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByElevations(Elevation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyelevations/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyelevations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByElevationsToExcel(string Elevation, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByElevations(Elevation), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyexpectancies/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyexpectancies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByExpectanciesToCSV(string Expectancy, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByExpectancies(Expectancy), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyexpectancies/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyexpectancies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByExpectanciesToExcel(string Expectancy, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByExpectancies(Expectancy), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyflagbase64s/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyflagbase64s/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByFlagBase64SToCSV(string FlagBase64, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByFlagBase64S(FlagBase64), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyflagbase64s/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyflagbase64s/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByFlagBase64SToExcel(string FlagBase64, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByFlagBase64S(FlagBase64), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbygovernments/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbygovernments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByGovernmentsToCSV(string Government, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByGovernments(Government), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbygovernments/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbygovernments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByGovernmentsToExcel(string Government, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByGovernments(Government), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyhasfraudrisks/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyhasfraudrisks/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHasFraudRisksToCSV(bool? HasFraudRisk, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByHasFraudRisks(HasFraudRisk), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyhasfraudrisks/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyhasfraudrisks/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHasFraudRisksToExcel(bool? HasFraudRisk, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByHasFraudRisks(HasFraudRisk), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyhasmanuelregistrations/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyhasmanuelregistrations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHasManuelRegistrationsToCSV(bool? HasManuelRegistration, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByHasManuelRegistrations(HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyhasmanuelregistrations/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyhasmanuelregistrations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHasManuelRegistrationsToExcel(bool? HasManuelRegistration, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByHasManuelRegistrations(HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyheights/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyheights/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHeightsToCSV(string Height, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByHeights(Height), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyheights/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyheights/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByHeightsToExcel(string Height, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByHeights(Height), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyids/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyids/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyindependences/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyindependences/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIndependencesToCSV(string Independence, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByIndependences(Independence), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyindependences/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyindependences/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIndependencesToExcel(string Independence, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByIndependences(Independence), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyisos/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyisos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIsosToCSV(string Iso, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByIsos(Iso), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyisos/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyisos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByIsosToExcel(string Iso, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByIsos(Iso), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylandlockeds/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbylandlockeds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLandlockedsToCSV(string Landlocked, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByLandlockeds(Landlocked), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylandlockeds/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbylandlockeds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLandlockedsToExcel(string Landlocked, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByLandlockeds(Landlocked), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylanguagesjsons/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbylanguagesjsons/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLanguagesJsonsToCSV(string LanguagesJSON, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByLanguagesJsons(LanguagesJSON), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylanguagesjsons/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbylanguagesjsons/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLanguagesJsonsToExcel(string LanguagesJSON, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByLanguagesJsons(LanguagesJSON), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylocations/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbylocations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLocationsToCSV(string Location, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByLocations(Location), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbylocations/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbylocations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByLocationsToExcel(string Location, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByLocations(Location), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbynames/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbynames/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbynorths/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbynorths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByNorthsToCSV(string North, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByNorths(North), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbynorths/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbynorths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByNorthsToExcel(string North, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByNorths(North), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbypopulations/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbypopulations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByPopulationsToCSV(string Population, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByPopulations(Population), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbypopulations/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbypopulations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByPopulationsToExcel(string Population, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByPopulations(Population), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyreligions/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyreligions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByReligionsToCSV(string Religion, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByReligions(Religion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyreligions/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyreligions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByReligionsToExcel(string Religion, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByReligions(Religion), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyshortnames/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbyshortnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByShortNamesToCSV(string ShortName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByShortNames(ShortName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbyshortnames/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbyshortnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByShortNamesToExcel(string ShortName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByShortNames(ShortName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbysouths/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbysouths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetBySouthsToCSV(string South, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetBySouths(South), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbysouths/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbysouths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetBySouthsToExcel(string South, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetBySouths(South), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbysymbols/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbysymbols/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetBySymbolsToCSV(string Symbol, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetBySymbols(Symbol), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbysymbols/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbysymbols/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetBySymbolsToExcel(string Symbol, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetBySymbols(Symbol), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbytemperatures/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbytemperatures/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByTemperaturesToCSV(string Temperature, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByTemperatures(Temperature), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbytemperatures/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbytemperatures/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByTemperaturesToExcel(string Temperature, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByTemperatures(Temperature), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbywests/csv")]
        [HttpGet("/export/ZarenSoft/countrygetbywests/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByWestsToCSV(string West, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryGetByWests(West), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countrygetbywests/excel")]
        [HttpGet("/export/ZarenSoft/countrygetbywests/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryGetByWestsToExcel(string West, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryGetByWests(West), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countryinserts/csv")]
        [HttpGet("/export/ZarenSoft/countryinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryInsertsToCSV(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, bool? HasFraudRisk, bool? HasManuelRegistration, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryInserts(Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId, HasFraudRisk, HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countryinserts/excel")]
        [HttpGet("/export/ZarenSoft/countryinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryInsertsToExcel(string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, bool? HasFraudRisk, bool? HasManuelRegistration, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryInserts(Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId, HasFraudRisk, HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countryupdates/csv")]
        [HttpGet("/export/ZarenSoft/countryupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryUpdatesToCSV(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, bool? HasFraudRisk, bool? HasManuelRegistration, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCountryUpdates(Id, Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId, HasFraudRisk, HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/countryupdates/excel")]
        [HttpGet("/export/ZarenSoft/countryupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCountryUpdatesToExcel(int? Id, string Name, string ShortName, string Temperature, string Area, string Religion, string Location, string Population, string Density, string Symbol, string Abbreviation, string FlagBase64, string Expectancy, string Dish, string LanguagesJSON, string Landlocked, string Iso, string Independence, string Government, string North, string South, string West, string East, string Elevation, string DomainTld, string CurrencyName, string CurrencyCode, string CostLine, string Continent, string City, string CallingCode, string Barcode, string Height, int? DefaultLanguageId, bool? HasFraudRisk, bool? HasManuelRegistration, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCountryUpdates(Id, Name, ShortName, Temperature, Area, Religion, Location, Population, Density, Symbol, Abbreviation, FlagBase64, Expectancy, Dish, LanguagesJSON, Landlocked, Iso, Independence, Government, North, South, West, East, Elevation, DomainTld, CurrencyName, CurrencyCode, CostLine, Continent, City, CallingCode, Barcode, Height, DefaultLanguageId, HasFraudRisk, HasManuelRegistration), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetalls/csv")]
        [HttpGet("/export/ZarenSoft/currencygetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetalls/excel")]
        [HttpGet("/export/ZarenSoft/currencygetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencyactives/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencyactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyActivesToCSV(bool? CurrencyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByCurrencyActives(CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencyactives/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencyactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyActivesToExcel(bool? CurrencyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByCurrencyActives(CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodes/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyCodesToCSV(string CurrencyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByCurrencyCodes(CurrencyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodes/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyCodesToExcel(string CurrencyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByCurrencyCodes(CurrencyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodeiata/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodeiata/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyCodeIataToCSV(string CurrencyCodeIata, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByCurrencyCodeIata(CurrencyCodeIata), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodeiata/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencycodeiata/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyCodeIataToExcel(string CurrencyCodeIata, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByCurrencyCodeIata(CurrencyCodeIata), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencynames/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyNamesToCSV(string CurrencyName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByCurrencyNames(CurrencyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencynames/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyNamesToExcel(string CurrencyName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByCurrencyNames(CurrencyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyTimestampsToCSV(string CurrencyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByCurrencyTimestamps(CurrencyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbycurrencytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbycurrencytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByCurrencyTimestampsToExcel(string CurrencyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByCurrencyTimestamps(CurrencyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbyids/csv")]
        [HttpGet("/export/ZarenSoft/currencygetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetbyids/excel")]
        [HttpGet("/export/ZarenSoft/currencygetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetcurrencytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/currencygetcurrencytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetCurrencyTimestampBetweensToCSV(string CurrencyTimestampStart, string CurrencyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyGetCurrencyTimestampBetweens(CurrencyTimestampStart, CurrencyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencygetcurrencytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/currencygetcurrencytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyGetCurrencyTimestampBetweensToExcel(string CurrencyTimestampStart, string CurrencyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyGetCurrencyTimestampBetweens(CurrencyTimestampStart, CurrencyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencyinserts/csv")]
        [HttpGet("/export/ZarenSoft/currencyinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyInsertsToCSV(string CurrencyCode, string CurrencyCodeIata, string CurrencyName, string CurrencyTimestamp, bool? CurrencyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyInserts(CurrencyCode, CurrencyCodeIata, CurrencyName, CurrencyTimestamp, CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencyinserts/excel")]
        [HttpGet("/export/ZarenSoft/currencyinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyInsertsToExcel(string CurrencyCode, string CurrencyCodeIata, string CurrencyName, string CurrencyTimestamp, bool? CurrencyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyInserts(CurrencyCode, CurrencyCodeIata, CurrencyName, CurrencyTimestamp, CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencyupdates/csv")]
        [HttpGet("/export/ZarenSoft/currencyupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyUpdatesToCSV(int? Id, string CurrencyCode, string CurrencyCodeIata, string CurrencyName, string CurrencyTimestamp, bool? CurrencyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCurrencyUpdates(Id, CurrencyCode, CurrencyCodeIata, CurrencyName, CurrencyTimestamp, CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/currencyupdates/excel")]
        [HttpGet("/export/ZarenSoft/currencyupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCurrencyUpdatesToExcel(int? Id, string CurrencyCode, string CurrencyCodeIata, string CurrencyName, string CurrencyTimestamp, bool? CurrencyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCurrencyUpdates(Id, CurrencyCode, CurrencyCodeIata, CurrencyName, CurrencyTimestamp, CurrencyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetalls/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetalls/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyagentcodes/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyagentcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByAgentCodesToCSV(string AgentCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByAgentCodes(AgentCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyagentcodes/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyagentcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByAgentCodesToExcel(string AgentCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByAgentCodes(AgentCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyalternativeemailids/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyalternativeemailids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByAlternativeEmailIdsToCSV(string AlternativeEmailId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByAlternativeEmailIds(AlternativeEmailId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyalternativeemailids/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyalternativeemailids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByAlternativeEmailIdsToExcel(string AlternativeEmailId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByAlternativeEmailIds(AlternativeEmailId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbybookingstatuses/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbybookingstatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByBookingStatusesToCSV(int? BookingStatus, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByBookingStatuses(BookingStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbybookingstatuses/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbybookingstatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByBookingStatusesToExcel(int? BookingStatus, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByBookingStatuses(BookingStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbycountrycodes/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbycountrycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByCountryCodesToCSV(string CountryCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByCountryCodes(CountryCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbycountrycodes/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbycountrycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByCountryCodesToExcel(string CountryCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByCountryCodes(CountryCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbycustomeridns/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbycustomeridns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbycustomeridNsToCSV(int? CustomerId_N, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerinformationgetbycustomeridNs(CustomerId_N), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbycustomeridns/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbycustomeridns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbycustomeridNsToExcel(int? CustomerId_N, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerinformationgetbycustomeridNs(CustomerId_N), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbydateofbirths/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbydateofbirths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByDateOfBirthsToCSV(string DateOfBirth, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByDateOfBirths(DateOfBirth), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbydateofbirths/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbydateofbirths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByDateOfBirthsToExcel(string DateOfBirth, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByDateOfBirths(DateOfBirth), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyemailids/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyemailids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByEmailIdsToCSV(string EmailId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByEmailIds(EmailId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyemailids/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyemailids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByEmailIdsToExcel(string EmailId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByEmailIds(EmailId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfaxes/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfaxes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByFaxesToCSV(string Fax, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByFaxes(Fax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfaxes/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfaxes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByFaxesToExcel(string Fax, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByFaxes(Fax), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfileids/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfileids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbyfileIdsToCSV(int? FILE_ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfileids/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfileids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbyfileIdsToExcel(int? FILE_ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfilenames/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfilenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbyfileNamesToCSV(string FILE_NAME, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfilenames/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfilenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerinformationgetbyfileNamesToExcel(string FILE_NAME, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfirstnames/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfirstnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByFirstNamesToCSV(string FirstName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByFirstNames(FirstName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyfirstnames/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyfirstnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByFirstNamesToExcel(string FirstName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByFirstNames(FirstName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbygenders/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbygenders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByGendersToCSV(string Gender, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByGenders(Gender), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbygenders/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbygenders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByGendersToExcel(string Gender, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByGenders(Gender), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbylanguagecodes/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbylanguagecodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByLanguageCodesToCSV(string LanguageCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByLanguageCodes(LanguageCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbylanguagecodes/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbylanguagecodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByLanguageCodesToExcel(string LanguageCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByLanguageCodes(LanguageCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbylastnames/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbylastnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByLastNamesToCSV(string LastName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByLastNames(LastName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbylastnames/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbylastnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByLastNamesToExcel(string LastName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByLastNames(LastName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbymobiles/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbymobiles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByMobilesToCSV(string Mobile, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByMobiles(Mobile), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbymobiles/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbymobiles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByMobilesToExcel(string Mobile, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByMobiles(Mobile), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbymodificationdates/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbymodificationdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByModificationDatesToCSV(string ModificationDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByModificationDates(ModificationDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbymodificationdates/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbymodificationdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByModificationDatesToExcel(string ModificationDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByModificationDates(ModificationDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbynationalitycodes/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbynationalitycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByNationalityCodesToCSV(int? NationalityCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByNationalityCodes(NationalityCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbynationalitycodes/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbynationalitycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByNationalityCodesToExcel(int? NationalityCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByNationalityCodes(NationalityCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyofficetelephones/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyofficetelephones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByOfficeTelephonesToCSV(string OfficeTelephone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByOfficeTelephones(OfficeTelephone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyofficetelephones/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyofficetelephones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByOfficeTelephonesToExcel(string OfficeTelephone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByOfficeTelephones(OfficeTelephone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyrecorddatestamps/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyrecorddatestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByRecordDateStampsToCSV(string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbyrecorddatestamps/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbyrecorddatestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByRecordDateStampsToExcel(string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytelephones/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytelephones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTelephonesToCSV(string Telephone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTelephones(Telephone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytelephones/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytelephones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTelephonesToExcel(string Telephone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTelephones(Telephone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytitles/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTitlesToCSV(string Title, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytitles/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTitlesToExcel(string Title, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalfares/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalFaresToCSV(decimal? TotalFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTotalFares(TotalFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalfares/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalFaresToExcel(decimal? TotalFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTotalFares(TotalFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalinfantcounts/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalinfantcounts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalInfantcountsToCSV(decimal? TotalInfantcount, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTotalInfantcounts(TotalInfantcount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalinfantcounts/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalinfantcounts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalInfantcountsToExcel(decimal? TotalInfantcount, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTotalInfantcounts(TotalInfantcount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalpaxcounts/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalpaxcounts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalpaxcountsToCSV(decimal? Totalpaxcount, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTotalpaxcounts(Totalpaxcount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalpaxcounts/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotalpaxcounts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalpaxcountsToExcel(decimal? Totalpaxcount, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTotalpaxcounts(Totalpaxcount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotaltaxchgs/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotaltaxchgs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalTaxChgsToCSV(decimal? TotalTaxChg, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetByTotalTaxChgs(TotalTaxChg), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetbytotaltaxchgs/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetbytotaltaxchgs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetByTotalTaxChgsToExcel(decimal? TotalTaxChg, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetByTotalTaxChgs(TotalTaxChg), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetdateofbirthbetweens/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetdateofbirthbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetDateOfBirthBetweensToCSV(string DateOfBirthStart, string DateOfBirthEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetDateOfBirthBetweens(DateOfBirthStart, DateOfBirthEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetdateofbirthbetweens/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetdateofbirthbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetDateOfBirthBetweensToExcel(string DateOfBirthStart, string DateOfBirthEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetDateOfBirthBetweens(DateOfBirthStart, DateOfBirthEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetmodificationdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetmodificationdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetModificationDateBetweensToCSV(string ModificationDateStart, string ModificationDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetModificationDateBetweens(ModificationDateStart, ModificationDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetmodificationdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetmodificationdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetModificationDateBetweensToExcel(string ModificationDateStart, string ModificationDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetModificationDateBetweens(ModificationDateStart, ModificationDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetrecorddatestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationgetrecorddatestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetRecordDateStampBetweensToCSV(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationgetrecorddatestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationgetrecorddatestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationGetRecordDateStampBetweensToExcel(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationinserts/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationInsertsToCSV(int? CustomerId, string EmailId, string Title, string FirstName, string LastName, string Gender, string AlternativeEmailId, string Telephone, string Mobile, string CountryCode, string LanguageCode, string OfficeTelephone, string DateOfBirth, string Fax, int? NationalityCode, string AgentCode, int? CustomerId_N, decimal? Totalpaxcount, decimal? TotalInfantcount, decimal? TotalFare, decimal? TotalTaxChg, int? BookingStatus, string ModificationDate, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationInserts(CustomerId, EmailId, Title, FirstName, LastName, Gender, AlternativeEmailId, Telephone, Mobile, CountryCode, LanguageCode, OfficeTelephone, DateOfBirth, Fax, NationalityCode, AgentCode, CustomerId_N, Totalpaxcount, TotalInfantcount, TotalFare, TotalTaxChg, BookingStatus, ModificationDate, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationinserts/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationInsertsToExcel(int? CustomerId, string EmailId, string Title, string FirstName, string LastName, string Gender, string AlternativeEmailId, string Telephone, string Mobile, string CountryCode, string LanguageCode, string OfficeTelephone, string DateOfBirth, string Fax, int? NationalityCode, string AgentCode, int? CustomerId_N, decimal? Totalpaxcount, decimal? TotalInfantcount, decimal? TotalFare, decimal? TotalTaxChg, int? BookingStatus, string ModificationDate, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationInserts(CustomerId, EmailId, Title, FirstName, LastName, Gender, AlternativeEmailId, Telephone, Mobile, CountryCode, LanguageCode, OfficeTelephone, DateOfBirth, Fax, NationalityCode, AgentCode, CustomerId_N, Totalpaxcount, TotalInfantcount, TotalFare, TotalTaxChg, BookingStatus, ModificationDate, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationupdates/csv")]
        [HttpGet("/export/ZarenSoft/customerinformationupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationUpdatesToCSV(int? Id, int? CustomerId, string EmailId, string Title, string FirstName, string LastName, string Gender, string AlternativeEmailId, string Telephone, string Mobile, string CountryCode, string LanguageCode, string OfficeTelephone, string DateOfBirth, string Fax, int? NationalityCode, string AgentCode, int? CustomerId_N, decimal? Totalpaxcount, decimal? TotalInfantcount, decimal? TotalFare, decimal? TotalTaxChg, int? BookingStatus, string ModificationDate, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetCustomerInformationUpdates(Id, CustomerId, EmailId, Title, FirstName, LastName, Gender, AlternativeEmailId, Telephone, Mobile, CountryCode, LanguageCode, OfficeTelephone, DateOfBirth, Fax, NationalityCode, AgentCode, CustomerId_N, Totalpaxcount, TotalInfantcount, TotalFare, TotalTaxChg, BookingStatus, ModificationDate, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/customerinformationupdates/excel")]
        [HttpGet("/export/ZarenSoft/customerinformationupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportCustomerInformationUpdatesToExcel(int? Id, int? CustomerId, string EmailId, string Title, string FirstName, string LastName, string Gender, string AlternativeEmailId, string Telephone, string Mobile, string CountryCode, string LanguageCode, string OfficeTelephone, string DateOfBirth, string Fax, int? NationalityCode, string AgentCode, int? CustomerId_N, decimal? Totalpaxcount, decimal? TotalInfantcount, decimal? TotalFare, decimal? TotalTaxChg, int? BookingStatus, string ModificationDate, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetCustomerInformationUpdates(Id, CustomerId, EmailId, Title, FirstName, LastName, Gender, AlternativeEmailId, Telephone, Mobile, CountryCode, LanguageCode, OfficeTelephone, DateOfBirth, Fax, NationalityCode, AgentCode, CustomerId_N, Totalpaxcount, TotalInfantcount, TotalFare, TotalTaxChg, BookingStatus, ModificationDate, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmscolumntitles/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmscolumntitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByCmsColumnTitlesToCSV(string CMSColumnTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByCmsColumnTitles(CMSColumnTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmscolumntitles/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmscolumntitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByCmsColumnTitlesToExcel(string CMSColumnTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByCmsColumnTitles(CMSColumnTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmsinputtypes/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmsinputtypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByCmsInputTypesToCSV(int? CMSInputType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByCmsInputTypes(CMSInputType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmsinputtypes/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycmsinputtypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByCmsInputTypesToExcel(int? CMSInputType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByCmsInputTypes(CMSInputType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycolumnnames/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycolumnnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByColumnNamesToCSV(string ColumnName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByColumnNames(ColumnName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycolumnnames/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbycolumnnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByColumnNamesToExcel(string ColumnName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByColumnNames(ColumnName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbydbtypes/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbydbtypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByDbTypesToCSV(int? DbType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByDbTypes(DbType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbydbtypes/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbydbtypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByDbTypesToExcel(int? DbType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByDbTypes(DbType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyerrordescriptions/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyerrordescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByErrorDescriptionsToCSV(string ErrorDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByErrorDescriptions(ErrorDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyerrordescriptions/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyerrordescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByErrorDescriptionsToExcel(string ErrorDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByErrorDescriptions(ErrorDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasdefaultvalues/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasdefaultvalues/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByHasDefaultValuesToCSV(bool? HasDefaultValue, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByHasDefaultValues(HasDefaultValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasdefaultvalues/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasdefaultvalues/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByHasDefaultValuesToExcel(bool? HasDefaultValue, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByHasDefaultValues(HasDefaultValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasshowedonlists/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasshowedonlists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByHasShowedOnListsToCSV(bool? HasShowedOnList, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByHasShowedOnLists(HasShowedOnList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasshowedonlists/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyhasshowedonlists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByHasShowedOnListsToExcel(bool? HasShowedOnList, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByHasShowedOnLists(HasShowedOnList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisfilters/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisfilters/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsFiltersToCSV(bool? IsFilter, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsFilters(IsFilter), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisfilters/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisfilters/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsFiltersToExcel(bool? IsFilter, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsFilters(IsFilter), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyislanguagefields/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyislanguagefields/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsLanguageFieldsToCSV(bool? IsLanguageField, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsLanguageFields(IsLanguageField), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyislanguagefields/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyislanguagefields/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsLanguageFieldsToExcel(bool? IsLanguageField, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsLanguageFields(IsLanguageField), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisnullables/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisnullables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsNullablesToCSV(bool? IsNullable, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsNullables(IsNullable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisnullables/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisnullables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsNullablesToExcel(bool? IsNullable, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsNullables(IsNullable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisprimaries/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisprimaries/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsPrimariesToCSV(bool? IsPrimary, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsPrimaries(IsPrimary), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisprimaries/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisprimaries/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsPrimariesToExcel(bool? IsPrimary, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsPrimaries(IsPrimary), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyispublics/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyispublics/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsPublicsToCSV(bool? IsPublic, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsPublics(IsPublic), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyispublics/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyispublics/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsPublicsToExcel(bool? IsPublic, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsPublics(IsPublic), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisrequireds/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisrequireds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsRequiredsToCSV(bool? IsRequired, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsRequireds(IsRequired), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisrequireds/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisrequireds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsRequiredsToExcel(bool? IsRequired, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsRequireds(IsRequired), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisroutingfields/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisroutingfields/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsRoutingFieldsToCSV(bool? IsRoutingField, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsRoutingFields(IsRoutingField), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisroutingfields/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyisroutingfields/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsRoutingFieldsToExcel(bool? IsRoutingField, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsRoutingFields(IsRoutingField), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyissecondries/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyissecondries/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsSecondriesToCSV(bool? IsSecondry, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByIsSecondries(IsSecondry), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyissecondries/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyissecondries/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByIsSecondriesToExcel(bool? IsSecondry, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByIsSecondries(IsSecondry), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyjsonnames/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyjsonnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByJsonNamesToCSV(string JsonName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByJsonNames(JsonName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyjsonnames/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyjsonnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByJsonNamesToExcel(string JsonName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByJsonNames(JsonName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbymaxlengths/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbymaxlengths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByMaxLengthsToCSV(int? MaxLength, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByMaxLengths(MaxLength), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbymaxlengths/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbymaxlengths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByMaxLengthsToExcel(int? MaxLength, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByMaxLengths(MaxLength), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyparameterdescriptions/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyparameterdescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByParameterDescriptionsToCSV(string ParameterDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByParameterDescriptions(ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyparameterdescriptions/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyparameterdescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByParameterDescriptionsToExcel(string ParameterDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByParameterDescriptions(ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyresizes/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyresizes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByResizesToCSV(string Resize, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByResizes(Resize), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyresizes/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyresizes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByResizesToExcel(string Resize, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByResizes(Resize), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyreturncolumnnamefromcmstitles/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyreturncolumnnamefromcmstitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByReturnColumnNameFromCmsTitlesToCSV(bool? ReturnColumnNameFromCMSTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByReturnColumnNameFromCmsTitles(ReturnColumnNameFromCMSTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyreturncolumnnamefromcmstitles/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyreturncolumnnamefromcmstitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByReturnColumnNameFromCmsTitlesToExcel(bool? ReturnColumnNameFromCMSTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByReturnColumnNameFromCmsTitles(ReturnColumnNameFromCMSTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselecteddatasourcetables/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselecteddatasourcetables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedDataSourceTablesToCSV(string SelectedDataSourceTable, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedDataSourceTables(SelectedDataSourceTable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselecteddatasourcetables/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselecteddatasourcetables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedDataSourceTablesToExcel(string SelectedDataSourceTable, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedDataSourceTables(SelectedDataSourceTable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedtexts/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedtexts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedTextsToCSV(string SelectedText, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedTexts(SelectedText), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedtexts/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedtexts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedTextsToExcel(string SelectedText, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedTexts(SelectedText), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedvalues/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedvalues/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedValuesToCSV(string SelectedValue, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedValues(SelectedValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedvalues/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbyselectedvalues/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetBySelectedValuesToExcel(string SelectedValue, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetBySelectedValues(SelectedValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableids/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTableIdsToCSV(int? TableID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByTableIds(TableID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableids/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTableIdsToExcel(int? TableID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByTableIds(TableID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableorders/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTableOrdersToCSV(int? TableOrder, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableorders/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytableorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTableOrdersToExcel(int? TableOrder, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytooltips/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytooltips/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTooltipsToCSV(string Tooltip, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsGetByTooltips(Tooltip), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytooltips/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsgetbytooltips/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsGetByTooltipsToExcel(string Tooltip, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsGetByTooltips(Tooltip), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsinserts/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsInsertsToCSV(int? TableID, string ColumnName, int? DbType, bool? IsRoutingField, int? CMSInputType, string CMSColumnTitle, int? TableOrder, string SelectedValue, string SelectedText, bool? HasShowedOnList, bool? IsFilter, string Resize, bool? IsLanguageField, bool? IsPrimary, bool? IsSecondry, string SelectedDataSourceTable, string JsonName, string Tooltip, bool? IsNullable, int? MaxLength, bool? IsRequired, bool? HasDefaultValue, bool? IsPublic, bool? ReturnColumnNameFromCMSTitle, string ErrorDescription, string ParameterDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsInserts(TableID, ColumnName, DbType, IsRoutingField, CMSInputType, CMSColumnTitle, TableOrder, SelectedValue, SelectedText, HasShowedOnList, IsFilter, Resize, IsLanguageField, IsPrimary, IsSecondry, SelectedDataSourceTable, JsonName, Tooltip, IsNullable, MaxLength, IsRequired, HasDefaultValue, IsPublic, ReturnColumnNameFromCMSTitle, ErrorDescription, ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsinserts/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsInsertsToExcel(int? TableID, string ColumnName, int? DbType, bool? IsRoutingField, int? CMSInputType, string CMSColumnTitle, int? TableOrder, string SelectedValue, string SelectedText, bool? HasShowedOnList, bool? IsFilter, string Resize, bool? IsLanguageField, bool? IsPrimary, bool? IsSecondry, string SelectedDataSourceTable, string JsonName, string Tooltip, bool? IsNullable, int? MaxLength, bool? IsRequired, bool? HasDefaultValue, bool? IsPublic, bool? ReturnColumnNameFromCMSTitle, string ErrorDescription, string ParameterDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsInserts(TableID, ColumnName, DbType, IsRoutingField, CMSInputType, CMSColumnTitle, TableOrder, SelectedValue, SelectedText, HasShowedOnList, IsFilter, Resize, IsLanguageField, IsPrimary, IsSecondry, SelectedDataSourceTable, JsonName, Tooltip, IsNullable, MaxLength, IsRequired, HasDefaultValue, IsPublic, ReturnColumnNameFromCMSTitle, ErrorDescription, ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsupdates/csv")]
        [HttpGet("/export/ZarenSoft/databasecolumnsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsUpdatesToCSV(int? ID, int? TableID, string ColumnName, int? DbType, bool? IsRoutingField, int? CMSInputType, string CMSColumnTitle, int? TableOrder, string SelectedValue, string SelectedText, bool? HasShowedOnList, bool? IsFilter, string Resize, bool? IsLanguageField, bool? IsPrimary, bool? IsSecondry, string SelectedDataSourceTable, string JsonName, string Tooltip, bool? IsNullable, int? MaxLength, bool? IsRequired, bool? HasDefaultValue, bool? IsPublic, bool? ReturnColumnNameFromCMSTitle, string ErrorDescription, string ParameterDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseColumnsUpdates(ID, TableID, ColumnName, DbType, IsRoutingField, CMSInputType, CMSColumnTitle, TableOrder, SelectedValue, SelectedText, HasShowedOnList, IsFilter, Resize, IsLanguageField, IsPrimary, IsSecondry, SelectedDataSourceTable, JsonName, Tooltip, IsNullable, MaxLength, IsRequired, HasDefaultValue, IsPublic, ReturnColumnNameFromCMSTitle, ErrorDescription, ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasecolumnsupdates/excel")]
        [HttpGet("/export/ZarenSoft/databasecolumnsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseColumnsUpdatesToExcel(int? ID, int? TableID, string ColumnName, int? DbType, bool? IsRoutingField, int? CMSInputType, string CMSColumnTitle, int? TableOrder, string SelectedValue, string SelectedText, bool? HasShowedOnList, bool? IsFilter, string Resize, bool? IsLanguageField, bool? IsPrimary, bool? IsSecondry, string SelectedDataSourceTable, string JsonName, string Tooltip, bool? IsNullable, int? MaxLength, bool? IsRequired, bool? HasDefaultValue, bool? IsPublic, bool? ReturnColumnNameFromCMSTitle, string ErrorDescription, string ParameterDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseColumnsUpdates(ID, TableID, ColumnName, DbType, IsRoutingField, CMSInputType, CMSColumnTitle, TableOrder, SelectedValue, SelectedText, HasShowedOnList, IsFilter, Resize, IsLanguageField, IsPrimary, IsSecondry, SelectedDataSourceTable, JsonName, Tooltip, IsNullable, MaxLength, IsRequired, HasDefaultValue, IsPublic, ReturnColumnNameFromCMSTitle, ErrorDescription, ParameterDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycangenerates/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycangenerates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCanGeneratesToCSV(bool? CanGenerate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByCanGenerates(CanGenerate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycangenerates/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycangenerates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCanGeneratesToExcel(bool? CanGenerate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByCanGenerates(CanGenerate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsgridsizes/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsgridsizes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsGridSizesToCSV(int? CMSGridSize, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByCmsGridSizes(CMSGridSize), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsgridsizes/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsgridsizes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsGridSizesToExcel(int? CMSGridSize, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByCmsGridSizes(CMSGridSize), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsicons/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsicons/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsIconsToCSV(string CMSIcon, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByCmsIcons(CMSIcon), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsicons/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmsicons/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsIconsToExcel(string CMSIcon, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByCmsIcons(CMSIcon), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmslinkedtables/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmslinkedtables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsLinkedTablesToCSV(string CMSLinkedTables, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByCmsLinkedTables(CMSLinkedTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycmslinkedtables/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycmslinkedtables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCmsLinkedTablesToExcel(string CMSLinkedTables, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByCmsLinkedTables(CMSLinkedTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycreatedates/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycreatedates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCreateDatesToCSV(string CreateDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbycreatedates/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbycreatedates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByCreateDatesToExcel(string CreateDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbydisplaynames/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbydisplaynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByDisplayNamesToCSV(string DisplayName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByDisplayNames(DisplayName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbydisplaynames/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbydisplaynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByDisplayNamesToExcel(string DisplayName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByDisplayNames(DisplayName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyforusers/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyforusers/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByForUsersToCSV(bool? ForUser, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByForUsers(ForUser), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyforusers/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyforusers/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByForUsersToExcel(bool? ForUser, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByForUsers(ForUser), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyfrontpagenames/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyfrontpagenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByFrontPageNamesToCSV(string FrontPageName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByFrontPageNames(FrontPageName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyfrontpagenames/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyfrontpagenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByFrontPageNamesToExcel(string FrontPageName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByFrontPageNames(FrontPageName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyhasmultilanguages/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyhasmultilanguages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByHasMultiLanguagesToCSV(bool? HasMultiLanguage, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByHasMultiLanguages(HasMultiLanguage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyhasmultilanguages/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyhasmultilanguages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByHasMultiLanguagesToExcel(bool? HasMultiLanguage, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByHasMultiLanguages(HasMultiLanguage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyisroutings/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyisroutings/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByIsRoutingsToCSV(bool? IsRouting, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByIsRoutings(IsRouting), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyisroutings/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyisroutings/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByIsRoutingsToExcel(bool? IsRouting, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByIsRoutings(IsRouting), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyparenttables/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyparenttables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByParentTablesToCSV(int? ParentTable, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByParentTables(ParentTable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbyparenttables/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbyparenttables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByParentTablesToExcel(int? ParentTable, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByParentTables(ParentTable), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbytablenames/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbytablenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByTableNamesToCSV(string TableName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByTableNames(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbytablenames/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbytablenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByTableNamesToExcel(string TableName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByTableNames(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbytableorders/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbytableorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByTableOrdersToCSV(int? TableOrder, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetbytableorders/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetbytableorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetByTableOrdersToExcel(int? TableOrder, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetcreatedatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesgetcreatedatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetCreateDateBetweensToCSV(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesgetcreatedatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesgetcreatedatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesGetCreateDateBetweensToExcel(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesinserts/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesInsertsToCSV(string TableName, string DisplayName, bool? IsRouting, bool? HasMultiLanguage, string FrontPageName, bool? ForUser, int? CMSGridSize, string CMSLinkedTables, int? TableOrder, int? ParentTable, string CMSIcon, bool? CanGenerate, string CreateDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesInserts(TableName, DisplayName, IsRouting, HasMultiLanguage, FrontPageName, ForUser, CMSGridSize, CMSLinkedTables, TableOrder, ParentTable, CMSIcon, CanGenerate, CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesinserts/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesInsertsToExcel(string TableName, string DisplayName, bool? IsRouting, bool? HasMultiLanguage, string FrontPageName, bool? ForUser, int? CMSGridSize, string CMSLinkedTables, int? TableOrder, int? ParentTable, string CMSIcon, bool? CanGenerate, string CreateDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesInserts(TableName, DisplayName, IsRouting, HasMultiLanguage, FrontPageName, ForUser, CMSGridSize, CMSLinkedTables, TableOrder, ParentTable, CMSIcon, CanGenerate, CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesupdates/csv")]
        [HttpGet("/export/ZarenSoft/databasetablesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesUpdatesToCSV(int? ID, string TableName, string DisplayName, bool? IsRouting, bool? HasMultiLanguage, string FrontPageName, bool? ForUser, int? CMSGridSize, string CMSLinkedTables, int? TableOrder, int? ParentTable, string CMSIcon, bool? CanGenerate, string CreateDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseTablesUpdates(ID, TableName, DisplayName, IsRouting, HasMultiLanguage, FrontPageName, ForUser, CMSGridSize, CMSLinkedTables, TableOrder, ParentTable, CMSIcon, CanGenerate, CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasetablesupdates/excel")]
        [HttpGet("/export/ZarenSoft/databasetablesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseTablesUpdatesToExcel(int? ID, string TableName, string DisplayName, bool? IsRouting, bool? HasMultiLanguage, string FrontPageName, bool? ForUser, int? CMSGridSize, string CMSLinkedTables, int? TableOrder, int? ParentTable, string CMSIcon, bool? CanGenerate, string CreateDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseTablesUpdates(ID, TableName, DisplayName, IsRouting, HasMultiLanguage, FrontPageName, ForUser, CMSGridSize, CMSLinkedTables, TableOrder, ParentTable, CMSIcon, CanGenerate, CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyfrontendnames/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyfrontendnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetByFrontEndNamesToCSV(string FrontEndName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesGetByFrontEndNames(FrontEndName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyfrontendnames/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyfrontendnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetByFrontEndNamesToExcel(string FrontEndName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesGetByFrontEndNames(FrontEndName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbysqlnames/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbysqlnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetBySqlNamesToCSV(string SqlName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesGetBySqlNames(SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbysqlnames/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesgetbysqlnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesGetBySqlNamesToExcel(string SqlName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesGetBySqlNames(SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesInsertsToCSV(string FrontEndName, string SqlName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesInserts(FrontEndName, SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesInsertsToExcel(string FrontEndName, string SqlName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesInserts(FrontEndName, SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesUpdatesToCSV(int? ID, string FrontEndName, string SqlName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatabaseValueTypesUpdates(ID, FrontEndName, SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/databasevaluetypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/databasevaluetypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatabaseValueTypesUpdatesToExcel(int? ID, string FrontEndName, string SqlName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatabaseValueTypesUpdates(ID, FrontEndName, SqlName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetalls/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetalls/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypeGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypeGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbynames/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypeGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbynames/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypegetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypeGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeinserts/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypeInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeinserts/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypeInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeupdates/csv")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeUpdatesToCSV(int? ID, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDatatableCmsInputTypeUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeupdates/excel")]
        [HttpGet("/export/ZarenSoft/datatablecmsinputtypeupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDatatableCmsInputTypeUpdatesToExcel(int? ID, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDatatableCmsInputTypeUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyboardtypeids/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyboardtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByBoardTypeIdsToCSV(int? BoardTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyboardtypeids/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyboardtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByBoardTypeIdsToExcel(int? BoardTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbydealtypeids/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbydealtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByDealTypeIdsToCSV(int? DealTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByDealTypeIds(DealTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbydealtypeids/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbydealtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByDealTypeIdsToExcel(int? DealTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByDealTypeIds(DealTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbydiscounts/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbydiscounts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByDiscountsToCSV(decimal? Discount, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByDiscounts(Discount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbydiscounts/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbydiscounts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByDiscountsToExcel(decimal? Discount, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByDiscounts(Discount), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyenddates/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyenddates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByEndDatesToCSV(string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyenddates/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyenddates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByEndDatesToExcel(string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyfreenights/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyfreenights/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByFreeNightsToCSV(int? FreeNights, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByFreeNights(FreeNights), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyfreenights/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyfreenights/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByFreeNightsToExcel(int? FreeNights, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByFreeNights(FreeNights), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyreleases/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbyreleases/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByReleasesToCSV(int? Release, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbyreleases/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbyreleases/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByReleasesToExcel(int? Release, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbystartdates/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetbystartdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByStartDatesToCSV(string StartDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetbystartdates/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetbystartdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetByStartDatesToExcel(string StartDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetenddatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetenddatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetEndDateBetweensToCSV(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetenddatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetenddatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetEndDateBetweensToExcel(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetstartdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/dealsgetstartdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetStartDateBetweensToCSV(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsgetstartdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/dealsgetstartdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsGetStartDateBetweensToExcel(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsinserts/csv")]
        [HttpGet("/export/ZarenSoft/dealsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsInsertsToCSV(int? HotelRoomId, int? BoardTypeId, int? DealTypeId, int? Release, decimal? Discount, int? FreeNights, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsInserts(HotelRoomId, BoardTypeId, DealTypeId, Release, Discount, FreeNights, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsinserts/excel")]
        [HttpGet("/export/ZarenSoft/dealsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsInsertsToExcel(int? HotelRoomId, int? BoardTypeId, int? DealTypeId, int? Release, decimal? Discount, int? FreeNights, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsInserts(HotelRoomId, BoardTypeId, DealTypeId, Release, Discount, FreeNights, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsupdates/csv")]
        [HttpGet("/export/ZarenSoft/dealsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsUpdatesToCSV(int? Id, int? HotelRoomId, int? BoardTypeId, int? DealTypeId, int? Release, decimal? Discount, int? FreeNights, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealsUpdates(Id, HotelRoomId, BoardTypeId, DealTypeId, Release, Discount, FreeNights, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealsupdates/excel")]
        [HttpGet("/export/ZarenSoft/dealsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealsUpdatesToExcel(int? Id, int? HotelRoomId, int? BoardTypeId, int? DealTypeId, int? Release, decimal? Discount, int? FreeNights, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealsUpdates(Id, HotelRoomId, BoardTypeId, DealTypeId, Release, Discount, FreeNights, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydealtypeids/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydealtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByDealTypeIdsToCSV(int? DealTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetByDealTypeIds(DealTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydealtypeids/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydealtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByDealTypeIdsToExcel(int? DealTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetByDealTypeIds(DealTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesInsertsToCSV(int? DealTypeId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesInserts(DealTypeId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesInsertsToExcel(int? DealTypeId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesInserts(DealTypeId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesUpdatesToCSV(int? Id, int? DealTypeId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypeLanguagesUpdates(Id, DealTypeId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypelanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/dealtypelanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypeLanguagesUpdatesToExcel(int? Id, int? DealTypeId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypeLanguagesUpdates(Id, DealTypeId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/dealtypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/dealtypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/dealtypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/dealtypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/dealtypesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetByNamesToCSV(int? Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/dealtypesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesGetByNamesToExcel(int? Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/dealtypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesInsertsToCSV(int? Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/dealtypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesInsertsToExcel(int? Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/dealtypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesUpdatesToCSV(int? Id, int? Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDealTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dealtypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/dealtypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDealTypesUpdatesToExcel(int? Id, int? Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDealTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicqueuelists/csv")]
        [HttpGet("/export/ZarenSoft/dynamicqueuelists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicQueueListsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicQueueLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicqueuelists/excel")]
        [HttpGet("/export/ZarenSoft/dynamicqueuelists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicQueueListsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicQueueLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicspacereports/csv")]
        [HttpGet("/export/ZarenSoft/dynamicspacereports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicSpaceReportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicSpaceReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicspacereports/excel")]
        [HttpGet("/export/ZarenSoft/dynamicspacereports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicSpaceReportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicSpaceReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablecounts/csv")]
        [HttpGet("/export/ZarenSoft/dynamictablecounts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableCountsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTableCounts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablecounts/excel")]
        [HttpGet("/export/ZarenSoft/dynamictablecounts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableCountsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTableCounts(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictableforeignkeys/csv")]
        [HttpGet("/export/ZarenSoft/dynamictableforeignkeys/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableForeignKeysToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTableForeignKeys(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictableforeignkeys/excel")]
        [HttpGet("/export/ZarenSoft/dynamictableforeignkeys/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableForeignKeysToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTableForeignKeys(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablereports/csv")]
        [HttpGet("/export/ZarenSoft/dynamictablereports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableReportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTableReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablereports/excel")]
        [HttpGet("/export/ZarenSoft/dynamictablereports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableReportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTableReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablesearchalls/csv")]
        [HttpGet("/export/ZarenSoft/dynamictablesearchalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableSearchAllsToCSV(string SearchStr, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTableSearchAlls(SearchStr), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablesearchalls/excel")]
        [HttpGet("/export/ZarenSoft/dynamictablesearchalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableSearchAllsToExcel(string SearchStr, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTableSearchAlls(SearchStr), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablesearchtables/csv")]
        [HttpGet("/export/ZarenSoft/dynamictablesearchtables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableSearchTablesToCSV(string SearchStr, string TableName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTableSearchTables(SearchStr, TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictablesearchtables/excel")]
        [HttpGet("/export/ZarenSoft/dynamictablesearchtables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTableSearchTablesToExcel(string SearchStr, string TableName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTableSearchTables(SearchStr, TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictransactionreports/csv")]
        [HttpGet("/export/ZarenSoft/dynamictransactionreports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTransactionReportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicTransactionReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamictransactionreports/excel")]
        [HttpGet("/export/ZarenSoft/dynamictransactionreports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicTransactionReportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicTransactionReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicviewdtos/csv")]
        [HttpGet("/export/ZarenSoft/dynamicviewdtos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicViewDtosToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicViewDtos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicviewdtos/excel")]
        [HttpGet("/export/ZarenSoft/dynamicviewdtos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicViewDtosToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicViewDtos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicviewreports/csv")]
        [HttpGet("/export/ZarenSoft/dynamicviewreports/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicViewReportsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetDynamicViewReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/dynamicviewreports/excel")]
        [HttpGet("/export/ZarenSoft/dynamicviewreports/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportDynamicViewReportsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetDynamicViewReports(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidfroms/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidfroms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByCurrencyIdFromsToCSV(int? CurrencyIdFrom, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByCurrencyIdFroms(CurrencyIdFrom), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidfroms/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidfroms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByCurrencyIdFromsToExcel(int? CurrencyIdFrom, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByCurrencyIdFroms(CurrencyIdFrom), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidtos/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidtos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByCurrencyIdTosToCSV(int? CurrencyIdTo, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByCurrencyIdTos(CurrencyIdTo), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidtos/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbycurrencyidtos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByCurrencyIdTosToExcel(int? CurrencyIdTo, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByCurrencyIdTos(CurrencyIdTo), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexraactives/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexraactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaActivesToCSV(bool? ExRaActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByExRaActives(ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexraactives/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexraactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaActivesToExcel(bool? ExRaActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByExRaActives(ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexradates/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexradates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaDatesToCSV(string ExRaDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByExRaDates(ExRaDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexradates/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexradates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaDatesToExcel(string ExRaDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByExRaDates(ExRaDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexratimestamps/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexratimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaTimestampsToCSV(int? ExRaTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByExRaTimestamps(ExRaTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexratimestamps/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexratimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaTimestampsToExcel(int? ExRaTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByExRaTimestamps(ExRaTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexravalues/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexravalues/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaValuesToCSV(decimal? ExRaValue, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByExRaValues(ExRaValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexravalues/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyexravalues/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByExRaValuesToExcel(decimal? ExRaValue, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByExRaValues(ExRaValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetexradatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetexradatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetExRaDateBetweensToCSV(string ExRaDateStart, string ExRaDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesGetExRaDateBetweens(ExRaDateStart, ExRaDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesgetexradatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesgetexradatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesGetExRaDateBetweensToExcel(string ExRaDateStart, string ExRaDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesGetExRaDateBetweens(ExRaDateStart, ExRaDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesinserts/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesInsertsToCSV(int? CurrencyIdFrom, int? CurrencyIdTo, decimal? ExRaValue, string ExRaDate, int? ExRaTimestamp, bool? ExRaActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesInserts(CurrencyIdFrom, CurrencyIdTo, ExRaValue, ExRaDate, ExRaTimestamp, ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesinserts/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesInsertsToExcel(int? CurrencyIdFrom, int? CurrencyIdTo, decimal? ExRaValue, string ExRaDate, int? ExRaTimestamp, bool? ExRaActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesInserts(CurrencyIdFrom, CurrencyIdTo, ExRaValue, ExRaDate, ExRaTimestamp, ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesupdates/csv")]
        [HttpGet("/export/ZarenSoft/exchangeratesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesUpdatesToCSV(int? Id, int? CurrencyIdFrom, int? CurrencyIdTo, decimal? ExRaValue, string ExRaDate, int? ExRaTimestamp, bool? ExRaActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExchangeRatesUpdates(Id, CurrencyIdFrom, CurrencyIdTo, ExRaValue, ExRaDate, ExRaTimestamp, ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/exchangeratesupdates/excel")]
        [HttpGet("/export/ZarenSoft/exchangeratesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExchangeRatesUpdatesToExcel(int? Id, int? CurrencyIdFrom, int? CurrencyIdTo, decimal? ExRaValue, string ExRaDate, int? ExRaTimestamp, bool? ExRaActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExchangeRatesUpdates(Id, CurrencyIdFrom, CurrencyIdTo, ExRaValue, ExRaDate, ExRaTimestamp, ExRaActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyextensionnames/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyextensionnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByExtensionNamesToCSV(string ExtensionName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByExtensionNames(ExtensionName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyextensionnames/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyextensionnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByExtensionNamesToExcel(string ExtensionName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByExtensionNames(ExtensionName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyfilepaths/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyfilepaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByFilePathsToCSV(string FilePath, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByFilePaths(FilePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyfilepaths/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyfilepaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByFilePathsToExcel(string FilePath, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByFilePaths(FilePath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyfiletypes/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyfiletypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByFileTypesToCSV(int? FileType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByFileTypes(FileType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyfiletypes/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyfiletypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByFileTypesToExcel(int? FileType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByFileTypes(FileType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyisrealnames/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyisrealnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByIsRealNamesToCSV(bool? IsRealName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByIsRealNames(IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbyisrealnames/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbyisrealnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByIsRealNamesToExcel(bool? IsRealName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByIsRealNames(IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbykeynames/csv")]
        [HttpGet("/export/ZarenSoft/extensionsgetbykeynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByKeyNamesToCSV(string KeyName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsGetByKeyNames(KeyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsgetbykeynames/excel")]
        [HttpGet("/export/ZarenSoft/extensionsgetbykeynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsGetByKeyNamesToExcel(string KeyName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsGetByKeyNames(KeyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsinserts/csv")]
        [HttpGet("/export/ZarenSoft/extensionsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsInsertsToCSV(int? FileType, string ExtensionName, string KeyName, string FilePath, bool? IsRealName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsInserts(FileType, ExtensionName, KeyName, FilePath, IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsinserts/excel")]
        [HttpGet("/export/ZarenSoft/extensionsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsInsertsToExcel(int? FileType, string ExtensionName, string KeyName, string FilePath, bool? IsRealName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsInserts(FileType, ExtensionName, KeyName, FilePath, IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsupdates/csv")]
        [HttpGet("/export/ZarenSoft/extensionsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsUpdatesToCSV(int? ID, int? FileType, string ExtensionName, string KeyName, string FilePath, bool? IsRealName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtensionsUpdates(ID, FileType, ExtensionName, KeyName, FilePath, IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extensionsupdates/excel")]
        [HttpGet("/export/ZarenSoft/extensionsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtensionsUpdatesToExcel(int? ID, int? FileType, string ExtensionName, string KeyName, string FilePath, bool? IsRealName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtensionsUpdates(ID, FileType, ExtensionName, KeyName, FilePath, IsRealName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetalls/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetalls/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextyactives/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextyactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyActivesToCSV(bool? ExTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetByExTyActives(ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextyactives/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextyactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyActivesToExcel(bool? ExTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetByExTyActives(ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextycodes/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyCodesToCSV(string ExTyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetByExTyCodes(ExTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextycodes/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyCodesToExcel(string ExTyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetByExTyCodes(ExTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextynames/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyNamesToCSV(string ExTyName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetByExTyNames(ExTyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextynames/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyNamesToExcel(string ExTyName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetByExTyNames(ExTyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyTimestampsToCSV(string ExTyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetByExTyTimestamps(ExTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyextytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyextytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByExTyTimestampsToExcel(string ExTyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetByExTyTimestamps(ExTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetextytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/extrastypegetextytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetExTyTimestampBetweensToCSV(string ExTyTimestampStart, string ExTyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeGetExTyTimestampBetweens(ExTyTimestampStart, ExTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypegetextytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/extrastypegetextytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeGetExTyTimestampBetweensToExcel(string ExTyTimestampStart, string ExTyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeGetExTyTimestampBetweens(ExTyTimestampStart, ExTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypeinserts/csv")]
        [HttpGet("/export/ZarenSoft/extrastypeinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeInsertsToCSV(string ExTyCode, string ExTyName, string ExTyTimestamp, bool? ExTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeInserts(ExTyCode, ExTyName, ExTyTimestamp, ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypeinserts/excel")]
        [HttpGet("/export/ZarenSoft/extrastypeinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeInsertsToExcel(string ExTyCode, string ExTyName, string ExTyTimestamp, bool? ExTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeInserts(ExTyCode, ExTyName, ExTyTimestamp, ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypeupdates/csv")]
        [HttpGet("/export/ZarenSoft/extrastypeupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeUpdatesToCSV(int? Id, string ExTyCode, string ExTyName, string ExTyTimestamp, bool? ExTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetExtrasTypeUpdates(Id, ExTyCode, ExTyName, ExTyTimestamp, ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/extrastypeupdates/excel")]
        [HttpGet("/export/ZarenSoft/extrastypeupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportExtrasTypeUpdatesToExcel(int? Id, string ExTyCode, string ExTyName, string ExTyTimestamp, bool? ExTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetExtrasTypeUpdates(Id, ExTyCode, ExTyName, ExTyTimestamp, ExTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/facilitiesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/facilitiesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/facilitiesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/facilitiesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/facilitiesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/facilitiesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyfacilityids/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyfacilityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByFacilityIdsToCSV(int? FacilityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsGetByFacilityIds(FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyfacilityids/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyfacilityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByFacilityIdsToExcel(int? FacilityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsGetByFacilityIds(FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsinserts/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsInsertsToCSV(int? HotelId, int? HotelRoomId, int? FacilityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsInserts(HotelId, HotelRoomId, FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsinserts/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsInsertsToExcel(int? HotelId, int? HotelRoomId, int? FacilityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsInserts(HotelId, HotelRoomId, FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsupdates/csv")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsUpdatesToCSV(int? Id, int? HotelId, int? HotelRoomId, int? FacilityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesHotelsUpdates(Id, HotelId, HotelRoomId, FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitieshotelsupdates/excel")]
        [HttpGet("/export/ZarenSoft/facilitieshotelsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesHotelsUpdatesToExcel(int? Id, int? HotelId, int? HotelRoomId, int? FacilityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesHotelsUpdates(Id, HotelId, HotelRoomId, FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesinserts/csv")]
        [HttpGet("/export/ZarenSoft/facilitiesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesinserts/excel")]
        [HttpGet("/export/ZarenSoft/facilitiesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesupdates/csv")]
        [HttpGet("/export/ZarenSoft/facilitiesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilitiesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitiesupdates/excel")]
        [HttpGet("/export/ZarenSoft/facilitiesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilitiesUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilitiesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyfacilityids/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyfacilityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByFacilityIdsToCSV(int? FacilityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesGetByFacilityIds(FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyfacilityids/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyfacilityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByFacilityIdsToExcel(int? FacilityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesGetByFacilityIds(FacilityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesInsertsToCSV(int? FacilityId, int? LanguageId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesInserts(FacilityId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesInsertsToExcel(int? FacilityId, int? LanguageId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesInserts(FacilityId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesUpdatesToCSV(int? Id, int? FacilityId, int? LanguageId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFacilityLanguagesUpdates(Id, FacilityId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/facilitylanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/facilitylanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFacilityLanguagesUpdatesToExcel(int? Id, int? FacilityId, int? LanguageId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFacilityLanguagesUpdates(Id, FacilityId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetalls/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetalls/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfityactives/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfityactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyActivesToCSV(bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetByFiTyActives(FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfityactives/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfityactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyActivesToExcel(bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetByFiTyActives(FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitycodes/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyCodesToCSV(string FiTyCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetByFiTyCodes(FiTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitycodes/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyCodesToExcel(string FiTyCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetByFiTyCodes(FiTyCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitynames/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyNamesToCSV(string FiTyName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetByFiTyNames(FiTyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitynames/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyNamesToExcel(string FiTyName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetByFiTyNames(FiTyName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyTimestampsToCSV(string FiTyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetByFiTyTimestamps(FiTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyfitytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByFiTyTimestampsToExcel(string FiTyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetByFiTyTimestamps(FiTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetfitytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypegetfitytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetFiTyTimestampBetweensToCSV(string FiTyTimestampStart, string FiTyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeGetFiTyTimestampBetweens(FiTyTimestampStart, FiTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypegetfitytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypegetfitytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeGetFiTyTimestampBetweensToExcel(string FiTyTimestampStart, string FiTyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeGetFiTyTimestampBetweens(FiTyTimestampStart, FiTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypeinserts/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypeinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeInsertsToCSV(string FiTyCode, string FiTyName, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeInserts(FiTyCode, FiTyName, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypeinserts/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypeinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeInsertsToExcel(string FiTyCode, string FiTyName, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeInserts(FiTyCode, FiTyName, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypeupdates/csv")]
        [HttpGet("/export/ZarenSoft/fieldstypeupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeUpdatesToCSV(int? Id, string FiTyCode, string FiTyName, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetFieldsTypeUpdates(Id, FiTyCode, FiTyName, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/fieldstypeupdates/excel")]
        [HttpGet("/export/ZarenSoft/fieldstypeupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportFieldsTypeUpdatesToExcel(int? Id, string FiTyCode, string FiTyName, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetFieldsTypeUpdates(Id, FiTyCode, FiTyName, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getcolumns/csv")]
        [HttpGet("/export/ZarenSoft/getcolumns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetColumnsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getcolumns/excel")]
        [HttpGet("/export/ZarenSoft/getcolumns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetColumnsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getcolumnswithoutidentities/csv")]
        [HttpGet("/export/ZarenSoft/getcolumnswithoutidentities/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetColumnsWithOutIdentitiesToCSV(string name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetColumnsWithOutIdentities(name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getcolumnswithoutidentities/excel")]
        [HttpGet("/export/ZarenSoft/getcolumnswithoutidentities/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetColumnsWithOutIdentitiesToExcel(string name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetColumnsWithOutIdentities(name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getdependencies/csv")]
        [HttpGet("/export/ZarenSoft/getdependencies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetDependenciesToCSV(string Schema, string Table, string Column, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetDependencies(Schema, Table, Column), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getdependencies/excel")]
        [HttpGet("/export/ZarenSoft/getdependencies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetDependenciesToExcel(string Schema, string Table, string Column, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetDependencies(Schema, Table, Column), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getextendeds/csv")]
        [HttpGet("/export/ZarenSoft/getextendeds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetExtendedsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetExtendeds(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getextendeds/excel")]
        [HttpGet("/export/ZarenSoft/getextendeds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetExtendedsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetExtendeds(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getidentitylists/csv")]
        [HttpGet("/export/ZarenSoft/getidentitylists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetIdentityListsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetIdentityLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getidentitylists/excel")]
        [HttpGet("/export/ZarenSoft/getidentitylists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetIdentityListsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetIdentityLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getindexstats/csv")]
        [HttpGet("/export/ZarenSoft/getindexstats/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetIndexStatsToCSV(string table_name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetIndexStats(table_name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getindexstats/excel")]
        [HttpGet("/export/ZarenSoft/getindexstats/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetIndexStatsToExcel(string table_name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetIndexStats(table_name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getmodifydates/csv")]
        [HttpGet("/export/ZarenSoft/getmodifydates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetModifyDatesToCSV(string name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetModifyDates(name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getmodifydates/excel")]
        [HttpGet("/export/ZarenSoft/getmodifydates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetModifyDatesToExcel(string name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetModifyDates(name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getparameternames/csv")]
        [HttpGet("/export/ZarenSoft/getparameternames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetParameterNamesToCSV(string Procedure, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetParameterNames(Procedure), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getparameternames/excel")]
        [HttpGet("/export/ZarenSoft/getparameternames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetParameterNamesToExcel(string Procedure, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetParameterNames(Procedure), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getprocedurenames/csv")]
        [HttpGet("/export/ZarenSoft/getprocedurenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetProcedureNamesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetProcedureNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getprocedurenames/excel")]
        [HttpGet("/export/ZarenSoft/getprocedurenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetProcedureNamesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetProcedureNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getrequestparameternames/csv")]
        [HttpGet("/export/ZarenSoft/getrequestparameternames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetRequestParameterNamesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetRequestParameterNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getrequestparameternames/excel")]
        [HttpGet("/export/ZarenSoft/getrequestparameternames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetRequestParameterNamesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetRequestParameterNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getreturnparameternames/csv")]
        [HttpGet("/export/ZarenSoft/getreturnparameternames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetReturnParameterNamesToCSV(string ProcedureName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetReturnParameterNames(ProcedureName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getreturnparameternames/excel")]
        [HttpGet("/export/ZarenSoft/getreturnparameternames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetReturnParameterNamesToExcel(string ProcedureName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetReturnParameterNames(ProcedureName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getserverinfos/csv")]
        [HttpGet("/export/ZarenSoft/getserverinfos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetServerInfosToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetServerInfos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getserverinfos/excel")]
        [HttpGet("/export/ZarenSoft/getserverinfos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetServerInfosToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetServerInfos(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getsplogs/csv")]
        [HttpGet("/export/ZarenSoft/getsplogs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetSpLogsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetSpLogs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getsplogs/excel")]
        [HttpGet("/export/ZarenSoft/getsplogs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetSpLogsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetSpLogs(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getstoredproceduresforatables/csv")]
        [HttpGet("/export/ZarenSoft/getstoredproceduresforatables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetStoredProceduresForATablesToCSV(string TableName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetStoredProceduresForATables(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getstoredproceduresforatables/excel")]
        [HttpGet("/export/ZarenSoft/getstoredproceduresforatables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetStoredProceduresForATablesToExcel(string TableName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetStoredProceduresForATables(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablecolumns/csv")]
        [HttpGet("/export/ZarenSoft/gettablecolumns/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableColumnsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetTableColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablecolumns/excel")]
        [HttpGet("/export/ZarenSoft/gettablecolumns/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableColumnsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetTableColumns(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettableinfos/csv")]
        [HttpGet("/export/ZarenSoft/gettableinfos/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableInfosToCSV(string TableName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetTableInfos(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettableinfos/excel")]
        [HttpGet("/export/ZarenSoft/gettableinfos/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableInfosToExcel(string TableName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetTableInfos(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablenames/csv")]
        [HttpGet("/export/ZarenSoft/gettablenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableNamesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetTableNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablenames/excel")]
        [HttpGet("/export/ZarenSoft/gettablenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableNamesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetTableNames(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettables/csv")]
        [HttpGet("/export/ZarenSoft/gettables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTablesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetTables(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettables/excel")]
        [HttpGet("/export/ZarenSoft/gettables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTablesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetTables(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablesizes/csv")]
        [HttpGet("/export/ZarenSoft/gettablesizes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableSizesToCSV(string TableName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetTableSizes(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/gettablesizes/excel")]
        [HttpGet("/export/ZarenSoft/gettablesizes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetTableSizesToExcel(string TableName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetTableSizes(TableName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getviewbackuphistories/csv")]
        [HttpGet("/export/ZarenSoft/getviewbackuphistories/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetViewBackupHistoriesToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetViewBackupHistories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getviewbackuphistories/excel")]
        [HttpGet("/export/ZarenSoft/getviewbackuphistories/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetViewBackupHistoriesToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetViewBackupHistories(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getviewlists/csv")]
        [HttpGet("/export/ZarenSoft/getviewlists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetViewListsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetGetViewLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/getviewlists/excel")]
        [HttpGet("/export/ZarenSoft/getviewlists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportGetViewListsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetGetViewLists(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetalls/csv")]
        [HttpGet("/export/ZarenSoft/headercolorgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetalls/excel")]
        [HttpGet("/export/ZarenSoft/headercolorgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbycolors/csv")]
        [HttpGet("/export/ZarenSoft/headercolorgetbycolors/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByColorsToCSV(string Color, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorGetByColors(Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbycolors/excel")]
        [HttpGet("/export/ZarenSoft/headercolorgetbycolors/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByColorsToExcel(string Color, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorGetByColors(Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/headercolorgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/headercolorgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/headercolorgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/headercolorgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbypaths/csv")]
        [HttpGet("/export/ZarenSoft/headercolorgetbypaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByPathsToCSV(string Path, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorgetbypaths/excel")]
        [HttpGet("/export/ZarenSoft/headercolorgetbypaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorGetByPathsToExcel(string Path, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorinserts/csv")]
        [HttpGet("/export/ZarenSoft/headercolorinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorInsertsToCSV(string Name, string Color, string Path, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorInserts(Name, Color, Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorinserts/excel")]
        [HttpGet("/export/ZarenSoft/headercolorinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorInsertsToExcel(string Name, string Color, string Path, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorInserts(Name, Color, Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorupdates/csv")]
        [HttpGet("/export/ZarenSoft/headercolorupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorUpdatesToCSV(int? ID, string Name, string Color, string Path, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHeaderColorUpdates(ID, Name, Color, Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/headercolorupdates/excel")]
        [HttpGet("/export/ZarenSoft/headercolorupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHeaderColorUpdatesToExcel(int? ID, string Name, string Color, string Path, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHeaderColorUpdates(ID, Name, Color, Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyagencyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyagencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByAgencyIdsToCSV(int? AgencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyagencyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyagencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByAgencyIdsToExcel(int? AgencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyenddates/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyenddates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByEndDatesToCSV(string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyenddates/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyenddates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByEndDatesToExcel(string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByEndDates(EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbymarkups/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbymarkups/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByMarkUpsToCSV(decimal? MarkUp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByMarkUps(MarkUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbymarkups/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbymarkups/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByMarkUpsToExcel(decimal? MarkUp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByMarkUps(MarkUp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbystartdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbystartdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByStartDatesToCSV(string StartDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbystartdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetbystartdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetByStartDatesToExcel(string StartDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetenddatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetenddatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetEndDateBetweensToCSV(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetenddatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetenddatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetEndDateBetweensToExcel(string EndDateStart, string EndDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetEndDateBetweens(EndDateStart, EndDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetstartdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetstartdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetStartDateBetweensToCSV(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetstartdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsgetstartdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsGetStartDateBetweensToExcel(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsInsertsToCSV(int? AgencyId, int? HotelId, decimal? MarkUp, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsInserts(AgencyId, HotelId, MarkUp, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsInsertsToExcel(int? AgencyId, int? HotelId, decimal? MarkUp, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsInserts(AgencyId, HotelId, MarkUp, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsUpdatesToCSV(int? Id, int? AgencyId, int? HotelId, decimal? MarkUp, string StartDate, string EndDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelAgencyMarkupsUpdates(Id, AgencyId, HotelId, MarkUp, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelagencymarkupsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelagencymarkupsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelAgencyMarkupsUpdatesToExcel(int? Id, int? AgencyId, int? HotelId, decimal? MarkUp, string StartDate, string EndDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelAgencyMarkupsUpdates(Id, AgencyId, HotelId, MarkUp, StartDate, EndDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyallotments/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyallotments/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByAllotmentsToCSV(int? Allotment, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByAllotments(Allotment), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyallotments/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyallotments/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByAllotmentsToExcel(int? Allotment, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByAllotments(Allotment), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbydays/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbydays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByDaysToCSV(string Day, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByDays(Day), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbydays/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbydays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByDaysToExcel(string Day, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByDays(Day), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyhotelbuyroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyhotelbuyroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByHotelBuyRoomIdsToCSV(int? HotelBuyRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByHotelBuyRoomIds(HotelBuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyhotelbuyroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyhotelbuyroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByHotelBuyRoomIdsToExcel(int? HotelBuyRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByHotelBuyRoomIds(HotelBuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyreleases/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyreleases/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByReleasesToCSV(int? Release, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyreleases/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbyreleases/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByReleasesToExcel(int? Release, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbystopsales/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbystopsales/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByStopSalesToCSV(int? StopSales, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByStopSales(StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbystopsales/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetbystopsales/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetByStopSalesToExcel(int? StopSales, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetByStopSales(StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetdaybetweens/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetdaybetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetDayBetweensToCSV(string DayStart, string DayEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetDayBetweens(DayStart, DayEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetdaybetweens/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentgetdaybetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentGetDayBetweensToExcel(string DayStart, string DayEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentGetDayBetweens(DayStart, DayEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentInsertsToCSV(int? HotelBuyRoomId, string Day, int? Allotment, int? Release, int? StopSales, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentInserts(HotelBuyRoomId, Day, Allotment, Release, StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentInsertsToExcel(int? HotelBuyRoomId, string Day, int? Allotment, int? Release, int? StopSales, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentInserts(HotelBuyRoomId, Day, Allotment, Release, StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentUpdatesToCSV(int? Id, int? HotelBuyRoomId, string Day, int? Allotment, int? Release, int? StopSales, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomAllotmentUpdates(Id, HotelBuyRoomId, Day, Allotment, Release, StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomallotmentupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomAllotmentUpdatesToExcel(int? Id, int? HotelBuyRoomId, string Day, int? Allotment, int? Release, int? StopSales, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomAllotmentUpdates(Id, HotelBuyRoomId, Day, Allotment, Release, StopSales), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbybuyroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbybuyroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByBuyRoomIdsToCSV(int? BuyRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsGetByBuyRoomIds(BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbybuyroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbybuyroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByBuyRoomIdsToExcel(int? BuyRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsGetByBuyRoomIds(BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsInsertsToCSV(int? HotelId, int? BuyRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsInserts(HotelId, BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsInsertsToExcel(int? HotelId, int? BuyRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsInserts(HotelId, BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsUpdatesToCSV(int? Id, int? HotelId, int? BuyRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelBuyRoomsUpdates(Id, HotelId, BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelbuyroomsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelbuyroomsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelBuyRoomsUpdatesToExcel(int? Id, int? HotelId, int? BuyRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelBuyRoomsUpdates(Id, HotelId, BuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChainsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChainsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChainsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChainsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChainsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hotelchainsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChainsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelchainsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChainsInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelchainsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChainsInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelchainsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelChainsUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelchainsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelchainsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelChainsUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelChainsUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsInsertsToCSV(int? HotelId, int? LanguageId, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsInserts(HotelId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsInsertsToExcel(int? HotelId, int? LanguageId, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsInserts(HotelId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsUpdatesToCSV(int? Id, int? HotelId, int? LanguageId, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelDescriptionsUpdates(Id, HotelId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteldescriptionsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hoteldescriptionsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelDescriptionsUpdatesToExcel(int? Id, int? HotelId, int? LanguageId, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelDescriptionsUpdates(Id, HotelId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyhotelphotoids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyhotelphotoids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByHotelPhotoIdsToCSV(int? HotelPhotoId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesGetByHotelPhotoIds(HotelPhotoId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyhotelphotoids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyhotelphotoids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByHotelPhotoIdsToExcel(int? HotelPhotoId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesGetByHotelPhotoIds(HotelPhotoId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesInsertsToCSV(int? HotelPhotoId, int? LanguageId, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesInserts(HotelPhotoId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesInsertsToExcel(int? HotelPhotoId, int? LanguageId, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesInserts(HotelPhotoId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesUpdatesToCSV(int? Id, int? HotelPhotoId, int? LanguageId, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotoLanguagesUpdates(Id, HotelPhotoId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotolanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotolanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotoLanguagesUpdatesToExcel(int? Id, int? HotelPhotoId, int? LanguageId, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotoLanguagesUpdates(Id, HotelPhotoId, LanguageId, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByHotelIdsToCSV(int? HotelId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByHotelIdsToExcel(int? HotelId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetByHotelIds(HotelId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyorders/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByOrdersToCSV(int? Order, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetByOrders(Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbyorders/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbyorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByOrdersToExcel(int? Order, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetByOrders(Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbypaths/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbypaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByPathsToCSV(string Path, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosgetbypaths/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosgetbypaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosGetByPathsToExcel(string Path, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosInsertsToCSV(int? HotelId, int? HotelRoomId, string Path, int? Order, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosInserts(HotelId, HotelRoomId, Path, Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosInsertsToExcel(int? HotelId, int? HotelRoomId, string Path, int? Order, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosInserts(HotelId, HotelRoomId, Path, Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelphotosupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosUpdatesToCSV(int? Id, int? HotelId, int? HotelRoomId, string Path, int? Order, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelPhotosUpdates(Id, HotelId, HotelRoomId, Path, Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelphotosupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelphotosupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelPhotosUpdatesToExcel(int? Id, int? HotelId, int? HotelRoomId, string Path, int? Order, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelPhotosUpdates(Id, HotelId, HotelRoomId, Path, Order), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyboardtypeids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyboardtypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByBoardTypeIdsToCSV(int? BoardTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyboardtypeids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyboardtypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByBoardTypeIdsToExcel(int? BoardTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByBoardTypeIds(BoardTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbycosts/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbycosts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByCostsToCSV(int? Cost, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbycosts/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbycosts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByCostsToExcel(int? Cost, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByCosts(Cost), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbydays/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbydays/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByDaysToCSV(string Day, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByDays(Day), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbydays/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbydays/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByDaysToExcel(string Day, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByDays(Day), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbystopsales/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbystopsales/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByStopSalesToCSV(int? StopSale, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetByStopSales(StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbystopsales/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetbystopsales/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetByStopSalesToExcel(int? StopSale, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetByStopSales(StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetdaybetweens/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetdaybetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetDayBetweensToCSV(string DayStart, string DayEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesGetDayBetweens(DayStart, DayEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetdaybetweens/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesgetdaybetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesGetDayBetweensToExcel(string DayStart, string DayEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesGetDayBetweens(DayStart, DayEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesInsertsToCSV(int? BoardTypeId, int? HotelRoomId, int? Cost, string Day, int? StopSale, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesInserts(BoardTypeId, HotelRoomId, Cost, Day, StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesInsertsToExcel(int? BoardTypeId, int? HotelRoomId, int? Cost, string Day, int? StopSale, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesInserts(BoardTypeId, HotelRoomId, Cost, Day, StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesUpdatesToCSV(int? Id, int? BoardTypeId, int? HotelRoomId, int? Cost, string Day, int? StopSale, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomDailyPricesUpdates(Id, BoardTypeId, HotelRoomId, Cost, Day, StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomdailypricesupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomdailypricesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomDailyPricesUpdatesToExcel(int? Id, int? BoardTypeId, int? HotelRoomId, int? Cost, string Day, int? StopSale, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomDailyPricesUpdates(Id, BoardTypeId, HotelRoomId, Cost, Day, StopSale), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyhotelroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyhotelroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByHotelRoomIdsToCSV(int? HotelRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyhotelroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyhotelroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByHotelRoomIdsToExcel(int? HotelRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetByHotelRoomIds(HotelRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesInsertsToCSV(int? HotelRoomId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesInserts(HotelRoomId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesInsertsToExcel(int? HotelRoomId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesInserts(HotelRoomId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesUpdatesToCSV(int? Id, int? HotelRoomId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomLanguagesUpdates(Id, HotelRoomId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomlanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomlanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomLanguagesUpdatesToExcel(int? Id, int? HotelRoomId, int? LanguageId, string Name, string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomLanguagesUpdates(Id, HotelRoomId, LanguageId, Name, Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyadults/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyadults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByAdultsToCSV(int? Adults, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyadults/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyadults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByAdultsToExcel(int? Adults, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbychildren/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbychildren/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByChildrenToCSV(int? Children, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbychildren/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbychildren/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByChildrenToExcel(int? Children, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyhotelbuyroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyhotelbuyroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByHotelBuyRoomIdsToCSV(int? HotelBuyRoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByHotelBuyRoomIds(HotelBuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyhotelbuyroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyhotelbuyroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByHotelBuyRoomIdsToExcel(int? HotelBuyRoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByHotelBuyRoomIds(HotelBuyRoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyinfants/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyinfants/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByInfantsToCSV(int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyinfants/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyinfants/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByInfantsToExcel(int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyroomids/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyroomids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByRoomIdsToCSV(int? RoomId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsGetByRoomIds(RoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsgetbyroomids/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsgetbyroomids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsGetByRoomIdsToExcel(int? RoomId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsGetByRoomIds(RoomId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsInsertsToCSV(int? HotelBuyRoomId, int? RoomId, string Name, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsInserts(HotelBuyRoomId, RoomId, Name, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsInsertsToExcel(int? HotelBuyRoomId, int? RoomId, string Name, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsInserts(HotelBuyRoomId, RoomId, Name, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelroomsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsUpdatesToCSV(int? Id, int? HotelBuyRoomId, int? RoomId, string Name, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelRoomsUpdates(Id, HotelBuyRoomId, RoomId, Name, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelroomsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelroomsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelRoomsUpdatesToExcel(int? Id, int? HotelBuyRoomId, int? RoomId, string Name, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelRoomsUpdates(Id, HotelBuyRoomId, RoomId, Name, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelseasonsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonsInsertsToCSV(string SystemId, string Name, string BeginDate, string EndDate, int? LanguageId, int? ApiId, int? CreatedBy, int? UpdatedBy, int? HotelId, int? Type, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelSeasonsInserts(SystemId, Name, BeginDate, EndDate, LanguageId, ApiId, CreatedBy, UpdatedBy, HotelId, Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelseasonsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelseasonsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelSeasonsInsertsToExcel(string SystemId, string Name, string BeginDate, string EndDate, int? LanguageId, int? ApiId, int? CreatedBy, int? UpdatedBy, int? HotelId, int? Type, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelSeasonsInserts(SystemId, Name, BeginDate, EndDate, LanguageId, ApiId, CreatedBy, UpdatedBy, HotelId, Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyaddresses/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyaddresses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByAddressesToCSV(string Address, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyaddresses/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyaddresses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByAddressesToExcel(string Address, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycityids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCityIdsToCSV(int? CityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycityids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCityIdsToExcel(int? CityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycommercialcontactids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycommercialcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCommercialContactIdsToCSV(int? CommercialContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByCommercialContactIds(CommercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycommercialcontactids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycommercialcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCommercialContactIdsToExcel(int? CommercialContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByCommercialContactIds(CommercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycountryids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycountryids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCountryIdsToCSV(int? CountryId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbycountryids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbycountryids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByCountryIdsToExcel(int? CountryId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyfinancecontactids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyfinancecontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByFinanceContactIdsToCSV(int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyfinancecontactids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyfinancecontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByFinanceContactIdsToExcel(int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyhotelchainids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyhotelchainids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByHotelChainIdsToCSV(int? HotelChainId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByHotelChainIds(HotelChainId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyhotelchainids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyhotelchainids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByHotelChainIdsToExcel(int? HotelChainId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByHotelChainIds(HotelChainId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyhoteltypeids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyhoteltypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByHotelTypeIdsToCSV(int? HotelTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByHotelTypeIds(HotelTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyhoteltypeids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyhoteltypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByHotelTypeIdsToExcel(int? HotelTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByHotelTypeIds(HotelTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbylatitudes/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbylatitudes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByLatitudesToCSV(decimal? Latitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByLatitudes(Latitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbylatitudes/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbylatitudes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByLatitudesToExcel(decimal? Latitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByLatitudes(Latitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbylongitudes/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbylongitudes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByLongitudesToCSV(decimal? Longitude, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByLongitudes(Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbylongitudes/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbylongitudes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByLongitudesToExcel(decimal? Longitude, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByLongitudes(Longitude), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbynumberrooms/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbynumberrooms/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByNumberRoomsToCSV(int? NumberRooms, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByNumberRooms(NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbynumberrooms/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbynumberrooms/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByNumberRoomsToExcel(int? NumberRooms, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByNumberRooms(NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyregionids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyregionids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByRegionIdsToCSV(int? RegionId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByRegionIds(RegionId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyregionids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyregionids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByRegionIdsToExcel(int? RegionId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByRegionIds(RegionId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyreleases/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyreleases/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByReleasesToCSV(int? Release, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyreleases/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyreleases/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByReleasesToExcel(int? Release, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByReleases(Release), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyreservationcontactids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyreservationcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByReservationContactIdsToCSV(int? ReservationContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyreservationcontactids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyreservationcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByReservationContactIdsToExcel(int? ReservationContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyzipcodes/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyzipcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByZipCodesToCSV(string ZipCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByZipCodes(ZipCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyzipcodes/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyzipcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByZipCodesToExcel(string ZipCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByZipCodes(ZipCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyzoneids/csv")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyzoneids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByZoneIdsToCSV(int? ZoneId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsGetByZoneIds(ZoneId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsgetbyzoneids/excel")]
        [HttpGet("/export/ZarenSoft/hotelsgetbyzoneids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsGetByZoneIdsToExcel(int? ZoneId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsGetByZoneIds(ZoneId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsinserts/csv")]
        [HttpGet("/export/ZarenSoft/hotelsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsInsertsToCSV(int? HotelChainId, string Name, int? HotelTypeId, int? CountryId, int? RegionId, int? ZoneId, int? CityId, string Address, string ZipCode, decimal? Latitude, decimal? Longitude, int? CommercialContactId, int? ReservationContactId, int? FinanceContactId, int? Release, int? NumberRooms, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsInserts(HotelChainId, Name, HotelTypeId, CountryId, RegionId, ZoneId, CityId, Address, ZipCode, Latitude, Longitude, CommercialContactId, ReservationContactId, FinanceContactId, Release, NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsinserts/excel")]
        [HttpGet("/export/ZarenSoft/hotelsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsInsertsToExcel(int? HotelChainId, string Name, int? HotelTypeId, int? CountryId, int? RegionId, int? ZoneId, int? CityId, string Address, string ZipCode, decimal? Latitude, decimal? Longitude, int? CommercialContactId, int? ReservationContactId, int? FinanceContactId, int? Release, int? NumberRooms, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsInserts(HotelChainId, Name, HotelTypeId, CountryId, RegionId, ZoneId, CityId, Address, ZipCode, Latitude, Longitude, CommercialContactId, ReservationContactId, FinanceContactId, Release, NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsupdates/csv")]
        [HttpGet("/export/ZarenSoft/hotelsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsUpdatesToCSV(int? Id, int? HotelChainId, string Name, int? HotelTypeId, int? CountryId, int? RegionId, int? ZoneId, int? CityId, string Address, string ZipCode, decimal? Latitude, decimal? Longitude, int? CommercialContactId, int? ReservationContactId, int? FinanceContactId, int? Release, int? NumberRooms, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelsUpdates(Id, HotelChainId, Name, HotelTypeId, CountryId, RegionId, ZoneId, CityId, Address, ZipCode, Latitude, Longitude, CommercialContactId, ReservationContactId, FinanceContactId, Release, NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hotelsupdates/excel")]
        [HttpGet("/export/ZarenSoft/hotelsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelsUpdatesToExcel(int? Id, int? HotelChainId, string Name, int? HotelTypeId, int? CountryId, int? RegionId, int? ZoneId, int? CityId, string Address, string ZipCode, decimal? Latitude, decimal? Longitude, int? CommercialContactId, int? ReservationContactId, int? FinanceContactId, int? Release, int? NumberRooms, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelsUpdates(Id, HotelChainId, Name, HotelTypeId, CountryId, RegionId, ZoneId, CityId, Address, ZipCode, Latitude, Longitude, CommercialContactId, ReservationContactId, FinanceContactId, Release, NumberRooms), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyhoteltypeids/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyhoteltypeids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByHotelTypeIdsToCSV(int? HotelTypeId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesGetByHotelTypeIds(HotelTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyhoteltypeids/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyhoteltypeids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByHotelTypeIdsToExcel(int? HotelTypeId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesGetByHotelTypeIds(HotelTypeId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByLanguageIdsToCSV(int? LanguageId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByLanguageIdsToExcel(int? LanguageId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesGetByLanguageIds(LanguageId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesInsertsToCSV(int? HotelTypeId, int? LanguageId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesInserts(HotelTypeId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesInsertsToExcel(int? HotelTypeId, int? LanguageId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesInserts(HotelTypeId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesUpdatesToCSV(int? Id, int? HotelTypeId, int? LanguageId, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypeLanguagesUpdates(Id, HotelTypeId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypelanguagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypelanguagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypeLanguagesUpdatesToExcel(int? Id, int? HotelTypeId, int? LanguageId, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypeLanguagesUpdates(Id, HotelTypeId, LanguageId, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/hoteltypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetHotelTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/hoteltypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/hoteltypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportHotelTypesUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetHotelTypesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/languagesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/languagesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguagesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/languagesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/languagesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguagesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/languagesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/languagesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguagesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesinserts/csv")]
        [HttpGet("/export/ZarenSoft/languagesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguagesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesinserts/excel")]
        [HttpGet("/export/ZarenSoft/languagesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguagesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesupdates/csv")]
        [HttpGet("/export/ZarenSoft/languagesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesUpdatesToCSV(int? Id, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLanguagesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/languagesupdates/excel")]
        [HttpGet("/export/ZarenSoft/languagesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLanguagesUpdatesToExcel(int? Id, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLanguagesUpdates(Id, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinits/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinits/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassInitsToCSV(int? CanClassInit, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanClassInits(CanClassInit), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinits/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinits/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassInitsToExcel(int? CanClassInit, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanClassInits(CanClassInit), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinserts/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassInsertsToCSV(int? CanClassInsert, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanClassInserts(CanClassInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinserts/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassInsertsToExcel(int? CanClassInsert, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanClassInserts(CanClassInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclasslists/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclasslists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassListsToCSV(int? CanClassList, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanClassLists(CanClassList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclasslists/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclasslists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassListsToExcel(int? CanClassList, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanClassLists(CanClassList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassupdates/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassUpdatesToCSV(int? CanClassUpdate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanClassUpdates(CanClassUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassupdates/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanclassupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanClassUpdatesToExcel(int? CanClassUpdate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanClassUpdates(CanClassUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycandeletes/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycandeletes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanDeletesToCSV(int? CanDelete, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanDeletes(CanDelete), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycandeletes/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycandeletes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanDeletesToExcel(int? CanDelete, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanDeletes(CanDelete), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetlists/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetlists/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanGetListsToCSV(int? CanGetList, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanGetLists(CanGetList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetlists/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetlists/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanGetListsToExcel(int? CanGetList, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanGetLists(CanGetList), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetones/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanGetOnesToCSV(int? CanGetOne, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanGetOnes(CanGetOne), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetones/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycangetones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanGetOnesToExcel(int? CanGetOne, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanGetOnes(CanGetOne), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycaninserts/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycaninserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanInsertsToCSV(int? CanInsert, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanInserts(CanInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycaninserts/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycaninserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanInsertsToExcel(int? CanInsert, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanInserts(CanInsert), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanupdates/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanUpdatesToCSV(int? CanUpdate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanUpdates(CanUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanupdates/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanUpdatesToExcel(int? CanUpdate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanUpdates(CanUpdate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanviews/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanviews/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanViewsToCSV(int? CanView, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByCanViews(CanView), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanviews/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbycanviews/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByCanViewsToExcel(int? CanView, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByCanViews(CanView), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbychangedates/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbychangedates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByChangeDatesToCSV(string ChangeDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByChangeDates(ChangeDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbychangedates/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbychangedates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByChangeDatesToExcel(string ChangeDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByChangeDates(ChangeDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbydatabasetables/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbydatabasetables/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByDatabaseTablesToCSV(int? DatabaseTables, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByDatabaseTables(DatabaseTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbydatabasetables/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbydatabasetables/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByDatabaseTablesToExcel(int? DatabaseTables, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByDatabaseTables(DatabaseTables), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifybies/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifybies/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByModifyBiesToCSV(int? ModifyBy, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByModifyBies(ModifyBy), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifybies/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifybies/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByModifyBiesToExcel(int? ModifyBy, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByModifyBies(ModifyBy), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifydates/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifydates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByModifyDatesToCSV(string ModifyDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByModifyDates(ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifydates/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbymodifydates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByModifyDatesToExcel(string ModifyDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByModifyDates(ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbynotes/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbynotes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByNotesToCSV(string Note, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByNotes(Note), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbynotes/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbynotes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByNotesToExcel(string Note, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByNotes(Note), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyproducts/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByProductsToCSV(int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyproducts/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByProductsToExcel(int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyuserids/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyuserids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByUserIdsToCSV(int? UserID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetbyuserids/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetbyuserids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetByUserIdsToExcel(int? UserID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetchangedatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetchangedatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetChangeDateBetweensToCSV(string ChangeDateStart, string ChangeDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetChangeDateBetweens(ChangeDateStart, ChangeDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetchangedatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetchangedatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetChangeDateBetweensToExcel(string ChangeDateStart, string ChangeDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetChangeDateBetweens(ChangeDateStart, ChangeDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetmodifydatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetmodifydatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetModifyDateBetweensToCSV(string ModifyDateStart, string ModifyDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsGetModifyDateBetweens(ModifyDateStart, ModifyDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsgetmodifydatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsgetmodifydatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsGetModifyDateBetweensToExcel(string ModifyDateStart, string ModifyDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsGetModifyDateBetweens(ModifyDateStart, ModifyDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsinserts/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsInsertsToCSV(int? UserID, string ChangeDate, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanGetOne, int? CanGetList, int? CanDelete, int? CanView, int? CanClassInit, int? CanClassInsert, int? CanClassList, int? CanClassUpdate, int? Products, string Note, int? ModifyBy, string ModifyDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsInserts(UserID, ChangeDate, DatabaseTables, CanInsert, CanUpdate, CanGetOne, CanGetList, CanDelete, CanView, CanClassInit, CanClassInsert, CanClassList, CanClassUpdate, Products, Note, ModifyBy, ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsinserts/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsInsertsToExcel(int? UserID, string ChangeDate, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanGetOne, int? CanGetList, int? CanDelete, int? CanView, int? CanClassInit, int? CanClassInsert, int? CanClassList, int? CanClassUpdate, int? Products, string Note, int? ModifyBy, string ModifyDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsInserts(UserID, ChangeDate, DatabaseTables, CanInsert, CanUpdate, CanGetOne, CanGetList, CanDelete, CanView, CanClassInit, CanClassInsert, CanClassList, CanClassUpdate, Products, Note, ModifyBy, ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsupdates/csv")]
        [HttpGet("/export/ZarenSoft/logpermissionsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsUpdatesToCSV(int? ID, int? UserID, string ChangeDate, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanGetOne, int? CanGetList, int? CanDelete, int? CanView, int? CanClassInit, int? CanClassInsert, int? CanClassList, int? CanClassUpdate, int? Products, string Note, int? ModifyBy, string ModifyDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogPermissionsUpdates(ID, UserID, ChangeDate, DatabaseTables, CanInsert, CanUpdate, CanGetOne, CanGetList, CanDelete, CanView, CanClassInit, CanClassInsert, CanClassList, CanClassUpdate, Products, Note, ModifyBy, ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logpermissionsupdates/excel")]
        [HttpGet("/export/ZarenSoft/logpermissionsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogPermissionsUpdatesToExcel(int? ID, int? UserID, string ChangeDate, int? DatabaseTables, int? CanInsert, int? CanUpdate, int? CanGetOne, int? CanGetList, int? CanDelete, int? CanView, int? CanClassInit, int? CanClassInsert, int? CanClassList, int? CanClassUpdate, int? Products, string Note, int? ModifyBy, string ModifyDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogPermissionsUpdates(ID, UserID, ChangeDate, DatabaseTables, CanInsert, CanUpdate, CanGetOne, CanGetList, CanDelete, CanView, CanClassInit, CanClassInsert, CanClassList, CanClassUpdate, Products, Note, ModifyBy, ModifyDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/logsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/logsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbydates/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbydates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByDatesToCSV(string Date, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByDates(Date), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbydates/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbydates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByDatesToExcel(string Date, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByDates(Date), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbylogmethods/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbylogmethods/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByLogMethodsToCSV(string LogMethod, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByLogMethods(LogMethod), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbylogmethods/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbylogmethods/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByLogMethodsToExcel(string LogMethod, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByLogMethods(LogMethod), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbylogpaths/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbylogpaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByLogPathsToCSV(string LogPath, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByLogPaths(LogPath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbylogpaths/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbylogpaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByLogPathsToExcel(string LogPath, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByLogPaths(LogPath), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbytypes/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbytypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByTypesToCSV(int? Type, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByTypes(Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbytypes/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbytypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByTypesToExcel(int? Type, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByTypes(Type), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyurloriginalstrings/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbyurloriginalstrings/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUrlOriginalStringsToCSV(string UrlOriginalString, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByUrlOriginalStrings(UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyurloriginalstrings/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbyurloriginalstrings/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUrlOriginalStringsToExcel(string UrlOriginalString, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByUrlOriginalStrings(UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuseragents/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbyuseragents/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserAgentsToCSV(string UserAgent, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByUserAgents(UserAgent), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuseragents/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbyuseragents/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserAgentsToExcel(string UserAgent, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByUserAgents(UserAgent), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuserhostaddresses/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbyuserhostaddresses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserHostAddressesToCSV(string UserHostAddress, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByUserHostAddresses(UserHostAddress), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuserhostaddresses/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbyuserhostaddresses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserHostAddressesToExcel(string UserHostAddress, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByUserHostAddresses(UserHostAddress), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuserids/csv")]
        [HttpGet("/export/ZarenSoft/logsgetbyuserids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserIdsToCSV(int? UserID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetbyuserids/excel")]
        [HttpGet("/export/ZarenSoft/logsgetbyuserids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetByUserIdsToExcel(int? UserID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/logsgetdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetDateBetweensToCSV(string DateStart, string DateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsGetDateBetweens(DateStart, DateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsgetdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/logsgetdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsGetDateBetweensToExcel(string DateStart, string DateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsGetDateBetweens(DateStart, DateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsinserts/csv")]
        [HttpGet("/export/ZarenSoft/logsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsInsertsToCSV(string Description, string Date, int? Type, string LogPath, string LogMethod, int? UserID, string UserAgent, string UserHostAddress, string UrlOriginalString, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsInserts(Description, Date, Type, LogPath, LogMethod, UserID, UserAgent, UserHostAddress, UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsinserts/excel")]
        [HttpGet("/export/ZarenSoft/logsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsInsertsToExcel(string Description, string Date, int? Type, string LogPath, string LogMethod, int? UserID, string UserAgent, string UserHostAddress, string UrlOriginalString, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsInserts(Description, Date, Type, LogPath, LogMethod, UserID, UserAgent, UserHostAddress, UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsupdates/csv")]
        [HttpGet("/export/ZarenSoft/logsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsUpdatesToCSV(int? ID, string Description, string Date, int? Type, string LogPath, string LogMethod, int? UserID, string UserAgent, string UserHostAddress, string UrlOriginalString, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetLogsUpdates(ID, Description, Date, Type, LogPath, LogMethod, UserID, UserAgent, UserHostAddress, UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/logsupdates/excel")]
        [HttpGet("/export/ZarenSoft/logsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportLogsUpdatesToExcel(int? ID, string Description, string Date, int? Type, string LogPath, string LogMethod, int? UserID, string UserAgent, string UserHostAddress, string UrlOriginalString, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetLogsUpdates(ID, Description, Date, Type, LogPath, LogMethod, UserID, UserAgent, UserHostAddress, UrlOriginalString), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetalls/csv")]
        [HttpGet("/export/ZarenSoft/menugetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetalls/excel")]
        [HttpGet("/export/ZarenSoft/menugetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbycolors/csv")]
        [HttpGet("/export/ZarenSoft/menugetbycolors/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByColorsToCSV(string Color, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByColors(Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbycolors/excel")]
        [HttpGet("/export/ZarenSoft/menugetbycolors/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByColorsToExcel(string Color, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByColors(Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyicons/csv")]
        [HttpGet("/export/ZarenSoft/menugetbyicons/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByIconsToCSV(string Icon, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByIcons(Icon), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyicons/excel")]
        [HttpGet("/export/ZarenSoft/menugetbyicons/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByIconsToExcel(string Icon, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByIcons(Icon), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyids/csv")]
        [HttpGet("/export/ZarenSoft/menugetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyids/excel")]
        [HttpGet("/export/ZarenSoft/menugetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitles/csv")]
        [HttpGet("/export/ZarenSoft/menugetbytitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitlesToCSV(string Title, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitles/excel")]
        [HttpGet("/export/ZarenSoft/menugetbytitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitlesToExcel(string Title, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitlearabics/csv")]
        [HttpGet("/export/ZarenSoft/menugetbytitlearabics/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitleArabicsToCSV(string TitleArabic, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByTitleArabics(TitleArabic), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitlearabics/excel")]
        [HttpGet("/export/ZarenSoft/menugetbytitlearabics/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitleArabicsToExcel(string TitleArabic, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByTitleArabics(TitleArabic), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitleengs/csv")]
        [HttpGet("/export/ZarenSoft/menugetbytitleengs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitleEngsToCSV(string TitleEng, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByTitleEngs(TitleEng), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbytitleengs/excel")]
        [HttpGet("/export/ZarenSoft/menugetbytitleengs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByTitleEngsToExcel(string TitleEng, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByTitleEngs(TitleEng), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyurls/csv")]
        [HttpGet("/export/ZarenSoft/menugetbyurls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByUrlsToCSV(string Url, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuGetByUrls(Url), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menugetbyurls/excel")]
        [HttpGet("/export/ZarenSoft/menugetbyurls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuGetByUrlsToExcel(string Url, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuGetByUrls(Url), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menuinserts/csv")]
        [HttpGet("/export/ZarenSoft/menuinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuInsertsToCSV(string Title, string TitleEng, string TitleArabic, string Url, string Icon, string Color, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuInserts(Title, TitleEng, TitleArabic, Url, Icon, Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menuinserts/excel")]
        [HttpGet("/export/ZarenSoft/menuinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuInsertsToExcel(string Title, string TitleEng, string TitleArabic, string Url, string Icon, string Color, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuInserts(Title, TitleEng, TitleArabic, Url, Icon, Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menuupdates/csv")]
        [HttpGet("/export/ZarenSoft/menuupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuUpdatesToCSV(int? ID, string Title, string TitleEng, string TitleArabic, string Url, string Icon, string Color, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetMenuUpdates(ID, Title, TitleEng, TitleArabic, Url, Icon, Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/menuupdates/excel")]
        [HttpGet("/export/ZarenSoft/menuupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportMenuUpdatesToExcel(int? ID, string Title, string TitleEng, string TitleArabic, string Url, string Icon, string Color, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetMenuUpdates(ID, Title, TitleEng, TitleArabic, Url, Icon, Color), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetalls/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetalls/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyids/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyids/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogdescriptions/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogdescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogDescriptionsToCSV(string ogDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByogDescriptions(ogDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogdescriptions/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogdescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogDescriptionsToExcel(string ogDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByogDescriptions(ogDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogimages/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogimages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogImagesToCSV(string ogImage, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByogImages(ogImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogimages/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogimages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogImagesToExcel(string ogImage, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByogImages(ogImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogtitles/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogtitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogTitlesToCSV(string ogTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByogTitles(ogTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyogtitles/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyogtitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByogTitlesToExcel(string ogTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByogTitles(ogTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbypageids/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbypageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByPageIdsToCSV(int? PageID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByPageIds(PageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbypageids/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbypageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByPageIdsToExcel(int? PageID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByPageIds(PageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbypagetypes/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbypagetypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByPageTypesToCSV(int? PageType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByPageTypes(PageType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbypagetypes/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbypagetypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByPageTypesToExcel(int? PageType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByPageTypes(PageType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseodescriptions/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseodescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoDescriptionsToCSV(string seoDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByseoDescriptions(seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseodescriptions/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseodescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoDescriptionsToExcel(string seoDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByseoDescriptions(seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseokeywords/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseokeywords/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoKeywordsToCSV(string seoKeyword, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByseoKeywords(seoKeyword), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseokeywords/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseokeywords/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoKeywordsToExcel(string seoKeyword, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByseoKeywords(seoKeyword), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseotitles/csv")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseotitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoTitlesToCSV(string seoTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoGetByseoTitles(seoTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseogetbyseotitles/excel")]
        [HttpGet("/export/ZarenSoft/ogseogetbyseotitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoGetByseoTitlesToExcel(string seoTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoGetByseoTitles(seoTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseoinserts/csv")]
        [HttpGet("/export/ZarenSoft/ogseoinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoInsertsToCSV(int? PageType, int? PageID, string ogImage, string ogDescription, string ogTitle, string seoTitle, string seoKeyword, string seoDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoInserts(PageType, PageID, ogImage, ogDescription, ogTitle, seoTitle, seoKeyword, seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseoinserts/excel")]
        [HttpGet("/export/ZarenSoft/ogseoinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoInsertsToExcel(int? PageType, int? PageID, string ogImage, string ogDescription, string ogTitle, string seoTitle, string seoKeyword, string seoDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoInserts(PageType, PageID, ogImage, ogDescription, ogTitle, seoTitle, seoKeyword, seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseoupdates/csv")]
        [HttpGet("/export/ZarenSoft/ogseoupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoUpdatesToCSV(int? ID, int? PageType, int? PageID, string ogImage, string ogDescription, string ogTitle, string seoTitle, string seoKeyword, string seoDescription, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetOgSeoUpdates(ID, PageType, PageID, ogImage, ogDescription, ogTitle, seoTitle, seoKeyword, seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/ogseoupdates/excel")]
        [HttpGet("/export/ZarenSoft/ogseoupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportOgSeoUpdatesToExcel(int? ID, int? PageType, int? PageID, string ogImage, string ogDescription, string ogTitle, string seoTitle, string seoKeyword, string seoDescription, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetOgSeoUpdates(ID, PageType, PageID, ogImage, ogDescription, ogTitle, seoTitle, seoKeyword, seoDescription), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetalls/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetalls/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbycontents/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbycontents/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByContentsToCSV(string Contents, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByContents(Contents), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbycontents/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbycontents/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByContentsToExcel(string Contents, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByContents(Contents), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbycreatedates/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbycreatedates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByCreateDatesToCSV(string CreateDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbycreatedates/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbycreatedates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByCreateDatesToExcel(string CreateDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbyimages/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbyimages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByImagesToCSV(string Image, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByImages(Image), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbyimages/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbyimages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByImagesToExcel(string Image, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByImages(Image), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByLanguageIdsToCSV(int? LanguageID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByLanguageIdsToExcel(int? LanguageID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbypageurls/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbypageurls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByPageUrlsToCSV(string PageUrl, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByPageUrls(PageUrl), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbypageurls/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbypageurls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByPageUrlsToExcel(string PageUrl, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByPageUrls(PageUrl), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbysubtitles/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbysubtitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetBySubTitlesToCSV(string SubTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetBySubTitles(SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbysubtitles/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbysubtitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetBySubTitlesToExcel(string SubTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetBySubTitles(SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbytableorders/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbytableorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByTableOrdersToCSV(int? TableOrder, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbytableorders/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbytableorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByTableOrdersToExcel(int? TableOrder, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbytitles/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbytitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByTitlesToCSV(string Title, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetbytitles/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetbytitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetByTitlesToExcel(string Title, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetcreatedatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentgetcreatedatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetCreateDateBetweensToCSV(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentgetcreatedatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentgetcreatedatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentGetCreateDateBetweensToExcel(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentinserts/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentInsertsToCSV(string Title, string Contents, string Image, int? LanguageID, int? TableOrder, string CreateDate, string PageUrl, string SubTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentInserts(Title, Contents, Image, LanguageID, TableOrder, CreateDate, PageUrl, SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentinserts/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentInsertsToExcel(string Title, string Contents, string Image, int? LanguageID, int? TableOrder, string CreateDate, string PageUrl, string SubTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentInserts(Title, Contents, Image, LanguageID, TableOrder, CreateDate, PageUrl, SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentupdates/csv")]
        [HttpGet("/export/ZarenSoft/pagecontentupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentUpdatesToCSV(int? ID, string Title, string Contents, string Image, int? LanguageID, int? TableOrder, string CreateDate, string PageUrl, string SubTitle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageContentUpdates(ID, Title, Contents, Image, LanguageID, TableOrder, CreateDate, PageUrl, SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagecontentupdates/excel")]
        [HttpGet("/export/ZarenSoft/pagecontentupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageContentUpdatesToExcel(int? ID, string Title, string Contents, string Image, int? LanguageID, int? TableOrder, string CreateDate, string PageUrl, string SubTitle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageContentUpdates(ID, Title, Contents, Image, LanguageID, TableOrder, CreateDate, PageUrl, SubTitle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/pagetypesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/pagetypesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/pagetypesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/pagetypesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/pagetypesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/pagetypesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesinserts/csv")]
        [HttpGet("/export/ZarenSoft/pagetypesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesinserts/excel")]
        [HttpGet("/export/ZarenSoft/pagetypesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypesInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesupdates/csv")]
        [HttpGet("/export/ZarenSoft/pagetypesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesUpdatesToCSV(int? ID, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPageTypesUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pagetypesupdates/excel")]
        [HttpGet("/export/ZarenSoft/pagetypesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPageTypesUpdatesToExcel(int? ID, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPageTypesUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetalls/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetalls/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyadultids/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyadultids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByAdultIdsToCSV(int? AdultId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByAdultIds(AdultId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyadultids/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyadultids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByAdultIdsToExcel(int? AdultId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByAdultIds(AdultId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfileids/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfileids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerinformationgetbyfileIdsToCSV(int? FILE_ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfileids/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfileids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerinformationgetbyfileIdsToExcel(int? FILE_ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerinformationgetbyfileIds(FILE_ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfilenames/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfilenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerinformationgetbyfileNamesToCSV(string FILE_NAME, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfilenames/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfilenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerinformationgetbyfileNamesToExcel(string FILE_NAME, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerinformationgetbyfileNames(FILE_NAME), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfirstnames/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfirstnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByFirstNamesToCSV(string FirstName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByFirstNames(FirstName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfirstnames/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyfirstnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByFirstNamesToExcel(string FirstName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByFirstNames(FirstName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbylastnames/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbylastnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByLastNamesToCSV(string LastName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByLastNames(LastName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbylastnames/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbylastnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByLastNamesToExcel(string LastName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByLastNames(LastName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbynationalitycodes/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbynationalitycodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByNationalityCodesToCSV(int? NationalityCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByNationalityCodes(NationalityCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbynationalitycodes/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbynationalitycodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByNationalityCodesToExcel(int? NationalityCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByNationalityCodes(NationalityCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbypaxsequences/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbypaxsequences/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByPaxSequencesToCSV(int? PaxSequence, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByPaxSequences(PaxSequence), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbypaxsequences/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbypaxsequences/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByPaxSequencesToExcel(int? PaxSequence, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByPaxSequences(PaxSequence), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbypnrpaxids/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbypnrpaxids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByPnrpaxIdsToCSV(string PnrpaxId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByPnrpaxIds(PnrpaxId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbypnrpaxids/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbypnrpaxids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByPnrpaxIdsToExcel(string PnrpaxId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByPnrpaxIds(PnrpaxId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyrecorddatestamps/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyrecorddatestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByRecordDateStampsToCSV(string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbyrecorddatestamps/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbyrecorddatestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByRecordDateStampsToExcel(string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByRecordDateStamps(RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytitles/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytitles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTitlesToCSV(string Title, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytitles/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytitles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTitlesToExcel(string Title, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByTitles(Title), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalfares/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalfares/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalFaresToCSV(decimal? TotalFare, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByTotalFares(TotalFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalfares/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalfares/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalFaresToExcel(decimal? TotalFare, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByTotalFares(TotalFare), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalpaids/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalpaids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalPaidsToCSV(decimal? TotalPaid, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByTotalPaids(TotalPaid), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalpaids/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotalpaids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalPaidsToExcel(decimal? TotalPaid, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByTotalPaids(TotalPaid), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotaltaxchgs/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotaltaxchgs/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalTaxchgsToCSV(decimal? TotalTaxchg, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetByTotalTaxchgs(TotalTaxchg), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotaltaxchgs/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetbytotaltaxchgs/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetByTotalTaxchgsToExcel(decimal? TotalTaxchg, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetByTotalTaxchgs(TotalTaxchg), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetrecorddatestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetrecorddatestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetRecordDateStampBetweensToCSV(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationgetrecorddatestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationgetrecorddatestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationGetRecordDateStampBetweensToExcel(string RecordDateStampStart, string RecordDateStampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationGetRecordDateStampBetweens(RecordDateStampStart, RecordDateStampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationinserts/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationInsertsToCSV(string PnrpaxId, string Pnr, int? PaxSequence, string Title, string FirstName, string LastName, int? AdultId, int? NationalityCode, decimal? TotalFare, decimal? TotalTaxchg, decimal? TotalPaid, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationInserts(PnrpaxId, Pnr, PaxSequence, Title, FirstName, LastName, AdultId, NationalityCode, TotalFare, TotalTaxchg, TotalPaid, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationinserts/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationInsertsToExcel(string PnrpaxId, string Pnr, int? PaxSequence, string Title, string FirstName, string LastName, int? AdultId, int? NationalityCode, decimal? TotalFare, decimal? TotalTaxchg, decimal? TotalPaid, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationInserts(PnrpaxId, Pnr, PaxSequence, Title, FirstName, LastName, AdultId, NationalityCode, TotalFare, TotalTaxchg, TotalPaid, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationupdates/csv")]
        [HttpGet("/export/ZarenSoft/passengerinformationupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationUpdatesToCSV(int? Id, string PnrpaxId, string Pnr, int? PaxSequence, string Title, string FirstName, string LastName, int? AdultId, int? NationalityCode, decimal? TotalFare, decimal? TotalTaxchg, decimal? TotalPaid, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengerInformationUpdates(Id, PnrpaxId, Pnr, PaxSequence, Title, FirstName, LastName, AdultId, NationalityCode, TotalFare, TotalTaxchg, TotalPaid, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengerinformationupdates/excel")]
        [HttpGet("/export/ZarenSoft/passengerinformationupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengerInformationUpdatesToExcel(int? Id, string PnrpaxId, string Pnr, int? PaxSequence, string Title, string FirstName, string LastName, int? AdultId, int? NationalityCode, decimal? TotalFare, decimal? TotalTaxchg, decimal? TotalPaid, int? FILE_ID, string FILE_NAME, string RecordDateStamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengerInformationUpdates(Id, PnrpaxId, Pnr, PaxSequence, Title, FirstName, LastName, AdultId, NationalityCode, TotalFare, TotalTaxchg, TotalPaid, FILE_ID, FILE_NAME, RecordDateStamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetalls/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetalls/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassemgertimestamps/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassemgertimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassemgerTimestampsToCSV(string PassemgerTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassemgerTimestamps(PassemgerTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassemgertimestamps/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassemgertimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassemgerTimestampsToExcel(string PassemgerTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassemgerTimestamps(PassemgerTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengeractives/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengeractives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerActivesToCSV(bool? PassengerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerActives(PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengeractives/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengeractives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerActivesToExcel(bool? PassengerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerActives(PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengercelphones/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengercelphones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerCelPhonesToCSV(string PassengerCelPhone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerCelPhones(PassengerCelPhone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengercelphones/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengercelphones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerCelPhonesToExcel(string PassengerCelPhone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerCelPhones(PassengerCelPhone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengeremails/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengeremails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerEmailsToCSV(string PassengerEmail, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerEmails(PassengerEmail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengeremails/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengeremails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerEmailsToExcel(string PassengerEmail, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerEmails(PassengerEmail), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerfullnames/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerfullnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerFullNamesToCSV(string PassengerFullName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerFullNames(PassengerFullName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerfullnames/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerfullnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerFullNamesToExcel(string PassengerFullName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerFullNames(PassengerFullName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerjobpositions/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerjobpositions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerJobPositionsToCSV(string PassengerJobPosition, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerJobPositions(PassengerJobPosition), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerjobpositions/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerjobpositions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerJobPositionsToExcel(string PassengerJobPosition, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerJobPositions(PassengerJobPosition), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerphones/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerphones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerPhonesToCSV(string PassengerPhone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerPhones(PassengerPhone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengerphones/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengerphones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerPhonesToExcel(string PassengerPhone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerPhones(PassengerPhone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengervıps/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengervıps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerVıpsToCSV(bool? PassengerVIP, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetByPassengerVıps(PassengerVIP), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetbypassengervıps/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetbypassengervıps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetByPassengerVıpsToExcel(bool? PassengerVIP, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetByPassengerVıps(PassengerVIP), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetpassemgertimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/passengersgetpassemgertimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetPassemgerTimestampBetweensToCSV(string PassemgerTimestampStart, string PassemgerTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersGetPassemgerTimestampBetweens(PassemgerTimestampStart, PassemgerTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersgetpassemgertimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/passengersgetpassemgertimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersGetPassemgerTimestampBetweensToExcel(string PassemgerTimestampStart, string PassemgerTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersGetPassemgerTimestampBetweens(PassemgerTimestampStart, PassemgerTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersinserts/csv")]
        [HttpGet("/export/ZarenSoft/passengersinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersInsertsToCSV(string PassengerFullName, string PassengerPhone, string PassengerCelPhone, string PassengerEmail, string PassengerJobPosition, bool? PassengerVIP, string PassemgerTimestamp, bool? PassengerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersInserts(PassengerFullName, PassengerPhone, PassengerCelPhone, PassengerEmail, PassengerJobPosition, PassengerVIP, PassemgerTimestamp, PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersinserts/excel")]
        [HttpGet("/export/ZarenSoft/passengersinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersInsertsToExcel(string PassengerFullName, string PassengerPhone, string PassengerCelPhone, string PassengerEmail, string PassengerJobPosition, bool? PassengerVIP, string PassemgerTimestamp, bool? PassengerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersInserts(PassengerFullName, PassengerPhone, PassengerCelPhone, PassengerEmail, PassengerJobPosition, PassengerVIP, PassemgerTimestamp, PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersupdates/csv")]
        [HttpGet("/export/ZarenSoft/passengersupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersUpdatesToCSV(int? Id, string PassengerFullName, string PassengerPhone, string PassengerCelPhone, string PassengerEmail, string PassengerJobPosition, bool? PassengerVIP, string PassemgerTimestamp, bool? PassengerActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPassengersUpdates(Id, PassengerFullName, PassengerPhone, PassengerCelPhone, PassengerEmail, PassengerJobPosition, PassengerVIP, PassemgerTimestamp, PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/passengersupdates/excel")]
        [HttpGet("/export/ZarenSoft/passengersupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPassengersUpdatesToExcel(int? Id, string PassengerFullName, string PassengerPhone, string PassengerCelPhone, string PassengerEmail, string PassengerJobPosition, bool? PassengerVIP, string PassemgerTimestamp, bool? PassengerActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPassengersUpdates(Id, PassengerFullName, PassengerPhone, PassengerCelPhone, PassengerEmail, PassengerJobPosition, PassengerVIP, PassemgerTimestamp, PassengerActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityactives/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyActivesToCSV(bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyActives(FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityactives/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyActivesToExcel(bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyActives(FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityids/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyIdsToCSV(int? FiTyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyIds(FiTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityids/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyIdsToExcel(int? FiTyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyIds(FiTyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfitytimestamps/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfitytimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyTimestampsToCSV(string FiTyTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyTimestamps(FiTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfitytimestamps/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyfitytimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByFiTyTimestampsToExcel(string FiTyTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByFiTyTimestamps(FiTyTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypncuvalues/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypncuvalues/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByPnCuValuesToCSV(string PnCuValue, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByPnCuValues(PnCuValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypncuvalues/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypncuvalues/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByPnCuValuesToExcel(string PnCuValue, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByPnCuValues(PnCuValue), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypnrids/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypnrids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByPnrIdsToCSV(int? PNRId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypnrids/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetbypnrids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetByPnrIdsToExcel(int? PNRId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetByPnrIds(PNRId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetfitytimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetfitytimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetFiTyTimestampBetweensToCSV(string FiTyTimestampStart, string FiTyTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsGetFiTyTimestampBetweens(FiTyTimestampStart, FiTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetfitytimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsgetfitytimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsGetFiTyTimestampBetweensToExcel(string FiTyTimestampStart, string FiTyTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsGetFiTyTimestampBetweens(FiTyTimestampStart, FiTyTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsinserts/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsInsertsToCSV(int? FiTyId, int? PNRId, string PnCuValue, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsInserts(FiTyId, PNRId, PnCuValue, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsinserts/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsInsertsToExcel(int? FiTyId, int? PNRId, string PnCuValue, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsInserts(FiTyId, PNRId, PnCuValue, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsupdates/csv")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsUpdatesToCSV(int? Id, int? FiTyId, int? PNRId, string PnCuValue, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnrCustomFieldsUpdates(Id, FiTyId, PNRId, PnCuValue, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrcustomfieldsupdates/excel")]
        [HttpGet("/export/ZarenSoft/pnrcustomfieldsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnrCustomFieldsUpdatesToExcel(int? Id, int? FiTyId, int? PNRId, string PnCuValue, string FiTyTimestamp, bool? FiTyActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnrCustomFieldsUpdates(Id, FiTyId, PNRId, PnCuValue, FiTyTimestamp, FiTyActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbyagencyids/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbyagencyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByAgencyIdsToCSV(int? AgencyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbyagencyids/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbyagencyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByAgencyIdsToExcel(int? AgencyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByAgencyIds(AgencyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbycompanyids/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbycompanyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByCompanyIdsToCSV(int? CompanyId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByCompanyIds(CompanyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbycompanyids/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbycompanyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByCompanyIdsToExcel(int? CompanyId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByCompanyIds(CompanyId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypassengerids/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypassengerids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPassengerIdsToCSV(int? PassengerId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByPassengerIds(PassengerId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypassengerids/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypassengerids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPassengerIdsToExcel(int? PassengerId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByPassengerIds(PassengerId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypccids/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypccids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPccIdsToCSV(int? PCCId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByPccIds(PCCId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypccids/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypccids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPccIdsToExcel(int? PCCId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByPccIds(PCCId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnractives/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnractives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrActivesToCSV(bool? PNRActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByPnrActives(PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnractives/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnractives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrActivesToExcel(bool? PNRActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByPnrActives(PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnrrecords/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnrrecords/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrRecordsToCSV(string PNRRecord, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByPnrRecords(PNRRecord), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnrrecords/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnrrecords/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrRecordsToExcel(string PNRRecord, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByPnrRecords(PNRRecord), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnrtimestamps/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnrtimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrTimestampsToCSV(string PNRTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetByPnrTimestamps(PNRTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetbypnrtimestamps/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetbypnrtimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetByPnrTimestampsToExcel(string PNRTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetByPnrTimestamps(PNRTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetpnrtimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/pnrsgetpnrtimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetPnrTimestampBetweensToCSV(string PNRTimestampStart, string PNRTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsGetPnrTimestampBetweens(PNRTimestampStart, PNRTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsgetpnrtimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/pnrsgetpnrtimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsGetPnrTimestampBetweensToExcel(string PNRTimestampStart, string PNRTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsGetPnrTimestampBetweens(PNRTimestampStart, PNRTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsinserts/csv")]
        [HttpGet("/export/ZarenSoft/pnrsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsInsertsToCSV(int? AgencyId, int? PCCId, int? CompanyId, int? PassengerId, string PNRRecord, string PNRTimestamp, bool? PNRActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsInserts(AgencyId, PCCId, CompanyId, PassengerId, PNRRecord, PNRTimestamp, PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsinserts/excel")]
        [HttpGet("/export/ZarenSoft/pnrsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsInsertsToExcel(int? AgencyId, int? PCCId, int? CompanyId, int? PassengerId, string PNRRecord, string PNRTimestamp, bool? PNRActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsInserts(AgencyId, PCCId, CompanyId, PassengerId, PNRRecord, PNRTimestamp, PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsupdates/csv")]
        [HttpGet("/export/ZarenSoft/pnrsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsUpdatesToCSV(int? Id, int? AgencyId, int? PCCId, int? CompanyId, int? PassengerId, string PNRRecord, string PNRTimestamp, bool? PNRActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPnRsUpdates(Id, AgencyId, PCCId, CompanyId, PassengerId, PNRRecord, PNRTimestamp, PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/pnrsupdates/excel")]
        [HttpGet("/export/ZarenSoft/pnrsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPnRsUpdatesToExcel(int? Id, int? AgencyId, int? PCCId, int? CompanyId, int? PassengerId, string PNRRecord, string PNRTimestamp, bool? PNRActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPnRsUpdates(Id, AgencyId, PCCId, CompanyId, PassengerId, PNRRecord, PNRTimestamp, PNRActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetalls/csv")]
        [HttpGet("/export/ZarenSoft/possiblequerygetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueryGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetalls/excel")]
        [HttpGet("/export/ZarenSoft/possiblequerygetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueryGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetbyids/csv")]
        [HttpGet("/export/ZarenSoft/possiblequerygetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueryGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetbyids/excel")]
        [HttpGet("/export/ZarenSoft/possiblequerygetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueryGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetbyqueries/csv")]
        [HttpGet("/export/ZarenSoft/possiblequerygetbyqueries/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetByQueriesToCSV(string Query, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueryGetByQueries(Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequerygetbyqueries/excel")]
        [HttpGet("/export/ZarenSoft/possiblequerygetbyqueries/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryGetByQueriesToExcel(string Query, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueryGetByQueries(Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeryinserts/csv")]
        [HttpGet("/export/ZarenSoft/possiblequeryinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryInsertsToCSV(string Query, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueryInserts(Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeryinserts/excel")]
        [HttpGet("/export/ZarenSoft/possiblequeryinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryInsertsToExcel(string Query, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueryInserts(Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeryupdates/csv")]
        [HttpGet("/export/ZarenSoft/possiblequeryupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryUpdatesToCSV(int? Id, string Query, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetPossibleQueryUpdates(Id, Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/possiblequeryupdates/excel")]
        [HttpGet("/export/ZarenSoft/possiblequeryupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportPossibleQueryUpdatesToExcel(int? Id, string Query, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetPossibleQueryUpdates(Id, Query), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetalls/csv")]
        [HttpGet("/export/ZarenSoft/providersgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetalls/excel")]
        [HttpGet("/export/ZarenSoft/providersgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyaddresses/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbyaddresses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByAddressesToCSV(string Address, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyaddresses/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbyaddresses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByAddressesToExcel(string Address, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByAddresses(Address), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbycomercialcontactids/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbycomercialcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByComercialContactIdsToCSV(int? ComercialContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByComercialContactIds(ComercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbycomercialcontactids/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbycomercialcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByComercialContactIdsToExcel(int? ComercialContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByComercialContactIds(ComercialContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyfinancecontactids/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbyfinancecontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByFinanceContactIdsToCSV(int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyfinancecontactids/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbyfinancecontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByFinanceContactIdsToExcel(int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByFinanceContactIds(FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyreservationcontactids/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbyreservationcontactids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByReservationContactIdsToCSV(int? ReservationContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbyreservationcontactids/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbyreservationcontactids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByReservationContactIdsToExcel(int? ReservationContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByReservationContactIds(ReservationContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbywebsites/csv")]
        [HttpGet("/export/ZarenSoft/providersgetbywebsites/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByWebsitesToCSV(string Website, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersGetByWebsites(Website), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersgetbywebsites/excel")]
        [HttpGet("/export/ZarenSoft/providersgetbywebsites/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersGetByWebsitesToExcel(string Website, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersGetByWebsites(Website), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersinserts/csv")]
        [HttpGet("/export/ZarenSoft/providersinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersInsertsToCSV(string Name, string Address, string Website, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersInserts(Name, Address, Website, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersinserts/excel")]
        [HttpGet("/export/ZarenSoft/providersinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersInsertsToExcel(string Name, string Address, string Website, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersInserts(Name, Address, Website, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersupdates/csv")]
        [HttpGet("/export/ZarenSoft/providersupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersUpdatesToCSV(int? Id, string Name, string Address, string Website, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvidersUpdates(Id, Name, Address, Website, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/providersupdates/excel")]
        [HttpGet("/export/ZarenSoft/providersupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvidersUpdatesToExcel(int? Id, string Name, string Address, string Website, int? ComercialContactId, int? ReservationContactId, int? FinanceContactId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvidersUpdates(Id, Name, Address, Website, ComercialContactId, ReservationContactId, FinanceContactId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetalls/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetalls/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbycityids/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbycityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByCityIdsToCSV(int? CityID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByCityIds(CityID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbycityids/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbycityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByCityIdsToExcel(int? CityID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByCityIds(CityID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbyinformations/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbyinformations/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByInformationsToCSV(string Information, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByInformations(Information), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbyinformations/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbyinformations/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByInformationsToExcel(string Information, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByInformations(Information), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbylistimages/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbylistimages/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByListImagesToCSV(string ListImage, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByListImages(ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbylistimages/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbylistimages/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByListImagesToExcel(string ListImage, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByListImages(ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbynames/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbynames/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbystatus/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbystatus/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByStatusToCSV(int? Statu, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByStatus(Statu), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbystatus/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbystatus/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByStatusToExcel(int? Statu, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByStatus(Statu), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbytableorders/csv")]
        [HttpGet("/export/ZarenSoft/proviencegetbytableorders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByTableOrdersToCSV(int? TableOrder, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/proviencegetbytableorders/excel")]
        [HttpGet("/export/ZarenSoft/proviencegetbytableorders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceGetByTableOrdersToExcel(int? TableOrder, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceGetByTableOrders(TableOrder), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/provienceinserts/csv")]
        [HttpGet("/export/ZarenSoft/provienceinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceInsertsToCSV(string Name, int? CityID, int? Statu, int? TableOrder, string Information, string ListImage, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceInserts(Name, CityID, Statu, TableOrder, Information, ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/provienceinserts/excel")]
        [HttpGet("/export/ZarenSoft/provienceinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceInsertsToExcel(string Name, int? CityID, int? Statu, int? TableOrder, string Information, string ListImage, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceInserts(Name, CityID, Statu, TableOrder, Information, ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/provienceupdates/csv")]
        [HttpGet("/export/ZarenSoft/provienceupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceUpdatesToCSV(int? ID, string Name, int? CityID, int? Statu, int? TableOrder, string Information, string ListImage, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetProvienceUpdates(ID, Name, CityID, Statu, TableOrder, Information, ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/provienceupdates/excel")]
        [HttpGet("/export/ZarenSoft/provienceupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportProvienceUpdatesToExcel(int? ID, string Name, int? CityID, int? Statu, int? TableOrder, string Information, string ListImage, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetProvienceUpdates(ID, Name, CityID, Statu, TableOrder, Information, ListImage), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/regionsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/regionsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbycountryids/csv")]
        [HttpGet("/export/ZarenSoft/regionsgetbycountryids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByCountryIdsToCSV(int? CountryId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbycountryids/excel")]
        [HttpGet("/export/ZarenSoft/regionsgetbycountryids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByCountryIdsToExcel(int? CountryId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsGetByCountryIds(CountryId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/regionsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/regionsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbylatlongbounds/csv")]
        [HttpGet("/export/ZarenSoft/regionsgetbylatlongbounds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByLatLongBoundsToCSV(string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsGetByLatLongBounds(LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbylatlongbounds/excel")]
        [HttpGet("/export/ZarenSoft/regionsgetbylatlongbounds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByLatLongBoundsToExcel(string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsGetByLatLongBounds(LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/regionsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/regionsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsinserts/csv")]
        [HttpGet("/export/ZarenSoft/regionsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsInsertsToCSV(int? CountryId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsInserts(CountryId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsinserts/excel")]
        [HttpGet("/export/ZarenSoft/regionsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsInsertsToExcel(int? CountryId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsInserts(CountryId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsupdates/csv")]
        [HttpGet("/export/ZarenSoft/regionsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsUpdatesToCSV(int? Id, int? CountryId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRegionsUpdates(Id, CountryId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/regionsupdates/excel")]
        [HttpGet("/export/ZarenSoft/regionsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRegionsUpdatesToExcel(int? Id, int? CountryId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRegionsUpdates(Id, CountryId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyapartprices/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyapartprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByApartPricesToCSV(string ApartPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetByApartPrices(ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyapartprices/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyapartprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByApartPricesToExcel(string ApartPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetByApartPrices(ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertids/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByPropertIdsToCSV(int? PropertID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetByPropertIds(PropertID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertids/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByPropertIdsToExcel(int? PropertID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetByPropertIds(PropertID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertprices/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByPropertPricesToCSV(decimal? PropertPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetByPropertPrices(PropertPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertprices/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbypropertprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByPropertPricesToExcel(decimal? PropertPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetByPropertPrices(PropertPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyrezervationids/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyrezervationids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByRezervationIdsToCSV(int? RezervationID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsGetByRezervationIds(RezervationID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyrezervationids/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsgetbyrezervationids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsGetByRezervationIdsToExcel(int? RezervationID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsGetByRezervationIds(RezervationID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsinserts/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsInsertsToCSV(int? RezervationID, int? PropertID, decimal? PropertPrice, string ApartPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsInserts(RezervationID, PropertID, PropertPrice, ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsinserts/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsInsertsToExcel(int? RezervationID, int? PropertID, decimal? PropertPrice, string ApartPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsInserts(RezervationID, PropertID, PropertPrice, ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsupdates/csv")]
        [HttpGet("/export/ZarenSoft/reservationdetailsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsUpdatesToCSV(int? ID, int? RezervationID, int? PropertID, decimal? PropertPrice, string ApartPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationDetailsUpdates(ID, RezervationID, PropertID, PropertPrice, ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationdetailsupdates/excel")]
        [HttpGet("/export/ZarenSoft/reservationdetailsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationDetailsUpdatesToExcel(int? ID, int? RezervationID, int? PropertID, decimal? PropertPrice, string ApartPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationDetailsUpdates(ID, RezervationID, PropertID, PropertPrice, ApartPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyapartids/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyapartids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByApartIdsToCSV(int? ApartID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByApartIds(ApartID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyapartids/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyapartids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByApartIdsToExcel(int? ApartID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByApartIds(ApartID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbycustomerids/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbycustomerids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByCustomerIdsToCSV(int? CustomerID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByCustomerIds(CustomerID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbycustomerids/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbycustomerids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByCustomerIdsToExcel(int? CustomerID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByCustomerIds(CustomerID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyfinishdates/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyfinishdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByFinishDatesToCSV(string FinishDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByFinishDates(FinishDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyfinishdates/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyfinishdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByFinishDatesToExcel(string FinishDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByFinishDates(FinishDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbynotes/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbynotes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByNotesToCSV(string Notes, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByNotes(Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbynotes/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbynotes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByNotesToExcel(string Notes, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByNotes(Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbypaymentcompleteds/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbypaymentcompleteds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByPaymentCompletedsToCSV(bool? PaymentCompleted, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByPaymentCompleteds(PaymentCompleted), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbypaymentcompleteds/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbypaymentcompleteds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByPaymentCompletedsToExcel(bool? PaymentCompleted, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByPaymentCompleteds(PaymentCompleted), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbypaymenttypes/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbypaymenttypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByPaymentTypesToCSV(int? PaymentType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByPaymentTypes(PaymentType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbypaymenttypes/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbypaymenttypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByPaymentTypesToExcel(int? PaymentType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByPaymentTypes(PaymentType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyreferencecodes/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyreferencecodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByReferenceCodesToCSV(string ReferenceCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByReferenceCodes(ReferenceCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbyreferencecodes/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbyreferencecodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByReferenceCodesToExcel(string ReferenceCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByReferenceCodes(ReferenceCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbystartdates/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbystartdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByStartDatesToCSV(string StartDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbystartdates/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbystartdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByStartDatesToExcel(string StartDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByStartDates(StartDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbytotalprices/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetbytotalprices/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByTotalPricesToCSV(decimal? TotalPrice, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetByTotalPrices(TotalPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetbytotalprices/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetbytotalprices/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetByTotalPricesToExcel(decimal? TotalPrice, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetByTotalPrices(TotalPrice), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetfinishdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetfinishdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetFinishDateBetweensToCSV(string FinishDateStart, string FinishDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetFinishDateBetweens(FinishDateStart, FinishDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetfinishdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetfinishdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetFinishDateBetweensToExcel(string FinishDateStart, string FinishDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetFinishDateBetweens(FinishDateStart, FinishDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetstartdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/reservationsgetstartdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetStartDateBetweensToCSV(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsgetstartdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/reservationsgetstartdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsGetStartDateBetweensToExcel(string StartDateStart, string StartDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsGetStartDateBetweens(StartDateStart, StartDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsinserts/csv")]
        [HttpGet("/export/ZarenSoft/reservationsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsInsertsToCSV(string ReferenceCode, int? CustomerID, string StartDate, string FinishDate, int? PaymentType, decimal? TotalPrice, int? ApartID, bool? PaymentCompleted, string Notes, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsInserts(ReferenceCode, CustomerID, StartDate, FinishDate, PaymentType, TotalPrice, ApartID, PaymentCompleted, Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsinserts/excel")]
        [HttpGet("/export/ZarenSoft/reservationsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsInsertsToExcel(string ReferenceCode, int? CustomerID, string StartDate, string FinishDate, int? PaymentType, decimal? TotalPrice, int? ApartID, bool? PaymentCompleted, string Notes, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsInserts(ReferenceCode, CustomerID, StartDate, FinishDate, PaymentType, TotalPrice, ApartID, PaymentCompleted, Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsupdates/csv")]
        [HttpGet("/export/ZarenSoft/reservationsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsUpdatesToCSV(int? ID, string ReferenceCode, int? CustomerID, string StartDate, string FinishDate, int? PaymentType, decimal? TotalPrice, int? ApartID, bool? PaymentCompleted, string Notes, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetReservationsUpdates(ID, ReferenceCode, CustomerID, StartDate, FinishDate, PaymentType, TotalPrice, ApartID, PaymentCompleted, Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/reservationsupdates/excel")]
        [HttpGet("/export/ZarenSoft/reservationsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportReservationsUpdatesToExcel(int? ID, string ReferenceCode, int? CustomerID, string StartDate, string FinishDate, int? PaymentType, decimal? TotalPrice, int? ApartID, bool? PaymentCompleted, string Notes, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetReservationsUpdates(ID, ReferenceCode, CustomerID, StartDate, FinishDate, PaymentType, TotalPrice, ApartID, PaymentCompleted, Notes), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyadults/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbyadults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByAdultsToCSV(int? Adults, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyadults/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbyadults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByAdultsToExcel(int? Adults, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByAdults(Adults), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbychildren/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbychildren/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByChildrenToCSV(int? Children, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbychildren/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbychildren/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByChildrenToExcel(int? Children, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByChildren(Children), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbydescriptions/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbydescriptions/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByDescriptionsToCSV(string Description, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbydescriptions/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbydescriptions/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByDescriptionsToExcel(string Description, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByDescriptions(Description), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyinfants/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbyinfants/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByInfantsToCSV(int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbyinfants/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbyinfants/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByInfantsToExcel(int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByInfants(Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/roomsgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/roomsgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsinserts/csv")]
        [HttpGet("/export/ZarenSoft/roomsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsInsertsToCSV(string Name, string Description, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsInserts(Name, Description, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsinserts/excel")]
        [HttpGet("/export/ZarenSoft/roomsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsInsertsToExcel(string Name, string Description, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsInserts(Name, Description, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsupdates/csv")]
        [HttpGet("/export/ZarenSoft/roomsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsUpdatesToCSV(int? Id, string Name, string Description, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetRoomsUpdates(Id, Name, Description, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/roomsupdates/excel")]
        [HttpGet("/export/ZarenSoft/roomsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportRoomsUpdatesToExcel(int? Id, string Name, string Description, int? Adults, int? Children, int? Infants, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetRoomsUpdates(Id, Name, Description, Adults, Children, Infants), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetalls/csv")]
        [HttpGet("/export/ZarenSoft/statusgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatusGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetalls/excel")]
        [HttpGet("/export/ZarenSoft/statusgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatusGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/statusgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatusGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/statusgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatusGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/statusgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatusGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/statusgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatusGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusinserts/csv")]
        [HttpGet("/export/ZarenSoft/statusinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatusInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusinserts/excel")]
        [HttpGet("/export/ZarenSoft/statusinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatusInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusupdates/csv")]
        [HttpGet("/export/ZarenSoft/statusupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusUpdatesToCSV(int? ID, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetStatusUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/statusupdates/excel")]
        [HttpGet("/export/ZarenSoft/statusupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportStatusUpdatesToExcel(int? ID, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetStatusUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetalls/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetalls/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyairportids/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyairportids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByAirportIdsToCSV(int? AirportId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByAirportIds(AirportId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyairportids/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyairportids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByAirportIdsToExcel(int? AirportId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByAirportIds(AirportId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalactives/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalactives/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalActivesToCSV(bool? TerminalActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByTerminalActives(TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalactives/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalactives/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalActivesToExcel(bool? TerminalActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByTerminalActives(TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalcodes/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalcodes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalCodesToCSV(string TerminalCode, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByTerminalCodes(TerminalCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalcodes/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalcodes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalCodesToExcel(string TerminalCode, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByTerminalCodes(TerminalCode), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalnames/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalNamesToCSV(string TerminalName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByTerminalNames(TerminalName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminalnames/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminalnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalNamesToExcel(string TerminalName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByTerminalNames(TerminalName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminaltimestamps/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminaltimestamps/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalTimestampsToCSV(string TerminalTimestamp, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetByTerminalTimestamps(TerminalTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetbyterminaltimestamps/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetbyterminaltimestamps/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetByTerminalTimestampsToExcel(string TerminalTimestamp, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetByTerminalTimestamps(TerminalTimestamp), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetterminaltimestampbetweens/csv")]
        [HttpGet("/export/ZarenSoft/terminalgetterminaltimestampbetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetTerminalTimestampBetweensToCSV(string TerminalTimestampStart, string TerminalTimestampEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalGetTerminalTimestampBetweens(TerminalTimestampStart, TerminalTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalgetterminaltimestampbetweens/excel")]
        [HttpGet("/export/ZarenSoft/terminalgetterminaltimestampbetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalGetTerminalTimestampBetweensToExcel(string TerminalTimestampStart, string TerminalTimestampEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalGetTerminalTimestampBetweens(TerminalTimestampStart, TerminalTimestampEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalinserts/csv")]
        [HttpGet("/export/ZarenSoft/terminalinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalInsertsToCSV(string TerminalName, string TerminalCode, int? AirportId, string TerminalTimestamp, bool? TerminalActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalInserts(TerminalName, TerminalCode, AirportId, TerminalTimestamp, TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalinserts/excel")]
        [HttpGet("/export/ZarenSoft/terminalinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalInsertsToExcel(string TerminalName, string TerminalCode, int? AirportId, string TerminalTimestamp, bool? TerminalActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalInserts(TerminalName, TerminalCode, AirportId, TerminalTimestamp, TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalupdates/csv")]
        [HttpGet("/export/ZarenSoft/terminalupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalUpdatesToCSV(int? Id, string TerminalName, string TerminalCode, int? AirportId, string TerminalTimestamp, bool? TerminalActive, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetTerminalUpdates(Id, TerminalName, TerminalCode, AirportId, TerminalTimestamp, TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/terminalupdates/excel")]
        [HttpGet("/export/ZarenSoft/terminalupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportTerminalUpdatesToExcel(int? Id, string TerminalName, string TerminalCode, int? AirportId, string TerminalTimestamp, bool? TerminalActive, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetTerminalUpdates(Id, TerminalName, TerminalCode, AirportId, TerminalTimestamp, TerminalActive), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetalls/csv")]
        [HttpGet("/export/ZarenSoft/themestylegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetalls/excel")]
        [HttpGet("/export/ZarenSoft/themestylegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/themestylegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/themestylegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbynames/csv")]
        [HttpGet("/export/ZarenSoft/themestylegetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbynames/excel")]
        [HttpGet("/export/ZarenSoft/themestylegetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbypaths/csv")]
        [HttpGet("/export/ZarenSoft/themestylegetbypaths/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByPathsToCSV(string Path, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbypaths/excel")]
        [HttpGet("/export/ZarenSoft/themestylegetbypaths/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByPathsToExcel(string Path, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleGetByPaths(Path), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbyproperties/csv")]
        [HttpGet("/export/ZarenSoft/themestylegetbyproperties/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByPropertiesToCSV(string Property, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleGetByProperties(Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestylegetbyproperties/excel")]
        [HttpGet("/export/ZarenSoft/themestylegetbyproperties/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleGetByPropertiesToExcel(string Property, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleGetByProperties(Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyleinserts/csv")]
        [HttpGet("/export/ZarenSoft/themestyleinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleInsertsToCSV(string Name, string Path, string Property, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleInserts(Name, Path, Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyleinserts/excel")]
        [HttpGet("/export/ZarenSoft/themestyleinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleInsertsToExcel(string Name, string Path, string Property, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleInserts(Name, Path, Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyleupdates/csv")]
        [HttpGet("/export/ZarenSoft/themestyleupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleUpdatesToCSV(int? ID, string Name, string Path, string Property, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetThemeStyleUpdates(ID, Name, Path, Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/themestyleupdates/excel")]
        [HttpGet("/export/ZarenSoft/themestyleupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportThemeStyleUpdatesToExcel(int? ID, string Name, string Path, string Property, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetThemeStyleUpdates(ID, Name, Path, Property), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetalls/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetalls/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyfriendlyurls/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbyfriendlyurls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByFriendlyUrlsToCSV(string FriendlyUrl, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByFriendlyUrls(FriendlyUrl), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyfriendlyurls/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbyfriendlyurls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByFriendlyUrlsToExcel(string FriendlyUrl, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByFriendlyUrls(FriendlyUrl), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyisdefaults/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbyisdefaults/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByIsDefaultsToCSV(int? IsDefault, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByIsDefaults(IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbyisdefaults/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbyisdefaults/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByIsDefaultsToExcel(int? IsDefault, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByIsDefaults(IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbylanguageids/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbylanguageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByLanguageIdsToCSV(int? LanguageID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbylanguageids/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbylanguageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByLanguageIdsToExcel(int? LanguageID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByLanguageIds(LanguageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypageids/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbypageids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageIdsToCSV(int? PageID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByPageIds(PageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypageids/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbypageids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageIdsToExcel(int? PageID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByPageIds(PageID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypagenames/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbypagenames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageNamesToCSV(string PageName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByPageNames(PageName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypagenames/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbypagenames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageNamesToExcel(string PageName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByPageNames(PageName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypageviews/csv")]
        [HttpGet("/export/ZarenSoft/urlsgetbypageviews/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageViewsToCSV(int? PageView, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsGetByPageViews(PageView), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsgetbypageviews/excel")]
        [HttpGet("/export/ZarenSoft/urlsgetbypageviews/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsGetByPageViewsToExcel(int? PageView, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsGetByPageViews(PageView), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsinserts/csv")]
        [HttpGet("/export/ZarenSoft/urlsinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsInsertsToCSV(string FriendlyUrl, int? PageID, string PageName, int? PageView, int? LanguageID, int? IsDefault, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsInserts(FriendlyUrl, PageID, PageName, PageView, LanguageID, IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsinserts/excel")]
        [HttpGet("/export/ZarenSoft/urlsinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsInsertsToExcel(string FriendlyUrl, int? PageID, string PageName, int? PageView, int? LanguageID, int? IsDefault, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsInserts(FriendlyUrl, PageID, PageName, PageView, LanguageID, IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsupdates/csv")]
        [HttpGet("/export/ZarenSoft/urlsupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsUpdatesToCSV(int? ID, string FriendlyUrl, int? PageID, string PageName, int? PageView, int? LanguageID, int? IsDefault, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUrlsUpdates(ID, FriendlyUrl, PageID, PageName, PageView, LanguageID, IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/urlsupdates/excel")]
        [HttpGet("/export/ZarenSoft/urlsupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUrlsUpdatesToExcel(int? ID, string FriendlyUrl, int? PageID, string PageName, int? PageView, int? LanguageID, int? IsDefault, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUrlsUpdates(ID, FriendlyUrl, PageID, PageName, PageView, LanguageID, IsDefault), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyheadercolors/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyheadercolors/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByHeaderColorsToCSV(int? HeaderColor, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetByHeaderColors(HeaderColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyheadercolors/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyheadercolors/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByHeaderColorsToExcel(int? HeaderColor, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetByHeaderColors(HeaderColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyproducts/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByProductsToCSV(int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyproducts/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByProductsToExcel(int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbysidebarcolors/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbysidebarcolors/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetBySideBarColorsToCSV(int? SideBarColor, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetBySideBarColors(SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbysidebarcolors/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbysidebarcolors/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetBySideBarColorsToExcel(int? SideBarColor, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetBySideBarColors(SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbythemestyles/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbythemestyles/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByThemeStylesToCSV(int? ThemeStyle, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetByThemeStyles(ThemeStyle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbythemestyles/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbythemestyles/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByThemeStylesToExcel(int? ThemeStyle, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetByThemeStyles(ThemeStyle), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyuserids/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyuserids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByUserIdsToCSV(int? UserID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesgetbyuserids/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesgetbyuserids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesGetByUserIdsToExcel(int? UserID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesGetByUserIds(UserID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesinserts/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesInsertsToCSV(int? ThemeStyle, int? UserID, int? Products, int? HeaderColor, int? SideBarColor, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesInserts(ThemeStyle, UserID, Products, HeaderColor, SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesinserts/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesInsertsToExcel(int? ThemeStyle, int? UserID, int? Products, int? HeaderColor, int? SideBarColor, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesInserts(ThemeStyle, UserID, Products, HeaderColor, SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesupdates/csv")]
        [HttpGet("/export/ZarenSoft/userpreferencesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesUpdatesToCSV(int? ID, int? ThemeStyle, int? UserID, int? Products, int? HeaderColor, int? SideBarColor, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserPreferencesUpdates(ID, ThemeStyle, UserID, Products, HeaderColor, SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/userpreferencesupdates/excel")]
        [HttpGet("/export/ZarenSoft/userpreferencesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserPreferencesUpdatesToExcel(int? ID, int? ThemeStyle, int? UserID, int? Products, int? HeaderColor, int? SideBarColor, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserPreferencesUpdates(ID, ThemeStyle, UserID, Products, HeaderColor, SideBarColor), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetalls/csv")]
        [HttpGet("/export/ZarenSoft/usersgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetalls/excel")]
        [HttpGet("/export/ZarenSoft/usersgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbirthdatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbirthdatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetBirthDateBetweensToCSV(string BirthDateStart, string BirthDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetBirthDateBetweens(BirthDateStart, BirthDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbirthdatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbirthdatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetBirthDateBetweensToExcel(string BirthDateStart, string BirthDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetBirthDateBetweens(BirthDateStart, BirthDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbybirthdates/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbybirthdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByBirthDatesToCSV(string BirthDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByBirthDates(BirthDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbybirthdates/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbybirthdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByBirthDatesToExcel(string BirthDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByBirthDates(BirthDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbybirthplaces/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbybirthplaces/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByBirthPlacesToCSV(string BirthPlace, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByBirthPlaces(BirthPlace), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbybirthplaces/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbybirthplaces/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByBirthPlacesToExcel(string BirthPlace, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByBirthPlaces(BirthPlace), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbycreatedates/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbycreatedates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByCreateDatesToCSV(string CreateDate, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbycreatedates/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbycreatedates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByCreateDatesToExcel(string CreateDate, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByCreateDates(CreateDate), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyemails/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyemails/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByEmailsToCSV(string Email, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByEmails(Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyemails/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyemails/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByEmailsToExcel(string Email, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByEmails(Email), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbygenders/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbygenders/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByGendersToCSV(int? Gender, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByGenders(Gender), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbygenders/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbygenders/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByGendersToExcel(int? Gender, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByGenders(Gender), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbygovernmentids/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbygovernmentids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByGovernmentIdsToCSV(string GovernmentID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByGovernmentIds(GovernmentID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbygovernmentids/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbygovernmentids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByGovernmentIdsToExcel(string GovernmentID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByGovernmentIds(GovernmentID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyismasters/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyismasters/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIsMastersToCSV(bool? IsMaster, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByIsMasters(IsMaster), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyismasters/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyismasters/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIsMastersToExcel(bool? IsMaster, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByIsMasters(IsMaster), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyissuperadmins/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyissuperadmins/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIsSuperAdminsToCSV(bool? IsSuperAdmin, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByIsSuperAdmins(IsSuperAdmin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyissuperadmins/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyissuperadmins/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByIsSuperAdminsToExcel(bool? IsSuperAdmin, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByIsSuperAdmins(IsSuperAdmin), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbymaritalstatuses/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbymaritalstatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByMaritalStatusesToCSV(int? MaritalStatus, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByMaritalStatuses(MaritalStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbymaritalstatuses/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbymaritalstatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByMaritalStatusesToExcel(int? MaritalStatus, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByMaritalStatuses(MaritalStatus), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbymothernames/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbymothernames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByMotherNamesToCSV(string MotherName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByMotherNames(MotherName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbymothernames/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbymothernames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByMotherNamesToExcel(string MotherName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByMotherNames(MotherName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbypasswords/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbypasswords/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByPasswordsToCSV(string Password, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByPasswords(Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbypasswords/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbypasswords/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByPasswordsToExcel(string Password, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByPasswords(Password), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyproducts/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyproducts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByProductsToCSV(int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyproducts/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyproducts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByProductsToExcel(int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByProducts(Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbystatuses/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbystatuses/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByStatusesToCSV(int? Status, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByStatuses(Status), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbystatuses/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbystatuses/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByStatusesToExcel(int? Status, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByStatuses(Status), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbysurnames/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbysurnames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetBySurnamesToCSV(string Surname, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetBySurnames(Surname), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbysurnames/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbysurnames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetBySurnamesToExcel(string Surname, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetBySurnames(Surname), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyusernames/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyusernames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByUserNamesToCSV(string UserName, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByUserNames(UserName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyusernames/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyusernames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByUserNamesToExcel(string UserName, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByUserNames(UserName), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyusertypes/csv")]
        [HttpGet("/export/ZarenSoft/usersgetbyusertypes/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByUserTypesToCSV(int? UserType, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetByUserTypes(UserType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetbyusertypes/excel")]
        [HttpGet("/export/ZarenSoft/usersgetbyusertypes/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetByUserTypesToExcel(int? UserType, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetByUserTypes(UserType), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetcreatedatebetweens/csv")]
        [HttpGet("/export/ZarenSoft/usersgetcreatedatebetweens/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetCreateDateBetweensToCSV(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersgetcreatedatebetweens/excel")]
        [HttpGet("/export/ZarenSoft/usersgetcreatedatebetweens/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersGetCreateDateBetweensToExcel(string CreateDateStart, string CreateDateEnd, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersGetCreateDateBetweens(CreateDateStart, CreateDateEnd), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersinserts/csv")]
        [HttpGet("/export/ZarenSoft/usersinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersInsertsToCSV(string GovernmentID, string Name, string Surname, int? Status, string UserName, string Password, string Email, bool? IsMaster, int? Gender, int? UserType, string CreateDate, string BirthPlace, int? MaritalStatus, string BirthDate, string MotherName, bool? IsSuperAdmin, int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersInserts(GovernmentID, Name, Surname, Status, UserName, Password, Email, IsMaster, Gender, UserType, CreateDate, BirthPlace, MaritalStatus, BirthDate, MotherName, IsSuperAdmin, Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersinserts/excel")]
        [HttpGet("/export/ZarenSoft/usersinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersInsertsToExcel(string GovernmentID, string Name, string Surname, int? Status, string UserName, string Password, string Email, bool? IsMaster, int? Gender, int? UserType, string CreateDate, string BirthPlace, int? MaritalStatus, string BirthDate, string MotherName, bool? IsSuperAdmin, int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersInserts(GovernmentID, Name, Surname, Status, UserName, Password, Email, IsMaster, Gender, UserType, CreateDate, BirthPlace, MaritalStatus, BirthDate, MotherName, IsSuperAdmin, Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersupdates/csv")]
        [HttpGet("/export/ZarenSoft/usersupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersUpdatesToCSV(int? ID, string GovernmentID, string Name, string Surname, int? Status, string UserName, string Password, string Email, bool? IsMaster, int? Gender, int? UserType, string CreateDate, string BirthPlace, int? MaritalStatus, string BirthDate, string MotherName, bool? IsSuperAdmin, int? Products, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUsersUpdates(ID, GovernmentID, Name, Surname, Status, UserName, Password, Email, IsMaster, Gender, UserType, CreateDate, BirthPlace, MaritalStatus, BirthDate, MotherName, IsSuperAdmin, Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usersupdates/excel")]
        [HttpGet("/export/ZarenSoft/usersupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUsersUpdatesToExcel(int? ID, string GovernmentID, string Name, string Surname, int? Status, string UserName, string Password, string Email, bool? IsMaster, int? Gender, int? UserType, string CreateDate, string BirthPlace, int? MaritalStatus, string BirthDate, string MotherName, bool? IsSuperAdmin, int? Products, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUsersUpdates(ID, GovernmentID, Name, Surname, Status, UserName, Password, Email, IsMaster, Gender, UserType, CreateDate, BirthPlace, MaritalStatus, BirthDate, MotherName, IsSuperAdmin, Products), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetalls/csv")]
        [HttpGet("/export/ZarenSoft/usertypegetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetalls/excel")]
        [HttpGet("/export/ZarenSoft/usertypegetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypeGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetbyids/csv")]
        [HttpGet("/export/ZarenSoft/usertypegetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypeGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetbyids/excel")]
        [HttpGet("/export/ZarenSoft/usertypegetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypeGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetbynames/csv")]
        [HttpGet("/export/ZarenSoft/usertypegetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypeGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypegetbynames/excel")]
        [HttpGet("/export/ZarenSoft/usertypegetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypeGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypeinserts/csv")]
        [HttpGet("/export/ZarenSoft/usertypeinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypeInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypeinserts/excel")]
        [HttpGet("/export/ZarenSoft/usertypeinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypeInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypeupdates/csv")]
        [HttpGet("/export/ZarenSoft/usertypeupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeUpdatesToCSV(int? ID, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetUserTypeUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/usertypeupdates/excel")]
        [HttpGet("/export/ZarenSoft/usertypeupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportUserTypeUpdatesToExcel(int? ID, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetUserTypeUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetalls/csv")]
        [HttpGet("/export/ZarenSoft/yesnogetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNoGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetalls/excel")]
        [HttpGet("/export/ZarenSoft/yesnogetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNoGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetbyids/csv")]
        [HttpGet("/export/ZarenSoft/yesnogetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetByIdsToCSV(int? ID, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNoGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetbyids/excel")]
        [HttpGet("/export/ZarenSoft/yesnogetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetByIdsToExcel(int? ID, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNoGetByIds(ID), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetbynames/csv")]
        [HttpGet("/export/ZarenSoft/yesnogetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNoGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnogetbynames/excel")]
        [HttpGet("/export/ZarenSoft/yesnogetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNoGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnoinserts/csv")]
        [HttpGet("/export/ZarenSoft/yesnoinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoInsertsToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNoInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnoinserts/excel")]
        [HttpGet("/export/ZarenSoft/yesnoinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoInsertsToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNoInserts(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnoupdates/csv")]
        [HttpGet("/export/ZarenSoft/yesnoupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoUpdatesToCSV(int? ID, string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetYesNoUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/yesnoupdates/excel")]
        [HttpGet("/export/ZarenSoft/yesnoupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportYesNoUpdatesToExcel(int? ID, string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetYesNoUpdates(ID, Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbycityids/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbycityids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByCityIdsToCSV(int? CityId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbycityids/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbycityids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByCityIdsToExcel(int? CityId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesGetByCityIds(CityId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbymainzones/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbymainzones/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByMainZonesToCSV(string MainZone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesGetByMainZones(MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbymainzones/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbymainzones/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByMainZonesToExcel(string MainZone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesGetByMainZones(MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbyzoneids/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbyzoneids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByZoneIdsToCSV(int? ZoneId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesGetByZoneIds(ZoneId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesgetbyzoneids/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesgetbyzoneids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesGetByZoneIdsToExcel(int? ZoneId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesGetByZoneIds(ZoneId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesinserts/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesInsertsToCSV(int? CityId, int? ZoneId, string MainZone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesInserts(CityId, ZoneId, MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesinserts/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesInsertsToExcel(int? CityId, int? ZoneId, string MainZone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesInserts(CityId, ZoneId, MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesupdates/csv")]
        [HttpGet("/export/ZarenSoft/zonescitiesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesUpdatesToCSV(int? Id, int? CityId, int? ZoneId, string MainZone, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesCitiesUpdates(Id, CityId, ZoneId, MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonescitiesupdates/excel")]
        [HttpGet("/export/ZarenSoft/zonescitiesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesCitiesUpdatesToExcel(int? Id, int? CityId, int? ZoneId, string MainZone, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesCitiesUpdates(Id, CityId, ZoneId, MainZone), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetalls/csv")]
        [HttpGet("/export/ZarenSoft/zonesgetalls/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetAllsToCSV(string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetalls/excel")]
        [HttpGet("/export/ZarenSoft/zonesgetalls/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetAllsToExcel(string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesGetAlls(), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbyids/csv")]
        [HttpGet("/export/ZarenSoft/zonesgetbyids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByIdsToCSV(int? Id, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbyids/excel")]
        [HttpGet("/export/ZarenSoft/zonesgetbyids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByIdsToExcel(int? Id, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesGetByIds(Id), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbylatlongbounds/csv")]
        [HttpGet("/export/ZarenSoft/zonesgetbylatlongbounds/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByLatLongBoundsToCSV(string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesGetByLatLongBounds(LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbylatlongbounds/excel")]
        [HttpGet("/export/ZarenSoft/zonesgetbylatlongbounds/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByLatLongBoundsToExcel(string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesGetByLatLongBounds(LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbynames/csv")]
        [HttpGet("/export/ZarenSoft/zonesgetbynames/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByNamesToCSV(string Name, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbynames/excel")]
        [HttpGet("/export/ZarenSoft/zonesgetbynames/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByNamesToExcel(string Name, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesGetByNames(Name), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbyregionids/csv")]
        [HttpGet("/export/ZarenSoft/zonesgetbyregionids/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByRegionIdsToCSV(int? RegionId, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesGetByRegionIds(RegionId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesgetbyregionids/excel")]
        [HttpGet("/export/ZarenSoft/zonesgetbyregionids/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesGetByRegionIdsToExcel(int? RegionId, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesGetByRegionIds(RegionId), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesinserts/csv")]
        [HttpGet("/export/ZarenSoft/zonesinserts/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesInsertsToCSV(int? RegionId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesInserts(RegionId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesinserts/excel")]
        [HttpGet("/export/ZarenSoft/zonesinserts/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesInsertsToExcel(int? RegionId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesInserts(RegionId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesupdates/csv")]
        [HttpGet("/export/ZarenSoft/zonesupdates/csv(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesUpdatesToCSV(int? Id, int? RegionId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToCSV(ApplyQuery(await service.GetZonesUpdates(Id, RegionId, Name, LatLongBounds), Request.Query), fileName);
        }

        [HttpGet("/export/ZarenSoft/zonesupdates/excel")]
        [HttpGet("/export/ZarenSoft/zonesupdates/excel(fileName='{fileName}')")]
        public async Task<FileStreamResult> ExportZonesUpdatesToExcel(int? Id, int? RegionId, string Name, string LatLongBounds, string fileName = null)
        {
            return ToExcel(ApplyQuery(await service.GetZonesUpdates(Id, RegionId, Name, LatLongBounds), Request.Query), fileName);
        }
    }
}
